(function webpackUniversalModuleDefinition(root, factory) {
  if (typeof exports === "object" && typeof module === "object")
    module.exports = factory();
  else if (typeof define === "function" && define.amd) define([], factory);
  else if (typeof exports === "object") exports["DoveJWT"] = factory();
  else root["DoveJWT"] = factory();
})(this, function() {
  return /******/ (function(modules) {
    // webpackBootstrap
    /******/ // The module cache
    /******/ var installedModules = {}; // The require function
    /******/
    /******/ /******/ function __webpack_require__(moduleId) {
      /******/
      /******/ // Check if module is in cache
      /******/ if (installedModules[moduleId]) {
        /******/ return installedModules[moduleId].exports;
        /******/
      } // Create a new module (and put it into the cache)
      /******/ /******/ var module = (installedModules[moduleId] = {
        /******/ i: moduleId,
        /******/ l: false,
        /******/ exports: {}
        /******/
      }); // Execute the module function
      /******/
      /******/ /******/ modules[moduleId].call(
        module.exports,
        module,
        module.exports,
        __webpack_require__
      ); // Flag the module as loaded
      /******/
      /******/ /******/ module.l = true; // Return the exports of the module
      /******/
      /******/ /******/ return module.exports;
      /******/
    } // expose the modules object (__webpack_modules__)
    /******/
    /******/
    /******/ /******/ __webpack_require__.m = modules; // expose the module cache
    /******/
    /******/ /******/ __webpack_require__.c = installedModules; // define getter function for harmony exports
    /******/
    /******/ /******/ __webpack_require__.d = function(exports, name, getter) {
      /******/ if (!__webpack_require__.o(exports, name)) {
        /******/ Object.defineProperty(exports, name, {
          /******/ configurable: false,
          /******/ enumerable: true,
          /******/ get: getter
          /******/
        });
        /******/
      }
      /******/
    }; // getDefaultExport function for compatibility with non-harmony modules
    /******/
    /******/ /******/ __webpack_require__.n = function(module) {
      /******/ var getter =
        module && module.__esModule
          ? /******/ function getDefault() {
              return module["default"];
            }
          : /******/ function getModuleExports() {
              return module;
            };
      /******/ __webpack_require__.d(getter, "a", getter);
      /******/ return getter;
      /******/
    }; // Object.prototype.hasOwnProperty.call
    /******/
    /******/ /******/ __webpack_require__.o = function(object, property) {
      return Object.prototype.hasOwnProperty.call(object, property);
    }; // __webpack_public_path__
    /******/
    /******/ /******/ __webpack_require__.p = ""; // Load entry module and return exports
    /******/
    /******/ /******/ return __webpack_require__((__webpack_require__.s = 123));
    /******/
  })(
    /************************************************************************/
    /******/ [
      /* 0 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";
        /* WEBPACK VAR INJECTION */ (function(global) {
          /*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
          /* eslint-disable no-proto */

          var base64 = __webpack_require__(127);
          var ieee754 = __webpack_require__(128);
          var isArray = __webpack_require__(68);

          exports.Buffer = Buffer;
          exports.SlowBuffer = SlowBuffer;
          exports.INSPECT_MAX_BYTES = 50;

          /**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
          Buffer.TYPED_ARRAY_SUPPORT =
            global.TYPED_ARRAY_SUPPORT !== undefined
              ? global.TYPED_ARRAY_SUPPORT
              : typedArraySupport();

          /*
 * Export kMaxLength after typed array support is determined.
 */
          exports.kMaxLength = kMaxLength();

          function typedArraySupport() {
            try {
              var arr = new Uint8Array(1);
              arr.__proto__ = {
                __proto__: Uint8Array.prototype,
                foo: function() {
                  return 42;
                }
              };
              return (
                arr.foo() === 42 && // typed array instances can be augmented
                typeof arr.subarray === "function" && // chrome 9-10 lack `subarray`
                arr.subarray(1, 1).byteLength === 0
              ); // ie10 has broken `subarray`
            } catch (e) {
              return false;
            }
          }

          function kMaxLength() {
            return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
          }

          function createBuffer(that, length) {
            if (kMaxLength() < length) {
              throw new RangeError("Invalid typed array length");
            }
            if (Buffer.TYPED_ARRAY_SUPPORT) {
              // Return an augmented `Uint8Array` instance, for best performance
              that = new Uint8Array(length);
              that.__proto__ = Buffer.prototype;
            } else {
              // Fallback: Return an object instance of the Buffer class
              if (that === null) {
                that = new Buffer(length);
              }
              that.length = length;
            }

            return that;
          }

          /**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

          function Buffer(arg, encodingOrOffset, length) {
            if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
              return new Buffer(arg, encodingOrOffset, length);
            }

            // Common case.
            if (typeof arg === "number") {
              if (typeof encodingOrOffset === "string") {
                throw new Error(
                  "If encoding is specified then the first argument must be a string"
                );
              }
              return allocUnsafe(this, arg);
            }
            return from(this, arg, encodingOrOffset, length);
          }

          Buffer.poolSize = 8192; // not used by this implementation

          // TODO: Legacy, not needed anymore. Remove in next major version.
          Buffer._augment = function(arr) {
            arr.__proto__ = Buffer.prototype;
            return arr;
          };

          function from(that, value, encodingOrOffset, length) {
            if (typeof value === "number") {
              throw new TypeError('"value" argument must not be a number');
            }

            if (
              typeof ArrayBuffer !== "undefined" &&
              value instanceof ArrayBuffer
            ) {
              return fromArrayBuffer(that, value, encodingOrOffset, length);
            }

            if (typeof value === "string") {
              return fromString(that, value, encodingOrOffset);
            }

            return fromObject(that, value);
          }

          /**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
          Buffer.from = function(value, encodingOrOffset, length) {
            return from(null, value, encodingOrOffset, length);
          };

          if (Buffer.TYPED_ARRAY_SUPPORT) {
            Buffer.prototype.__proto__ = Uint8Array.prototype;
            Buffer.__proto__ = Uint8Array;
            if (
              typeof Symbol !== "undefined" &&
              Symbol.species &&
              Buffer[Symbol.species] === Buffer
            ) {
              // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
              Object.defineProperty(Buffer, Symbol.species, {
                value: null,
                configurable: true
              });
            }
          }

          function assertSize(size) {
            if (typeof size !== "number") {
              throw new TypeError('"size" argument must be a number');
            } else if (size < 0) {
              throw new RangeError('"size" argument must not be negative');
            }
          }

          function alloc(that, size, fill, encoding) {
            assertSize(size);
            if (size <= 0) {
              return createBuffer(that, size);
            }
            if (fill !== undefined) {
              // Only pay attention to encoding if it's a string. This
              // prevents accidentally sending in a number that would
              // be interpretted as a start offset.
              return typeof encoding === "string"
                ? createBuffer(that, size).fill(fill, encoding)
                : createBuffer(that, size).fill(fill);
            }
            return createBuffer(that, size);
          }

          /**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
          Buffer.alloc = function(size, fill, encoding) {
            return alloc(null, size, fill, encoding);
          };

          function allocUnsafe(that, size) {
            assertSize(size);
            that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
            if (!Buffer.TYPED_ARRAY_SUPPORT) {
              for (var i = 0; i < size; ++i) {
                that[i] = 0;
              }
            }
            return that;
          }

          /**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
          Buffer.allocUnsafe = function(size) {
            return allocUnsafe(null, size);
          };
          /**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
          Buffer.allocUnsafeSlow = function(size) {
            return allocUnsafe(null, size);
          };

          function fromString(that, string, encoding) {
            if (typeof encoding !== "string" || encoding === "") {
              encoding = "utf8";
            }

            if (!Buffer.isEncoding(encoding)) {
              throw new TypeError('"encoding" must be a valid string encoding');
            }

            var length = byteLength(string, encoding) | 0;
            that = createBuffer(that, length);

            var actual = that.write(string, encoding);

            if (actual !== length) {
              // Writing a hex string, for example, that contains invalid characters will
              // cause everything after the first invalid character to be ignored. (e.g.
              // 'abxxcd' will be treated as 'ab')
              that = that.slice(0, actual);
            }

            return that;
          }

          function fromArrayLike(that, array) {
            var length = array.length < 0 ? 0 : checked(array.length) | 0;
            that = createBuffer(that, length);
            for (var i = 0; i < length; i += 1) {
              that[i] = array[i] & 255;
            }
            return that;
          }

          function fromArrayBuffer(that, array, byteOffset, length) {
            array.byteLength; // this throws if `array` is not a valid ArrayBuffer

            if (byteOffset < 0 || array.byteLength < byteOffset) {
              throw new RangeError("'offset' is out of bounds");
            }

            if (array.byteLength < byteOffset + (length || 0)) {
              throw new RangeError("'length' is out of bounds");
            }

            if (byteOffset === undefined && length === undefined) {
              array = new Uint8Array(array);
            } else if (length === undefined) {
              array = new Uint8Array(array, byteOffset);
            } else {
              array = new Uint8Array(array, byteOffset, length);
            }

            if (Buffer.TYPED_ARRAY_SUPPORT) {
              // Return an augmented `Uint8Array` instance, for best performance
              that = array;
              that.__proto__ = Buffer.prototype;
            } else {
              // Fallback: Return an object instance of the Buffer class
              that = fromArrayLike(that, array);
            }
            return that;
          }

          function fromObject(that, obj) {
            if (Buffer.isBuffer(obj)) {
              var len = checked(obj.length) | 0;
              that = createBuffer(that, len);

              if (that.length === 0) {
                return that;
              }

              obj.copy(that, 0, 0, len);
              return that;
            }

            if (obj) {
              if (
                (typeof ArrayBuffer !== "undefined" &&
                  obj.buffer instanceof ArrayBuffer) ||
                "length" in obj
              ) {
                if (typeof obj.length !== "number" || isnan(obj.length)) {
                  return createBuffer(that, 0);
                }
                return fromArrayLike(that, obj);
              }

              if (obj.type === "Buffer" && isArray(obj.data)) {
                return fromArrayLike(that, obj.data);
              }
            }

            throw new TypeError(
              "First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object."
            );
          }

          function checked(length) {
            // Note: cannot use `length < kMaxLength()` here because that fails when
            // length is NaN (which is otherwise coerced to zero.)
            if (length >= kMaxLength()) {
              throw new RangeError(
                "Attempt to allocate Buffer larger than maximum " +
                  "size: 0x" +
                  kMaxLength().toString(16) +
                  " bytes"
              );
            }
            return length | 0;
          }

          function SlowBuffer(length) {
            if (+length != length) {
              // eslint-disable-line eqeqeq
              length = 0;
            }
            return Buffer.alloc(+length);
          }

          Buffer.isBuffer = function isBuffer(b) {
            return !!(b != null && b._isBuffer);
          };

          Buffer.compare = function compare(a, b) {
            if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
              throw new TypeError("Arguments must be Buffers");
            }

            if (a === b) return 0;

            var x = a.length;
            var y = b.length;

            for (var i = 0, len = Math.min(x, y); i < len; ++i) {
              if (a[i] !== b[i]) {
                x = a[i];
                y = b[i];
                break;
              }
            }

            if (x < y) return -1;
            if (y < x) return 1;
            return 0;
          };

          Buffer.isEncoding = function isEncoding(encoding) {
            switch (String(encoding).toLowerCase()) {
              case "hex":
              case "utf8":
              case "utf-8":
              case "ascii":
              case "latin1":
              case "binary":
              case "base64":
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return true;
              default:
                return false;
            }
          };

          Buffer.concat = function concat(list, length) {
            if (!isArray(list)) {
              throw new TypeError(
                '"list" argument must be an Array of Buffers'
              );
            }

            if (list.length === 0) {
              return Buffer.alloc(0);
            }

            var i;
            if (length === undefined) {
              length = 0;
              for (i = 0; i < list.length; ++i) {
                length += list[i].length;
              }
            }

            var buffer = Buffer.allocUnsafe(length);
            var pos = 0;
            for (i = 0; i < list.length; ++i) {
              var buf = list[i];
              if (!Buffer.isBuffer(buf)) {
                throw new TypeError(
                  '"list" argument must be an Array of Buffers'
                );
              }
              buf.copy(buffer, pos);
              pos += buf.length;
            }
            return buffer;
          };

          function byteLength(string, encoding) {
            if (Buffer.isBuffer(string)) {
              return string.length;
            }
            if (
              typeof ArrayBuffer !== "undefined" &&
              typeof ArrayBuffer.isView === "function" &&
              (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)
            ) {
              return string.byteLength;
            }
            if (typeof string !== "string") {
              string = "" + string;
            }

            var len = string.length;
            if (len === 0) return 0;

            // Use a for loop to avoid recursion
            var loweredCase = false;
            for (;;) {
              switch (encoding) {
                case "ascii":
                case "latin1":
                case "binary":
                  return len;
                case "utf8":
                case "utf-8":
                case undefined:
                  return utf8ToBytes(string).length;
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                  return len * 2;
                case "hex":
                  return len >>> 1;
                case "base64":
                  return base64ToBytes(string).length;
                default:
                  if (loweredCase) return utf8ToBytes(string).length; // assume utf8
                  encoding = ("" + encoding).toLowerCase();
                  loweredCase = true;
              }
            }
          }
          Buffer.byteLength = byteLength;

          function slowToString(encoding, start, end) {
            var loweredCase = false;

            // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
            // property of a typed array.

            // This behaves neither like String nor Uint8Array in that we set start/end
            // to their upper/lower bounds if the value passed is out of range.
            // undefined is handled specially as per ECMA-262 6th Edition,
            // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
            if (start === undefined || start < 0) {
              start = 0;
            }
            // Return early if start > this.length. Done here to prevent potential uint32
            // coercion fail below.
            if (start > this.length) {
              return "";
            }

            if (end === undefined || end > this.length) {
              end = this.length;
            }

            if (end <= 0) {
              return "";
            }

            // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
            end >>>= 0;
            start >>>= 0;

            if (end <= start) {
              return "";
            }

            if (!encoding) encoding = "utf8";

            while (true) {
              switch (encoding) {
                case "hex":
                  return hexSlice(this, start, end);

                case "utf8":
                case "utf-8":
                  return utf8Slice(this, start, end);

                case "ascii":
                  return asciiSlice(this, start, end);

                case "latin1":
                case "binary":
                  return latin1Slice(this, start, end);

                case "base64":
                  return base64Slice(this, start, end);

                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                  return utf16leSlice(this, start, end);

                default:
                  if (loweredCase)
                    throw new TypeError("Unknown encoding: " + encoding);
                  encoding = (encoding + "").toLowerCase();
                  loweredCase = true;
              }
            }
          }

          // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
          // Buffer instances.
          Buffer.prototype._isBuffer = true;

          function swap(b, n, m) {
            var i = b[n];
            b[n] = b[m];
            b[m] = i;
          }

          Buffer.prototype.swap16 = function swap16() {
            var len = this.length;
            if (len % 2 !== 0) {
              throw new RangeError("Buffer size must be a multiple of 16-bits");
            }
            for (var i = 0; i < len; i += 2) {
              swap(this, i, i + 1);
            }
            return this;
          };

          Buffer.prototype.swap32 = function swap32() {
            var len = this.length;
            if (len % 4 !== 0) {
              throw new RangeError("Buffer size must be a multiple of 32-bits");
            }
            for (var i = 0; i < len; i += 4) {
              swap(this, i, i + 3);
              swap(this, i + 1, i + 2);
            }
            return this;
          };

          Buffer.prototype.swap64 = function swap64() {
            var len = this.length;
            if (len % 8 !== 0) {
              throw new RangeError("Buffer size must be a multiple of 64-bits");
            }
            for (var i = 0; i < len; i += 8) {
              swap(this, i, i + 7);
              swap(this, i + 1, i + 6);
              swap(this, i + 2, i + 5);
              swap(this, i + 3, i + 4);
            }
            return this;
          };

          Buffer.prototype.toString = function toString() {
            var length = this.length | 0;
            if (length === 0) return "";
            if (arguments.length === 0) return utf8Slice(this, 0, length);
            return slowToString.apply(this, arguments);
          };

          Buffer.prototype.equals = function equals(b) {
            if (!Buffer.isBuffer(b))
              throw new TypeError("Argument must be a Buffer");
            if (this === b) return true;
            return Buffer.compare(this, b) === 0;
          };

          Buffer.prototype.inspect = function inspect() {
            var str = "";
            var max = exports.INSPECT_MAX_BYTES;
            if (this.length > 0) {
              str = this.toString("hex", 0, max).match(/.{2}/g).join(" ");
              if (this.length > max) str += " ... ";
            }
            return "<Buffer " + str + ">";
          };

          Buffer.prototype.compare = function compare(
            target,
            start,
            end,
            thisStart,
            thisEnd
          ) {
            if (!Buffer.isBuffer(target)) {
              throw new TypeError("Argument must be a Buffer");
            }

            if (start === undefined) {
              start = 0;
            }
            if (end === undefined) {
              end = target ? target.length : 0;
            }
            if (thisStart === undefined) {
              thisStart = 0;
            }
            if (thisEnd === undefined) {
              thisEnd = this.length;
            }

            if (
              start < 0 ||
              end > target.length ||
              thisStart < 0 ||
              thisEnd > this.length
            ) {
              throw new RangeError("out of range index");
            }

            if (thisStart >= thisEnd && start >= end) {
              return 0;
            }
            if (thisStart >= thisEnd) {
              return -1;
            }
            if (start >= end) {
              return 1;
            }

            start >>>= 0;
            end >>>= 0;
            thisStart >>>= 0;
            thisEnd >>>= 0;

            if (this === target) return 0;

            var x = thisEnd - thisStart;
            var y = end - start;
            var len = Math.min(x, y);

            var thisCopy = this.slice(thisStart, thisEnd);
            var targetCopy = target.slice(start, end);

            for (var i = 0; i < len; ++i) {
              if (thisCopy[i] !== targetCopy[i]) {
                x = thisCopy[i];
                y = targetCopy[i];
                break;
              }
            }

            if (x < y) return -1;
            if (y < x) return 1;
            return 0;
          };

          // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
          // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
          //
          // Arguments:
          // - buffer - a Buffer to search
          // - val - a string, Buffer, or number
          // - byteOffset - an index into `buffer`; will be clamped to an int32
          // - encoding - an optional encoding, relevant is val is a string
          // - dir - true for indexOf, false for lastIndexOf
          function bidirectionalIndexOf(
            buffer,
            val,
            byteOffset,
            encoding,
            dir
          ) {
            // Empty buffer means no match
            if (buffer.length === 0) return -1;

            // Normalize byteOffset
            if (typeof byteOffset === "string") {
              encoding = byteOffset;
              byteOffset = 0;
            } else if (byteOffset > 0x7fffffff) {
              byteOffset = 0x7fffffff;
            } else if (byteOffset < -0x80000000) {
              byteOffset = -0x80000000;
            }
            byteOffset = +byteOffset; // Coerce to Number.
            if (isNaN(byteOffset)) {
              // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
              byteOffset = dir ? 0 : buffer.length - 1;
            }

            // Normalize byteOffset: negative offsets start from the end of the buffer
            if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
            if (byteOffset >= buffer.length) {
              if (dir) return -1;
              else byteOffset = buffer.length - 1;
            } else if (byteOffset < 0) {
              if (dir) byteOffset = 0;
              else return -1;
            }

            // Normalize val
            if (typeof val === "string") {
              val = Buffer.from(val, encoding);
            }

            // Finally, search either indexOf (if dir is true) or lastIndexOf
            if (Buffer.isBuffer(val)) {
              // Special case: looking for empty string/buffer always fails
              if (val.length === 0) {
                return -1;
              }
              return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
            } else if (typeof val === "number") {
              val = val & 0xff; // Search for a byte value [0-255]
              if (
                Buffer.TYPED_ARRAY_SUPPORT &&
                typeof Uint8Array.prototype.indexOf === "function"
              ) {
                if (dir) {
                  return Uint8Array.prototype.indexOf.call(
                    buffer,
                    val,
                    byteOffset
                  );
                } else {
                  return Uint8Array.prototype.lastIndexOf.call(
                    buffer,
                    val,
                    byteOffset
                  );
                }
              }
              return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
            }

            throw new TypeError("val must be string, number or Buffer");
          }

          function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
            var indexSize = 1;
            var arrLength = arr.length;
            var valLength = val.length;

            if (encoding !== undefined) {
              encoding = String(encoding).toLowerCase();
              if (
                encoding === "ucs2" ||
                encoding === "ucs-2" ||
                encoding === "utf16le" ||
                encoding === "utf-16le"
              ) {
                if (arr.length < 2 || val.length < 2) {
                  return -1;
                }
                indexSize = 2;
                arrLength /= 2;
                valLength /= 2;
                byteOffset /= 2;
              }
            }

            function read(buf, i) {
              if (indexSize === 1) {
                return buf[i];
              } else {
                return buf.readUInt16BE(i * indexSize);
              }
            }

            var i;
            if (dir) {
              var foundIndex = -1;
              for (i = byteOffset; i < arrLength; i++) {
                if (
                  read(arr, i) ===
                  read(val, foundIndex === -1 ? 0 : i - foundIndex)
                ) {
                  if (foundIndex === -1) foundIndex = i;
                  if (i - foundIndex + 1 === valLength)
                    return foundIndex * indexSize;
                } else {
                  if (foundIndex !== -1) i -= i - foundIndex;
                  foundIndex = -1;
                }
              }
            } else {
              if (byteOffset + valLength > arrLength)
                byteOffset = arrLength - valLength;
              for (i = byteOffset; i >= 0; i--) {
                var found = true;
                for (var j = 0; j < valLength; j++) {
                  if (read(arr, i + j) !== read(val, j)) {
                    found = false;
                    break;
                  }
                }
                if (found) return i;
              }
            }

            return -1;
          }

          Buffer.prototype.includes = function includes(
            val,
            byteOffset,
            encoding
          ) {
            return this.indexOf(val, byteOffset, encoding) !== -1;
          };

          Buffer.prototype.indexOf = function indexOf(
            val,
            byteOffset,
            encoding
          ) {
            return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
          };

          Buffer.prototype.lastIndexOf = function lastIndexOf(
            val,
            byteOffset,
            encoding
          ) {
            return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
          };

          function hexWrite(buf, string, offset, length) {
            offset = Number(offset) || 0;
            var remaining = buf.length - offset;
            if (!length) {
              length = remaining;
            } else {
              length = Number(length);
              if (length > remaining) {
                length = remaining;
              }
            }

            // must be an even number of digits
            var strLen = string.length;
            if (strLen % 2 !== 0) throw new TypeError("Invalid hex string");

            if (length > strLen / 2) {
              length = strLen / 2;
            }
            for (var i = 0; i < length; ++i) {
              var parsed = parseInt(string.substr(i * 2, 2), 16);
              if (isNaN(parsed)) return i;
              buf[offset + i] = parsed;
            }
            return i;
          }

          function utf8Write(buf, string, offset, length) {
            return blitBuffer(
              utf8ToBytes(string, buf.length - offset),
              buf,
              offset,
              length
            );
          }

          function asciiWrite(buf, string, offset, length) {
            return blitBuffer(asciiToBytes(string), buf, offset, length);
          }

          function latin1Write(buf, string, offset, length) {
            return asciiWrite(buf, string, offset, length);
          }

          function base64Write(buf, string, offset, length) {
            return blitBuffer(base64ToBytes(string), buf, offset, length);
          }

          function ucs2Write(buf, string, offset, length) {
            return blitBuffer(
              utf16leToBytes(string, buf.length - offset),
              buf,
              offset,
              length
            );
          }

          Buffer.prototype.write = function write(
            string,
            offset,
            length,
            encoding
          ) {
            // Buffer#write(string)
            if (offset === undefined) {
              encoding = "utf8";
              length = this.length;
              offset = 0;
              // Buffer#write(string, encoding)
            } else if (length === undefined && typeof offset === "string") {
              encoding = offset;
              length = this.length;
              offset = 0;
              // Buffer#write(string, offset[, length][, encoding])
            } else if (isFinite(offset)) {
              offset = offset | 0;
              if (isFinite(length)) {
                length = length | 0;
                if (encoding === undefined) encoding = "utf8";
              } else {
                encoding = length;
                length = undefined;
              }
              // legacy write(string, encoding, offset, length) - remove in v0.13
            } else {
              throw new Error(
                "Buffer.write(string, encoding, offset[, length]) is no longer supported"
              );
            }

            var remaining = this.length - offset;
            if (length === undefined || length > remaining) length = remaining;

            if (
              (string.length > 0 && (length < 0 || offset < 0)) ||
              offset > this.length
            ) {
              throw new RangeError("Attempt to write outside buffer bounds");
            }

            if (!encoding) encoding = "utf8";

            var loweredCase = false;
            for (;;) {
              switch (encoding) {
                case "hex":
                  return hexWrite(this, string, offset, length);

                case "utf8":
                case "utf-8":
                  return utf8Write(this, string, offset, length);

                case "ascii":
                  return asciiWrite(this, string, offset, length);

                case "latin1":
                case "binary":
                  return latin1Write(this, string, offset, length);

                case "base64":
                  // Warning: maxLength not taken into account in base64Write
                  return base64Write(this, string, offset, length);

                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                  return ucs2Write(this, string, offset, length);

                default:
                  if (loweredCase)
                    throw new TypeError("Unknown encoding: " + encoding);
                  encoding = ("" + encoding).toLowerCase();
                  loweredCase = true;
              }
            }
          };

          Buffer.prototype.toJSON = function toJSON() {
            return {
              type: "Buffer",
              data: Array.prototype.slice.call(this._arr || this, 0)
            };
          };

          function base64Slice(buf, start, end) {
            if (start === 0 && end === buf.length) {
              return base64.fromByteArray(buf);
            } else {
              return base64.fromByteArray(buf.slice(start, end));
            }
          }

          function utf8Slice(buf, start, end) {
            end = Math.min(buf.length, end);
            var res = [];

            var i = start;
            while (i < end) {
              var firstByte = buf[i];
              var codePoint = null;
              var bytesPerSequence =
                firstByte > 0xef
                  ? 4
                  : firstByte > 0xdf ? 3 : firstByte > 0xbf ? 2 : 1;

              if (i + bytesPerSequence <= end) {
                var secondByte, thirdByte, fourthByte, tempCodePoint;

                switch (bytesPerSequence) {
                  case 1:
                    if (firstByte < 0x80) {
                      codePoint = firstByte;
                    }
                    break;
                  case 2:
                    secondByte = buf[i + 1];
                    if ((secondByte & 0xc0) === 0x80) {
                      tempCodePoint =
                        ((firstByte & 0x1f) << 0x6) | (secondByte & 0x3f);
                      if (tempCodePoint > 0x7f) {
                        codePoint = tempCodePoint;
                      }
                    }
                    break;
                  case 3:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    if (
                      (secondByte & 0xc0) === 0x80 &&
                      (thirdByte & 0xc0) === 0x80
                    ) {
                      tempCodePoint =
                        ((firstByte & 0xf) << 0xc) |
                        ((secondByte & 0x3f) << 0x6) |
                        (thirdByte & 0x3f);
                      if (
                        tempCodePoint > 0x7ff &&
                        (tempCodePoint < 0xd800 || tempCodePoint > 0xdfff)
                      ) {
                        codePoint = tempCodePoint;
                      }
                    }
                    break;
                  case 4:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    fourthByte = buf[i + 3];
                    if (
                      (secondByte & 0xc0) === 0x80 &&
                      (thirdByte & 0xc0) === 0x80 &&
                      (fourthByte & 0xc0) === 0x80
                    ) {
                      tempCodePoint =
                        ((firstByte & 0xf) << 0x12) |
                        ((secondByte & 0x3f) << 0xc) |
                        ((thirdByte & 0x3f) << 0x6) |
                        (fourthByte & 0x3f);
                      if (tempCodePoint > 0xffff && tempCodePoint < 0x110000) {
                        codePoint = tempCodePoint;
                      }
                    }
                }
              }

              if (codePoint === null) {
                // we did not generate a valid codePoint so insert a
                // replacement char (U+FFFD) and advance only 1 byte
                codePoint = 0xfffd;
                bytesPerSequence = 1;
              } else if (codePoint > 0xffff) {
                // encode to utf16 (surrogate pair dance)
                codePoint -= 0x10000;
                res.push(((codePoint >>> 10) & 0x3ff) | 0xd800);
                codePoint = 0xdc00 | (codePoint & 0x3ff);
              }

              res.push(codePoint);
              i += bytesPerSequence;
            }

            return decodeCodePointsArray(res);
          }

          // Based on http://stackoverflow.com/a/22747272/680742, the browser with
          // the lowest limit is Chrome, with 0x10000 args.
          // We go 1 magnitude less, for safety
          var MAX_ARGUMENTS_LENGTH = 0x1000;

          function decodeCodePointsArray(codePoints) {
            var len = codePoints.length;
            if (len <= MAX_ARGUMENTS_LENGTH) {
              return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
            }

            // Decode in chunks to avoid "call stack size exceeded".
            var res = "";
            var i = 0;
            while (i < len) {
              res += String.fromCharCode.apply(
                String,
                codePoints.slice(i, (i += MAX_ARGUMENTS_LENGTH))
              );
            }
            return res;
          }

          function asciiSlice(buf, start, end) {
            var ret = "";
            end = Math.min(buf.length, end);

            for (var i = start; i < end; ++i) {
              ret += String.fromCharCode(buf[i] & 0x7f);
            }
            return ret;
          }

          function latin1Slice(buf, start, end) {
            var ret = "";
            end = Math.min(buf.length, end);

            for (var i = start; i < end; ++i) {
              ret += String.fromCharCode(buf[i]);
            }
            return ret;
          }

          function hexSlice(buf, start, end) {
            var len = buf.length;

            if (!start || start < 0) start = 0;
            if (!end || end < 0 || end > len) end = len;

            var out = "";
            for (var i = start; i < end; ++i) {
              out += toHex(buf[i]);
            }
            return out;
          }

          function utf16leSlice(buf, start, end) {
            var bytes = buf.slice(start, end);
            var res = "";
            for (var i = 0; i < bytes.length; i += 2) {
              res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
            }
            return res;
          }

          Buffer.prototype.slice = function slice(start, end) {
            var len = this.length;
            start = ~~start;
            end = end === undefined ? len : ~~end;

            if (start < 0) {
              start += len;
              if (start < 0) start = 0;
            } else if (start > len) {
              start = len;
            }

            if (end < 0) {
              end += len;
              if (end < 0) end = 0;
            } else if (end > len) {
              end = len;
            }

            if (end < start) end = start;

            var newBuf;
            if (Buffer.TYPED_ARRAY_SUPPORT) {
              newBuf = this.subarray(start, end);
              newBuf.__proto__ = Buffer.prototype;
            } else {
              var sliceLen = end - start;
              newBuf = new Buffer(sliceLen, undefined);
              for (var i = 0; i < sliceLen; ++i) {
                newBuf[i] = this[i + start];
              }
            }

            return newBuf;
          };

          /*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
          function checkOffset(offset, ext, length) {
            if (offset % 1 !== 0 || offset < 0)
              throw new RangeError("offset is not uint");
            if (offset + ext > length)
              throw new RangeError("Trying to access beyond buffer length");
          }

          Buffer.prototype.readUIntLE = function readUIntLE(
            offset,
            byteLength,
            noAssert
          ) {
            offset = offset | 0;
            byteLength = byteLength | 0;
            if (!noAssert) checkOffset(offset, byteLength, this.length);

            var val = this[offset];
            var mul = 1;
            var i = 0;
            while (++i < byteLength && (mul *= 0x100)) {
              val += this[offset + i] * mul;
            }

            return val;
          };

          Buffer.prototype.readUIntBE = function readUIntBE(
            offset,
            byteLength,
            noAssert
          ) {
            offset = offset | 0;
            byteLength = byteLength | 0;
            if (!noAssert) {
              checkOffset(offset, byteLength, this.length);
            }

            var val = this[offset + --byteLength];
            var mul = 1;
            while (byteLength > 0 && (mul *= 0x100)) {
              val += this[offset + --byteLength] * mul;
            }

            return val;
          };

          Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
            if (!noAssert) checkOffset(offset, 1, this.length);
            return this[offset];
          };

          Buffer.prototype.readUInt16LE = function readUInt16LE(
            offset,
            noAssert
          ) {
            if (!noAssert) checkOffset(offset, 2, this.length);
            return this[offset] | (this[offset + 1] << 8);
          };

          Buffer.prototype.readUInt16BE = function readUInt16BE(
            offset,
            noAssert
          ) {
            if (!noAssert) checkOffset(offset, 2, this.length);
            return (this[offset] << 8) | this[offset + 1];
          };

          Buffer.prototype.readUInt32LE = function readUInt32LE(
            offset,
            noAssert
          ) {
            if (!noAssert) checkOffset(offset, 4, this.length);

            return (
              (this[offset] |
                (this[offset + 1] << 8) |
                (this[offset + 2] << 16)) +
              this[offset + 3] * 0x1000000
            );
          };

          Buffer.prototype.readUInt32BE = function readUInt32BE(
            offset,
            noAssert
          ) {
            if (!noAssert) checkOffset(offset, 4, this.length);

            return (
              this[offset] * 0x1000000 +
              ((this[offset + 1] << 16) |
                (this[offset + 2] << 8) |
                this[offset + 3])
            );
          };

          Buffer.prototype.readIntLE = function readIntLE(
            offset,
            byteLength,
            noAssert
          ) {
            offset = offset | 0;
            byteLength = byteLength | 0;
            if (!noAssert) checkOffset(offset, byteLength, this.length);

            var val = this[offset];
            var mul = 1;
            var i = 0;
            while (++i < byteLength && (mul *= 0x100)) {
              val += this[offset + i] * mul;
            }
            mul *= 0x80;

            if (val >= mul) val -= Math.pow(2, 8 * byteLength);

            return val;
          };

          Buffer.prototype.readIntBE = function readIntBE(
            offset,
            byteLength,
            noAssert
          ) {
            offset = offset | 0;
            byteLength = byteLength | 0;
            if (!noAssert) checkOffset(offset, byteLength, this.length);

            var i = byteLength;
            var mul = 1;
            var val = this[offset + --i];
            while (i > 0 && (mul *= 0x100)) {
              val += this[offset + --i] * mul;
            }
            mul *= 0x80;

            if (val >= mul) val -= Math.pow(2, 8 * byteLength);

            return val;
          };

          Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
            if (!noAssert) checkOffset(offset, 1, this.length);
            if (!(this[offset] & 0x80)) return this[offset];
            return (0xff - this[offset] + 1) * -1;
          };

          Buffer.prototype.readInt16LE = function readInt16LE(
            offset,
            noAssert
          ) {
            if (!noAssert) checkOffset(offset, 2, this.length);
            var val = this[offset] | (this[offset + 1] << 8);
            return val & 0x8000 ? val | 0xffff0000 : val;
          };

          Buffer.prototype.readInt16BE = function readInt16BE(
            offset,
            noAssert
          ) {
            if (!noAssert) checkOffset(offset, 2, this.length);
            var val = this[offset + 1] | (this[offset] << 8);
            return val & 0x8000 ? val | 0xffff0000 : val;
          };

          Buffer.prototype.readInt32LE = function readInt32LE(
            offset,
            noAssert
          ) {
            if (!noAssert) checkOffset(offset, 4, this.length);

            return (
              this[offset] |
              (this[offset + 1] << 8) |
              (this[offset + 2] << 16) |
              (this[offset + 3] << 24)
            );
          };

          Buffer.prototype.readInt32BE = function readInt32BE(
            offset,
            noAssert
          ) {
            if (!noAssert) checkOffset(offset, 4, this.length);

            return (
              (this[offset] << 24) |
              (this[offset + 1] << 16) |
              (this[offset + 2] << 8) |
              this[offset + 3]
            );
          };

          Buffer.prototype.readFloatLE = function readFloatLE(
            offset,
            noAssert
          ) {
            if (!noAssert) checkOffset(offset, 4, this.length);
            return ieee754.read(this, offset, true, 23, 4);
          };

          Buffer.prototype.readFloatBE = function readFloatBE(
            offset,
            noAssert
          ) {
            if (!noAssert) checkOffset(offset, 4, this.length);
            return ieee754.read(this, offset, false, 23, 4);
          };

          Buffer.prototype.readDoubleLE = function readDoubleLE(
            offset,
            noAssert
          ) {
            if (!noAssert) checkOffset(offset, 8, this.length);
            return ieee754.read(this, offset, true, 52, 8);
          };

          Buffer.prototype.readDoubleBE = function readDoubleBE(
            offset,
            noAssert
          ) {
            if (!noAssert) checkOffset(offset, 8, this.length);
            return ieee754.read(this, offset, false, 52, 8);
          };

          function checkInt(buf, value, offset, ext, max, min) {
            if (!Buffer.isBuffer(buf))
              throw new TypeError(
                '"buffer" argument must be a Buffer instance'
              );
            if (value > max || value < min)
              throw new RangeError('"value" argument is out of bounds');
            if (offset + ext > buf.length)
              throw new RangeError("Index out of range");
          }

          Buffer.prototype.writeUIntLE = function writeUIntLE(
            value,
            offset,
            byteLength,
            noAssert
          ) {
            value = +value;
            offset = offset | 0;
            byteLength = byteLength | 0;
            if (!noAssert) {
              var maxBytes = Math.pow(2, 8 * byteLength) - 1;
              checkInt(this, value, offset, byteLength, maxBytes, 0);
            }

            var mul = 1;
            var i = 0;
            this[offset] = value & 0xff;
            while (++i < byteLength && (mul *= 0x100)) {
              this[offset + i] = (value / mul) & 0xff;
            }

            return offset + byteLength;
          };

          Buffer.prototype.writeUIntBE = function writeUIntBE(
            value,
            offset,
            byteLength,
            noAssert
          ) {
            value = +value;
            offset = offset | 0;
            byteLength = byteLength | 0;
            if (!noAssert) {
              var maxBytes = Math.pow(2, 8 * byteLength) - 1;
              checkInt(this, value, offset, byteLength, maxBytes, 0);
            }

            var i = byteLength - 1;
            var mul = 1;
            this[offset + i] = value & 0xff;
            while (--i >= 0 && (mul *= 0x100)) {
              this[offset + i] = (value / mul) & 0xff;
            }

            return offset + byteLength;
          };

          Buffer.prototype.writeUInt8 = function writeUInt8(
            value,
            offset,
            noAssert
          ) {
            value = +value;
            offset = offset | 0;
            if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
            if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
            this[offset] = value & 0xff;
            return offset + 1;
          };

          function objectWriteUInt16(buf, value, offset, littleEndian) {
            if (value < 0) value = 0xffff + value + 1;
            for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
              buf[offset + i] =
                (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
                ((littleEndian ? i : 1 - i) * 8);
            }
          }

          Buffer.prototype.writeUInt16LE = function writeUInt16LE(
            value,
            offset,
            noAssert
          ) {
            value = +value;
            offset = offset | 0;
            if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
            if (Buffer.TYPED_ARRAY_SUPPORT) {
              this[offset] = value & 0xff;
              this[offset + 1] = value >>> 8;
            } else {
              objectWriteUInt16(this, value, offset, true);
            }
            return offset + 2;
          };

          Buffer.prototype.writeUInt16BE = function writeUInt16BE(
            value,
            offset,
            noAssert
          ) {
            value = +value;
            offset = offset | 0;
            if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
            if (Buffer.TYPED_ARRAY_SUPPORT) {
              this[offset] = value >>> 8;
              this[offset + 1] = value & 0xff;
            } else {
              objectWriteUInt16(this, value, offset, false);
            }
            return offset + 2;
          };

          function objectWriteUInt32(buf, value, offset, littleEndian) {
            if (value < 0) value = 0xffffffff + value + 1;
            for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
              buf[offset + i] =
                (value >>> ((littleEndian ? i : 3 - i) * 8)) & 0xff;
            }
          }

          Buffer.prototype.writeUInt32LE = function writeUInt32LE(
            value,
            offset,
            noAssert
          ) {
            value = +value;
            offset = offset | 0;
            if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
            if (Buffer.TYPED_ARRAY_SUPPORT) {
              this[offset + 3] = value >>> 24;
              this[offset + 2] = value >>> 16;
              this[offset + 1] = value >>> 8;
              this[offset] = value & 0xff;
            } else {
              objectWriteUInt32(this, value, offset, true);
            }
            return offset + 4;
          };

          Buffer.prototype.writeUInt32BE = function writeUInt32BE(
            value,
            offset,
            noAssert
          ) {
            value = +value;
            offset = offset | 0;
            if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
            if (Buffer.TYPED_ARRAY_SUPPORT) {
              this[offset] = value >>> 24;
              this[offset + 1] = value >>> 16;
              this[offset + 2] = value >>> 8;
              this[offset + 3] = value & 0xff;
            } else {
              objectWriteUInt32(this, value, offset, false);
            }
            return offset + 4;
          };

          Buffer.prototype.writeIntLE = function writeIntLE(
            value,
            offset,
            byteLength,
            noAssert
          ) {
            value = +value;
            offset = offset | 0;
            if (!noAssert) {
              var limit = Math.pow(2, 8 * byteLength - 1);

              checkInt(this, value, offset, byteLength, limit - 1, -limit);
            }

            var i = 0;
            var mul = 1;
            var sub = 0;
            this[offset] = value & 0xff;
            while (++i < byteLength && (mul *= 0x100)) {
              if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
                sub = 1;
              }
              this[offset + i] = (((value / mul) >> 0) - sub) & 0xff;
            }

            return offset + byteLength;
          };

          Buffer.prototype.writeIntBE = function writeIntBE(
            value,
            offset,
            byteLength,
            noAssert
          ) {
            value = +value;
            offset = offset | 0;
            if (!noAssert) {
              var limit = Math.pow(2, 8 * byteLength - 1);

              checkInt(this, value, offset, byteLength, limit - 1, -limit);
            }

            var i = byteLength - 1;
            var mul = 1;
            var sub = 0;
            this[offset + i] = value & 0xff;
            while (--i >= 0 && (mul *= 0x100)) {
              if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
                sub = 1;
              }
              this[offset + i] = (((value / mul) >> 0) - sub) & 0xff;
            }

            return offset + byteLength;
          };

          Buffer.prototype.writeInt8 = function writeInt8(
            value,
            offset,
            noAssert
          ) {
            value = +value;
            offset = offset | 0;
            if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
            if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
            if (value < 0) value = 0xff + value + 1;
            this[offset] = value & 0xff;
            return offset + 1;
          };

          Buffer.prototype.writeInt16LE = function writeInt16LE(
            value,
            offset,
            noAssert
          ) {
            value = +value;
            offset = offset | 0;
            if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
            if (Buffer.TYPED_ARRAY_SUPPORT) {
              this[offset] = value & 0xff;
              this[offset + 1] = value >>> 8;
            } else {
              objectWriteUInt16(this, value, offset, true);
            }
            return offset + 2;
          };

          Buffer.prototype.writeInt16BE = function writeInt16BE(
            value,
            offset,
            noAssert
          ) {
            value = +value;
            offset = offset | 0;
            if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
            if (Buffer.TYPED_ARRAY_SUPPORT) {
              this[offset] = value >>> 8;
              this[offset + 1] = value & 0xff;
            } else {
              objectWriteUInt16(this, value, offset, false);
            }
            return offset + 2;
          };

          Buffer.prototype.writeInt32LE = function writeInt32LE(
            value,
            offset,
            noAssert
          ) {
            value = +value;
            offset = offset | 0;
            if (!noAssert)
              checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
            if (Buffer.TYPED_ARRAY_SUPPORT) {
              this[offset] = value & 0xff;
              this[offset + 1] = value >>> 8;
              this[offset + 2] = value >>> 16;
              this[offset + 3] = value >>> 24;
            } else {
              objectWriteUInt32(this, value, offset, true);
            }
            return offset + 4;
          };

          Buffer.prototype.writeInt32BE = function writeInt32BE(
            value,
            offset,
            noAssert
          ) {
            value = +value;
            offset = offset | 0;
            if (!noAssert)
              checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
            if (value < 0) value = 0xffffffff + value + 1;
            if (Buffer.TYPED_ARRAY_SUPPORT) {
              this[offset] = value >>> 24;
              this[offset + 1] = value >>> 16;
              this[offset + 2] = value >>> 8;
              this[offset + 3] = value & 0xff;
            } else {
              objectWriteUInt32(this, value, offset, false);
            }
            return offset + 4;
          };

          function checkIEEE754(buf, value, offset, ext, max, min) {
            if (offset + ext > buf.length)
              throw new RangeError("Index out of range");
            if (offset < 0) throw new RangeError("Index out of range");
          }

          function writeFloat(buf, value, offset, littleEndian, noAssert) {
            if (!noAssert) {
              checkIEEE754(
                buf,
                value,
                offset,
                4,
                3.4028234663852886e38,
                -3.4028234663852886e38
              );
            }
            ieee754.write(buf, value, offset, littleEndian, 23, 4);
            return offset + 4;
          }

          Buffer.prototype.writeFloatLE = function writeFloatLE(
            value,
            offset,
            noAssert
          ) {
            return writeFloat(this, value, offset, true, noAssert);
          };

          Buffer.prototype.writeFloatBE = function writeFloatBE(
            value,
            offset,
            noAssert
          ) {
            return writeFloat(this, value, offset, false, noAssert);
          };

          function writeDouble(buf, value, offset, littleEndian, noAssert) {
            if (!noAssert) {
              checkIEEE754(
                buf,
                value,
                offset,
                8,
                1.7976931348623157e308,
                -1.7976931348623157e308
              );
            }
            ieee754.write(buf, value, offset, littleEndian, 52, 8);
            return offset + 8;
          }

          Buffer.prototype.writeDoubleLE = function writeDoubleLE(
            value,
            offset,
            noAssert
          ) {
            return writeDouble(this, value, offset, true, noAssert);
          };

          Buffer.prototype.writeDoubleBE = function writeDoubleBE(
            value,
            offset,
            noAssert
          ) {
            return writeDouble(this, value, offset, false, noAssert);
          };

          // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
          Buffer.prototype.copy = function copy(
            target,
            targetStart,
            start,
            end
          ) {
            if (!start) start = 0;
            if (!end && end !== 0) end = this.length;
            if (targetStart >= target.length) targetStart = target.length;
            if (!targetStart) targetStart = 0;
            if (end > 0 && end < start) end = start;

            // Copy 0 bytes; we're done
            if (end === start) return 0;
            if (target.length === 0 || this.length === 0) return 0;

            // Fatal error conditions
            if (targetStart < 0) {
              throw new RangeError("targetStart out of bounds");
            }
            if (start < 0 || start >= this.length)
              throw new RangeError("sourceStart out of bounds");
            if (end < 0) throw new RangeError("sourceEnd out of bounds");

            // Are we oob?
            if (end > this.length) end = this.length;
            if (target.length - targetStart < end - start) {
              end = target.length - targetStart + start;
            }

            var len = end - start;
            var i;

            if (this === target && start < targetStart && targetStart < end) {
              // descending copy from end
              for (i = len - 1; i >= 0; --i) {
                target[i + targetStart] = this[i + start];
              }
            } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
              // ascending copy from start
              for (i = 0; i < len; ++i) {
                target[i + targetStart] = this[i + start];
              }
            } else {
              Uint8Array.prototype.set.call(
                target,
                this.subarray(start, start + len),
                targetStart
              );
            }

            return len;
          };

          // Usage:
          //    buffer.fill(number[, offset[, end]])
          //    buffer.fill(buffer[, offset[, end]])
          //    buffer.fill(string[, offset[, end]][, encoding])
          Buffer.prototype.fill = function fill(val, start, end, encoding) {
            // Handle string cases:
            if (typeof val === "string") {
              if (typeof start === "string") {
                encoding = start;
                start = 0;
                end = this.length;
              } else if (typeof end === "string") {
                encoding = end;
                end = this.length;
              }
              if (val.length === 1) {
                var code = val.charCodeAt(0);
                if (code < 256) {
                  val = code;
                }
              }
              if (encoding !== undefined && typeof encoding !== "string") {
                throw new TypeError("encoding must be a string");
              }
              if (
                typeof encoding === "string" &&
                !Buffer.isEncoding(encoding)
              ) {
                throw new TypeError("Unknown encoding: " + encoding);
              }
            } else if (typeof val === "number") {
              val = val & 255;
            }

            // Invalid ranges are not set to a default, so can range check early.
            if (start < 0 || this.length < start || this.length < end) {
              throw new RangeError("Out of range index");
            }

            if (end <= start) {
              return this;
            }

            start = start >>> 0;
            end = end === undefined ? this.length : end >>> 0;

            if (!val) val = 0;

            var i;
            if (typeof val === "number") {
              for (i = start; i < end; ++i) {
                this[i] = val;
              }
            } else {
              var bytes = Buffer.isBuffer(val)
                ? val
                : utf8ToBytes(new Buffer(val, encoding).toString());
              var len = bytes.length;
              for (i = 0; i < end - start; ++i) {
                this[i + start] = bytes[i % len];
              }
            }

            return this;
          };

          // HELPER FUNCTIONS
          // ================

          var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

          function base64clean(str) {
            // Node strips out invalid characters like \n and \t from the string, base64-js does not
            str = stringtrim(str).replace(INVALID_BASE64_RE, "");
            // Node converts strings with length < 2 to ''
            if (str.length < 2) return "";
            // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
            while (str.length % 4 !== 0) {
              str = str + "=";
            }
            return str;
          }

          function stringtrim(str) {
            if (str.trim) return str.trim();
            return str.replace(/^\s+|\s+$/g, "");
          }

          function toHex(n) {
            if (n < 16) return "0" + n.toString(16);
            return n.toString(16);
          }

          function utf8ToBytes(string, units) {
            units = units || Infinity;
            var codePoint;
            var length = string.length;
            var leadSurrogate = null;
            var bytes = [];

            for (var i = 0; i < length; ++i) {
              codePoint = string.charCodeAt(i);

              // is surrogate component
              if (codePoint > 0xd7ff && codePoint < 0xe000) {
                // last char was a lead
                if (!leadSurrogate) {
                  // no lead yet
                  if (codePoint > 0xdbff) {
                    // unexpected trail
                    if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
                    continue;
                  } else if (i + 1 === length) {
                    // unpaired lead
                    if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
                    continue;
                  }

                  // valid lead
                  leadSurrogate = codePoint;

                  continue;
                }

                // 2 leads in a row
                if (codePoint < 0xdc00) {
                  if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
                  leadSurrogate = codePoint;
                  continue;
                }

                // valid surrogate pair
                codePoint =
                  (((leadSurrogate - 0xd800) << 10) | (codePoint - 0xdc00)) +
                  0x10000;
              } else if (leadSurrogate) {
                // valid bmp char, but last char was a lead
                if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
              }

              leadSurrogate = null;

              // encode utf8
              if (codePoint < 0x80) {
                if ((units -= 1) < 0) break;
                bytes.push(codePoint);
              } else if (codePoint < 0x800) {
                if ((units -= 2) < 0) break;
                bytes.push(
                  (codePoint >> 0x6) | 0xc0,
                  (codePoint & 0x3f) | 0x80
                );
              } else if (codePoint < 0x10000) {
                if ((units -= 3) < 0) break;
                bytes.push(
                  (codePoint >> 0xc) | 0xe0,
                  ((codePoint >> 0x6) & 0x3f) | 0x80,
                  (codePoint & 0x3f) | 0x80
                );
              } else if (codePoint < 0x110000) {
                if ((units -= 4) < 0) break;
                bytes.push(
                  (codePoint >> 0x12) | 0xf0,
                  ((codePoint >> 0xc) & 0x3f) | 0x80,
                  ((codePoint >> 0x6) & 0x3f) | 0x80,
                  (codePoint & 0x3f) | 0x80
                );
              } else {
                throw new Error("Invalid code point");
              }
            }

            return bytes;
          }

          function asciiToBytes(str) {
            var byteArray = [];
            for (var i = 0; i < str.length; ++i) {
              // Node's code seems to be doing this and not & 0x7F..
              byteArray.push(str.charCodeAt(i) & 0xff);
            }
            return byteArray;
          }

          function utf16leToBytes(str, units) {
            var c, hi, lo;
            var byteArray = [];
            for (var i = 0; i < str.length; ++i) {
              if ((units -= 2) < 0) break;

              c = str.charCodeAt(i);
              hi = c >> 8;
              lo = c % 256;
              byteArray.push(lo);
              byteArray.push(hi);
            }

            return byteArray;
          }

          function base64ToBytes(str) {
            return base64.toByteArray(base64clean(str));
          }

          function blitBuffer(src, dst, offset, length) {
            for (var i = 0; i < length; ++i) {
              if (i + offset >= dst.length || i >= src.length) break;
              dst[i + offset] = src[i];
            }
            return i;
          }

          function isnan(val) {
            return val !== val; // eslint-disable-line no-self-compare
          }

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(8)));

        /***/
      },
      /* 1 */
      /***/ function(module, exports) {
        /**
 * Node.js module for Forge.
 *
 * @author Dave Longley
 *
 * Copyright 2011-2016 Digital Bazaar, Inc.
 */
        module.exports = {
          // default options
          options: {
            usePureJavaScript: false
          }
        };

        /***/
      },
      /* 2 */
      /***/ function(module, exports) {
        if (typeof Object.create === "function") {
          // implementation from standard node.js 'util' module
          module.exports = function inherits(ctor, superCtor) {
            ctor.super_ = superCtor;
            ctor.prototype = Object.create(superCtor.prototype, {
              constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
          };
        } else {
          // old school shim for old browsers
          module.exports = function inherits(ctor, superCtor) {
            ctor.super_ = superCtor;
            var TempCtor = function() {};
            TempCtor.prototype = superCtor.prototype;
            ctor.prototype = new TempCtor();
            ctor.prototype.constructor = ctor;
          };
        }

        /***/
      },
      /* 3 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(process, setImmediate) {
          /**
 * Utility functions for web applications.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
 */
          var forge = __webpack_require__(1);

          /* Utilities API */
          var util = (module.exports = forge.util = forge.util || {});

          // define setImmediate and nextTick
          (function() {
            // use native nextTick
            if (typeof process !== "undefined" && process.nextTick) {
              util.nextTick = process.nextTick;
              if (typeof setImmediate === "function") {
                util.setImmediate = setImmediate;
              } else {
                // polyfill setImmediate with nextTick, older versions of node
                // (those w/o setImmediate) won't totally starve IO
                util.setImmediate = util.nextTick;
              }
              return;
            }

            // polyfill nextTick with native setImmediate
            if (typeof setImmediate === "function") {
              util.setImmediate = function() {
                return setImmediate.apply(undefined, arguments);
              };
              util.nextTick = function(callback) {
                return setImmediate(callback);
              };
              return;
            }

            /* Note: A polyfill upgrade pattern is used here to allow combining
  polyfills. For example, MutationObserver is fast, but blocks UI updates,
  so it needs to allow UI updates periodically, so it falls back on
  postMessage or setTimeout. */

            // polyfill with setTimeout
            util.setImmediate = function(callback) {
              setTimeout(callback, 0);
            };

            // upgrade polyfill to use postMessage
            if (
              typeof window !== "undefined" &&
              typeof window.postMessage === "function"
            ) {
              var msg = "forge.setImmediate";
              var callbacks = [];
              util.setImmediate = function(callback) {
                callbacks.push(callback);
                // only send message when one hasn't been sent in
                // the current turn of the event loop
                if (callbacks.length === 1) {
                  window.postMessage(msg, "*");
                }
              };
              function handler(event) {
                if (event.source === window && event.data === msg) {
                  event.stopPropagation();
                  var copy = callbacks.slice();
                  callbacks.length = 0;
                  copy.forEach(function(callback) {
                    callback();
                  });
                }
              }
              window.addEventListener("message", handler, true);
            }

            // upgrade polyfill to use MutationObserver
            if (typeof MutationObserver !== "undefined") {
              // polyfill with MutationObserver
              var now = Date.now();
              var attr = true;
              var div = document.createElement("div");
              var callbacks = [];
              new MutationObserver(function() {
                var copy = callbacks.slice();
                callbacks.length = 0;
                copy.forEach(function(callback) {
                  callback();
                });
              }).observe(div, { attributes: true });
              var oldSetImmediate = util.setImmediate;
              util.setImmediate = function(callback) {
                if (Date.now() - now > 15) {
                  now = Date.now();
                  oldSetImmediate(callback);
                } else {
                  callbacks.push(callback);
                  // only trigger observer when it hasn't been triggered in
                  // the current turn of the event loop
                  if (callbacks.length === 1) {
                    div.setAttribute("a", (attr = !attr));
                  }
                }
              };
            }

            util.nextTick = util.setImmediate;
          })();

          // check if running under Node.js
          util.isNodejs =
            typeof process !== "undefined" &&
            process.versions &&
            process.versions.node;

          // define isArray
          util.isArray =
            Array.isArray ||
            function(x) {
              return Object.prototype.toString.call(x) === "[object Array]";
            };

          // define isArrayBuffer
          util.isArrayBuffer = function(x) {
            return (
              typeof ArrayBuffer !== "undefined" && x instanceof ArrayBuffer
            );
          };

          // define isArrayBufferView
          util.isArrayBufferView = function(x) {
            return (
              x && util.isArrayBuffer(x.buffer) && x.byteLength !== undefined
            );
          };

          /**
 * Ensure a bits param is 8, 16, 24, or 32. Used to validate input for
 * algorithms where bit manipulation, JavaScript limitations, and/or algorithm
 * design only allow for byte operations of a limited size.
 *
 * @param n number of bits.
 *
 * Throw Error if n invalid.
 */
          function _checkBitsParam(n) {
            if (!(n === 8 || n === 16 || n === 24 || n === 32)) {
              throw new Error("Only 8, 16, 24, or 32 bits supported: " + n);
            }
          }

          // TODO: set ByteBuffer to best available backing
          util.ByteBuffer = ByteStringBuffer;

          /** Buffer w/BinaryString backing */

          /**
 * Constructor for a binary string backed byte buffer.
 *
 * @param [b] the bytes to wrap (either encoded as string, one byte per
 *          character, or as an ArrayBuffer or Typed Array).
 */
          function ByteStringBuffer(b) {
            // TODO: update to match DataBuffer API

            // the data in this buffer
            this.data = "";
            // the pointer for reading from this buffer
            this.read = 0;

            if (typeof b === "string") {
              this.data = b;
            } else if (util.isArrayBuffer(b) || util.isArrayBufferView(b)) {
              // convert native buffer to forge buffer
              // FIXME: support native buffers internally instead
              var arr = new Uint8Array(b);
              try {
                this.data = String.fromCharCode.apply(null, arr);
              } catch (e) {
                for (var i = 0; i < arr.length; ++i) {
                  this.putByte(arr[i]);
                }
              }
            } else if (
              b instanceof ByteStringBuffer ||
              (typeof b === "object" &&
                typeof b.data === "string" &&
                typeof b.read === "number")
            ) {
              // copy existing buffer
              this.data = b.data;
              this.read = b.read;
            }

            // used for v8 optimization
            this._constructedStringLength = 0;
          }
          util.ByteStringBuffer = ByteStringBuffer;

          /* Note: This is an optimization for V8-based browsers. When V8 concatenates
  a string, the strings are only joined logically using a "cons string" or
  "constructed/concatenated string". These containers keep references to one
  another and can result in very large memory usage. For example, if a 2MB
  string is constructed by concatenating 4 bytes together at a time, the
  memory usage will be ~44MB; so ~22x increase. The strings are only joined
  together when an operation requiring their joining takes place, such as
  substr(). This function is called when adding data to this buffer to ensure
  these types of strings are periodically joined to reduce the memory
  footprint. */
          var _MAX_CONSTRUCTED_STRING_LENGTH = 4096;
          util.ByteStringBuffer.prototype._optimizeConstructedString = function(
            x
          ) {
            this._constructedStringLength += x;
            if (
              this._constructedStringLength > _MAX_CONSTRUCTED_STRING_LENGTH
            ) {
              // this substr() should cause the constructed string to join
              this.data.substr(0, 1);
              this._constructedStringLength = 0;
            }
          };

          /**
 * Gets the number of bytes in this buffer.
 *
 * @return the number of bytes in this buffer.
 */
          util.ByteStringBuffer.prototype.length = function() {
            return this.data.length - this.read;
          };

          /**
 * Gets whether or not this buffer is empty.
 *
 * @return true if this buffer is empty, false if not.
 */
          util.ByteStringBuffer.prototype.isEmpty = function() {
            return this.length() <= 0;
          };

          /**
 * Puts a byte in this buffer.
 *
 * @param b the byte to put.
 *
 * @return this buffer.
 */
          util.ByteStringBuffer.prototype.putByte = function(b) {
            return this.putBytes(String.fromCharCode(b));
          };

          /**
 * Puts a byte in this buffer N times.
 *
 * @param b the byte to put.
 * @param n the number of bytes of value b to put.
 *
 * @return this buffer.
 */
          util.ByteStringBuffer.prototype.fillWithByte = function(b, n) {
            b = String.fromCharCode(b);
            var d = this.data;
            while (n > 0) {
              if (n & 1) {
                d += b;
              }
              n >>>= 1;
              if (n > 0) {
                b += b;
              }
            }
            this.data = d;
            this._optimizeConstructedString(n);
            return this;
          };

          /**
 * Puts bytes in this buffer.
 *
 * @param bytes the bytes (as a UTF-8 encoded string) to put.
 *
 * @return this buffer.
 */
          util.ByteStringBuffer.prototype.putBytes = function(bytes) {
            this.data += bytes;
            this._optimizeConstructedString(bytes.length);
            return this;
          };

          /**
 * Puts a UTF-16 encoded string into this buffer.
 *
 * @param str the string to put.
 *
 * @return this buffer.
 */
          util.ByteStringBuffer.prototype.putString = function(str) {
            return this.putBytes(util.encodeUtf8(str));
          };

          /**
 * Puts a 16-bit integer in this buffer in big-endian order.
 *
 * @param i the 16-bit integer.
 *
 * @return this buffer.
 */
          util.ByteStringBuffer.prototype.putInt16 = function(i) {
            return this.putBytes(
              String.fromCharCode((i >> 8) & 0xff) +
                String.fromCharCode(i & 0xff)
            );
          };

          /**
 * Puts a 24-bit integer in this buffer in big-endian order.
 *
 * @param i the 24-bit integer.
 *
 * @return this buffer.
 */
          util.ByteStringBuffer.prototype.putInt24 = function(i) {
            return this.putBytes(
              String.fromCharCode((i >> 16) & 0xff) +
                String.fromCharCode((i >> 8) & 0xff) +
                String.fromCharCode(i & 0xff)
            );
          };

          /**
 * Puts a 32-bit integer in this buffer in big-endian order.
 *
 * @param i the 32-bit integer.
 *
 * @return this buffer.
 */
          util.ByteStringBuffer.prototype.putInt32 = function(i) {
            return this.putBytes(
              String.fromCharCode((i >> 24) & 0xff) +
                String.fromCharCode((i >> 16) & 0xff) +
                String.fromCharCode((i >> 8) & 0xff) +
                String.fromCharCode(i & 0xff)
            );
          };

          /**
 * Puts a 16-bit integer in this buffer in little-endian order.
 *
 * @param i the 16-bit integer.
 *
 * @return this buffer.
 */
          util.ByteStringBuffer.prototype.putInt16Le = function(i) {
            return this.putBytes(
              String.fromCharCode(i & 0xff) +
                String.fromCharCode((i >> 8) & 0xff)
            );
          };

          /**
 * Puts a 24-bit integer in this buffer in little-endian order.
 *
 * @param i the 24-bit integer.
 *
 * @return this buffer.
 */
          util.ByteStringBuffer.prototype.putInt24Le = function(i) {
            return this.putBytes(
              String.fromCharCode(i & 0xff) +
                String.fromCharCode((i >> 8) & 0xff) +
                String.fromCharCode((i >> 16) & 0xff)
            );
          };

          /**
 * Puts a 32-bit integer in this buffer in little-endian order.
 *
 * @param i the 32-bit integer.
 *
 * @return this buffer.
 */
          util.ByteStringBuffer.prototype.putInt32Le = function(i) {
            return this.putBytes(
              String.fromCharCode(i & 0xff) +
                String.fromCharCode((i >> 8) & 0xff) +
                String.fromCharCode((i >> 16) & 0xff) +
                String.fromCharCode((i >> 24) & 0xff)
            );
          };

          /**
 * Puts an n-bit integer in this buffer in big-endian order.
 *
 * @param i the n-bit integer.
 * @param n the number of bits in the integer (8, 16, 24, or 32).
 *
 * @return this buffer.
 */
          util.ByteStringBuffer.prototype.putInt = function(i, n) {
            _checkBitsParam(n);
            var bytes = "";
            do {
              n -= 8;
              bytes += String.fromCharCode((i >> n) & 0xff);
            } while (n > 0);
            return this.putBytes(bytes);
          };

          /**
 * Puts a signed n-bit integer in this buffer in big-endian order. Two's
 * complement representation is used.
 *
 * @param i the n-bit integer.
 * @param n the number of bits in the integer (8, 16, 24, or 32).
 *
 * @return this buffer.
 */
          util.ByteStringBuffer.prototype.putSignedInt = function(i, n) {
            // putInt checks n
            if (i < 0) {
              i += 2 << (n - 1);
            }
            return this.putInt(i, n);
          };

          /**
 * Puts the given buffer into this buffer.
 *
 * @param buffer the buffer to put into this one.
 *
 * @return this buffer.
 */
          util.ByteStringBuffer.prototype.putBuffer = function(buffer) {
            return this.putBytes(buffer.getBytes());
          };

          /**
 * Gets a byte from this buffer and advances the read pointer by 1.
 *
 * @return the byte.
 */
          util.ByteStringBuffer.prototype.getByte = function() {
            return this.data.charCodeAt(this.read++);
          };

          /**
 * Gets a uint16 from this buffer in big-endian order and advances the read
 * pointer by 2.
 *
 * @return the uint16.
 */
          util.ByteStringBuffer.prototype.getInt16 = function() {
            var rval =
              (this.data.charCodeAt(this.read) << 8) ^
              this.data.charCodeAt(this.read + 1);
            this.read += 2;
            return rval;
          };

          /**
 * Gets a uint24 from this buffer in big-endian order and advances the read
 * pointer by 3.
 *
 * @return the uint24.
 */
          util.ByteStringBuffer.prototype.getInt24 = function() {
            var rval =
              (this.data.charCodeAt(this.read) << 16) ^
              (this.data.charCodeAt(this.read + 1) << 8) ^
              this.data.charCodeAt(this.read + 2);
            this.read += 3;
            return rval;
          };

          /**
 * Gets a uint32 from this buffer in big-endian order and advances the read
 * pointer by 4.
 *
 * @return the word.
 */
          util.ByteStringBuffer.prototype.getInt32 = function() {
            var rval =
              (this.data.charCodeAt(this.read) << 24) ^
              (this.data.charCodeAt(this.read + 1) << 16) ^
              (this.data.charCodeAt(this.read + 2) << 8) ^
              this.data.charCodeAt(this.read + 3);
            this.read += 4;
            return rval;
          };

          /**
 * Gets a uint16 from this buffer in little-endian order and advances the read
 * pointer by 2.
 *
 * @return the uint16.
 */
          util.ByteStringBuffer.prototype.getInt16Le = function() {
            var rval =
              this.data.charCodeAt(this.read) ^
              (this.data.charCodeAt(this.read + 1) << 8);
            this.read += 2;
            return rval;
          };

          /**
 * Gets a uint24 from this buffer in little-endian order and advances the read
 * pointer by 3.
 *
 * @return the uint24.
 */
          util.ByteStringBuffer.prototype.getInt24Le = function() {
            var rval =
              this.data.charCodeAt(this.read) ^
              (this.data.charCodeAt(this.read + 1) << 8) ^
              (this.data.charCodeAt(this.read + 2) << 16);
            this.read += 3;
            return rval;
          };

          /**
 * Gets a uint32 from this buffer in little-endian order and advances the read
 * pointer by 4.
 *
 * @return the word.
 */
          util.ByteStringBuffer.prototype.getInt32Le = function() {
            var rval =
              this.data.charCodeAt(this.read) ^
              (this.data.charCodeAt(this.read + 1) << 8) ^
              (this.data.charCodeAt(this.read + 2) << 16) ^
              (this.data.charCodeAt(this.read + 3) << 24);
            this.read += 4;
            return rval;
          };

          /**
 * Gets an n-bit integer from this buffer in big-endian order and advances the
 * read pointer by ceil(n/8).
 *
 * @param n the number of bits in the integer (8, 16, 24, or 32).
 *
 * @return the integer.
 */
          util.ByteStringBuffer.prototype.getInt = function(n) {
            _checkBitsParam(n);
            var rval = 0;
            do {
              // TODO: Use (rval * 0x100) if adding support for 33 to 53 bits.
              rval = (rval << 8) + this.data.charCodeAt(this.read++);
              n -= 8;
            } while (n > 0);
            return rval;
          };

          /**
 * Gets a signed n-bit integer from this buffer in big-endian order, using
 * two's complement, and advances the read pointer by n/8.
 *
 * @param n the number of bits in the integer (8, 16, 24, or 32).
 *
 * @return the integer.
 */
          util.ByteStringBuffer.prototype.getSignedInt = function(n) {
            // getInt checks n
            var x = this.getInt(n);
            var max = 2 << (n - 2);
            if (x >= max) {
              x -= max << 1;
            }
            return x;
          };

          /**
 * Reads bytes out into a UTF-8 string and clears them from the buffer.
 *
 * @param count the number of bytes to read, undefined or null for all.
 *
 * @return a UTF-8 string of bytes.
 */
          util.ByteStringBuffer.prototype.getBytes = function(count) {
            var rval;
            if (count) {
              // read count bytes
              count = Math.min(this.length(), count);
              rval = this.data.slice(this.read, this.read + count);
              this.read += count;
            } else if (count === 0) {
              rval = "";
            } else {
              // read all bytes, optimize to only copy when needed
              rval = this.read === 0 ? this.data : this.data.slice(this.read);
              this.clear();
            }
            return rval;
          };

          /**
 * Gets a UTF-8 encoded string of the bytes from this buffer without modifying
 * the read pointer.
 *
 * @param count the number of bytes to get, omit to get all.
 *
 * @return a string full of UTF-8 encoded characters.
 */
          util.ByteStringBuffer.prototype.bytes = function(count) {
            return typeof count === "undefined"
              ? this.data.slice(this.read)
              : this.data.slice(this.read, this.read + count);
          };

          /**
 * Gets a byte at the given index without modifying the read pointer.
 *
 * @param i the byte index.
 *
 * @return the byte.
 */
          util.ByteStringBuffer.prototype.at = function(i) {
            return this.data.charCodeAt(this.read + i);
          };

          /**
 * Puts a byte at the given index without modifying the read pointer.
 *
 * @param i the byte index.
 * @param b the byte to put.
 *
 * @return this buffer.
 */
          util.ByteStringBuffer.prototype.setAt = function(i, b) {
            this.data =
              this.data.substr(0, this.read + i) +
              String.fromCharCode(b) +
              this.data.substr(this.read + i + 1);
            return this;
          };

          /**
 * Gets the last byte without modifying the read pointer.
 *
 * @return the last byte.
 */
          util.ByteStringBuffer.prototype.last = function() {
            return this.data.charCodeAt(this.data.length - 1);
          };

          /**
 * Creates a copy of this buffer.
 *
 * @return the copy.
 */
          util.ByteStringBuffer.prototype.copy = function() {
            var c = util.createBuffer(this.data);
            c.read = this.read;
            return c;
          };

          /**
 * Compacts this buffer.
 *
 * @return this buffer.
 */
          util.ByteStringBuffer.prototype.compact = function() {
            if (this.read > 0) {
              this.data = this.data.slice(this.read);
              this.read = 0;
            }
            return this;
          };

          /**
 * Clears this buffer.
 *
 * @return this buffer.
 */
          util.ByteStringBuffer.prototype.clear = function() {
            this.data = "";
            this.read = 0;
            return this;
          };

          /**
 * Shortens this buffer by triming bytes off of the end of this buffer.
 *
 * @param count the number of bytes to trim off.
 *
 * @return this buffer.
 */
          util.ByteStringBuffer.prototype.truncate = function(count) {
            var len = Math.max(0, this.length() - count);
            this.data = this.data.substr(this.read, len);
            this.read = 0;
            return this;
          };

          /**
 * Converts this buffer to a hexadecimal string.
 *
 * @return a hexadecimal string.
 */
          util.ByteStringBuffer.prototype.toHex = function() {
            var rval = "";
            for (var i = this.read; i < this.data.length; ++i) {
              var b = this.data.charCodeAt(i);
              if (b < 16) {
                rval += "0";
              }
              rval += b.toString(16);
            }
            return rval;
          };

          /**
 * Converts this buffer to a UTF-16 string (standard JavaScript string).
 *
 * @return a UTF-16 string.
 */
          util.ByteStringBuffer.prototype.toString = function() {
            return util.decodeUtf8(this.bytes());
          };

          /** End Buffer w/BinaryString backing */

          /** Buffer w/UInt8Array backing */

          /**
 * FIXME: Experimental. Do not use yet.
 *
 * Constructor for an ArrayBuffer-backed byte buffer.
 *
 * The buffer may be constructed from a string, an ArrayBuffer, DataView, or a
 * TypedArray.
 *
 * If a string is given, its encoding should be provided as an option,
 * otherwise it will default to 'binary'. A 'binary' string is encoded such
 * that each character is one byte in length and size.
 *
 * If an ArrayBuffer, DataView, or TypedArray is given, it will be used
 * *directly* without any copying. Note that, if a write to the buffer requires
 * more space, the buffer will allocate a new backing ArrayBuffer to
 * accommodate. The starting read and write offsets for the buffer may be
 * given as options.
 *
 * @param [b] the initial bytes for this buffer.
 * @param options the options to use:
 *          [readOffset] the starting read offset to use (default: 0).
 *          [writeOffset] the starting write offset to use (default: the
 *            length of the first parameter).
 *          [growSize] the minimum amount, in bytes, to grow the buffer by to
 *            accommodate writes (default: 1024).
 *          [encoding] the encoding ('binary', 'utf8', 'utf16', 'hex') for the
 *            first parameter, if it is a string (default: 'binary').
 */
          function DataBuffer(b, options) {
            // default options
            options = options || {};

            // pointers for read from/write to buffer
            this.read = options.readOffset || 0;
            this.growSize = options.growSize || 1024;

            var isArrayBuffer = util.isArrayBuffer(b);
            var isArrayBufferView = util.isArrayBufferView(b);
            if (isArrayBuffer || isArrayBufferView) {
              // use ArrayBuffer directly
              if (isArrayBuffer) {
                this.data = new DataView(b);
              } else {
                // TODO: adjust read/write offset based on the type of view
                // or specify that this must be done in the options ... that the
                // offsets are byte-based
                this.data = new DataView(b.buffer, b.byteOffset, b.byteLength);
              }
              this.write =
                "writeOffset" in options
                  ? options.writeOffset
                  : this.data.byteLength;
              return;
            }

            // initialize to empty array buffer and add any given bytes using putBytes
            this.data = new DataView(new ArrayBuffer(0));
            this.write = 0;

            if (b !== null && b !== undefined) {
              this.putBytes(b);
            }

            if ("writeOffset" in options) {
              this.write = options.writeOffset;
            }
          }
          util.DataBuffer = DataBuffer;

          /**
 * Gets the number of bytes in this buffer.
 *
 * @return the number of bytes in this buffer.
 */
          util.DataBuffer.prototype.length = function() {
            return this.write - this.read;
          };

          /**
 * Gets whether or not this buffer is empty.
 *
 * @return true if this buffer is empty, false if not.
 */
          util.DataBuffer.prototype.isEmpty = function() {
            return this.length() <= 0;
          };

          /**
 * Ensures this buffer has enough empty space to accommodate the given number
 * of bytes. An optional parameter may be given that indicates a minimum
 * amount to grow the buffer if necessary. If the parameter is not given,
 * the buffer will be grown by some previously-specified default amount
 * or heuristic.
 *
 * @param amount the number of bytes to accommodate.
 * @param [growSize] the minimum amount, in bytes, to grow the buffer by if
 *          necessary.
 */
          util.DataBuffer.prototype.accommodate = function(amount, growSize) {
            if (this.length() >= amount) {
              return this;
            }
            growSize = Math.max(growSize || this.growSize, amount);

            // grow buffer
            var src = new Uint8Array(
              this.data.buffer,
              this.data.byteOffset,
              this.data.byteLength
            );
            var dst = new Uint8Array(this.length() + growSize);
            dst.set(src);
            this.data = new DataView(dst.buffer);

            return this;
          };

          /**
 * Puts a byte in this buffer.
 *
 * @param b the byte to put.
 *
 * @return this buffer.
 */
          util.DataBuffer.prototype.putByte = function(b) {
            this.accommodate(1);
            this.data.setUint8(this.write++, b);
            return this;
          };

          /**
 * Puts a byte in this buffer N times.
 *
 * @param b the byte to put.
 * @param n the number of bytes of value b to put.
 *
 * @return this buffer.
 */
          util.DataBuffer.prototype.fillWithByte = function(b, n) {
            this.accommodate(n);
            for (var i = 0; i < n; ++i) {
              this.data.setUint8(b);
            }
            return this;
          };

          /**
 * Puts bytes in this buffer. The bytes may be given as a string, an
 * ArrayBuffer, a DataView, or a TypedArray.
 *
 * @param bytes the bytes to put.
 * @param [encoding] the encoding for the first parameter ('binary', 'utf8',
 *          'utf16', 'hex'), if it is a string (default: 'binary').
 *
 * @return this buffer.
 */
          util.DataBuffer.prototype.putBytes = function(bytes, encoding) {
            if (util.isArrayBufferView(bytes)) {
              var src = new Uint8Array(
                bytes.buffer,
                bytes.byteOffset,
                bytes.byteLength
              );
              var len = src.byteLength - src.byteOffset;
              this.accommodate(len);
              var dst = new Uint8Array(this.data.buffer, this.write);
              dst.set(src);
              this.write += len;
              return this;
            }

            if (util.isArrayBuffer(bytes)) {
              var src = new Uint8Array(bytes);
              this.accommodate(src.byteLength);
              var dst = new Uint8Array(this.data.buffer);
              dst.set(src, this.write);
              this.write += src.byteLength;
              return this;
            }

            // bytes is a util.DataBuffer or equivalent
            if (
              bytes instanceof util.DataBuffer ||
              (typeof bytes === "object" &&
                typeof bytes.read === "number" &&
                typeof bytes.write === "number" &&
                util.isArrayBufferView(bytes.data))
            ) {
              var src = new Uint8Array(
                bytes.data.byteLength,
                bytes.read,
                bytes.length()
              );
              this.accommodate(src.byteLength);
              var dst = new Uint8Array(bytes.data.byteLength, this.write);
              dst.set(src);
              this.write += src.byteLength;
              return this;
            }

            if (bytes instanceof util.ByteStringBuffer) {
              // copy binary string and process as the same as a string parameter below
              bytes = bytes.data;
              encoding = "binary";
            }

            // string conversion
            encoding = encoding || "binary";
            if (typeof bytes === "string") {
              var view;

              // decode from string
              if (encoding === "hex") {
                this.accommodate(Math.ceil(bytes.length / 2));
                view = new Uint8Array(this.data.buffer, this.write);
                this.write += util.binary.hex.decode(bytes, view, this.write);
                return this;
              }
              if (encoding === "base64") {
                this.accommodate(Math.ceil(bytes.length / 4) * 3);
                view = new Uint8Array(this.data.buffer, this.write);
                this.write += util.binary.base64.decode(
                  bytes,
                  view,
                  this.write
                );
                return this;
              }

              // encode text as UTF-8 bytes
              if (encoding === "utf8") {
                // encode as UTF-8 then decode string as raw binary
                bytes = util.encodeUtf8(bytes);
                encoding = "binary";
              }

              // decode string as raw binary
              if (encoding === "binary" || encoding === "raw") {
                // one byte per character
                this.accommodate(bytes.length);
                view = new Uint8Array(this.data.buffer, this.write);
                this.write += util.binary.raw.decode(view);
                return this;
              }

              // encode text as UTF-16 bytes
              if (encoding === "utf16") {
                // two bytes per character
                this.accommodate(bytes.length * 2);
                view = new Uint16Array(this.data.buffer, this.write);
                this.write += util.text.utf16.encode(view);
                return this;
              }

              throw new Error("Invalid encoding: " + encoding);
            }

            throw Error("Invalid parameter: " + bytes);
          };

          /**
 * Puts the given buffer into this buffer.
 *
 * @param buffer the buffer to put into this one.
 *
 * @return this buffer.
 */
          util.DataBuffer.prototype.putBuffer = function(buffer) {
            this.putBytes(buffer);
            buffer.clear();
            return this;
          };

          /**
 * Puts a string into this buffer.
 *
 * @param str the string to put.
 * @param [encoding] the encoding for the string (default: 'utf16').
 *
 * @return this buffer.
 */
          util.DataBuffer.prototype.putString = function(str) {
            return this.putBytes(str, "utf16");
          };

          /**
 * Puts a 16-bit integer in this buffer in big-endian order.
 *
 * @param i the 16-bit integer.
 *
 * @return this buffer.
 */
          util.DataBuffer.prototype.putInt16 = function(i) {
            this.accommodate(2);
            this.data.setInt16(this.write, i);
            this.write += 2;
            return this;
          };

          /**
 * Puts a 24-bit integer in this buffer in big-endian order.
 *
 * @param i the 24-bit integer.
 *
 * @return this buffer.
 */
          util.DataBuffer.prototype.putInt24 = function(i) {
            this.accommodate(3);
            this.data.setInt16(this.write, (i >> 8) & 0xffff);
            this.data.setInt8(this.write, (i >> 16) & 0xff);
            this.write += 3;
            return this;
          };

          /**
 * Puts a 32-bit integer in this buffer in big-endian order.
 *
 * @param i the 32-bit integer.
 *
 * @return this buffer.
 */
          util.DataBuffer.prototype.putInt32 = function(i) {
            this.accommodate(4);
            this.data.setInt32(this.write, i);
            this.write += 4;
            return this;
          };

          /**
 * Puts a 16-bit integer in this buffer in little-endian order.
 *
 * @param i the 16-bit integer.
 *
 * @return this buffer.
 */
          util.DataBuffer.prototype.putInt16Le = function(i) {
            this.accommodate(2);
            this.data.setInt16(this.write, i, true);
            this.write += 2;
            return this;
          };

          /**
 * Puts a 24-bit integer in this buffer in little-endian order.
 *
 * @param i the 24-bit integer.
 *
 * @return this buffer.
 */
          util.DataBuffer.prototype.putInt24Le = function(i) {
            this.accommodate(3);
            this.data.setInt8(this.write, (i >> 16) & 0xff);
            this.data.setInt16(this.write, (i >> 8) & 0xffff, true);
            this.write += 3;
            return this;
          };

          /**
 * Puts a 32-bit integer in this buffer in little-endian order.
 *
 * @param i the 32-bit integer.
 *
 * @return this buffer.
 */
          util.DataBuffer.prototype.putInt32Le = function(i) {
            this.accommodate(4);
            this.data.setInt32(this.write, i, true);
            this.write += 4;
            return this;
          };

          /**
 * Puts an n-bit integer in this buffer in big-endian order.
 *
 * @param i the n-bit integer.
 * @param n the number of bits in the integer (8, 16, 24, or 32).
 *
 * @return this buffer.
 */
          util.DataBuffer.prototype.putInt = function(i, n) {
            _checkBitsParam(n);
            this.accommodate(n / 8);
            do {
              n -= 8;
              this.data.setInt8(this.write++, (i >> n) & 0xff);
            } while (n > 0);
            return this;
          };

          /**
 * Puts a signed n-bit integer in this buffer in big-endian order. Two's
 * complement representation is used.
 *
 * @param i the n-bit integer.
 * @param n the number of bits in the integer.
 *
 * @return this buffer.
 */
          util.DataBuffer.prototype.putSignedInt = function(i, n) {
            _checkBitsParam(n);
            this.accommodate(n / 8);
            if (i < 0) {
              i += 2 << (n - 1);
            }
            return this.putInt(i, n);
          };

          /**
 * Gets a byte from this buffer and advances the read pointer by 1.
 *
 * @return the byte.
 */
          util.DataBuffer.prototype.getByte = function() {
            return this.data.getInt8(this.read++);
          };

          /**
 * Gets a uint16 from this buffer in big-endian order and advances the read
 * pointer by 2.
 *
 * @return the uint16.
 */
          util.DataBuffer.prototype.getInt16 = function() {
            var rval = this.data.getInt16(this.read);
            this.read += 2;
            return rval;
          };

          /**
 * Gets a uint24 from this buffer in big-endian order and advances the read
 * pointer by 3.
 *
 * @return the uint24.
 */
          util.DataBuffer.prototype.getInt24 = function() {
            var rval =
              (this.data.getInt16(this.read) << 8) ^
              this.data.getInt8(this.read + 2);
            this.read += 3;
            return rval;
          };

          /**
 * Gets a uint32 from this buffer in big-endian order and advances the read
 * pointer by 4.
 *
 * @return the word.
 */
          util.DataBuffer.prototype.getInt32 = function() {
            var rval = this.data.getInt32(this.read);
            this.read += 4;
            return rval;
          };

          /**
 * Gets a uint16 from this buffer in little-endian order and advances the read
 * pointer by 2.
 *
 * @return the uint16.
 */
          util.DataBuffer.prototype.getInt16Le = function() {
            var rval = this.data.getInt16(this.read, true);
            this.read += 2;
            return rval;
          };

          /**
 * Gets a uint24 from this buffer in little-endian order and advances the read
 * pointer by 3.
 *
 * @return the uint24.
 */
          util.DataBuffer.prototype.getInt24Le = function() {
            var rval =
              this.data.getInt8(this.read) ^
              (this.data.getInt16(this.read + 1, true) << 8);
            this.read += 3;
            return rval;
          };

          /**
 * Gets a uint32 from this buffer in little-endian order and advances the read
 * pointer by 4.
 *
 * @return the word.
 */
          util.DataBuffer.prototype.getInt32Le = function() {
            var rval = this.data.getInt32(this.read, true);
            this.read += 4;
            return rval;
          };

          /**
 * Gets an n-bit integer from this buffer in big-endian order and advances the
 * read pointer by n/8.
 *
 * @param n the number of bits in the integer (8, 16, 24, or 32).
 *
 * @return the integer.
 */
          util.DataBuffer.prototype.getInt = function(n) {
            _checkBitsParam(n);
            var rval = 0;
            do {
              // TODO: Use (rval * 0x100) if adding support for 33 to 53 bits.
              rval = (rval << 8) + this.data.getInt8(this.read++);
              n -= 8;
            } while (n > 0);
            return rval;
          };

          /**
 * Gets a signed n-bit integer from this buffer in big-endian order, using
 * two's complement, and advances the read pointer by n/8.
 *
 * @param n the number of bits in the integer (8, 16, 24, or 32).
 *
 * @return the integer.
 */
          util.DataBuffer.prototype.getSignedInt = function(n) {
            // getInt checks n
            var x = this.getInt(n);
            var max = 2 << (n - 2);
            if (x >= max) {
              x -= max << 1;
            }
            return x;
          };

          /**
 * Reads bytes out into a UTF-8 string and clears them from the buffer.
 *
 * @param count the number of bytes to read, undefined or null for all.
 *
 * @return a UTF-8 string of bytes.
 */
          util.DataBuffer.prototype.getBytes = function(count) {
            // TODO: deprecate this method, it is poorly named and
            // this.toString('binary') replaces it
            // add a toTypedArray()/toArrayBuffer() function
            var rval;
            if (count) {
              // read count bytes
              count = Math.min(this.length(), count);
              rval = this.data.slice(this.read, this.read + count);
              this.read += count;
            } else if (count === 0) {
              rval = "";
            } else {
              // read all bytes, optimize to only copy when needed
              rval = this.read === 0 ? this.data : this.data.slice(this.read);
              this.clear();
            }
            return rval;
          };

          /**
 * Gets a UTF-8 encoded string of the bytes from this buffer without modifying
 * the read pointer.
 *
 * @param count the number of bytes to get, omit to get all.
 *
 * @return a string full of UTF-8 encoded characters.
 */
          util.DataBuffer.prototype.bytes = function(count) {
            // TODO: deprecate this method, it is poorly named, add "getString()"
            return typeof count === "undefined"
              ? this.data.slice(this.read)
              : this.data.slice(this.read, this.read + count);
          };

          /**
 * Gets a byte at the given index without modifying the read pointer.
 *
 * @param i the byte index.
 *
 * @return the byte.
 */
          util.DataBuffer.prototype.at = function(i) {
            return this.data.getUint8(this.read + i);
          };

          /**
 * Puts a byte at the given index without modifying the read pointer.
 *
 * @param i the byte index.
 * @param b the byte to put.
 *
 * @return this buffer.
 */
          util.DataBuffer.prototype.setAt = function(i, b) {
            this.data.setUint8(i, b);
            return this;
          };

          /**
 * Gets the last byte without modifying the read pointer.
 *
 * @return the last byte.
 */
          util.DataBuffer.prototype.last = function() {
            return this.data.getUint8(this.write - 1);
          };

          /**
 * Creates a copy of this buffer.
 *
 * @return the copy.
 */
          util.DataBuffer.prototype.copy = function() {
            return new util.DataBuffer(this);
          };

          /**
 * Compacts this buffer.
 *
 * @return this buffer.
 */
          util.DataBuffer.prototype.compact = function() {
            if (this.read > 0) {
              var src = new Uint8Array(this.data.buffer, this.read);
              var dst = new Uint8Array(src.byteLength);
              dst.set(src);
              this.data = new DataView(dst);
              this.write -= this.read;
              this.read = 0;
            }
            return this;
          };

          /**
 * Clears this buffer.
 *
 * @return this buffer.
 */
          util.DataBuffer.prototype.clear = function() {
            this.data = new DataView(new ArrayBuffer(0));
            this.read = this.write = 0;
            return this;
          };

          /**
 * Shortens this buffer by triming bytes off of the end of this buffer.
 *
 * @param count the number of bytes to trim off.
 *
 * @return this buffer.
 */
          util.DataBuffer.prototype.truncate = function(count) {
            this.write = Math.max(0, this.length() - count);
            this.read = Math.min(this.read, this.write);
            return this;
          };

          /**
 * Converts this buffer to a hexadecimal string.
 *
 * @return a hexadecimal string.
 */
          util.DataBuffer.prototype.toHex = function() {
            var rval = "";
            for (var i = this.read; i < this.data.byteLength; ++i) {
              var b = this.data.getUint8(i);
              if (b < 16) {
                rval += "0";
              }
              rval += b.toString(16);
            }
            return rval;
          };

          /**
 * Converts this buffer to a string, using the given encoding. If no
 * encoding is given, 'utf8' (UTF-8) is used.
 *
 * @param [encoding] the encoding to use: 'binary', 'utf8', 'utf16', 'hex',
 *          'base64' (default: 'utf8').
 *
 * @return a string representation of the bytes in this buffer.
 */
          util.DataBuffer.prototype.toString = function(encoding) {
            var view = new Uint8Array(this.data, this.read, this.length());
            encoding = encoding || "utf8";

            // encode to string
            if (encoding === "binary" || encoding === "raw") {
              return util.binary.raw.encode(view);
            }
            if (encoding === "hex") {
              return util.binary.hex.encode(view);
            }
            if (encoding === "base64") {
              return util.binary.base64.encode(view);
            }

            // decode to text
            if (encoding === "utf8") {
              return util.text.utf8.decode(view);
            }
            if (encoding === "utf16") {
              return util.text.utf16.decode(view);
            }

            throw new Error("Invalid encoding: " + encoding);
          };

          /** End Buffer w/UInt8Array backing */

          /**
 * Creates a buffer that stores bytes. A value may be given to put into the
 * buffer that is either a string of bytes or a UTF-16 string that will
 * be encoded using UTF-8 (to do the latter, specify 'utf8' as the encoding).
 *
 * @param [input] the bytes to wrap (as a string) or a UTF-16 string to encode
 *          as UTF-8.
 * @param [encoding] (default: 'raw', other: 'utf8').
 */
          util.createBuffer = function(input, encoding) {
            // TODO: deprecate, use new ByteBuffer() instead
            encoding = encoding || "raw";
            if (input !== undefined && encoding === "utf8") {
              input = util.encodeUtf8(input);
            }
            return new util.ByteBuffer(input);
          };

          /**
 * Fills a string with a particular value. If you want the string to be a byte
 * string, pass in String.fromCharCode(theByte).
 *
 * @param c the character to fill the string with, use String.fromCharCode
 *          to fill the string with a byte value.
 * @param n the number of characters of value c to fill with.
 *
 * @return the filled string.
 */
          util.fillString = function(c, n) {
            var s = "";
            while (n > 0) {
              if (n & 1) {
                s += c;
              }
              n >>>= 1;
              if (n > 0) {
                c += c;
              }
            }
            return s;
          };

          /**
 * Performs a per byte XOR between two byte strings and returns the result as a
 * string of bytes.
 *
 * @param s1 first string of bytes.
 * @param s2 second string of bytes.
 * @param n the number of bytes to XOR.
 *
 * @return the XOR'd result.
 */
          util.xorBytes = function(s1, s2, n) {
            var s3 = "";
            var b = "";
            var t = "";
            var i = 0;
            var c = 0;
            for (; n > 0; --n, ++i) {
              b = s1.charCodeAt(i) ^ s2.charCodeAt(i);
              if (c >= 10) {
                s3 += t;
                t = "";
                c = 0;
              }
              t += String.fromCharCode(b);
              ++c;
            }
            s3 += t;
            return s3;
          };

          /**
 * Converts a hex string into a 'binary' encoded string of bytes.
 *
 * @param hex the hexadecimal string to convert.
 *
 * @return the binary-encoded string of bytes.
 */
          util.hexToBytes = function(hex) {
            // TODO: deprecate: "Deprecated. Use util.binary.hex.decode instead."
            var rval = "";
            var i = 0;
            if (hex.length & (1 == 1)) {
              // odd number of characters, convert first character alone
              i = 1;
              rval += String.fromCharCode(parseInt(hex[0], 16));
            }
            // convert 2 characters (1 byte) at a time
            for (; i < hex.length; i += 2) {
              rval += String.fromCharCode(parseInt(hex.substr(i, 2), 16));
            }
            return rval;
          };

          /**
 * Converts a 'binary' encoded string of bytes to hex.
 *
 * @param bytes the byte string to convert.
 *
 * @return the string of hexadecimal characters.
 */
          util.bytesToHex = function(bytes) {
            // TODO: deprecate: "Deprecated. Use util.binary.hex.encode instead."
            return util.createBuffer(bytes).toHex();
          };

          /**
 * Converts an 32-bit integer to 4-big-endian byte string.
 *
 * @param i the integer.
 *
 * @return the byte string.
 */
          util.int32ToBytes = function(i) {
            return (
              String.fromCharCode((i >> 24) & 0xff) +
              String.fromCharCode((i >> 16) & 0xff) +
              String.fromCharCode((i >> 8) & 0xff) +
              String.fromCharCode(i & 0xff)
            );
          };

          // base64 characters, reverse mapping
          var _base64 =
            "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
          var _base64Idx = [
            /*43 -43 = 0*/
            /*'+',  1,  2,  3,'/' */
            62,
            -1,
            -1,
            -1,
            63,

            /*'0','1','2','3','4','5','6','7','8','9' */
            52,
            53,
            54,
            55,
            56,
            57,
            58,
            59,
            60,
            61,

            /*15, 16, 17,'=', 19, 20, 21 */
            -1,
            -1,
            -1,
            64,
            -1,
            -1,
            -1,

            /*65 - 43 = 22*/
            /*'A','B','C','D','E','F','G','H','I','J','K','L','M', */
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,

            /*'N','O','P','Q','R','S','T','U','V','W','X','Y','Z' */
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,

            /*91 - 43 = 48 */
            /*48, 49, 50, 51, 52, 53 */
            -1,
            -1,
            -1,
            -1,
            -1,
            -1,

            /*97 - 43 = 54*/
            /*'a','b','c','d','e','f','g','h','i','j','k','l','m' */
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            37,
            38,

            /*'n','o','p','q','r','s','t','u','v','w','x','y','z' */
            39,
            40,
            41,
            42,
            43,
            44,
            45,
            46,
            47,
            48,
            49,
            50,
            51
          ];

          /**
 * Base64 encodes a 'binary' encoded string of bytes.
 *
 * @param input the binary encoded string of bytes to base64-encode.
 * @param maxline the maximum number of encoded characters per line to use,
 *          defaults to none.
 *
 * @return the base64-encoded output.
 */
          util.encode64 = function(input, maxline) {
            // TODO: deprecate: "Deprecated. Use util.binary.base64.encode instead."
            var line = "";
            var output = "";
            var chr1, chr2, chr3;
            var i = 0;
            while (i < input.length) {
              chr1 = input.charCodeAt(i++);
              chr2 = input.charCodeAt(i++);
              chr3 = input.charCodeAt(i++);

              // encode 4 character group
              line += _base64.charAt(chr1 >> 2);
              line += _base64.charAt(((chr1 & 3) << 4) | (chr2 >> 4));
              if (isNaN(chr2)) {
                line += "==";
              } else {
                line += _base64.charAt(((chr2 & 15) << 2) | (chr3 >> 6));
                line += isNaN(chr3) ? "=" : _base64.charAt(chr3 & 63);
              }

              if (maxline && line.length > maxline) {
                output += line.substr(0, maxline) + "\r\n";
                line = line.substr(maxline);
              }
            }
            output += line;
            return output;
          };

          /**
 * Base64 decodes a string into a 'binary' encoded string of bytes.
 *
 * @param input the base64-encoded input.
 *
 * @return the binary encoded string.
 */
          util.decode64 = function(input) {
            // TODO: deprecate: "Deprecated. Use util.binary.base64.decode instead."

            // remove all non-base64 characters
            input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

            var output = "";
            var enc1, enc2, enc3, enc4;
            var i = 0;

            while (i < input.length) {
              enc1 = _base64Idx[input.charCodeAt(i++) - 43];
              enc2 = _base64Idx[input.charCodeAt(i++) - 43];
              enc3 = _base64Idx[input.charCodeAt(i++) - 43];
              enc4 = _base64Idx[input.charCodeAt(i++) - 43];

              output += String.fromCharCode((enc1 << 2) | (enc2 >> 4));
              if (enc3 !== 64) {
                // decoded at least 2 bytes
                output += String.fromCharCode(((enc2 & 15) << 4) | (enc3 >> 2));
                if (enc4 !== 64) {
                  // decoded 3 bytes
                  output += String.fromCharCode(((enc3 & 3) << 6) | enc4);
                }
              }
            }

            return output;
          };

          /**
 * UTF-8 encodes the given UTF-16 encoded string (a standard JavaScript
 * string). Non-ASCII characters will be encoded as multiple bytes according
 * to UTF-8.
 *
 * @param str the string to encode.
 *
 * @return the UTF-8 encoded string.
 */
          util.encodeUtf8 = function(str) {
            return unescape(encodeURIComponent(str));
          };

          /**
 * Decodes a UTF-8 encoded string into a UTF-16 string.
 *
 * @param str the string to decode.
 *
 * @return the UTF-16 encoded string (standard JavaScript string).
 */
          util.decodeUtf8 = function(str) {
            return decodeURIComponent(escape(str));
          };

          // binary encoding/decoding tools
          // FIXME: Experimental. Do not use yet.
          util.binary = {
            raw: {},
            hex: {},
            base64: {}
          };

          /**
 * Encodes a Uint8Array as a binary-encoded string. This encoding uses
 * a value between 0 and 255 for each character.
 *
 * @param bytes the Uint8Array to encode.
 *
 * @return the binary-encoded string.
 */
          util.binary.raw.encode = function(bytes) {
            return String.fromCharCode.apply(null, bytes);
          };

          /**
 * Decodes a binary-encoded string to a Uint8Array. This encoding uses
 * a value between 0 and 255 for each character.
 *
 * @param str the binary-encoded string to decode.
 * @param [output] an optional Uint8Array to write the output to; if it
 *          is too small, an exception will be thrown.
 * @param [offset] the start offset for writing to the output (default: 0).
 *
 * @return the Uint8Array or the number of bytes written if output was given.
 */
          util.binary.raw.decode = function(str, output, offset) {
            var out = output;
            if (!out) {
              out = new Uint8Array(str.length);
            }
            offset = offset || 0;
            var j = offset;
            for (var i = 0; i < str.length; ++i) {
              out[j++] = str.charCodeAt(i);
            }
            return output ? j - offset : out;
          };

          /**
 * Encodes a 'binary' string, ArrayBuffer, DataView, TypedArray, or
 * ByteBuffer as a string of hexadecimal characters.
 *
 * @param bytes the bytes to convert.
 *
 * @return the string of hexadecimal characters.
 */
          util.binary.hex.encode = util.bytesToHex;

          /**
 * Decodes a hex-encoded string to a Uint8Array.
 *
 * @param hex the hexadecimal string to convert.
 * @param [output] an optional Uint8Array to write the output to; if it
 *          is too small, an exception will be thrown.
 * @param [offset] the start offset for writing to the output (default: 0).
 *
 * @return the Uint8Array or the number of bytes written if output was given.
 */
          util.binary.hex.decode = function(hex, output, offset) {
            var out = output;
            if (!out) {
              out = new Uint8Array(Math.ceil(hex.length / 2));
            }
            offset = offset || 0;
            var i = 0,
              j = offset;
            if (hex.length & 1) {
              // odd number of characters, convert first character alone
              i = 1;
              out[j++] = parseInt(hex[0], 16);
            }
            // convert 2 characters (1 byte) at a time
            for (; i < hex.length; i += 2) {
              out[j++] = parseInt(hex.substr(i, 2), 16);
            }
            return output ? j - offset : out;
          };

          /**
 * Base64-encodes a Uint8Array.
 *
 * @param input the Uint8Array to encode.
 * @param maxline the maximum number of encoded characters per line to use,
 *          defaults to none.
 *
 * @return the base64-encoded output string.
 */
          util.binary.base64.encode = function(input, maxline) {
            var line = "";
            var output = "";
            var chr1, chr2, chr3;
            var i = 0;
            while (i < input.byteLength) {
              chr1 = input[i++];
              chr2 = input[i++];
              chr3 = input[i++];

              // encode 4 character group
              line += _base64.charAt(chr1 >> 2);
              line += _base64.charAt(((chr1 & 3) << 4) | (chr2 >> 4));
              if (isNaN(chr2)) {
                line += "==";
              } else {
                line += _base64.charAt(((chr2 & 15) << 2) | (chr3 >> 6));
                line += isNaN(chr3) ? "=" : _base64.charAt(chr3 & 63);
              }

              if (maxline && line.length > maxline) {
                output += line.substr(0, maxline) + "\r\n";
                line = line.substr(maxline);
              }
            }
            output += line;
            return output;
          };

          /**
 * Decodes a base64-encoded string to a Uint8Array.
 *
 * @param input the base64-encoded input string.
 * @param [output] an optional Uint8Array to write the output to; if it
 *          is too small, an exception will be thrown.
 * @param [offset] the start offset for writing to the output (default: 0).
 *
 * @return the Uint8Array or the number of bytes written if output was given.
 */
          util.binary.base64.decode = function(input, output, offset) {
            var out = output;
            if (!out) {
              out = new Uint8Array(Math.ceil(input.length / 4) * 3);
            }

            // remove all non-base64 characters
            input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

            offset = offset || 0;
            var enc1, enc2, enc3, enc4;
            var i = 0,
              j = offset;

            while (i < input.length) {
              enc1 = _base64Idx[input.charCodeAt(i++) - 43];
              enc2 = _base64Idx[input.charCodeAt(i++) - 43];
              enc3 = _base64Idx[input.charCodeAt(i++) - 43];
              enc4 = _base64Idx[input.charCodeAt(i++) - 43];

              out[j++] = (enc1 << 2) | (enc2 >> 4);
              if (enc3 !== 64) {
                // decoded at least 2 bytes
                out[j++] = ((enc2 & 15) << 4) | (enc3 >> 2);
                if (enc4 !== 64) {
                  // decoded 3 bytes
                  out[j++] = ((enc3 & 3) << 6) | enc4;
                }
              }
            }

            // make sure result is the exact decoded length
            return output ? j - offset : out.subarray(0, j);
          };

          // text encoding/decoding tools
          // FIXME: Experimental. Do not use yet.
          util.text = {
            utf8: {},
            utf16: {}
          };

          /**
 * Encodes the given string as UTF-8 in a Uint8Array.
 *
 * @param str the string to encode.
 * @param [output] an optional Uint8Array to write the output to; if it
 *          is too small, an exception will be thrown.
 * @param [offset] the start offset for writing to the output (default: 0).
 *
 * @return the Uint8Array or the number of bytes written if output was given.
 */
          util.text.utf8.encode = function(str, output, offset) {
            str = util.encodeUtf8(str);
            var out = output;
            if (!out) {
              out = new Uint8Array(str.length);
            }
            offset = offset || 0;
            var j = offset;
            for (var i = 0; i < str.length; ++i) {
              out[j++] = str.charCodeAt(i);
            }
            return output ? j - offset : out;
          };

          /**
 * Decodes the UTF-8 contents from a Uint8Array.
 *
 * @param bytes the Uint8Array to decode.
 *
 * @return the resulting string.
 */
          util.text.utf8.decode = function(bytes) {
            return util.decodeUtf8(String.fromCharCode.apply(null, bytes));
          };

          /**
 * Encodes the given string as UTF-16 in a Uint8Array.
 *
 * @param str the string to encode.
 * @param [output] an optional Uint8Array to write the output to; if it
 *          is too small, an exception will be thrown.
 * @param [offset] the start offset for writing to the output (default: 0).
 *
 * @return the Uint8Array or the number of bytes written if output was given.
 */
          util.text.utf16.encode = function(str, output, offset) {
            var out = output;
            if (!out) {
              out = new Uint8Array(str.length * 2);
            }
            var view = new Uint16Array(out.buffer);
            offset = offset || 0;
            var j = offset;
            var k = offset;
            for (var i = 0; i < str.length; ++i) {
              view[k++] = str.charCodeAt(i);
              j += 2;
            }
            return output ? j - offset : out;
          };

          /**
 * Decodes the UTF-16 contents from a Uint8Array.
 *
 * @param bytes the Uint8Array to decode.
 *
 * @return the resulting string.
 */
          util.text.utf16.decode = function(bytes) {
            return String.fromCharCode.apply(
              null,
              new Uint16Array(bytes.buffer)
            );
          };

          /**
 * Deflates the given data using a flash interface.
 *
 * @param api the flash interface.
 * @param bytes the data.
 * @param raw true to return only raw deflate data, false to include zlib
 *          header and trailer.
 *
 * @return the deflated data as a string.
 */
          util.deflate = function(api, bytes, raw) {
            bytes = util.decode64(api.deflate(util.encode64(bytes)).rval);

            // strip zlib header and trailer if necessary
            if (raw) {
              // zlib header is 2 bytes (CMF,FLG) where FLG indicates that
              // there is a 4-byte DICT (alder-32) block before the data if
              // its 5th bit is set
              var start = 2;
              var flg = bytes.charCodeAt(1);
              if (flg & 0x20) {
                start = 6;
              }
              // zlib trailer is 4 bytes of adler-32
              bytes = bytes.substring(start, bytes.length - 4);
            }

            return bytes;
          };

          /**
 * Inflates the given data using a flash interface.
 *
 * @param api the flash interface.
 * @param bytes the data.
 * @param raw true if the incoming data has no zlib header or trailer and is
 *          raw DEFLATE data.
 *
 * @return the inflated data as a string, null on error.
 */
          util.inflate = function(api, bytes, raw) {
            // TODO: add zlib header and trailer if necessary/possible
            var rval = api.inflate(util.encode64(bytes)).rval;
            return rval === null ? null : util.decode64(rval);
          };

          /**
 * Sets a storage object.
 *
 * @param api the storage interface.
 * @param id the storage ID to use.
 * @param obj the storage object, null to remove.
 */
          var _setStorageObject = function(api, id, obj) {
            if (!api) {
              throw new Error("WebStorage not available.");
            }

            var rval;
            if (obj === null) {
              rval = api.removeItem(id);
            } else {
              // json-encode and base64-encode object
              obj = util.encode64(JSON.stringify(obj));
              rval = api.setItem(id, obj);
            }

            // handle potential flash error
            if (typeof rval !== "undefined" && rval.rval !== true) {
              var error = new Error(rval.error.message);
              error.id = rval.error.id;
              error.name = rval.error.name;
              throw error;
            }
          };

          /**
 * Gets a storage object.
 *
 * @param api the storage interface.
 * @param id the storage ID to use.
 *
 * @return the storage object entry or null if none exists.
 */
          var _getStorageObject = function(api, id) {
            if (!api) {
              throw new Error("WebStorage not available.");
            }

            // get the existing entry
            var rval = api.getItem(id);

            /* Note: We check api.init because we can't do (api == localStorage)
    on IE because of "Class doesn't support Automation" exception. Only
    the flash api has an init method so this works too, but we need a
    better solution in the future. */

            // flash returns item wrapped in an object, handle special case
            if (api.init) {
              if (rval.rval === null) {
                if (rval.error) {
                  var error = new Error(rval.error.message);
                  error.id = rval.error.id;
                  error.name = rval.error.name;
                  throw error;
                }
                // no error, but also no item
                rval = null;
              } else {
                rval = rval.rval;
              }
            }

            // handle decoding
            if (rval !== null) {
              // base64-decode and json-decode data
              rval = JSON.parse(util.decode64(rval));
            }

            return rval;
          };

          /**
 * Stores an item in local storage.
 *
 * @param api the storage interface.
 * @param id the storage ID to use.
 * @param key the key for the item.
 * @param data the data for the item (any javascript object/primitive).
 */
          var _setItem = function(api, id, key, data) {
            // get storage object
            var obj = _getStorageObject(api, id);
            if (obj === null) {
              // create a new storage object
              obj = {};
            }
            // update key
            obj[key] = data;

            // set storage object
            _setStorageObject(api, id, obj);
          };

          /**
 * Gets an item from local storage.
 *
 * @param api the storage interface.
 * @param id the storage ID to use.
 * @param key the key for the item.
 *
 * @return the item.
 */
          var _getItem = function(api, id, key) {
            // get storage object
            var rval = _getStorageObject(api, id);
            if (rval !== null) {
              // return data at key
              rval = key in rval ? rval[key] : null;
            }

            return rval;
          };

          /**
 * Removes an item from local storage.
 *
 * @param api the storage interface.
 * @param id the storage ID to use.
 * @param key the key for the item.
 */
          var _removeItem = function(api, id, key) {
            // get storage object
            var obj = _getStorageObject(api, id);
            if (obj !== null && key in obj) {
              // remove key
              delete obj[key];

              // see if entry has no keys remaining
              var empty = true;
              for (var prop in obj) {
                empty = false;
                break;
              }
              if (empty) {
                // remove entry entirely if no keys are left
                obj = null;
              }

              // set storage object
              _setStorageObject(api, id, obj);
            }
          };

          /**
 * Clears the local disk storage identified by the given ID.
 *
 * @param api the storage interface.
 * @param id the storage ID to use.
 */
          var _clearItems = function(api, id) {
            _setStorageObject(api, id, null);
          };

          /**
 * Calls a storage function.
 *
 * @param func the function to call.
 * @param args the arguments for the function.
 * @param location the location argument.
 *
 * @return the return value from the function.
 */
          var _callStorageFunction = function(func, args, location) {
            var rval = null;

            // default storage types
            if (typeof location === "undefined") {
              location = ["web", "flash"];
            }

            // apply storage types in order of preference
            var type;
            var done = false;
            var exception = null;
            for (var idx in location) {
              type = location[idx];
              try {
                if (type === "flash" || type === "both") {
                  if (args[0] === null) {
                    throw new Error("Flash local storage not available.");
                  }
                  rval = func.apply(this, args);
                  done = type === "flash";
                }
                if (type === "web" || type === "both") {
                  args[0] = localStorage;
                  rval = func.apply(this, args);
                  done = true;
                }
              } catch (ex) {
                exception = ex;
              }
              if (done) {
                break;
              }
            }

            if (!done) {
              throw exception;
            }

            return rval;
          };

          /**
 * Stores an item on local disk.
 *
 * The available types of local storage include 'flash', 'web', and 'both'.
 *
 * The type 'flash' refers to flash local storage (SharedObject). In order
 * to use flash local storage, the 'api' parameter must be valid. The type
 * 'web' refers to WebStorage, if supported by the browser. The type 'both'
 * refers to storing using both 'flash' and 'web', not just one or the
 * other.
 *
 * The location array should list the storage types to use in order of
 * preference:
 *
 * ['flash']: flash only storage
 * ['web']: web only storage
 * ['both']: try to store in both
 * ['flash','web']: store in flash first, but if not available, 'web'
 * ['web','flash']: store in web first, but if not available, 'flash'
 *
 * The location array defaults to: ['web', 'flash']
 *
 * @param api the flash interface, null to use only WebStorage.
 * @param id the storage ID to use.
 * @param key the key for the item.
 * @param data the data for the item (any javascript object/primitive).
 * @param location an array with the preferred types of storage to use.
 */
          util.setItem = function(api, id, key, data, location) {
            _callStorageFunction(_setItem, arguments, location);
          };

          /**
 * Gets an item on local disk.
 *
 * Set setItem() for details on storage types.
 *
 * @param api the flash interface, null to use only WebStorage.
 * @param id the storage ID to use.
 * @param key the key for the item.
 * @param location an array with the preferred types of storage to use.
 *
 * @return the item.
 */
          util.getItem = function(api, id, key, location) {
            return _callStorageFunction(_getItem, arguments, location);
          };

          /**
 * Removes an item on local disk.
 *
 * Set setItem() for details on storage types.
 *
 * @param api the flash interface.
 * @param id the storage ID to use.
 * @param key the key for the item.
 * @param location an array with the preferred types of storage to use.
 */
          util.removeItem = function(api, id, key, location) {
            _callStorageFunction(_removeItem, arguments, location);
          };

          /**
 * Clears the local disk storage identified by the given ID.
 *
 * Set setItem() for details on storage types.
 *
 * @param api the flash interface if flash is available.
 * @param id the storage ID to use.
 * @param location an array with the preferred types of storage to use.
 */
          util.clearItems = function(api, id, location) {
            _callStorageFunction(_clearItems, arguments, location);
          };

          /**
 * Parses the scheme, host, and port from an http(s) url.
 *
 * @param str the url string.
 *
 * @return the parsed url object or null if the url is invalid.
 */
          util.parseUrl = function(str) {
            // FIXME: this regex looks a bit broken
            var regex = /^(https?):\/\/([^:&^\/]*):?(\d*)(.*)$/g;
            regex.lastIndex = 0;
            var m = regex.exec(str);
            var url =
              m === null
                ? null
                : {
                    full: str,
                    scheme: m[1],
                    host: m[2],
                    port: m[3],
                    path: m[4]
                  };
            if (url) {
              url.fullHost = url.host;
              if (url.port) {
                if (url.port !== 80 && url.scheme === "http") {
                  url.fullHost += ":" + url.port;
                } else if (url.port !== 443 && url.scheme === "https") {
                  url.fullHost += ":" + url.port;
                }
              } else if (url.scheme === "http") {
                url.port = 80;
              } else if (url.scheme === "https") {
                url.port = 443;
              }
              url.full = url.scheme + "://" + url.fullHost;
            }
            return url;
          };

          /* Storage for query variables */
          var _queryVariables = null;

          /**
 * Returns the window location query variables. Query is parsed on the first
 * call and the same object is returned on subsequent calls. The mapping
 * is from keys to an array of values. Parameters without values will have
 * an object key set but no value added to the value array. Values are
 * unescaped.
 *
 * ...?k1=v1&k2=v2:
 * {
 *   "k1": ["v1"],
 *   "k2": ["v2"]
 * }
 *
 * ...?k1=v1&k1=v2:
 * {
 *   "k1": ["v1", "v2"]
 * }
 *
 * ...?k1=v1&k2:
 * {
 *   "k1": ["v1"],
 *   "k2": []
 * }
 *
 * ...?k1=v1&k1:
 * {
 *   "k1": ["v1"]
 * }
 *
 * ...?k1&k1:
 * {
 *   "k1": []
 * }
 *
 * @param query the query string to parse (optional, default to cached
 *          results from parsing window location search query).
 *
 * @return object mapping keys to variables.
 */
          util.getQueryVariables = function(query) {
            var parse = function(q) {
              var rval = {};
              var kvpairs = q.split("&");
              for (var i = 0; i < kvpairs.length; i++) {
                var pos = kvpairs[i].indexOf("=");
                var key;
                var val;
                if (pos > 0) {
                  key = kvpairs[i].substring(0, pos);
                  val = kvpairs[i].substring(pos + 1);
                } else {
                  key = kvpairs[i];
                  val = null;
                }
                if (!(key in rval)) {
                  rval[key] = [];
                }
                // disallow overriding object prototype keys
                if (!(key in Object.prototype) && val !== null) {
                  rval[key].push(unescape(val));
                }
              }
              return rval;
            };

            var rval;
            if (typeof query === "undefined") {
              // set cached variables if needed
              if (_queryVariables === null) {
                if (
                  typeof window !== "undefined" &&
                  window.location &&
                  window.location.search
                ) {
                  // parse window search query
                  _queryVariables = parse(window.location.search.substring(1));
                } else {
                  // no query variables available
                  _queryVariables = {};
                }
              }
              rval = _queryVariables;
            } else {
              // parse given query
              rval = parse(query);
            }
            return rval;
          };

          /**
 * Parses a fragment into a path and query. This method will take a URI
 * fragment and break it up as if it were the main URI. For example:
 *    /bar/baz?a=1&b=2
 * results in:
 *    {
 *       path: ["bar", "baz"],
 *       query: {"k1": ["v1"], "k2": ["v2"]}
 *    }
 *
 * @return object with a path array and query object.
 */
          util.parseFragment = function(fragment) {
            // default to whole fragment
            var fp = fragment;
            var fq = "";
            // split into path and query if possible at the first '?'
            var pos = fragment.indexOf("?");
            if (pos > 0) {
              fp = fragment.substring(0, pos);
              fq = fragment.substring(pos + 1);
            }
            // split path based on '/' and ignore first element if empty
            var path = fp.split("/");
            if (path.length > 0 && path[0] === "") {
              path.shift();
            }
            // convert query into object
            var query = fq === "" ? {} : util.getQueryVariables(fq);

            return {
              pathString: fp,
              queryString: fq,
              path: path,
              query: query
            };
          };

          /**
 * Makes a request out of a URI-like request string. This is intended to
 * be used where a fragment id (after a URI '#') is parsed as a URI with
 * path and query parts. The string should have a path beginning and
 * delimited by '/' and optional query parameters following a '?'. The
 * query should be a standard URL set of key value pairs delimited by
 * '&'. For backwards compatibility the initial '/' on the path is not
 * required. The request object has the following API, (fully described
 * in the method code):
 *    {
 *       path: <the path string part>.
 *       query: <the query string part>,
 *       getPath(i): get part or all of the split path array,
 *       getQuery(k, i): get part or all of a query key array,
 *       getQueryLast(k, _default): get last element of a query key array.
 *    }
 *
 * @return object with request parameters.
 */
          util.makeRequest = function(reqString) {
            var frag = util.parseFragment(reqString);
            var req = {
              // full path string
              path: frag.pathString,
              // full query string
              query: frag.queryString,
              /**
     * Get path or element in path.
     *
     * @param i optional path index.
     *
     * @return path or part of path if i provided.
     */
              getPath: function(i) {
                return typeof i === "undefined" ? frag.path : frag.path[i];
              },
              /**
     * Get query, values for a key, or value for a key index.
     *
     * @param k optional query key.
     * @param i optional query key index.
     *
     * @return query, values for a key, or value for a key index.
     */
              getQuery: function(k, i) {
                var rval;
                if (typeof k === "undefined") {
                  rval = frag.query;
                } else {
                  rval = frag.query[k];
                  if (rval && typeof i !== "undefined") {
                    rval = rval[i];
                  }
                }
                return rval;
              },
              getQueryLast: function(k, _default) {
                var rval;
                var vals = req.getQuery(k);
                if (vals) {
                  rval = vals[vals.length - 1];
                } else {
                  rval = _default;
                }
                return rval;
              }
            };
            return req;
          };

          /**
 * Makes a URI out of a path, an object with query parameters, and a
 * fragment. Uses jQuery.param() internally for query string creation.
 * If the path is an array, it will be joined with '/'.
 *
 * @param path string path or array of strings.
 * @param query object with query parameters. (optional)
 * @param fragment fragment string. (optional)
 *
 * @return string object with request parameters.
 */
          util.makeLink = function(path, query, fragment) {
            // join path parts if needed
            path = jQuery.isArray(path) ? path.join("/") : path;

            var qstr = jQuery.param(query || {});
            fragment = fragment || "";
            return (
              path +
              (qstr.length > 0 ? "?" + qstr : "") +
              (fragment.length > 0 ? "#" + fragment : "")
            );
          };

          /**
 * Follows a path of keys deep into an object hierarchy and set a value.
 * If a key does not exist or it's value is not an object, create an
 * object in it's place. This can be destructive to a object tree if
 * leaf nodes are given as non-final path keys.
 * Used to avoid exceptions from missing parts of the path.
 *
 * @param object the starting object.
 * @param keys an array of string keys.
 * @param value the value to set.
 */
          util.setPath = function(object, keys, value) {
            // need to start at an object
            if (typeof object === "object" && object !== null) {
              var i = 0;
              var len = keys.length;
              while (i < len) {
                var next = keys[i++];
                if (i == len) {
                  // last
                  object[next] = value;
                } else {
                  // more
                  var hasNext = next in object;
                  if (
                    !hasNext ||
                    (hasNext && typeof object[next] !== "object") ||
                    (hasNext && object[next] === null)
                  ) {
                    object[next] = {};
                  }
                  object = object[next];
                }
              }
            }
          };

          /**
 * Follows a path of keys deep into an object hierarchy and return a value.
 * If a key does not exist, create an object in it's place.
 * Used to avoid exceptions from missing parts of the path.
 *
 * @param object the starting object.
 * @param keys an array of string keys.
 * @param _default value to return if path not found.
 *
 * @return the value at the path if found, else default if given, else
 *         undefined.
 */
          util.getPath = function(object, keys, _default) {
            var i = 0;
            var len = keys.length;
            var hasNext = true;
            while (
              hasNext &&
              i < len &&
              typeof object === "object" &&
              object !== null
            ) {
              var next = keys[i++];
              hasNext = next in object;
              if (hasNext) {
                object = object[next];
              }
            }
            return hasNext ? object : _default;
          };

          /**
 * Follow a path of keys deep into an object hierarchy and delete the
 * last one. If a key does not exist, do nothing.
 * Used to avoid exceptions from missing parts of the path.
 *
 * @param object the starting object.
 * @param keys an array of string keys.
 */
          util.deletePath = function(object, keys) {
            // need to start at an object
            if (typeof object === "object" && object !== null) {
              var i = 0;
              var len = keys.length;
              while (i < len) {
                var next = keys[i++];
                if (i == len) {
                  // last
                  delete object[next];
                } else {
                  // more
                  if (
                    !(next in object) ||
                    typeof object[next] !== "object" ||
                    object[next] === null
                  ) {
                    break;
                  }
                  object = object[next];
                }
              }
            }
          };

          /**
 * Check if an object is empty.
 *
 * Taken from:
 * http://stackoverflow.com/questions/679915/how-do-i-test-for-an-empty-javascript-object-from-json/679937#679937
 *
 * @param object the object to check.
 */
          util.isEmpty = function(obj) {
            for (var prop in obj) {
              if (obj.hasOwnProperty(prop)) {
                return false;
              }
            }
            return true;
          };

          /**
 * Format with simple printf-style interpolation.
 *
 * %%: literal '%'
 * %s,%o: convert next argument into a string.
 *
 * @param format the string to format.
 * @param ... arguments to interpolate into the format string.
 */
          util.format = function(format) {
            var re = /%./g;
            // current match
            var match;
            // current part
            var part;
            // current arg index
            var argi = 0;
            // collected parts to recombine later
            var parts = [];
            // last index found
            var last = 0;
            // loop while matches remain
            while ((match = re.exec(format))) {
              part = format.substring(last, re.lastIndex - 2);
              // don't add empty strings (ie, parts between %s%s)
              if (part.length > 0) {
                parts.push(part);
              }
              last = re.lastIndex;
              // switch on % code
              var code = match[0][1];
              switch (code) {
                case "s":
                case "o":
                  // check if enough arguments were given
                  if (argi < arguments.length) {
                    parts.push(arguments[argi++ + 1]);
                  } else {
                    parts.push("<?>");
                  }
                  break;
                // FIXME: do proper formating for numbers, etc
                //case 'f':
                //case 'd':
                case "%":
                  parts.push("%");
                  break;
                default:
                  parts.push("<%" + code + "?>");
              }
            }
            // add trailing part of format string
            parts.push(format.substring(last));
            return parts.join("");
          };

          /**
 * Formats a number.
 *
 * http://snipplr.com/view/5945/javascript-numberformat--ported-from-php/
 */
          util.formatNumber = function(
            number,
            decimals,
            dec_point,
            thousands_sep
          ) {
            // http://kevin.vanzonneveld.net
            // +   original by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)
            // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
            // +     bugfix by: Michael White (http://crestidg.com)
            // +     bugfix by: Benjamin Lupton
            // +     bugfix by: Allan Jensen (http://www.winternet.no)
            // +    revised by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)
            // *     example 1: number_format(1234.5678, 2, '.', '');
            // *     returns 1: 1234.57

            var n = number,
              c = isNaN((decimals = Math.abs(decimals))) ? 2 : decimals;
            var d = dec_point === undefined ? "," : dec_point;
            var t = thousands_sep === undefined ? "." : thousands_sep,
              s = n < 0 ? "-" : "";
            var i = parseInt((n = Math.abs(+n || 0).toFixed(c)), 10) + "";
            var j = i.length > 3 ? i.length % 3 : 0;
            return (
              s +
              (j ? i.substr(0, j) + t : "") +
              i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + t) +
              (c ? d + Math.abs(n - i).toFixed(c).slice(2) : "")
            );
          };

          /**
 * Formats a byte size.
 *
 * http://snipplr.com/view/5949/format-humanize-file-byte-size-presentation-in-javascript/
 */
          util.formatSize = function(size) {
            if (size >= 1073741824) {
              size = util.formatNumber(size / 1073741824, 2, ".", "") + " GiB";
            } else if (size >= 1048576) {
              size = util.formatNumber(size / 1048576, 2, ".", "") + " MiB";
            } else if (size >= 1024) {
              size = util.formatNumber(size / 1024, 0) + " KiB";
            } else {
              size = util.formatNumber(size, 0) + " bytes";
            }
            return size;
          };

          /**
 * Converts an IPv4 or IPv6 string representation into bytes (in network order).
 *
 * @param ip the IPv4 or IPv6 address to convert.
 *
 * @return the 4-byte IPv6 or 16-byte IPv6 address or null if the address can't
 *         be parsed.
 */
          util.bytesFromIP = function(ip) {
            if (ip.indexOf(".") !== -1) {
              return util.bytesFromIPv4(ip);
            }
            if (ip.indexOf(":") !== -1) {
              return util.bytesFromIPv6(ip);
            }
            return null;
          };

          /**
 * Converts an IPv4 string representation into bytes (in network order).
 *
 * @param ip the IPv4 address to convert.
 *
 * @return the 4-byte address or null if the address can't be parsed.
 */
          util.bytesFromIPv4 = function(ip) {
            ip = ip.split(".");
            if (ip.length !== 4) {
              return null;
            }
            var b = util.createBuffer();
            for (var i = 0; i < ip.length; ++i) {
              var num = parseInt(ip[i], 10);
              if (isNaN(num)) {
                return null;
              }
              b.putByte(num);
            }
            return b.getBytes();
          };

          /**
 * Converts an IPv6 string representation into bytes (in network order).
 *
 * @param ip the IPv6 address to convert.
 *
 * @return the 16-byte address or null if the address can't be parsed.
 */
          util.bytesFromIPv6 = function(ip) {
            var blanks = 0;
            ip = ip.split(":").filter(function(e) {
              if (e.length === 0) ++blanks;
              return true;
            });
            var zeros = (8 - ip.length + blanks) * 2;
            var b = util.createBuffer();
            for (var i = 0; i < 8; ++i) {
              if (!ip[i] || ip[i].length === 0) {
                b.fillWithByte(0, zeros);
                zeros = 0;
                continue;
              }
              var bytes = util.hexToBytes(ip[i]);
              if (bytes.length < 2) {
                b.putByte(0);
              }
              b.putBytes(bytes);
            }
            return b.getBytes();
          };

          /**
 * Converts 4-bytes into an IPv4 string representation or 16-bytes into
 * an IPv6 string representation. The bytes must be in network order.
 *
 * @param bytes the bytes to convert.
 *
 * @return the IPv4 or IPv6 string representation if 4 or 16 bytes,
 *         respectively, are given, otherwise null.
 */
          util.bytesToIP = function(bytes) {
            if (bytes.length === 4) {
              return util.bytesToIPv4(bytes);
            }
            if (bytes.length === 16) {
              return util.bytesToIPv6(bytes);
            }
            return null;
          };

          /**
 * Converts 4-bytes into an IPv4 string representation. The bytes must be
 * in network order.
 *
 * @param bytes the bytes to convert.
 *
 * @return the IPv4 string representation or null for an invalid # of bytes.
 */
          util.bytesToIPv4 = function(bytes) {
            if (bytes.length !== 4) {
              return null;
            }
            var ip = [];
            for (var i = 0; i < bytes.length; ++i) {
              ip.push(bytes.charCodeAt(i));
            }
            return ip.join(".");
          };

          /**
 * Converts 16-bytes into an IPv16 string representation. The bytes must be
 * in network order.
 *
 * @param bytes the bytes to convert.
 *
 * @return the IPv16 string representation or null for an invalid # of bytes.
 */
          util.bytesToIPv6 = function(bytes) {
            if (bytes.length !== 16) {
              return null;
            }
            var ip = [];
            var zeroGroups = [];
            var zeroMaxGroup = 0;
            for (var i = 0; i < bytes.length; i += 2) {
              var hex = util.bytesToHex(bytes[i] + bytes[i + 1]);
              // canonicalize zero representation
              while (hex[0] === "0" && hex !== "0") {
                hex = hex.substr(1);
              }
              if (hex === "0") {
                var last = zeroGroups[zeroGroups.length - 1];
                var idx = ip.length;
                if (!last || idx !== last.end + 1) {
                  zeroGroups.push({ start: idx, end: idx });
                } else {
                  last.end = idx;
                  if (
                    last.end - last.start >
                    zeroGroups[zeroMaxGroup].end -
                      zeroGroups[zeroMaxGroup].start
                  ) {
                    zeroMaxGroup = zeroGroups.length - 1;
                  }
                }
              }
              ip.push(hex);
            }
            if (zeroGroups.length > 0) {
              var group = zeroGroups[zeroMaxGroup];
              // only shorten group of length > 0
              if (group.end - group.start > 0) {
                ip.splice(group.start, group.end - group.start + 1, "");
                if (group.start === 0) {
                  ip.unshift("");
                }
                if (group.end === 7) {
                  ip.push("");
                }
              }
            }
            return ip.join(":");
          };

          /**
 * Estimates the number of processes that can be run concurrently. If
 * creating Web Workers, keep in mind that the main JavaScript process needs
 * its own core.
 *
 * @param options the options to use:
 *          update true to force an update (not use the cached value).
 * @param callback(err, max) called once the operation completes.
 */
          util.estimateCores = function(options, callback) {
            if (typeof options === "function") {
              callback = options;
              options = {};
            }
            options = options || {};
            if ("cores" in util && !options.update) {
              return callback(null, util.cores);
            }
            if (
              typeof navigator !== "undefined" &&
              "hardwareConcurrency" in navigator &&
              navigator.hardwareConcurrency > 0
            ) {
              util.cores = navigator.hardwareConcurrency;
              return callback(null, util.cores);
            }
            if (typeof Worker === "undefined") {
              // workers not available
              util.cores = 1;
              return callback(null, util.cores);
            }
            if (typeof Blob === "undefined") {
              // can't estimate, default to 2
              util.cores = 2;
              return callback(null, util.cores);
            }

            // create worker concurrency estimation code as blob
            var blobUrl = URL.createObjectURL(
              new Blob(
                [
                  "(",
                  function() {
                    self.addEventListener("message", function(e) {
                      // run worker for 4 ms
                      var st = Date.now();
                      var et = st + 4;
                      while (Date.now() < et);
                      self.postMessage({ st: st, et: et });
                    });
                  }.toString(),
                  ")()"
                ],
                { type: "application/javascript" }
              )
            );

            // take 5 samples using 16 workers
            sample([], 5, 16);

            function sample(max, samples, numWorkers) {
              if (samples === 0) {
                // get overlap average
                var avg = Math.floor(
                  max.reduce(function(avg, x) {
                    return avg + x;
                  }, 0) / max.length
                );
                util.cores = Math.max(1, avg);
                URL.revokeObjectURL(blobUrl);
                return callback(null, util.cores);
              }
              map(numWorkers, function(err, results) {
                max.push(reduce(numWorkers, results));
                sample(max, samples - 1, numWorkers);
              });
            }

            function map(numWorkers, callback) {
              var workers = [];
              var results = [];
              for (var i = 0; i < numWorkers; ++i) {
                var worker = new Worker(blobUrl);
                worker.addEventListener("message", function(e) {
                  results.push(e.data);
                  if (results.length === numWorkers) {
                    for (var i = 0; i < numWorkers; ++i) {
                      workers[i].terminate();
                    }
                    callback(null, results);
                  }
                });
                workers.push(worker);
              }
              for (var i = 0; i < numWorkers; ++i) {
                workers[i].postMessage(i);
              }
            }

            function reduce(numWorkers, results) {
              // find overlapping time windows
              var overlaps = [];
              for (var n = 0; n < numWorkers; ++n) {
                var r1 = results[n];
                var overlap = (overlaps[n] = []);
                for (var i = 0; i < numWorkers; ++i) {
                  if (n === i) {
                    continue;
                  }
                  var r2 = results[i];
                  if (
                    (r1.st > r2.st && r1.st < r2.et) ||
                    (r2.st > r1.st && r2.st < r1.et)
                  ) {
                    overlap.push(i);
                  }
                }
              }
              // get maximum overlaps ... don't include overlapping worker itself
              // as the main JS process was also being scheduled during the work and
              // would have to be subtracted from the estimate anyway
              return overlaps.reduce(function(max, overlap) {
                return Math.max(max, overlap.length);
              }, 0);
            }
          };

          /* WEBPACK VAR INJECTION */
        }.call(
          exports,
          __webpack_require__(6),
          __webpack_require__(63).setImmediate
        ));

        /***/
      },
      /* 4 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(module) {
          (function(module, exports) {
            "use strict";

            // Utils
            function assert(val, msg) {
              if (!val) throw new Error(msg || "Assertion failed");
            }

            // Could use `inherits` module, but don't want to move from single file
            // architecture yet.
            function inherits(ctor, superCtor) {
              ctor.super_ = superCtor;
              var TempCtor = function() {};
              TempCtor.prototype = superCtor.prototype;
              ctor.prototype = new TempCtor();
              ctor.prototype.constructor = ctor;
            }

            // BN

            function BN(number, base, endian) {
              if (BN.isBN(number)) {
                return number;
              }

              this.negative = 0;
              this.words = null;
              this.length = 0;

              // Reduction context
              this.red = null;

              if (number !== null) {
                if (base === "le" || base === "be") {
                  endian = base;
                  base = 10;
                }

                this._init(number || 0, base || 10, endian || "be");
              }
            }
            if (typeof module === "object") {
              module.exports = BN;
            } else {
              exports.BN = BN;
            }

            BN.BN = BN;
            BN.wordSize = 26;

            var Buffer;
            try {
              // Obfuscate that we require Buffer, to reduce size
              Buffer = __webpack_require__(0).Buffer;
            } catch (e) {}

            BN.isBN = function isBN(num) {
              if (num instanceof BN) {
                return true;
              }

              return (
                num !== null &&
                typeof num === "object" &&
                num.constructor.wordSize === BN.wordSize &&
                Array.isArray(num.words)
              );
            };

            BN.max = function max(left, right) {
              if (left.cmp(right) > 0) return left;
              return right;
            };

            BN.min = function min(left, right) {
              if (left.cmp(right) < 0) return left;
              return right;
            };

            BN.prototype._init = function init(number, base, endian) {
              if (typeof number === "number") {
                return this._initNumber(number, base, endian);
              }

              if (typeof number === "object") {
                return this._initArray(number, base, endian);
              }

              if (base === "hex") {
                base = 16;
              }
              assert(base === (base | 0) && base >= 2 && base <= 36);

              number = number.toString().replace(/\s+/g, "");
              var start = 0;
              if (number[0] === "-") {
                start++;
              }

              if (base === 16) {
                this._parseHex(number, start);
              } else {
                this._parseBase(number, base, start);
              }

              if (number[0] === "-") {
                this.negative = 1;
              }

              this.strip();

              if (endian !== "le") return;

              this._initArray(this.toArray(), base, endian);
            };

            BN.prototype._initNumber = function _initNumber(
              number,
              base,
              endian
            ) {
              if (number < 0) {
                this.negative = 1;
                number = -number;
              }
              if (number < 0x4000000) {
                this.words = [number & 0x3ffffff];
                this.length = 1;
              } else if (number < 0x10000000000000) {
                this.words = [
                  number & 0x3ffffff,
                  (number / 0x4000000) & 0x3ffffff
                ];
                this.length = 2;
              } else {
                assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
                this.words = [
                  number & 0x3ffffff,
                  (number / 0x4000000) & 0x3ffffff,
                  1
                ];
                this.length = 3;
              }

              if (endian !== "le") return;

              // Reverse the bytes
              this._initArray(this.toArray(), base, endian);
            };

            BN.prototype._initArray = function _initArray(
              number,
              base,
              endian
            ) {
              // Perhaps a Uint8Array
              assert(typeof number.length === "number");
              if (number.length <= 0) {
                this.words = [0];
                this.length = 1;
                return this;
              }

              this.length = Math.ceil(number.length / 3);
              this.words = new Array(this.length);
              for (var i = 0; i < this.length; i++) {
                this.words[i] = 0;
              }

              var j, w;
              var off = 0;
              if (endian === "be") {
                for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
                  w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
                  this.words[j] |= (w << off) & 0x3ffffff;
                  this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
                  off += 24;
                  if (off >= 26) {
                    off -= 26;
                    j++;
                  }
                }
              } else if (endian === "le") {
                for (i = 0, j = 0; i < number.length; i += 3) {
                  w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
                  this.words[j] |= (w << off) & 0x3ffffff;
                  this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
                  off += 24;
                  if (off >= 26) {
                    off -= 26;
                    j++;
                  }
                }
              }
              return this.strip();
            };

            function parseHex(str, start, end) {
              var r = 0;
              var len = Math.min(str.length, end);
              for (var i = start; i < len; i++) {
                var c = str.charCodeAt(i) - 48;

                r <<= 4;

                // 'a' - 'f'
                if (c >= 49 && c <= 54) {
                  r |= c - 49 + 0xa;

                  // 'A' - 'F'
                } else if (c >= 17 && c <= 22) {
                  r |= c - 17 + 0xa;

                  // '0' - '9'
                } else {
                  r |= c & 0xf;
                }
              }
              return r;
            }

            BN.prototype._parseHex = function _parseHex(number, start) {
              // Create possibly bigger array to ensure that it fits the number
              this.length = Math.ceil((number.length - start) / 6);
              this.words = new Array(this.length);
              for (var i = 0; i < this.length; i++) {
                this.words[i] = 0;
              }

              var j, w;
              // Scan 24-bit chunks and add them to the number
              var off = 0;
              for (i = number.length - 6, j = 0; i >= start; i -= 6) {
                w = parseHex(number, i, i + 6);
                this.words[j] |= (w << off) & 0x3ffffff;
                // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
                this.words[j + 1] |= (w >>> (26 - off)) & 0x3fffff;
                off += 24;
                if (off >= 26) {
                  off -= 26;
                  j++;
                }
              }
              if (i + 6 !== start) {
                w = parseHex(number, start, i + 6);
                this.words[j] |= (w << off) & 0x3ffffff;
                this.words[j + 1] |= (w >>> (26 - off)) & 0x3fffff;
              }
              this.strip();
            };

            function parseBase(str, start, end, mul) {
              var r = 0;
              var len = Math.min(str.length, end);
              for (var i = start; i < len; i++) {
                var c = str.charCodeAt(i) - 48;

                r *= mul;

                // 'a'
                if (c >= 49) {
                  r += c - 49 + 0xa;

                  // 'A'
                } else if (c >= 17) {
                  r += c - 17 + 0xa;

                  // '0' - '9'
                } else {
                  r += c;
                }
              }
              return r;
            }

            BN.prototype._parseBase = function _parseBase(number, base, start) {
              // Initialize as zero
              this.words = [0];
              this.length = 1;

              // Find length of limb in base
              for (
                var limbLen = 0, limbPow = 1;
                limbPow <= 0x3ffffff;
                limbPow *= base
              ) {
                limbLen++;
              }
              limbLen--;
              limbPow = (limbPow / base) | 0;

              var total = number.length - start;
              var mod = total % limbLen;
              var end = Math.min(total, total - mod) + start;

              var word = 0;
              for (var i = start; i < end; i += limbLen) {
                word = parseBase(number, i, i + limbLen, base);

                this.imuln(limbPow);
                if (this.words[0] + word < 0x4000000) {
                  this.words[0] += word;
                } else {
                  this._iaddn(word);
                }
              }

              if (mod !== 0) {
                var pow = 1;
                word = parseBase(number, i, number.length, base);

                for (i = 0; i < mod; i++) {
                  pow *= base;
                }

                this.imuln(pow);
                if (this.words[0] + word < 0x4000000) {
                  this.words[0] += word;
                } else {
                  this._iaddn(word);
                }
              }
            };

            BN.prototype.copy = function copy(dest) {
              dest.words = new Array(this.length);
              for (var i = 0; i < this.length; i++) {
                dest.words[i] = this.words[i];
              }
              dest.length = this.length;
              dest.negative = this.negative;
              dest.red = this.red;
            };

            BN.prototype.clone = function clone() {
              var r = new BN(null);
              this.copy(r);
              return r;
            };

            BN.prototype._expand = function _expand(size) {
              while (this.length < size) {
                this.words[this.length++] = 0;
              }
              return this;
            };

            // Remove leading `0` from `this`
            BN.prototype.strip = function strip() {
              while (this.length > 1 && this.words[this.length - 1] === 0) {
                this.length--;
              }
              return this._normSign();
            };

            BN.prototype._normSign = function _normSign() {
              // -0 = 0
              if (this.length === 1 && this.words[0] === 0) {
                this.negative = 0;
              }
              return this;
            };

            BN.prototype.inspect = function inspect() {
              return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
            };

            /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

            var zeros = [
              "",
              "0",
              "00",
              "000",
              "0000",
              "00000",
              "000000",
              "0000000",
              "00000000",
              "000000000",
              "0000000000",
              "00000000000",
              "000000000000",
              "0000000000000",
              "00000000000000",
              "000000000000000",
              "0000000000000000",
              "00000000000000000",
              "000000000000000000",
              "0000000000000000000",
              "00000000000000000000",
              "000000000000000000000",
              "0000000000000000000000",
              "00000000000000000000000",
              "000000000000000000000000",
              "0000000000000000000000000"
            ];

            var groupSizes = [
              0,
              0,
              25,
              16,
              12,
              11,
              10,
              9,
              8,
              8,
              7,
              7,
              7,
              7,
              6,
              6,
              6,
              6,
              6,
              6,
              6,
              5,
              5,
              5,
              5,
              5,
              5,
              5,
              5,
              5,
              5,
              5,
              5,
              5,
              5,
              5,
              5
            ];

            var groupBases = [
              0,
              0,
              33554432,
              43046721,
              16777216,
              48828125,
              60466176,
              40353607,
              16777216,
              43046721,
              10000000,
              19487171,
              35831808,
              62748517,
              7529536,
              11390625,
              16777216,
              24137569,
              34012224,
              47045881,
              64000000,
              4084101,
              5153632,
              6436343,
              7962624,
              9765625,
              11881376,
              14348907,
              17210368,
              20511149,
              24300000,
              28629151,
              33554432,
              39135393,
              45435424,
              52521875,
              60466176
            ];

            BN.prototype.toString = function toString(base, padding) {
              base = base || 10;
              padding = padding | 0 || 1;

              var out;
              if (base === 16 || base === "hex") {
                out = "";
                var off = 0;
                var carry = 0;
                for (var i = 0; i < this.length; i++) {
                  var w = this.words[i];
                  var word = (((w << off) | carry) & 0xffffff).toString(16);
                  carry = (w >>> (24 - off)) & 0xffffff;
                  if (carry !== 0 || i !== this.length - 1) {
                    out = zeros[6 - word.length] + word + out;
                  } else {
                    out = word + out;
                  }
                  off += 2;
                  if (off >= 26) {
                    off -= 26;
                    i--;
                  }
                }
                if (carry !== 0) {
                  out = carry.toString(16) + out;
                }
                while (out.length % padding !== 0) {
                  out = "0" + out;
                }
                if (this.negative !== 0) {
                  out = "-" + out;
                }
                return out;
              }

              if (base === (base | 0) && base >= 2 && base <= 36) {
                // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
                var groupSize = groupSizes[base];
                // var groupBase = Math.pow(base, groupSize);
                var groupBase = groupBases[base];
                out = "";
                var c = this.clone();
                c.negative = 0;
                while (!c.isZero()) {
                  var r = c.modn(groupBase).toString(base);
                  c = c.idivn(groupBase);

                  if (!c.isZero()) {
                    out = zeros[groupSize - r.length] + r + out;
                  } else {
                    out = r + out;
                  }
                }
                if (this.isZero()) {
                  out = "0" + out;
                }
                while (out.length % padding !== 0) {
                  out = "0" + out;
                }
                if (this.negative !== 0) {
                  out = "-" + out;
                }
                return out;
              }

              assert(false, "Base should be between 2 and 36");
            };

            BN.prototype.toNumber = function toNumber() {
              var ret = this.words[0];
              if (this.length === 2) {
                ret += this.words[1] * 0x4000000;
              } else if (this.length === 3 && this.words[2] === 0x01) {
                // NOTE: at this stage it is known that the top bit is set
                ret += 0x10000000000000 + this.words[1] * 0x4000000;
              } else if (this.length > 2) {
                assert(false, "Number can only safely store up to 53 bits");
              }
              return this.negative !== 0 ? -ret : ret;
            };

            BN.prototype.toJSON = function toJSON() {
              return this.toString(16);
            };

            BN.prototype.toBuffer = function toBuffer(endian, length) {
              assert(typeof Buffer !== "undefined");
              return this.toArrayLike(Buffer, endian, length);
            };

            BN.prototype.toArray = function toArray(endian, length) {
              return this.toArrayLike(Array, endian, length);
            };

            BN.prototype.toArrayLike = function toArrayLike(
              ArrayType,
              endian,
              length
            ) {
              var byteLength = this.byteLength();
              var reqLength = length || Math.max(1, byteLength);
              assert(
                byteLength <= reqLength,
                "byte array longer than desired length"
              );
              assert(reqLength > 0, "Requested array length <= 0");

              this.strip();
              var littleEndian = endian === "le";
              var res = new ArrayType(reqLength);

              var b, i;
              var q = this.clone();
              if (!littleEndian) {
                // Assume big-endian
                for (i = 0; i < reqLength - byteLength; i++) {
                  res[i] = 0;
                }

                for (i = 0; !q.isZero(); i++) {
                  b = q.andln(0xff);
                  q.iushrn(8);

                  res[reqLength - i - 1] = b;
                }
              } else {
                for (i = 0; !q.isZero(); i++) {
                  b = q.andln(0xff);
                  q.iushrn(8);

                  res[i] = b;
                }

                for (; i < reqLength; i++) {
                  res[i] = 0;
                }
              }

              return res;
            };

            if (Math.clz32) {
              BN.prototype._countBits = function _countBits(w) {
                return 32 - Math.clz32(w);
              };
            } else {
              BN.prototype._countBits = function _countBits(w) {
                var t = w;
                var r = 0;
                if (t >= 0x1000) {
                  r += 13;
                  t >>>= 13;
                }
                if (t >= 0x40) {
                  r += 7;
                  t >>>= 7;
                }
                if (t >= 0x8) {
                  r += 4;
                  t >>>= 4;
                }
                if (t >= 0x02) {
                  r += 2;
                  t >>>= 2;
                }
                return r + t;
              };
            }

            BN.prototype._zeroBits = function _zeroBits(w) {
              // Short-cut
              if (w === 0) return 26;

              var t = w;
              var r = 0;
              if ((t & 0x1fff) === 0) {
                r += 13;
                t >>>= 13;
              }
              if ((t & 0x7f) === 0) {
                r += 7;
                t >>>= 7;
              }
              if ((t & 0xf) === 0) {
                r += 4;
                t >>>= 4;
              }
              if ((t & 0x3) === 0) {
                r += 2;
                t >>>= 2;
              }
              if ((t & 0x1) === 0) {
                r++;
              }
              return r;
            };

            // Return number of used bits in a BN
            BN.prototype.bitLength = function bitLength() {
              var w = this.words[this.length - 1];
              var hi = this._countBits(w);
              return (this.length - 1) * 26 + hi;
            };

            function toBitArray(num) {
              var w = new Array(num.bitLength());

              for (var bit = 0; bit < w.length; bit++) {
                var off = (bit / 26) | 0;
                var wbit = bit % 26;

                w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
              }

              return w;
            }

            // Number of trailing zero bits
            BN.prototype.zeroBits = function zeroBits() {
              if (this.isZero()) return 0;

              var r = 0;
              for (var i = 0; i < this.length; i++) {
                var b = this._zeroBits(this.words[i]);
                r += b;
                if (b !== 26) break;
              }
              return r;
            };

            BN.prototype.byteLength = function byteLength() {
              return Math.ceil(this.bitLength() / 8);
            };

            BN.prototype.toTwos = function toTwos(width) {
              if (this.negative !== 0) {
                return this.abs().inotn(width).iaddn(1);
              }
              return this.clone();
            };

            BN.prototype.fromTwos = function fromTwos(width) {
              if (this.testn(width - 1)) {
                return this.notn(width).iaddn(1).ineg();
              }
              return this.clone();
            };

            BN.prototype.isNeg = function isNeg() {
              return this.negative !== 0;
            };

            // Return negative clone of `this`
            BN.prototype.neg = function neg() {
              return this.clone().ineg();
            };

            BN.prototype.ineg = function ineg() {
              if (!this.isZero()) {
                this.negative ^= 1;
              }

              return this;
            };

            // Or `num` with `this` in-place
            BN.prototype.iuor = function iuor(num) {
              while (this.length < num.length) {
                this.words[this.length++] = 0;
              }

              for (var i = 0; i < num.length; i++) {
                this.words[i] = this.words[i] | num.words[i];
              }

              return this.strip();
            };

            BN.prototype.ior = function ior(num) {
              assert((this.negative | num.negative) === 0);
              return this.iuor(num);
            };

            // Or `num` with `this`
            BN.prototype.or = function or(num) {
              if (this.length > num.length) return this.clone().ior(num);
              return num.clone().ior(this);
            };

            BN.prototype.uor = function uor(num) {
              if (this.length > num.length) return this.clone().iuor(num);
              return num.clone().iuor(this);
            };

            // And `num` with `this` in-place
            BN.prototype.iuand = function iuand(num) {
              // b = min-length(num, this)
              var b;
              if (this.length > num.length) {
                b = num;
              } else {
                b = this;
              }

              for (var i = 0; i < b.length; i++) {
                this.words[i] = this.words[i] & num.words[i];
              }

              this.length = b.length;

              return this.strip();
            };

            BN.prototype.iand = function iand(num) {
              assert((this.negative | num.negative) === 0);
              return this.iuand(num);
            };

            // And `num` with `this`
            BN.prototype.and = function and(num) {
              if (this.length > num.length) return this.clone().iand(num);
              return num.clone().iand(this);
            };

            BN.prototype.uand = function uand(num) {
              if (this.length > num.length) return this.clone().iuand(num);
              return num.clone().iuand(this);
            };

            // Xor `num` with `this` in-place
            BN.prototype.iuxor = function iuxor(num) {
              // a.length > b.length
              var a;
              var b;
              if (this.length > num.length) {
                a = this;
                b = num;
              } else {
                a = num;
                b = this;
              }

              for (var i = 0; i < b.length; i++) {
                this.words[i] = a.words[i] ^ b.words[i];
              }

              if (this !== a) {
                for (; i < a.length; i++) {
                  this.words[i] = a.words[i];
                }
              }

              this.length = a.length;

              return this.strip();
            };

            BN.prototype.ixor = function ixor(num) {
              assert((this.negative | num.negative) === 0);
              return this.iuxor(num);
            };

            // Xor `num` with `this`
            BN.prototype.xor = function xor(num) {
              if (this.length > num.length) return this.clone().ixor(num);
              return num.clone().ixor(this);
            };

            BN.prototype.uxor = function uxor(num) {
              if (this.length > num.length) return this.clone().iuxor(num);
              return num.clone().iuxor(this);
            };

            // Not ``this`` with ``width`` bitwidth
            BN.prototype.inotn = function inotn(width) {
              assert(typeof width === "number" && width >= 0);

              var bytesNeeded = Math.ceil(width / 26) | 0;
              var bitsLeft = width % 26;

              // Extend the buffer with leading zeroes
              this._expand(bytesNeeded);

              if (bitsLeft > 0) {
                bytesNeeded--;
              }

              // Handle complete words
              for (var i = 0; i < bytesNeeded; i++) {
                this.words[i] = ~this.words[i] & 0x3ffffff;
              }

              // Handle the residue
              if (bitsLeft > 0) {
                this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
              }

              // And remove leading zeroes
              return this.strip();
            };

            BN.prototype.notn = function notn(width) {
              return this.clone().inotn(width);
            };

            // Set `bit` of `this`
            BN.prototype.setn = function setn(bit, val) {
              assert(typeof bit === "number" && bit >= 0);

              var off = (bit / 26) | 0;
              var wbit = bit % 26;

              this._expand(off + 1);

              if (val) {
                this.words[off] = this.words[off] | (1 << wbit);
              } else {
                this.words[off] = this.words[off] & ~(1 << wbit);
              }

              return this.strip();
            };

            // Add `num` to `this` in-place
            BN.prototype.iadd = function iadd(num) {
              var r;

              // negative + positive
              if (this.negative !== 0 && num.negative === 0) {
                this.negative = 0;
                r = this.isub(num);
                this.negative ^= 1;
                return this._normSign();

                // positive + negative
              } else if (this.negative === 0 && num.negative !== 0) {
                num.negative = 0;
                r = this.isub(num);
                num.negative = 1;
                return r._normSign();
              }

              // a.length > b.length
              var a, b;
              if (this.length > num.length) {
                a = this;
                b = num;
              } else {
                a = num;
                b = this;
              }

              var carry = 0;
              for (var i = 0; i < b.length; i++) {
                r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
                this.words[i] = r & 0x3ffffff;
                carry = r >>> 26;
              }
              for (; carry !== 0 && i < a.length; i++) {
                r = (a.words[i] | 0) + carry;
                this.words[i] = r & 0x3ffffff;
                carry = r >>> 26;
              }

              this.length = a.length;
              if (carry !== 0) {
                this.words[this.length] = carry;
                this.length++;
                // Copy the rest of the words
              } else if (a !== this) {
                for (; i < a.length; i++) {
                  this.words[i] = a.words[i];
                }
              }

              return this;
            };

            // Add `num` to `this`
            BN.prototype.add = function add(num) {
              var res;
              if (num.negative !== 0 && this.negative === 0) {
                num.negative = 0;
                res = this.sub(num);
                num.negative ^= 1;
                return res;
              } else if (num.negative === 0 && this.negative !== 0) {
                this.negative = 0;
                res = num.sub(this);
                this.negative = 1;
                return res;
              }

              if (this.length > num.length) return this.clone().iadd(num);

              return num.clone().iadd(this);
            };

            // Subtract `num` from `this` in-place
            BN.prototype.isub = function isub(num) {
              // this - (-num) = this + num
              if (num.negative !== 0) {
                num.negative = 0;
                var r = this.iadd(num);
                num.negative = 1;
                return r._normSign();

                // -this - num = -(this + num)
              } else if (this.negative !== 0) {
                this.negative = 0;
                this.iadd(num);
                this.negative = 1;
                return this._normSign();
              }

              // At this point both numbers are positive
              var cmp = this.cmp(num);

              // Optimization - zeroify
              if (cmp === 0) {
                this.negative = 0;
                this.length = 1;
                this.words[0] = 0;
                return this;
              }

              // a > b
              var a, b;
              if (cmp > 0) {
                a = this;
                b = num;
              } else {
                a = num;
                b = this;
              }

              var carry = 0;
              for (var i = 0; i < b.length; i++) {
                r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
                carry = r >> 26;
                this.words[i] = r & 0x3ffffff;
              }
              for (; carry !== 0 && i < a.length; i++) {
                r = (a.words[i] | 0) + carry;
                carry = r >> 26;
                this.words[i] = r & 0x3ffffff;
              }

              // Copy rest of the words
              if (carry === 0 && i < a.length && a !== this) {
                for (; i < a.length; i++) {
                  this.words[i] = a.words[i];
                }
              }

              this.length = Math.max(this.length, i);

              if (a !== this) {
                this.negative = 1;
              }

              return this.strip();
            };

            // Subtract `num` from `this`
            BN.prototype.sub = function sub(num) {
              return this.clone().isub(num);
            };

            function smallMulTo(self, num, out) {
              out.negative = num.negative ^ self.negative;
              var len = (self.length + num.length) | 0;
              out.length = len;
              len = (len - 1) | 0;

              // Peel one iteration (compiler can't do it, because of code complexity)
              var a = self.words[0] | 0;
              var b = num.words[0] | 0;
              var r = a * b;

              var lo = r & 0x3ffffff;
              var carry = (r / 0x4000000) | 0;
              out.words[0] = lo;

              for (var k = 1; k < len; k++) {
                // Sum all words with the same `i + j = k` and accumulate `ncarry`,
                // note that ncarry could be >= 0x3ffffff
                var ncarry = carry >>> 26;
                var rword = carry & 0x3ffffff;
                var maxJ = Math.min(k, num.length - 1);
                for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
                  var i = (k - j) | 0;
                  a = self.words[i] | 0;
                  b = num.words[j] | 0;
                  r = a * b + rword;
                  ncarry += (r / 0x4000000) | 0;
                  rword = r & 0x3ffffff;
                }
                out.words[k] = rword | 0;
                carry = ncarry | 0;
              }
              if (carry !== 0) {
                out.words[k] = carry | 0;
              } else {
                out.length--;
              }

              return out.strip();
            }

            // TODO(indutny): it may be reasonable to omit it for users who don't need
            // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
            // multiplication (like elliptic secp256k1).
            var comb10MulTo = function comb10MulTo(self, num, out) {
              var a = self.words;
              var b = num.words;
              var o = out.words;
              var c = 0;
              var lo;
              var mid;
              var hi;
              var a0 = a[0] | 0;
              var al0 = a0 & 0x1fff;
              var ah0 = a0 >>> 13;
              var a1 = a[1] | 0;
              var al1 = a1 & 0x1fff;
              var ah1 = a1 >>> 13;
              var a2 = a[2] | 0;
              var al2 = a2 & 0x1fff;
              var ah2 = a2 >>> 13;
              var a3 = a[3] | 0;
              var al3 = a3 & 0x1fff;
              var ah3 = a3 >>> 13;
              var a4 = a[4] | 0;
              var al4 = a4 & 0x1fff;
              var ah4 = a4 >>> 13;
              var a5 = a[5] | 0;
              var al5 = a5 & 0x1fff;
              var ah5 = a5 >>> 13;
              var a6 = a[6] | 0;
              var al6 = a6 & 0x1fff;
              var ah6 = a6 >>> 13;
              var a7 = a[7] | 0;
              var al7 = a7 & 0x1fff;
              var ah7 = a7 >>> 13;
              var a8 = a[8] | 0;
              var al8 = a8 & 0x1fff;
              var ah8 = a8 >>> 13;
              var a9 = a[9] | 0;
              var al9 = a9 & 0x1fff;
              var ah9 = a9 >>> 13;
              var b0 = b[0] | 0;
              var bl0 = b0 & 0x1fff;
              var bh0 = b0 >>> 13;
              var b1 = b[1] | 0;
              var bl1 = b1 & 0x1fff;
              var bh1 = b1 >>> 13;
              var b2 = b[2] | 0;
              var bl2 = b2 & 0x1fff;
              var bh2 = b2 >>> 13;
              var b3 = b[3] | 0;
              var bl3 = b3 & 0x1fff;
              var bh3 = b3 >>> 13;
              var b4 = b[4] | 0;
              var bl4 = b4 & 0x1fff;
              var bh4 = b4 >>> 13;
              var b5 = b[5] | 0;
              var bl5 = b5 & 0x1fff;
              var bh5 = b5 >>> 13;
              var b6 = b[6] | 0;
              var bl6 = b6 & 0x1fff;
              var bh6 = b6 >>> 13;
              var b7 = b[7] | 0;
              var bl7 = b7 & 0x1fff;
              var bh7 = b7 >>> 13;
              var b8 = b[8] | 0;
              var bl8 = b8 & 0x1fff;
              var bh8 = b8 >>> 13;
              var b9 = b[9] | 0;
              var bl9 = b9 & 0x1fff;
              var bh9 = b9 >>> 13;

              out.negative = self.negative ^ num.negative;
              out.length = 19;
              /* k = 0 */
              lo = Math.imul(al0, bl0);
              mid = Math.imul(al0, bh0);
              mid = (mid + Math.imul(ah0, bl0)) | 0;
              hi = Math.imul(ah0, bh0);
              var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
              w0 &= 0x3ffffff;
              /* k = 1 */
              lo = Math.imul(al1, bl0);
              mid = Math.imul(al1, bh0);
              mid = (mid + Math.imul(ah1, bl0)) | 0;
              hi = Math.imul(ah1, bh0);
              lo = (lo + Math.imul(al0, bl1)) | 0;
              mid = (mid + Math.imul(al0, bh1)) | 0;
              mid = (mid + Math.imul(ah0, bl1)) | 0;
              hi = (hi + Math.imul(ah0, bh1)) | 0;
              var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
              w1 &= 0x3ffffff;
              /* k = 2 */
              lo = Math.imul(al2, bl0);
              mid = Math.imul(al2, bh0);
              mid = (mid + Math.imul(ah2, bl0)) | 0;
              hi = Math.imul(ah2, bh0);
              lo = (lo + Math.imul(al1, bl1)) | 0;
              mid = (mid + Math.imul(al1, bh1)) | 0;
              mid = (mid + Math.imul(ah1, bl1)) | 0;
              hi = (hi + Math.imul(ah1, bh1)) | 0;
              lo = (lo + Math.imul(al0, bl2)) | 0;
              mid = (mid + Math.imul(al0, bh2)) | 0;
              mid = (mid + Math.imul(ah0, bl2)) | 0;
              hi = (hi + Math.imul(ah0, bh2)) | 0;
              var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
              w2 &= 0x3ffffff;
              /* k = 3 */
              lo = Math.imul(al3, bl0);
              mid = Math.imul(al3, bh0);
              mid = (mid + Math.imul(ah3, bl0)) | 0;
              hi = Math.imul(ah3, bh0);
              lo = (lo + Math.imul(al2, bl1)) | 0;
              mid = (mid + Math.imul(al2, bh1)) | 0;
              mid = (mid + Math.imul(ah2, bl1)) | 0;
              hi = (hi + Math.imul(ah2, bh1)) | 0;
              lo = (lo + Math.imul(al1, bl2)) | 0;
              mid = (mid + Math.imul(al1, bh2)) | 0;
              mid = (mid + Math.imul(ah1, bl2)) | 0;
              hi = (hi + Math.imul(ah1, bh2)) | 0;
              lo = (lo + Math.imul(al0, bl3)) | 0;
              mid = (mid + Math.imul(al0, bh3)) | 0;
              mid = (mid + Math.imul(ah0, bl3)) | 0;
              hi = (hi + Math.imul(ah0, bh3)) | 0;
              var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
              w3 &= 0x3ffffff;
              /* k = 4 */
              lo = Math.imul(al4, bl0);
              mid = Math.imul(al4, bh0);
              mid = (mid + Math.imul(ah4, bl0)) | 0;
              hi = Math.imul(ah4, bh0);
              lo = (lo + Math.imul(al3, bl1)) | 0;
              mid = (mid + Math.imul(al3, bh1)) | 0;
              mid = (mid + Math.imul(ah3, bl1)) | 0;
              hi = (hi + Math.imul(ah3, bh1)) | 0;
              lo = (lo + Math.imul(al2, bl2)) | 0;
              mid = (mid + Math.imul(al2, bh2)) | 0;
              mid = (mid + Math.imul(ah2, bl2)) | 0;
              hi = (hi + Math.imul(ah2, bh2)) | 0;
              lo = (lo + Math.imul(al1, bl3)) | 0;
              mid = (mid + Math.imul(al1, bh3)) | 0;
              mid = (mid + Math.imul(ah1, bl3)) | 0;
              hi = (hi + Math.imul(ah1, bh3)) | 0;
              lo = (lo + Math.imul(al0, bl4)) | 0;
              mid = (mid + Math.imul(al0, bh4)) | 0;
              mid = (mid + Math.imul(ah0, bl4)) | 0;
              hi = (hi + Math.imul(ah0, bh4)) | 0;
              var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
              w4 &= 0x3ffffff;
              /* k = 5 */
              lo = Math.imul(al5, bl0);
              mid = Math.imul(al5, bh0);
              mid = (mid + Math.imul(ah5, bl0)) | 0;
              hi = Math.imul(ah5, bh0);
              lo = (lo + Math.imul(al4, bl1)) | 0;
              mid = (mid + Math.imul(al4, bh1)) | 0;
              mid = (mid + Math.imul(ah4, bl1)) | 0;
              hi = (hi + Math.imul(ah4, bh1)) | 0;
              lo = (lo + Math.imul(al3, bl2)) | 0;
              mid = (mid + Math.imul(al3, bh2)) | 0;
              mid = (mid + Math.imul(ah3, bl2)) | 0;
              hi = (hi + Math.imul(ah3, bh2)) | 0;
              lo = (lo + Math.imul(al2, bl3)) | 0;
              mid = (mid + Math.imul(al2, bh3)) | 0;
              mid = (mid + Math.imul(ah2, bl3)) | 0;
              hi = (hi + Math.imul(ah2, bh3)) | 0;
              lo = (lo + Math.imul(al1, bl4)) | 0;
              mid = (mid + Math.imul(al1, bh4)) | 0;
              mid = (mid + Math.imul(ah1, bl4)) | 0;
              hi = (hi + Math.imul(ah1, bh4)) | 0;
              lo = (lo + Math.imul(al0, bl5)) | 0;
              mid = (mid + Math.imul(al0, bh5)) | 0;
              mid = (mid + Math.imul(ah0, bl5)) | 0;
              hi = (hi + Math.imul(ah0, bh5)) | 0;
              var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
              w5 &= 0x3ffffff;
              /* k = 6 */
              lo = Math.imul(al6, bl0);
              mid = Math.imul(al6, bh0);
              mid = (mid + Math.imul(ah6, bl0)) | 0;
              hi = Math.imul(ah6, bh0);
              lo = (lo + Math.imul(al5, bl1)) | 0;
              mid = (mid + Math.imul(al5, bh1)) | 0;
              mid = (mid + Math.imul(ah5, bl1)) | 0;
              hi = (hi + Math.imul(ah5, bh1)) | 0;
              lo = (lo + Math.imul(al4, bl2)) | 0;
              mid = (mid + Math.imul(al4, bh2)) | 0;
              mid = (mid + Math.imul(ah4, bl2)) | 0;
              hi = (hi + Math.imul(ah4, bh2)) | 0;
              lo = (lo + Math.imul(al3, bl3)) | 0;
              mid = (mid + Math.imul(al3, bh3)) | 0;
              mid = (mid + Math.imul(ah3, bl3)) | 0;
              hi = (hi + Math.imul(ah3, bh3)) | 0;
              lo = (lo + Math.imul(al2, bl4)) | 0;
              mid = (mid + Math.imul(al2, bh4)) | 0;
              mid = (mid + Math.imul(ah2, bl4)) | 0;
              hi = (hi + Math.imul(ah2, bh4)) | 0;
              lo = (lo + Math.imul(al1, bl5)) | 0;
              mid = (mid + Math.imul(al1, bh5)) | 0;
              mid = (mid + Math.imul(ah1, bl5)) | 0;
              hi = (hi + Math.imul(ah1, bh5)) | 0;
              lo = (lo + Math.imul(al0, bl6)) | 0;
              mid = (mid + Math.imul(al0, bh6)) | 0;
              mid = (mid + Math.imul(ah0, bl6)) | 0;
              hi = (hi + Math.imul(ah0, bh6)) | 0;
              var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
              w6 &= 0x3ffffff;
              /* k = 7 */
              lo = Math.imul(al7, bl0);
              mid = Math.imul(al7, bh0);
              mid = (mid + Math.imul(ah7, bl0)) | 0;
              hi = Math.imul(ah7, bh0);
              lo = (lo + Math.imul(al6, bl1)) | 0;
              mid = (mid + Math.imul(al6, bh1)) | 0;
              mid = (mid + Math.imul(ah6, bl1)) | 0;
              hi = (hi + Math.imul(ah6, bh1)) | 0;
              lo = (lo + Math.imul(al5, bl2)) | 0;
              mid = (mid + Math.imul(al5, bh2)) | 0;
              mid = (mid + Math.imul(ah5, bl2)) | 0;
              hi = (hi + Math.imul(ah5, bh2)) | 0;
              lo = (lo + Math.imul(al4, bl3)) | 0;
              mid = (mid + Math.imul(al4, bh3)) | 0;
              mid = (mid + Math.imul(ah4, bl3)) | 0;
              hi = (hi + Math.imul(ah4, bh3)) | 0;
              lo = (lo + Math.imul(al3, bl4)) | 0;
              mid = (mid + Math.imul(al3, bh4)) | 0;
              mid = (mid + Math.imul(ah3, bl4)) | 0;
              hi = (hi + Math.imul(ah3, bh4)) | 0;
              lo = (lo + Math.imul(al2, bl5)) | 0;
              mid = (mid + Math.imul(al2, bh5)) | 0;
              mid = (mid + Math.imul(ah2, bl5)) | 0;
              hi = (hi + Math.imul(ah2, bh5)) | 0;
              lo = (lo + Math.imul(al1, bl6)) | 0;
              mid = (mid + Math.imul(al1, bh6)) | 0;
              mid = (mid + Math.imul(ah1, bl6)) | 0;
              hi = (hi + Math.imul(ah1, bh6)) | 0;
              lo = (lo + Math.imul(al0, bl7)) | 0;
              mid = (mid + Math.imul(al0, bh7)) | 0;
              mid = (mid + Math.imul(ah0, bl7)) | 0;
              hi = (hi + Math.imul(ah0, bh7)) | 0;
              var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
              w7 &= 0x3ffffff;
              /* k = 8 */
              lo = Math.imul(al8, bl0);
              mid = Math.imul(al8, bh0);
              mid = (mid + Math.imul(ah8, bl0)) | 0;
              hi = Math.imul(ah8, bh0);
              lo = (lo + Math.imul(al7, bl1)) | 0;
              mid = (mid + Math.imul(al7, bh1)) | 0;
              mid = (mid + Math.imul(ah7, bl1)) | 0;
              hi = (hi + Math.imul(ah7, bh1)) | 0;
              lo = (lo + Math.imul(al6, bl2)) | 0;
              mid = (mid + Math.imul(al6, bh2)) | 0;
              mid = (mid + Math.imul(ah6, bl2)) | 0;
              hi = (hi + Math.imul(ah6, bh2)) | 0;
              lo = (lo + Math.imul(al5, bl3)) | 0;
              mid = (mid + Math.imul(al5, bh3)) | 0;
              mid = (mid + Math.imul(ah5, bl3)) | 0;
              hi = (hi + Math.imul(ah5, bh3)) | 0;
              lo = (lo + Math.imul(al4, bl4)) | 0;
              mid = (mid + Math.imul(al4, bh4)) | 0;
              mid = (mid + Math.imul(ah4, bl4)) | 0;
              hi = (hi + Math.imul(ah4, bh4)) | 0;
              lo = (lo + Math.imul(al3, bl5)) | 0;
              mid = (mid + Math.imul(al3, bh5)) | 0;
              mid = (mid + Math.imul(ah3, bl5)) | 0;
              hi = (hi + Math.imul(ah3, bh5)) | 0;
              lo = (lo + Math.imul(al2, bl6)) | 0;
              mid = (mid + Math.imul(al2, bh6)) | 0;
              mid = (mid + Math.imul(ah2, bl6)) | 0;
              hi = (hi + Math.imul(ah2, bh6)) | 0;
              lo = (lo + Math.imul(al1, bl7)) | 0;
              mid = (mid + Math.imul(al1, bh7)) | 0;
              mid = (mid + Math.imul(ah1, bl7)) | 0;
              hi = (hi + Math.imul(ah1, bh7)) | 0;
              lo = (lo + Math.imul(al0, bl8)) | 0;
              mid = (mid + Math.imul(al0, bh8)) | 0;
              mid = (mid + Math.imul(ah0, bl8)) | 0;
              hi = (hi + Math.imul(ah0, bh8)) | 0;
              var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
              w8 &= 0x3ffffff;
              /* k = 9 */
              lo = Math.imul(al9, bl0);
              mid = Math.imul(al9, bh0);
              mid = (mid + Math.imul(ah9, bl0)) | 0;
              hi = Math.imul(ah9, bh0);
              lo = (lo + Math.imul(al8, bl1)) | 0;
              mid = (mid + Math.imul(al8, bh1)) | 0;
              mid = (mid + Math.imul(ah8, bl1)) | 0;
              hi = (hi + Math.imul(ah8, bh1)) | 0;
              lo = (lo + Math.imul(al7, bl2)) | 0;
              mid = (mid + Math.imul(al7, bh2)) | 0;
              mid = (mid + Math.imul(ah7, bl2)) | 0;
              hi = (hi + Math.imul(ah7, bh2)) | 0;
              lo = (lo + Math.imul(al6, bl3)) | 0;
              mid = (mid + Math.imul(al6, bh3)) | 0;
              mid = (mid + Math.imul(ah6, bl3)) | 0;
              hi = (hi + Math.imul(ah6, bh3)) | 0;
              lo = (lo + Math.imul(al5, bl4)) | 0;
              mid = (mid + Math.imul(al5, bh4)) | 0;
              mid = (mid + Math.imul(ah5, bl4)) | 0;
              hi = (hi + Math.imul(ah5, bh4)) | 0;
              lo = (lo + Math.imul(al4, bl5)) | 0;
              mid = (mid + Math.imul(al4, bh5)) | 0;
              mid = (mid + Math.imul(ah4, bl5)) | 0;
              hi = (hi + Math.imul(ah4, bh5)) | 0;
              lo = (lo + Math.imul(al3, bl6)) | 0;
              mid = (mid + Math.imul(al3, bh6)) | 0;
              mid = (mid + Math.imul(ah3, bl6)) | 0;
              hi = (hi + Math.imul(ah3, bh6)) | 0;
              lo = (lo + Math.imul(al2, bl7)) | 0;
              mid = (mid + Math.imul(al2, bh7)) | 0;
              mid = (mid + Math.imul(ah2, bl7)) | 0;
              hi = (hi + Math.imul(ah2, bh7)) | 0;
              lo = (lo + Math.imul(al1, bl8)) | 0;
              mid = (mid + Math.imul(al1, bh8)) | 0;
              mid = (mid + Math.imul(ah1, bl8)) | 0;
              hi = (hi + Math.imul(ah1, bh8)) | 0;
              lo = (lo + Math.imul(al0, bl9)) | 0;
              mid = (mid + Math.imul(al0, bh9)) | 0;
              mid = (mid + Math.imul(ah0, bl9)) | 0;
              hi = (hi + Math.imul(ah0, bh9)) | 0;
              var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
              w9 &= 0x3ffffff;
              /* k = 10 */
              lo = Math.imul(al9, bl1);
              mid = Math.imul(al9, bh1);
              mid = (mid + Math.imul(ah9, bl1)) | 0;
              hi = Math.imul(ah9, bh1);
              lo = (lo + Math.imul(al8, bl2)) | 0;
              mid = (mid + Math.imul(al8, bh2)) | 0;
              mid = (mid + Math.imul(ah8, bl2)) | 0;
              hi = (hi + Math.imul(ah8, bh2)) | 0;
              lo = (lo + Math.imul(al7, bl3)) | 0;
              mid = (mid + Math.imul(al7, bh3)) | 0;
              mid = (mid + Math.imul(ah7, bl3)) | 0;
              hi = (hi + Math.imul(ah7, bh3)) | 0;
              lo = (lo + Math.imul(al6, bl4)) | 0;
              mid = (mid + Math.imul(al6, bh4)) | 0;
              mid = (mid + Math.imul(ah6, bl4)) | 0;
              hi = (hi + Math.imul(ah6, bh4)) | 0;
              lo = (lo + Math.imul(al5, bl5)) | 0;
              mid = (mid + Math.imul(al5, bh5)) | 0;
              mid = (mid + Math.imul(ah5, bl5)) | 0;
              hi = (hi + Math.imul(ah5, bh5)) | 0;
              lo = (lo + Math.imul(al4, bl6)) | 0;
              mid = (mid + Math.imul(al4, bh6)) | 0;
              mid = (mid + Math.imul(ah4, bl6)) | 0;
              hi = (hi + Math.imul(ah4, bh6)) | 0;
              lo = (lo + Math.imul(al3, bl7)) | 0;
              mid = (mid + Math.imul(al3, bh7)) | 0;
              mid = (mid + Math.imul(ah3, bl7)) | 0;
              hi = (hi + Math.imul(ah3, bh7)) | 0;
              lo = (lo + Math.imul(al2, bl8)) | 0;
              mid = (mid + Math.imul(al2, bh8)) | 0;
              mid = (mid + Math.imul(ah2, bl8)) | 0;
              hi = (hi + Math.imul(ah2, bh8)) | 0;
              lo = (lo + Math.imul(al1, bl9)) | 0;
              mid = (mid + Math.imul(al1, bh9)) | 0;
              mid = (mid + Math.imul(ah1, bl9)) | 0;
              hi = (hi + Math.imul(ah1, bh9)) | 0;
              var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
              w10 &= 0x3ffffff;
              /* k = 11 */
              lo = Math.imul(al9, bl2);
              mid = Math.imul(al9, bh2);
              mid = (mid + Math.imul(ah9, bl2)) | 0;
              hi = Math.imul(ah9, bh2);
              lo = (lo + Math.imul(al8, bl3)) | 0;
              mid = (mid + Math.imul(al8, bh3)) | 0;
              mid = (mid + Math.imul(ah8, bl3)) | 0;
              hi = (hi + Math.imul(ah8, bh3)) | 0;
              lo = (lo + Math.imul(al7, bl4)) | 0;
              mid = (mid + Math.imul(al7, bh4)) | 0;
              mid = (mid + Math.imul(ah7, bl4)) | 0;
              hi = (hi + Math.imul(ah7, bh4)) | 0;
              lo = (lo + Math.imul(al6, bl5)) | 0;
              mid = (mid + Math.imul(al6, bh5)) | 0;
              mid = (mid + Math.imul(ah6, bl5)) | 0;
              hi = (hi + Math.imul(ah6, bh5)) | 0;
              lo = (lo + Math.imul(al5, bl6)) | 0;
              mid = (mid + Math.imul(al5, bh6)) | 0;
              mid = (mid + Math.imul(ah5, bl6)) | 0;
              hi = (hi + Math.imul(ah5, bh6)) | 0;
              lo = (lo + Math.imul(al4, bl7)) | 0;
              mid = (mid + Math.imul(al4, bh7)) | 0;
              mid = (mid + Math.imul(ah4, bl7)) | 0;
              hi = (hi + Math.imul(ah4, bh7)) | 0;
              lo = (lo + Math.imul(al3, bl8)) | 0;
              mid = (mid + Math.imul(al3, bh8)) | 0;
              mid = (mid + Math.imul(ah3, bl8)) | 0;
              hi = (hi + Math.imul(ah3, bh8)) | 0;
              lo = (lo + Math.imul(al2, bl9)) | 0;
              mid = (mid + Math.imul(al2, bh9)) | 0;
              mid = (mid + Math.imul(ah2, bl9)) | 0;
              hi = (hi + Math.imul(ah2, bh9)) | 0;
              var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
              w11 &= 0x3ffffff;
              /* k = 12 */
              lo = Math.imul(al9, bl3);
              mid = Math.imul(al9, bh3);
              mid = (mid + Math.imul(ah9, bl3)) | 0;
              hi = Math.imul(ah9, bh3);
              lo = (lo + Math.imul(al8, bl4)) | 0;
              mid = (mid + Math.imul(al8, bh4)) | 0;
              mid = (mid + Math.imul(ah8, bl4)) | 0;
              hi = (hi + Math.imul(ah8, bh4)) | 0;
              lo = (lo + Math.imul(al7, bl5)) | 0;
              mid = (mid + Math.imul(al7, bh5)) | 0;
              mid = (mid + Math.imul(ah7, bl5)) | 0;
              hi = (hi + Math.imul(ah7, bh5)) | 0;
              lo = (lo + Math.imul(al6, bl6)) | 0;
              mid = (mid + Math.imul(al6, bh6)) | 0;
              mid = (mid + Math.imul(ah6, bl6)) | 0;
              hi = (hi + Math.imul(ah6, bh6)) | 0;
              lo = (lo + Math.imul(al5, bl7)) | 0;
              mid = (mid + Math.imul(al5, bh7)) | 0;
              mid = (mid + Math.imul(ah5, bl7)) | 0;
              hi = (hi + Math.imul(ah5, bh7)) | 0;
              lo = (lo + Math.imul(al4, bl8)) | 0;
              mid = (mid + Math.imul(al4, bh8)) | 0;
              mid = (mid + Math.imul(ah4, bl8)) | 0;
              hi = (hi + Math.imul(ah4, bh8)) | 0;
              lo = (lo + Math.imul(al3, bl9)) | 0;
              mid = (mid + Math.imul(al3, bh9)) | 0;
              mid = (mid + Math.imul(ah3, bl9)) | 0;
              hi = (hi + Math.imul(ah3, bh9)) | 0;
              var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
              w12 &= 0x3ffffff;
              /* k = 13 */
              lo = Math.imul(al9, bl4);
              mid = Math.imul(al9, bh4);
              mid = (mid + Math.imul(ah9, bl4)) | 0;
              hi = Math.imul(ah9, bh4);
              lo = (lo + Math.imul(al8, bl5)) | 0;
              mid = (mid + Math.imul(al8, bh5)) | 0;
              mid = (mid + Math.imul(ah8, bl5)) | 0;
              hi = (hi + Math.imul(ah8, bh5)) | 0;
              lo = (lo + Math.imul(al7, bl6)) | 0;
              mid = (mid + Math.imul(al7, bh6)) | 0;
              mid = (mid + Math.imul(ah7, bl6)) | 0;
              hi = (hi + Math.imul(ah7, bh6)) | 0;
              lo = (lo + Math.imul(al6, bl7)) | 0;
              mid = (mid + Math.imul(al6, bh7)) | 0;
              mid = (mid + Math.imul(ah6, bl7)) | 0;
              hi = (hi + Math.imul(ah6, bh7)) | 0;
              lo = (lo + Math.imul(al5, bl8)) | 0;
              mid = (mid + Math.imul(al5, bh8)) | 0;
              mid = (mid + Math.imul(ah5, bl8)) | 0;
              hi = (hi + Math.imul(ah5, bh8)) | 0;
              lo = (lo + Math.imul(al4, bl9)) | 0;
              mid = (mid + Math.imul(al4, bh9)) | 0;
              mid = (mid + Math.imul(ah4, bl9)) | 0;
              hi = (hi + Math.imul(ah4, bh9)) | 0;
              var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
              w13 &= 0x3ffffff;
              /* k = 14 */
              lo = Math.imul(al9, bl5);
              mid = Math.imul(al9, bh5);
              mid = (mid + Math.imul(ah9, bl5)) | 0;
              hi = Math.imul(ah9, bh5);
              lo = (lo + Math.imul(al8, bl6)) | 0;
              mid = (mid + Math.imul(al8, bh6)) | 0;
              mid = (mid + Math.imul(ah8, bl6)) | 0;
              hi = (hi + Math.imul(ah8, bh6)) | 0;
              lo = (lo + Math.imul(al7, bl7)) | 0;
              mid = (mid + Math.imul(al7, bh7)) | 0;
              mid = (mid + Math.imul(ah7, bl7)) | 0;
              hi = (hi + Math.imul(ah7, bh7)) | 0;
              lo = (lo + Math.imul(al6, bl8)) | 0;
              mid = (mid + Math.imul(al6, bh8)) | 0;
              mid = (mid + Math.imul(ah6, bl8)) | 0;
              hi = (hi + Math.imul(ah6, bh8)) | 0;
              lo = (lo + Math.imul(al5, bl9)) | 0;
              mid = (mid + Math.imul(al5, bh9)) | 0;
              mid = (mid + Math.imul(ah5, bl9)) | 0;
              hi = (hi + Math.imul(ah5, bh9)) | 0;
              var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
              w14 &= 0x3ffffff;
              /* k = 15 */
              lo = Math.imul(al9, bl6);
              mid = Math.imul(al9, bh6);
              mid = (mid + Math.imul(ah9, bl6)) | 0;
              hi = Math.imul(ah9, bh6);
              lo = (lo + Math.imul(al8, bl7)) | 0;
              mid = (mid + Math.imul(al8, bh7)) | 0;
              mid = (mid + Math.imul(ah8, bl7)) | 0;
              hi = (hi + Math.imul(ah8, bh7)) | 0;
              lo = (lo + Math.imul(al7, bl8)) | 0;
              mid = (mid + Math.imul(al7, bh8)) | 0;
              mid = (mid + Math.imul(ah7, bl8)) | 0;
              hi = (hi + Math.imul(ah7, bh8)) | 0;
              lo = (lo + Math.imul(al6, bl9)) | 0;
              mid = (mid + Math.imul(al6, bh9)) | 0;
              mid = (mid + Math.imul(ah6, bl9)) | 0;
              hi = (hi + Math.imul(ah6, bh9)) | 0;
              var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
              w15 &= 0x3ffffff;
              /* k = 16 */
              lo = Math.imul(al9, bl7);
              mid = Math.imul(al9, bh7);
              mid = (mid + Math.imul(ah9, bl7)) | 0;
              hi = Math.imul(ah9, bh7);
              lo = (lo + Math.imul(al8, bl8)) | 0;
              mid = (mid + Math.imul(al8, bh8)) | 0;
              mid = (mid + Math.imul(ah8, bl8)) | 0;
              hi = (hi + Math.imul(ah8, bh8)) | 0;
              lo = (lo + Math.imul(al7, bl9)) | 0;
              mid = (mid + Math.imul(al7, bh9)) | 0;
              mid = (mid + Math.imul(ah7, bl9)) | 0;
              hi = (hi + Math.imul(ah7, bh9)) | 0;
              var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
              w16 &= 0x3ffffff;
              /* k = 17 */
              lo = Math.imul(al9, bl8);
              mid = Math.imul(al9, bh8);
              mid = (mid + Math.imul(ah9, bl8)) | 0;
              hi = Math.imul(ah9, bh8);
              lo = (lo + Math.imul(al8, bl9)) | 0;
              mid = (mid + Math.imul(al8, bh9)) | 0;
              mid = (mid + Math.imul(ah8, bl9)) | 0;
              hi = (hi + Math.imul(ah8, bh9)) | 0;
              var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
              w17 &= 0x3ffffff;
              /* k = 18 */
              lo = Math.imul(al9, bl9);
              mid = Math.imul(al9, bh9);
              mid = (mid + Math.imul(ah9, bl9)) | 0;
              hi = Math.imul(ah9, bh9);
              var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
              c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
              w18 &= 0x3ffffff;
              o[0] = w0;
              o[1] = w1;
              o[2] = w2;
              o[3] = w3;
              o[4] = w4;
              o[5] = w5;
              o[6] = w6;
              o[7] = w7;
              o[8] = w8;
              o[9] = w9;
              o[10] = w10;
              o[11] = w11;
              o[12] = w12;
              o[13] = w13;
              o[14] = w14;
              o[15] = w15;
              o[16] = w16;
              o[17] = w17;
              o[18] = w18;
              if (c !== 0) {
                o[19] = c;
                out.length++;
              }
              return out;
            };

            // Polyfill comb
            if (!Math.imul) {
              comb10MulTo = smallMulTo;
            }

            function bigMulTo(self, num, out) {
              out.negative = num.negative ^ self.negative;
              out.length = self.length + num.length;

              var carry = 0;
              var hncarry = 0;
              for (var k = 0; k < out.length - 1; k++) {
                // Sum all words with the same `i + j = k` and accumulate `ncarry`,
                // note that ncarry could be >= 0x3ffffff
                var ncarry = hncarry;
                hncarry = 0;
                var rword = carry & 0x3ffffff;
                var maxJ = Math.min(k, num.length - 1);
                for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
                  var i = k - j;
                  var a = self.words[i] | 0;
                  var b = num.words[j] | 0;
                  var r = a * b;

                  var lo = r & 0x3ffffff;
                  ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
                  lo = (lo + rword) | 0;
                  rword = lo & 0x3ffffff;
                  ncarry = (ncarry + (lo >>> 26)) | 0;

                  hncarry += ncarry >>> 26;
                  ncarry &= 0x3ffffff;
                }
                out.words[k] = rword;
                carry = ncarry;
                ncarry = hncarry;
              }
              if (carry !== 0) {
                out.words[k] = carry;
              } else {
                out.length--;
              }

              return out.strip();
            }

            function jumboMulTo(self, num, out) {
              var fftm = new FFTM();
              return fftm.mulp(self, num, out);
            }

            BN.prototype.mulTo = function mulTo(num, out) {
              var res;
              var len = this.length + num.length;
              if (this.length === 10 && num.length === 10) {
                res = comb10MulTo(this, num, out);
              } else if (len < 63) {
                res = smallMulTo(this, num, out);
              } else if (len < 1024) {
                res = bigMulTo(this, num, out);
              } else {
                res = jumboMulTo(this, num, out);
              }

              return res;
            };

            // Cooley-Tukey algorithm for FFT
            // slightly revisited to rely on looping instead of recursion

            function FFTM(x, y) {
              this.x = x;
              this.y = y;
            }

            FFTM.prototype.makeRBT = function makeRBT(N) {
              var t = new Array(N);
              var l = BN.prototype._countBits(N) - 1;
              for (var i = 0; i < N; i++) {
                t[i] = this.revBin(i, l, N);
              }

              return t;
            };

            // Returns binary-reversed representation of `x`
            FFTM.prototype.revBin = function revBin(x, l, N) {
              if (x === 0 || x === N - 1) return x;

              var rb = 0;
              for (var i = 0; i < l; i++) {
                rb |= (x & 1) << (l - i - 1);
                x >>= 1;
              }

              return rb;
            };

            // Performs "tweedling" phase, therefore 'emulating'
            // behaviour of the recursive algorithm
            FFTM.prototype.permute = function permute(
              rbt,
              rws,
              iws,
              rtws,
              itws,
              N
            ) {
              for (var i = 0; i < N; i++) {
                rtws[i] = rws[rbt[i]];
                itws[i] = iws[rbt[i]];
              }
            };

            FFTM.prototype.transform = function transform(
              rws,
              iws,
              rtws,
              itws,
              N,
              rbt
            ) {
              this.permute(rbt, rws, iws, rtws, itws, N);

              for (var s = 1; s < N; s <<= 1) {
                var l = s << 1;

                var rtwdf = Math.cos(2 * Math.PI / l);
                var itwdf = Math.sin(2 * Math.PI / l);

                for (var p = 0; p < N; p += l) {
                  var rtwdf_ = rtwdf;
                  var itwdf_ = itwdf;

                  for (var j = 0; j < s; j++) {
                    var re = rtws[p + j];
                    var ie = itws[p + j];

                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];

                    var rx = rtwdf_ * ro - itwdf_ * io;

                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;

                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;

                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;

                    /* jshint maxdepth : false */
                    if (j !== l) {
                      rx = rtwdf * rtwdf_ - itwdf * itwdf_;

                      itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                      rtwdf_ = rx;
                    }
                  }
                }
              }
            };

            FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
              var N = Math.max(m, n) | 1;
              var odd = N & 1;
              var i = 0;
              for (N = (N / 2) | 0; N; N = N >>> 1) {
                i++;
              }

              return 1 << (i + 1 + odd);
            };

            FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
              if (N <= 1) return;

              for (var i = 0; i < N / 2; i++) {
                var t = rws[i];

                rws[i] = rws[N - i - 1];
                rws[N - i - 1] = t;

                t = iws[i];

                iws[i] = -iws[N - i - 1];
                iws[N - i - 1] = -t;
              }
            };

            FFTM.prototype.normalize13b = function normalize13b(ws, N) {
              var carry = 0;
              for (var i = 0; i < N / 2; i++) {
                var w =
                  Math.round(ws[2 * i + 1] / N) * 0x2000 +
                  Math.round(ws[2 * i] / N) +
                  carry;

                ws[i] = w & 0x3ffffff;

                if (w < 0x4000000) {
                  carry = 0;
                } else {
                  carry = (w / 0x4000000) | 0;
                }
              }

              return ws;
            };

            FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
              var carry = 0;
              for (var i = 0; i < len; i++) {
                carry = carry + (ws[i] | 0);

                rws[2 * i] = carry & 0x1fff;
                carry = carry >>> 13;
                rws[2 * i + 1] = carry & 0x1fff;
                carry = carry >>> 13;
              }

              // Pad with zeroes
              for (i = 2 * len; i < N; ++i) {
                rws[i] = 0;
              }

              assert(carry === 0);
              assert((carry & ~0x1fff) === 0);
            };

            FFTM.prototype.stub = function stub(N) {
              var ph = new Array(N);
              for (var i = 0; i < N; i++) {
                ph[i] = 0;
              }

              return ph;
            };

            FFTM.prototype.mulp = function mulp(x, y, out) {
              var N = 2 * this.guessLen13b(x.length, y.length);

              var rbt = this.makeRBT(N);

              var _ = this.stub(N);

              var rws = new Array(N);
              var rwst = new Array(N);
              var iwst = new Array(N);

              var nrws = new Array(N);
              var nrwst = new Array(N);
              var niwst = new Array(N);

              var rmws = out.words;
              rmws.length = N;

              this.convert13b(x.words, x.length, rws, N);
              this.convert13b(y.words, y.length, nrws, N);

              this.transform(rws, _, rwst, iwst, N, rbt);
              this.transform(nrws, _, nrwst, niwst, N, rbt);

              for (var i = 0; i < N; i++) {
                var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
                iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
                rwst[i] = rx;
              }

              this.conjugate(rwst, iwst, N);
              this.transform(rwst, iwst, rmws, _, N, rbt);
              this.conjugate(rmws, _, N);
              this.normalize13b(rmws, N);

              out.negative = x.negative ^ y.negative;
              out.length = x.length + y.length;
              return out.strip();
            };

            // Multiply `this` by `num`
            BN.prototype.mul = function mul(num) {
              var out = new BN(null);
              out.words = new Array(this.length + num.length);
              return this.mulTo(num, out);
            };

            // Multiply employing FFT
            BN.prototype.mulf = function mulf(num) {
              var out = new BN(null);
              out.words = new Array(this.length + num.length);
              return jumboMulTo(this, num, out);
            };

            // In-place Multiplication
            BN.prototype.imul = function imul(num) {
              return this.clone().mulTo(num, this);
            };

            BN.prototype.imuln = function imuln(num) {
              assert(typeof num === "number");
              assert(num < 0x4000000);

              // Carry
              var carry = 0;
              for (var i = 0; i < this.length; i++) {
                var w = (this.words[i] | 0) * num;
                var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
                carry >>= 26;
                carry += (w / 0x4000000) | 0;
                // NOTE: lo is 27bit maximum
                carry += lo >>> 26;
                this.words[i] = lo & 0x3ffffff;
              }

              if (carry !== 0) {
                this.words[i] = carry;
                this.length++;
              }

              return this;
            };

            BN.prototype.muln = function muln(num) {
              return this.clone().imuln(num);
            };

            // `this` * `this`
            BN.prototype.sqr = function sqr() {
              return this.mul(this);
            };

            // `this` * `this` in-place
            BN.prototype.isqr = function isqr() {
              return this.imul(this.clone());
            };

            // Math.pow(`this`, `num`)
            BN.prototype.pow = function pow(num) {
              var w = toBitArray(num);
              if (w.length === 0) return new BN(1);

              // Skip leading zeroes
              var res = this;
              for (var i = 0; i < w.length; i++, res = res.sqr()) {
                if (w[i] !== 0) break;
              }

              if (++i < w.length) {
                for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
                  if (w[i] === 0) continue;

                  res = res.mul(q);
                }
              }

              return res;
            };

            // Shift-left in-place
            BN.prototype.iushln = function iushln(bits) {
              assert(typeof bits === "number" && bits >= 0);
              var r = bits % 26;
              var s = (bits - r) / 26;
              var carryMask = 0x3ffffff >>> (26 - r) << (26 - r);
              var i;

              if (r !== 0) {
                var carry = 0;

                for (i = 0; i < this.length; i++) {
                  var newCarry = this.words[i] & carryMask;
                  var c = ((this.words[i] | 0) - newCarry) << r;
                  this.words[i] = c | carry;
                  carry = newCarry >>> (26 - r);
                }

                if (carry) {
                  this.words[i] = carry;
                  this.length++;
                }
              }

              if (s !== 0) {
                for (i = this.length - 1; i >= 0; i--) {
                  this.words[i + s] = this.words[i];
                }

                for (i = 0; i < s; i++) {
                  this.words[i] = 0;
                }

                this.length += s;
              }

              return this.strip();
            };

            BN.prototype.ishln = function ishln(bits) {
              // TODO(indutny): implement me
              assert(this.negative === 0);
              return this.iushln(bits);
            };

            // Shift-right in-place
            // NOTE: `hint` is a lowest bit before trailing zeroes
            // NOTE: if `extended` is present - it will be filled with destroyed bits
            BN.prototype.iushrn = function iushrn(bits, hint, extended) {
              assert(typeof bits === "number" && bits >= 0);
              var h;
              if (hint) {
                h = (hint - hint % 26) / 26;
              } else {
                h = 0;
              }

              var r = bits % 26;
              var s = Math.min((bits - r) / 26, this.length);
              var mask = 0x3ffffff ^ (0x3ffffff >>> r << r);
              var maskedWords = extended;

              h -= s;
              h = Math.max(0, h);

              // Extended mode, copy masked part
              if (maskedWords) {
                for (var i = 0; i < s; i++) {
                  maskedWords.words[i] = this.words[i];
                }
                maskedWords.length = s;
              }

              if (s === 0) {
                // No-op, we should not move anything at all
              } else if (this.length > s) {
                this.length -= s;
                for (i = 0; i < this.length; i++) {
                  this.words[i] = this.words[i + s];
                }
              } else {
                this.words[0] = 0;
                this.length = 1;
              }

              var carry = 0;
              for (
                i = this.length - 1;
                i >= 0 && (carry !== 0 || i >= h);
                i--
              ) {
                var word = this.words[i] | 0;
                this.words[i] = (carry << (26 - r)) | (word >>> r);
                carry = word & mask;
              }

              // Push carried bits as a mask
              if (maskedWords && carry !== 0) {
                maskedWords.words[maskedWords.length++] = carry;
              }

              if (this.length === 0) {
                this.words[0] = 0;
                this.length = 1;
              }

              return this.strip();
            };

            BN.prototype.ishrn = function ishrn(bits, hint, extended) {
              // TODO(indutny): implement me
              assert(this.negative === 0);
              return this.iushrn(bits, hint, extended);
            };

            // Shift-left
            BN.prototype.shln = function shln(bits) {
              return this.clone().ishln(bits);
            };

            BN.prototype.ushln = function ushln(bits) {
              return this.clone().iushln(bits);
            };

            // Shift-right
            BN.prototype.shrn = function shrn(bits) {
              return this.clone().ishrn(bits);
            };

            BN.prototype.ushrn = function ushrn(bits) {
              return this.clone().iushrn(bits);
            };

            // Test if n bit is set
            BN.prototype.testn = function testn(bit) {
              assert(typeof bit === "number" && bit >= 0);
              var r = bit % 26;
              var s = (bit - r) / 26;
              var q = 1 << r;

              // Fast case: bit is much higher than all existing words
              if (this.length <= s) return false;

              // Check bit and return
              var w = this.words[s];

              return !!(w & q);
            };

            // Return only lowers bits of number (in-place)
            BN.prototype.imaskn = function imaskn(bits) {
              assert(typeof bits === "number" && bits >= 0);
              var r = bits % 26;
              var s = (bits - r) / 26;

              assert(
                this.negative === 0,
                "imaskn works only with positive numbers"
              );

              if (this.length <= s) {
                return this;
              }

              if (r !== 0) {
                s++;
              }
              this.length = Math.min(s, this.length);

              if (r !== 0) {
                var mask = 0x3ffffff ^ (0x3ffffff >>> r << r);
                this.words[this.length - 1] &= mask;
              }

              return this.strip();
            };

            // Return only lowers bits of number
            BN.prototype.maskn = function maskn(bits) {
              return this.clone().imaskn(bits);
            };

            // Add plain number `num` to `this`
            BN.prototype.iaddn = function iaddn(num) {
              assert(typeof num === "number");
              assert(num < 0x4000000);
              if (num < 0) return this.isubn(-num);

              // Possible sign change
              if (this.negative !== 0) {
                if (this.length === 1 && (this.words[0] | 0) < num) {
                  this.words[0] = num - (this.words[0] | 0);
                  this.negative = 0;
                  return this;
                }

                this.negative = 0;
                this.isubn(num);
                this.negative = 1;
                return this;
              }

              // Add without checks
              return this._iaddn(num);
            };

            BN.prototype._iaddn = function _iaddn(num) {
              this.words[0] += num;

              // Carry
              for (
                var i = 0;
                i < this.length && this.words[i] >= 0x4000000;
                i++
              ) {
                this.words[i] -= 0x4000000;
                if (i === this.length - 1) {
                  this.words[i + 1] = 1;
                } else {
                  this.words[i + 1]++;
                }
              }
              this.length = Math.max(this.length, i + 1);

              return this;
            };

            // Subtract plain number `num` from `this`
            BN.prototype.isubn = function isubn(num) {
              assert(typeof num === "number");
              assert(num < 0x4000000);
              if (num < 0) return this.iaddn(-num);

              if (this.negative !== 0) {
                this.negative = 0;
                this.iaddn(num);
                this.negative = 1;
                return this;
              }

              this.words[0] -= num;

              if (this.length === 1 && this.words[0] < 0) {
                this.words[0] = -this.words[0];
                this.negative = 1;
              } else {
                // Carry
                for (var i = 0; i < this.length && this.words[i] < 0; i++) {
                  this.words[i] += 0x4000000;
                  this.words[i + 1] -= 1;
                }
              }

              return this.strip();
            };

            BN.prototype.addn = function addn(num) {
              return this.clone().iaddn(num);
            };

            BN.prototype.subn = function subn(num) {
              return this.clone().isubn(num);
            };

            BN.prototype.iabs = function iabs() {
              this.negative = 0;

              return this;
            };

            BN.prototype.abs = function abs() {
              return this.clone().iabs();
            };

            BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
              var len = num.length + shift;
              var i;

              this._expand(len);

              var w;
              var carry = 0;
              for (i = 0; i < num.length; i++) {
                w = (this.words[i + shift] | 0) + carry;
                var right = (num.words[i] | 0) * mul;
                w -= right & 0x3ffffff;
                carry = (w >> 26) - ((right / 0x4000000) | 0);
                this.words[i + shift] = w & 0x3ffffff;
              }
              for (; i < this.length - shift; i++) {
                w = (this.words[i + shift] | 0) + carry;
                carry = w >> 26;
                this.words[i + shift] = w & 0x3ffffff;
              }

              if (carry === 0) return this.strip();

              // Subtraction overflow
              assert(carry === -1);
              carry = 0;
              for (i = 0; i < this.length; i++) {
                w = -(this.words[i] | 0) + carry;
                carry = w >> 26;
                this.words[i] = w & 0x3ffffff;
              }
              this.negative = 1;

              return this.strip();
            };

            BN.prototype._wordDiv = function _wordDiv(num, mode) {
              var shift = this.length - num.length;

              var a = this.clone();
              var b = num;

              // Normalize
              var bhi = b.words[b.length - 1] | 0;
              var bhiBits = this._countBits(bhi);
              shift = 26 - bhiBits;
              if (shift !== 0) {
                b = b.ushln(shift);
                a.iushln(shift);
                bhi = b.words[b.length - 1] | 0;
              }

              // Initialize quotient
              var m = a.length - b.length;
              var q;

              if (mode !== "mod") {
                q = new BN(null);
                q.length = m + 1;
                q.words = new Array(q.length);
                for (var i = 0; i < q.length; i++) {
                  q.words[i] = 0;
                }
              }

              var diff = a.clone()._ishlnsubmul(b, 1, m);
              if (diff.negative === 0) {
                a = diff;
                if (q) {
                  q.words[m] = 1;
                }
              }

              for (var j = m - 1; j >= 0; j--) {
                var qj =
                  (a.words[b.length + j] | 0) * 0x4000000 +
                  (a.words[b.length + j - 1] | 0);

                // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
                // (0x7ffffff)
                qj = Math.min((qj / bhi) | 0, 0x3ffffff);

                a._ishlnsubmul(b, qj, j);
                while (a.negative !== 0) {
                  qj--;
                  a.negative = 0;
                  a._ishlnsubmul(b, 1, j);
                  if (!a.isZero()) {
                    a.negative ^= 1;
                  }
                }
                if (q) {
                  q.words[j] = qj;
                }
              }
              if (q) {
                q.strip();
              }
              a.strip();

              // Denormalize
              if (mode !== "div" && shift !== 0) {
                a.iushrn(shift);
              }

              return {
                div: q || null,
                mod: a
              };
            };

            // NOTE: 1) `mode` can be set to `mod` to request mod only,
            //       to `div` to request div only, or be absent to
            //       request both div & mod
            //       2) `positive` is true if unsigned mod is requested
            BN.prototype.divmod = function divmod(num, mode, positive) {
              assert(!num.isZero());

              if (this.isZero()) {
                return {
                  div: new BN(0),
                  mod: new BN(0)
                };
              }

              var div, mod, res;
              if (this.negative !== 0 && num.negative === 0) {
                res = this.neg().divmod(num, mode);

                if (mode !== "mod") {
                  div = res.div.neg();
                }

                if (mode !== "div") {
                  mod = res.mod.neg();
                  if (positive && mod.negative !== 0) {
                    mod.iadd(num);
                  }
                }

                return {
                  div: div,
                  mod: mod
                };
              }

              if (this.negative === 0 && num.negative !== 0) {
                res = this.divmod(num.neg(), mode);

                if (mode !== "mod") {
                  div = res.div.neg();
                }

                return {
                  div: div,
                  mod: res.mod
                };
              }

              if ((this.negative & num.negative) !== 0) {
                res = this.neg().divmod(num.neg(), mode);

                if (mode !== "div") {
                  mod = res.mod.neg();
                  if (positive && mod.negative !== 0) {
                    mod.isub(num);
                  }
                }

                return {
                  div: res.div,
                  mod: mod
                };
              }

              // Both numbers are positive at this point

              // Strip both numbers to approximate shift value
              if (num.length > this.length || this.cmp(num) < 0) {
                return {
                  div: new BN(0),
                  mod: this
                };
              }

              // Very short reduction
              if (num.length === 1) {
                if (mode === "div") {
                  return {
                    div: this.divn(num.words[0]),
                    mod: null
                  };
                }

                if (mode === "mod") {
                  return {
                    div: null,
                    mod: new BN(this.modn(num.words[0]))
                  };
                }

                return {
                  div: this.divn(num.words[0]),
                  mod: new BN(this.modn(num.words[0]))
                };
              }

              return this._wordDiv(num, mode);
            };

            // Find `this` / `num`
            BN.prototype.div = function div(num) {
              return this.divmod(num, "div", false).div;
            };

            // Find `this` % `num`
            BN.prototype.mod = function mod(num) {
              return this.divmod(num, "mod", false).mod;
            };

            BN.prototype.umod = function umod(num) {
              return this.divmod(num, "mod", true).mod;
            };

            // Find Round(`this` / `num`)
            BN.prototype.divRound = function divRound(num) {
              var dm = this.divmod(num);

              // Fast case - exact division
              if (dm.mod.isZero()) return dm.div;

              var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

              var half = num.ushrn(1);
              var r2 = num.andln(1);
              var cmp = mod.cmp(half);

              // Round down
              if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;

              // Round up
              return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
            };

            BN.prototype.modn = function modn(num) {
              assert(num <= 0x3ffffff);
              var p = (1 << 26) % num;

              var acc = 0;
              for (var i = this.length - 1; i >= 0; i--) {
                acc = (p * acc + (this.words[i] | 0)) % num;
              }

              return acc;
            };

            // In-place division by number
            BN.prototype.idivn = function idivn(num) {
              assert(num <= 0x3ffffff);

              var carry = 0;
              for (var i = this.length - 1; i >= 0; i--) {
                var w = (this.words[i] | 0) + carry * 0x4000000;
                this.words[i] = (w / num) | 0;
                carry = w % num;
              }

              return this.strip();
            };

            BN.prototype.divn = function divn(num) {
              return this.clone().idivn(num);
            };

            BN.prototype.egcd = function egcd(p) {
              assert(p.negative === 0);
              assert(!p.isZero());

              var x = this;
              var y = p.clone();

              if (x.negative !== 0) {
                x = x.umod(p);
              } else {
                x = x.clone();
              }

              // A * x + B * y = x
              var A = new BN(1);
              var B = new BN(0);

              // C * x + D * y = y
              var C = new BN(0);
              var D = new BN(1);

              var g = 0;

              while (x.isEven() && y.isEven()) {
                x.iushrn(1);
                y.iushrn(1);
                ++g;
              }

              var yp = y.clone();
              var xp = x.clone();

              while (!x.isZero()) {
                for (
                  var i = 0, im = 1;
                  (x.words[0] & im) === 0 && i < 26;
                  ++i, im <<= 1
                );
                if (i > 0) {
                  x.iushrn(i);
                  while (i-- > 0) {
                    if (A.isOdd() || B.isOdd()) {
                      A.iadd(yp);
                      B.isub(xp);
                    }

                    A.iushrn(1);
                    B.iushrn(1);
                  }
                }

                for (
                  var j = 0, jm = 1;
                  (y.words[0] & jm) === 0 && j < 26;
                  ++j, jm <<= 1
                );
                if (j > 0) {
                  y.iushrn(j);
                  while (j-- > 0) {
                    if (C.isOdd() || D.isOdd()) {
                      C.iadd(yp);
                      D.isub(xp);
                    }

                    C.iushrn(1);
                    D.iushrn(1);
                  }
                }

                if (x.cmp(y) >= 0) {
                  x.isub(y);
                  A.isub(C);
                  B.isub(D);
                } else {
                  y.isub(x);
                  C.isub(A);
                  D.isub(B);
                }
              }

              return {
                a: C,
                b: D,
                gcd: y.iushln(g)
              };
            };

            // This is reduced incarnation of the binary EEA
            // above, designated to invert members of the
            // _prime_ fields F(p) at a maximal speed
            BN.prototype._invmp = function _invmp(p) {
              assert(p.negative === 0);
              assert(!p.isZero());

              var a = this;
              var b = p.clone();

              if (a.negative !== 0) {
                a = a.umod(p);
              } else {
                a = a.clone();
              }

              var x1 = new BN(1);
              var x2 = new BN(0);

              var delta = b.clone();

              while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
                for (
                  var i = 0, im = 1;
                  (a.words[0] & im) === 0 && i < 26;
                  ++i, im <<= 1
                );
                if (i > 0) {
                  a.iushrn(i);
                  while (i-- > 0) {
                    if (x1.isOdd()) {
                      x1.iadd(delta);
                    }

                    x1.iushrn(1);
                  }
                }

                for (
                  var j = 0, jm = 1;
                  (b.words[0] & jm) === 0 && j < 26;
                  ++j, jm <<= 1
                );
                if (j > 0) {
                  b.iushrn(j);
                  while (j-- > 0) {
                    if (x2.isOdd()) {
                      x2.iadd(delta);
                    }

                    x2.iushrn(1);
                  }
                }

                if (a.cmp(b) >= 0) {
                  a.isub(b);
                  x1.isub(x2);
                } else {
                  b.isub(a);
                  x2.isub(x1);
                }
              }

              var res;
              if (a.cmpn(1) === 0) {
                res = x1;
              } else {
                res = x2;
              }

              if (res.cmpn(0) < 0) {
                res.iadd(p);
              }

              return res;
            };

            BN.prototype.gcd = function gcd(num) {
              if (this.isZero()) return num.abs();
              if (num.isZero()) return this.abs();

              var a = this.clone();
              var b = num.clone();
              a.negative = 0;
              b.negative = 0;

              // Remove common factor of two
              for (var shift = 0; a.isEven() && b.isEven(); shift++) {
                a.iushrn(1);
                b.iushrn(1);
              }

              do {
                while (a.isEven()) {
                  a.iushrn(1);
                }
                while (b.isEven()) {
                  b.iushrn(1);
                }

                var r = a.cmp(b);
                if (r < 0) {
                  // Swap `a` and `b` to make `a` always bigger than `b`
                  var t = a;
                  a = b;
                  b = t;
                } else if (r === 0 || b.cmpn(1) === 0) {
                  break;
                }

                a.isub(b);
              } while (true);

              return b.iushln(shift);
            };

            // Invert number in the field F(num)
            BN.prototype.invm = function invm(num) {
              return this.egcd(num).a.umod(num);
            };

            BN.prototype.isEven = function isEven() {
              return (this.words[0] & 1) === 0;
            };

            BN.prototype.isOdd = function isOdd() {
              return (this.words[0] & 1) === 1;
            };

            // And first word and num
            BN.prototype.andln = function andln(num) {
              return this.words[0] & num;
            };

            // Increment at the bit position in-line
            BN.prototype.bincn = function bincn(bit) {
              assert(typeof bit === "number");
              var r = bit % 26;
              var s = (bit - r) / 26;
              var q = 1 << r;

              // Fast case: bit is much higher than all existing words
              if (this.length <= s) {
                this._expand(s + 1);
                this.words[s] |= q;
                return this;
              }

              // Add bit and propagate, if needed
              var carry = q;
              for (var i = s; carry !== 0 && i < this.length; i++) {
                var w = this.words[i] | 0;
                w += carry;
                carry = w >>> 26;
                w &= 0x3ffffff;
                this.words[i] = w;
              }
              if (carry !== 0) {
                this.words[i] = carry;
                this.length++;
              }
              return this;
            };

            BN.prototype.isZero = function isZero() {
              return this.length === 1 && this.words[0] === 0;
            };

            BN.prototype.cmpn = function cmpn(num) {
              var negative = num < 0;

              if (this.negative !== 0 && !negative) return -1;
              if (this.negative === 0 && negative) return 1;

              this.strip();

              var res;
              if (this.length > 1) {
                res = 1;
              } else {
                if (negative) {
                  num = -num;
                }

                assert(num <= 0x3ffffff, "Number is too big");

                var w = this.words[0] | 0;
                res = w === num ? 0 : w < num ? -1 : 1;
              }
              if (this.negative !== 0) return -res | 0;
              return res;
            };

            // Compare two numbers and return:
            // 1 - if `this` > `num`
            // 0 - if `this` == `num`
            // -1 - if `this` < `num`
            BN.prototype.cmp = function cmp(num) {
              if (this.negative !== 0 && num.negative === 0) return -1;
              if (this.negative === 0 && num.negative !== 0) return 1;

              var res = this.ucmp(num);
              if (this.negative !== 0) return -res | 0;
              return res;
            };

            // Unsigned comparison
            BN.prototype.ucmp = function ucmp(num) {
              // At this point both numbers have the same sign
              if (this.length > num.length) return 1;
              if (this.length < num.length) return -1;

              var res = 0;
              for (var i = this.length - 1; i >= 0; i--) {
                var a = this.words[i] | 0;
                var b = num.words[i] | 0;

                if (a === b) continue;
                if (a < b) {
                  res = -1;
                } else if (a > b) {
                  res = 1;
                }
                break;
              }
              return res;
            };

            BN.prototype.gtn = function gtn(num) {
              return this.cmpn(num) === 1;
            };

            BN.prototype.gt = function gt(num) {
              return this.cmp(num) === 1;
            };

            BN.prototype.gten = function gten(num) {
              return this.cmpn(num) >= 0;
            };

            BN.prototype.gte = function gte(num) {
              return this.cmp(num) >= 0;
            };

            BN.prototype.ltn = function ltn(num) {
              return this.cmpn(num) === -1;
            };

            BN.prototype.lt = function lt(num) {
              return this.cmp(num) === -1;
            };

            BN.prototype.lten = function lten(num) {
              return this.cmpn(num) <= 0;
            };

            BN.prototype.lte = function lte(num) {
              return this.cmp(num) <= 0;
            };

            BN.prototype.eqn = function eqn(num) {
              return this.cmpn(num) === 0;
            };

            BN.prototype.eq = function eq(num) {
              return this.cmp(num) === 0;
            };

            //
            // A reduce context, could be using montgomery or something better, depending
            // on the `m` itself.
            //
            BN.red = function red(num) {
              return new Red(num);
            };

            BN.prototype.toRed = function toRed(ctx) {
              assert(!this.red, "Already a number in reduction context");
              assert(this.negative === 0, "red works only with positives");
              return ctx.convertTo(this)._forceRed(ctx);
            };

            BN.prototype.fromRed = function fromRed() {
              assert(
                this.red,
                "fromRed works only with numbers in reduction context"
              );
              return this.red.convertFrom(this);
            };

            BN.prototype._forceRed = function _forceRed(ctx) {
              this.red = ctx;
              return this;
            };

            BN.prototype.forceRed = function forceRed(ctx) {
              assert(!this.red, "Already a number in reduction context");
              return this._forceRed(ctx);
            };

            BN.prototype.redAdd = function redAdd(num) {
              assert(this.red, "redAdd works only with red numbers");
              return this.red.add(this, num);
            };

            BN.prototype.redIAdd = function redIAdd(num) {
              assert(this.red, "redIAdd works only with red numbers");
              return this.red.iadd(this, num);
            };

            BN.prototype.redSub = function redSub(num) {
              assert(this.red, "redSub works only with red numbers");
              return this.red.sub(this, num);
            };

            BN.prototype.redISub = function redISub(num) {
              assert(this.red, "redISub works only with red numbers");
              return this.red.isub(this, num);
            };

            BN.prototype.redShl = function redShl(num) {
              assert(this.red, "redShl works only with red numbers");
              return this.red.shl(this, num);
            };

            BN.prototype.redMul = function redMul(num) {
              assert(this.red, "redMul works only with red numbers");
              this.red._verify2(this, num);
              return this.red.mul(this, num);
            };

            BN.prototype.redIMul = function redIMul(num) {
              assert(this.red, "redMul works only with red numbers");
              this.red._verify2(this, num);
              return this.red.imul(this, num);
            };

            BN.prototype.redSqr = function redSqr() {
              assert(this.red, "redSqr works only with red numbers");
              this.red._verify1(this);
              return this.red.sqr(this);
            };

            BN.prototype.redISqr = function redISqr() {
              assert(this.red, "redISqr works only with red numbers");
              this.red._verify1(this);
              return this.red.isqr(this);
            };

            // Square root over p
            BN.prototype.redSqrt = function redSqrt() {
              assert(this.red, "redSqrt works only with red numbers");
              this.red._verify1(this);
              return this.red.sqrt(this);
            };

            BN.prototype.redInvm = function redInvm() {
              assert(this.red, "redInvm works only with red numbers");
              this.red._verify1(this);
              return this.red.invm(this);
            };

            // Return negative clone of `this` % `red modulo`
            BN.prototype.redNeg = function redNeg() {
              assert(this.red, "redNeg works only with red numbers");
              this.red._verify1(this);
              return this.red.neg(this);
            };

            BN.prototype.redPow = function redPow(num) {
              assert(this.red && !num.red, "redPow(normalNum)");
              this.red._verify1(this);
              return this.red.pow(this, num);
            };

            // Prime numbers with efficient reduction
            var primes = {
              k256: null,
              p224: null,
              p192: null,
              p25519: null
            };

            // Pseudo-Mersenne prime
            function MPrime(name, p) {
              // P = 2 ^ N - K
              this.name = name;
              this.p = new BN(p, 16);
              this.n = this.p.bitLength();
              this.k = new BN(1).iushln(this.n).isub(this.p);

              this.tmp = this._tmp();
            }

            MPrime.prototype._tmp = function _tmp() {
              var tmp = new BN(null);
              tmp.words = new Array(Math.ceil(this.n / 13));
              return tmp;
            };

            MPrime.prototype.ireduce = function ireduce(num) {
              // Assumes that `num` is less than `P^2`
              // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
              var r = num;
              var rlen;

              do {
                this.split(r, this.tmp);
                r = this.imulK(r);
                r = r.iadd(this.tmp);
                rlen = r.bitLength();
              } while (rlen > this.n);

              var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
              if (cmp === 0) {
                r.words[0] = 0;
                r.length = 1;
              } else if (cmp > 0) {
                r.isub(this.p);
              } else {
                r.strip();
              }

              return r;
            };

            MPrime.prototype.split = function split(input, out) {
              input.iushrn(this.n, 0, out);
            };

            MPrime.prototype.imulK = function imulK(num) {
              return num.imul(this.k);
            };

            function K256() {
              MPrime.call(
                this,
                "k256",
                "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
              );
            }
            inherits(K256, MPrime);

            K256.prototype.split = function split(input, output) {
              // 256 = 9 * 26 + 22
              var mask = 0x3fffff;

              var outLen = Math.min(input.length, 9);
              for (var i = 0; i < outLen; i++) {
                output.words[i] = input.words[i];
              }
              output.length = outLen;

              if (input.length <= 9) {
                input.words[0] = 0;
                input.length = 1;
                return;
              }

              // Shift by 9 limbs
              var prev = input.words[9];
              output.words[output.length++] = prev & mask;

              for (i = 10; i < input.length; i++) {
                var next = input.words[i] | 0;
                input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
                prev = next;
              }
              prev >>>= 22;
              input.words[i - 10] = prev;
              if (prev === 0 && input.length > 10) {
                input.length -= 10;
              } else {
                input.length -= 9;
              }
            };

            K256.prototype.imulK = function imulK(num) {
              // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
              num.words[num.length] = 0;
              num.words[num.length + 1] = 0;
              num.length += 2;

              // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
              var lo = 0;
              for (var i = 0; i < num.length; i++) {
                var w = num.words[i] | 0;
                lo += w * 0x3d1;
                num.words[i] = lo & 0x3ffffff;
                lo = w * 0x40 + ((lo / 0x4000000) | 0);
              }

              // Fast length reduction
              if (num.words[num.length - 1] === 0) {
                num.length--;
                if (num.words[num.length - 1] === 0) {
                  num.length--;
                }
              }
              return num;
            };

            function P224() {
              MPrime.call(
                this,
                "p224",
                "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
              );
            }
            inherits(P224, MPrime);

            function P192() {
              MPrime.call(
                this,
                "p192",
                "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
              );
            }
            inherits(P192, MPrime);

            function P25519() {
              // 2 ^ 255 - 19
              MPrime.call(
                this,
                "25519",
                "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
              );
            }
            inherits(P25519, MPrime);

            P25519.prototype.imulK = function imulK(num) {
              // K = 0x13
              var carry = 0;
              for (var i = 0; i < num.length; i++) {
                var hi = (num.words[i] | 0) * 0x13 + carry;
                var lo = hi & 0x3ffffff;
                hi >>>= 26;

                num.words[i] = lo;
                carry = hi;
              }
              if (carry !== 0) {
                num.words[num.length++] = carry;
              }
              return num;
            };

            // Exported mostly for testing purposes, use plain name instead
            BN._prime = function prime(name) {
              // Cached version of prime
              if (primes[name]) return primes[name];

              var prime;
              if (name === "k256") {
                prime = new K256();
              } else if (name === "p224") {
                prime = new P224();
              } else if (name === "p192") {
                prime = new P192();
              } else if (name === "p25519") {
                prime = new P25519();
              } else {
                throw new Error("Unknown prime " + name);
              }
              primes[name] = prime;

              return prime;
            };

            //
            // Base reduction engine
            //
            function Red(m) {
              if (typeof m === "string") {
                var prime = BN._prime(m);
                this.m = prime.p;
                this.prime = prime;
              } else {
                assert(m.gtn(1), "modulus must be greater than 1");
                this.m = m;
                this.prime = null;
              }
            }

            Red.prototype._verify1 = function _verify1(a) {
              assert(a.negative === 0, "red works only with positives");
              assert(a.red, "red works only with red numbers");
            };

            Red.prototype._verify2 = function _verify2(a, b) {
              assert(
                (a.negative | b.negative) === 0,
                "red works only with positives"
              );
              assert(
                a.red && a.red === b.red,
                "red works only with red numbers"
              );
            };

            Red.prototype.imod = function imod(a) {
              if (this.prime) return this.prime.ireduce(a)._forceRed(this);
              return a.umod(this.m)._forceRed(this);
            };

            Red.prototype.neg = function neg(a) {
              if (a.isZero()) {
                return a.clone();
              }

              return this.m.sub(a)._forceRed(this);
            };

            Red.prototype.add = function add(a, b) {
              this._verify2(a, b);

              var res = a.add(b);
              if (res.cmp(this.m) >= 0) {
                res.isub(this.m);
              }
              return res._forceRed(this);
            };

            Red.prototype.iadd = function iadd(a, b) {
              this._verify2(a, b);

              var res = a.iadd(b);
              if (res.cmp(this.m) >= 0) {
                res.isub(this.m);
              }
              return res;
            };

            Red.prototype.sub = function sub(a, b) {
              this._verify2(a, b);

              var res = a.sub(b);
              if (res.cmpn(0) < 0) {
                res.iadd(this.m);
              }
              return res._forceRed(this);
            };

            Red.prototype.isub = function isub(a, b) {
              this._verify2(a, b);

              var res = a.isub(b);
              if (res.cmpn(0) < 0) {
                res.iadd(this.m);
              }
              return res;
            };

            Red.prototype.shl = function shl(a, num) {
              this._verify1(a);
              return this.imod(a.ushln(num));
            };

            Red.prototype.imul = function imul(a, b) {
              this._verify2(a, b);
              return this.imod(a.imul(b));
            };

            Red.prototype.mul = function mul(a, b) {
              this._verify2(a, b);
              return this.imod(a.mul(b));
            };

            Red.prototype.isqr = function isqr(a) {
              return this.imul(a, a.clone());
            };

            Red.prototype.sqr = function sqr(a) {
              return this.mul(a, a);
            };

            Red.prototype.sqrt = function sqrt(a) {
              if (a.isZero()) return a.clone();

              var mod3 = this.m.andln(3);
              assert(mod3 % 2 === 1);

              // Fast case
              if (mod3 === 3) {
                var pow = this.m.add(new BN(1)).iushrn(2);
                return this.pow(a, pow);
              }

              // Tonelli-Shanks algorithm (Totally unoptimized and slow)
              //
              // Find Q and S, that Q * 2 ^ S = (P - 1)
              var q = this.m.subn(1);
              var s = 0;
              while (!q.isZero() && q.andln(1) === 0) {
                s++;
                q.iushrn(1);
              }
              assert(!q.isZero());

              var one = new BN(1).toRed(this);
              var nOne = one.redNeg();

              // Find quadratic non-residue
              // NOTE: Max is such because of generalized Riemann hypothesis.
              var lpow = this.m.subn(1).iushrn(1);
              var z = this.m.bitLength();
              z = new BN(2 * z * z).toRed(this);

              while (this.pow(z, lpow).cmp(nOne) !== 0) {
                z.redIAdd(nOne);
              }

              var c = this.pow(z, q);
              var r = this.pow(a, q.addn(1).iushrn(1));
              var t = this.pow(a, q);
              var m = s;
              while (t.cmp(one) !== 0) {
                var tmp = t;
                for (var i = 0; tmp.cmp(one) !== 0; i++) {
                  tmp = tmp.redSqr();
                }
                assert(i < m);
                var b = this.pow(c, new BN(1).iushln(m - i - 1));

                r = r.redMul(b);
                c = b.redSqr();
                t = t.redMul(c);
                m = i;
              }

              return r;
            };

            Red.prototype.invm = function invm(a) {
              var inv = a._invmp(this.m);
              if (inv.negative !== 0) {
                inv.negative = 0;
                return this.imod(inv).redNeg();
              } else {
                return this.imod(inv);
              }
            };

            Red.prototype.pow = function pow(a, num) {
              if (num.isZero()) return new BN(1).toRed(this);
              if (num.cmpn(1) === 0) return a.clone();

              var windowSize = 4;
              var wnd = new Array(1 << windowSize);
              wnd[0] = new BN(1).toRed(this);
              wnd[1] = a;
              for (var i = 2; i < wnd.length; i++) {
                wnd[i] = this.mul(wnd[i - 1], a);
              }

              var res = wnd[0];
              var current = 0;
              var currentLen = 0;
              var start = num.bitLength() % 26;
              if (start === 0) {
                start = 26;
              }

              for (i = num.length - 1; i >= 0; i--) {
                var word = num.words[i];
                for (var j = start - 1; j >= 0; j--) {
                  var bit = (word >> j) & 1;
                  if (res !== wnd[0]) {
                    res = this.sqr(res);
                  }

                  if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                  }

                  current <<= 1;
                  current |= bit;
                  currentLen++;
                  if (currentLen !== windowSize && (i !== 0 || j !== 0))
                    continue;

                  res = this.mul(res, wnd[current]);
                  currentLen = 0;
                  current = 0;
                }
                start = 26;
              }

              return res;
            };

            Red.prototype.convertTo = function convertTo(num) {
              var r = num.umod(this.m);

              return r === num ? r.clone() : r;
            };

            Red.prototype.convertFrom = function convertFrom(num) {
              var res = num.clone();
              res.red = null;
              return res;
            };

            //
            // Montgomery method engine
            //

            BN.mont = function mont(num) {
              return new Mont(num);
            };

            function Mont(m) {
              Red.call(this, m);

              this.shift = this.m.bitLength();
              if (this.shift % 26 !== 0) {
                this.shift += 26 - this.shift % 26;
              }

              this.r = new BN(1).iushln(this.shift);
              this.r2 = this.imod(this.r.sqr());
              this.rinv = this.r._invmp(this.m);

              this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
              this.minv = this.minv.umod(this.r);
              this.minv = this.r.sub(this.minv);
            }
            inherits(Mont, Red);

            Mont.prototype.convertTo = function convertTo(num) {
              return this.imod(num.ushln(this.shift));
            };

            Mont.prototype.convertFrom = function convertFrom(num) {
              var r = this.imod(num.mul(this.rinv));
              r.red = null;
              return r;
            };

            Mont.prototype.imul = function imul(a, b) {
              if (a.isZero() || b.isZero()) {
                a.words[0] = 0;
                a.length = 1;
                return a;
              }

              var t = a.imul(b);
              var c = t
                .maskn(this.shift)
                .mul(this.minv)
                .imaskn(this.shift)
                .mul(this.m);
              var u = t.isub(c).iushrn(this.shift);
              var res = u;

              if (u.cmp(this.m) >= 0) {
                res = u.isub(this.m);
              } else if (u.cmpn(0) < 0) {
                res = u.iadd(this.m);
              }

              return res._forceRed(this);
            };

            Mont.prototype.mul = function mul(a, b) {
              if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

              var t = a.mul(b);
              var c = t
                .maskn(this.shift)
                .mul(this.minv)
                .imaskn(this.shift)
                .mul(this.m);
              var u = t.isub(c).iushrn(this.shift);
              var res = u;
              if (u.cmp(this.m) >= 0) {
                res = u.isub(this.m);
              } else if (u.cmpn(0) < 0) {
                res = u.iadd(this.m);
              }

              return res._forceRed(this);
            };

            Mont.prototype.invm = function invm(a) {
              // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
              var res = this.imod(a._invmp(this.m).mul(this.r2));
              return res._forceRed(this);
            };
          })(typeof module === "undefined" || module, this);

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(104)(module)));

        /***/
      },
      /* 5 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var elliptic = exports;

        elliptic.version = __webpack_require__(180).version;
        elliptic.utils = __webpack_require__(181);
        elliptic.rand = __webpack_require__(106);
        elliptic.curve = __webpack_require__(40);
        elliptic.curves = __webpack_require__(186);

        // Protocols
        elliptic.ec = __webpack_require__(194);
        elliptic.eddsa = __webpack_require__(198);

        /***/
      },
      /* 6 */
      /***/ function(module, exports) {
        // shim for using process in browser
        var process = (module.exports = {});

        // cached from whatever global is present so that test runners that stub it
        // don't break things.  But we need to wrap it in a try catch in case it is
        // wrapped in strict mode code which doesn't define any globals.  It's inside a
        // function because try/catches deoptimize in certain engines.

        var cachedSetTimeout;
        var cachedClearTimeout;

        function defaultSetTimout() {
          throw new Error("setTimeout has not been defined");
        }
        function defaultClearTimeout() {
          throw new Error("clearTimeout has not been defined");
        }
        (function() {
          try {
            if (typeof setTimeout === "function") {
              cachedSetTimeout = setTimeout;
            } else {
              cachedSetTimeout = defaultSetTimout;
            }
          } catch (e) {
            cachedSetTimeout = defaultSetTimout;
          }
          try {
            if (typeof clearTimeout === "function") {
              cachedClearTimeout = clearTimeout;
            } else {
              cachedClearTimeout = defaultClearTimeout;
            }
          } catch (e) {
            cachedClearTimeout = defaultClearTimeout;
          }
        })();
        function runTimeout(fun) {
          if (cachedSetTimeout === setTimeout) {
            //normal enviroments in sane situations
            return setTimeout(fun, 0);
          }
          // if setTimeout wasn't available but was latter defined
          if (
            (cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) &&
            setTimeout
          ) {
            cachedSetTimeout = setTimeout;
            return setTimeout(fun, 0);
          }
          try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedSetTimeout(fun, 0);
          } catch (e) {
            try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
              return cachedSetTimeout.call(null, fun, 0);
            } catch (e) {
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
              return cachedSetTimeout.call(this, fun, 0);
            }
          }
        }
        function runClearTimeout(marker) {
          if (cachedClearTimeout === clearTimeout) {
            //normal enviroments in sane situations
            return clearTimeout(marker);
          }
          // if clearTimeout wasn't available but was latter defined
          if (
            (cachedClearTimeout === defaultClearTimeout ||
              !cachedClearTimeout) &&
            clearTimeout
          ) {
            cachedClearTimeout = clearTimeout;
            return clearTimeout(marker);
          }
          try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedClearTimeout(marker);
          } catch (e) {
            try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
              return cachedClearTimeout.call(null, marker);
            } catch (e) {
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
              // Some versions of I.E. have different rules for clearTimeout vs setTimeout
              return cachedClearTimeout.call(this, marker);
            }
          }
        }
        var queue = [];
        var draining = false;
        var currentQueue;
        var queueIndex = -1;

        function cleanUpNextTick() {
          if (!draining || !currentQueue) {
            return;
          }
          draining = false;
          if (currentQueue.length) {
            queue = currentQueue.concat(queue);
          } else {
            queueIndex = -1;
          }
          if (queue.length) {
            drainQueue();
          }
        }

        function drainQueue() {
          if (draining) {
            return;
          }
          var timeout = runTimeout(cleanUpNextTick);
          draining = true;

          var len = queue.length;
          while (len) {
            currentQueue = queue;
            queue = [];
            while (++queueIndex < len) {
              if (currentQueue) {
                currentQueue[queueIndex].run();
              }
            }
            queueIndex = -1;
            len = queue.length;
          }
          currentQueue = null;
          draining = false;
          runClearTimeout(timeout);
        }

        process.nextTick = function(fun) {
          var args = new Array(arguments.length - 1);
          if (arguments.length > 1) {
            for (var i = 1; i < arguments.length; i++) {
              args[i - 1] = arguments[i];
            }
          }
          queue.push(new Item(fun, args));
          if (queue.length === 1 && !draining) {
            runTimeout(drainQueue);
          }
        };

        // v8 likes predictible objects
        function Item(fun, array) {
          this.fun = fun;
          this.array = array;
        }
        Item.prototype.run = function() {
          this.fun.apply(null, this.array);
        };
        process.title = "browser";
        process.browser = true;
        process.env = {};
        process.argv = [];
        process.version = ""; // empty string to avoid regexp issues
        process.versions = {};

        function noop() {}

        process.on = noop;
        process.addListener = noop;
        process.once = noop;
        process.off = noop;
        process.removeListener = noop;
        process.removeAllListeners = noop;
        process.emit = noop;
        process.prependListener = noop;
        process.prependOnceListener = noop;

        process.listeners = function(name) {
          return [];
        };

        process.binding = function(name) {
          throw new Error("process.binding is not supported");
        };

        process.cwd = function() {
          return "/";
        };
        process.chdir = function(dir) {
          throw new Error("process.chdir is not supported");
        };
        process.umask = function() {
          return 0;
        };

        /***/
      },
      /* 7 */
      /***/ function(module, exports) {
        module.exports = assert;

        function assert(val, msg) {
          if (!val) throw new Error(msg || "Assertion failed");
        }

        assert.equal = function assertEqual(l, r, msg) {
          if (l != r)
            throw new Error(msg || "Assertion failed: " + l + " != " + r);
        };

        /***/
      },
      /* 8 */
      /***/ function(module, exports) {
        var g;

        // This works in non-strict mode
        g = (function() {
          return this;
        })();

        try {
          // This works if eval is allowed (see CSP)
          g = g || Function("return this")() || (1, eval)("this");
        } catch (e) {
          // This works if the window reference is available
          if (typeof window === "object") g = window;
        }

        // g can still be undefined, but nothing to do about it...
        // We return undefined, instead of nothing here, so it's
        // easier to handle this case. if(!global) { ...}

        module.exports = g;

        /***/
      },
      /* 9 */
      /***/ function(module, exports, __webpack_require__) {
        /**
 * An API for getting cryptographically-secure random bytes. The bytes are
 * generated using the Fortuna algorithm devised by Bruce Schneier and
 * Niels Ferguson.
 *
 * Getting strong random bytes is not yet easy to do in javascript. The only
 * truish random entropy that can be collected is from the mouse, keyboard, or
 * from timing with respect to page loads, etc. This generator makes a poor
 * attempt at providing random bytes when those sources haven't yet provided
 * enough entropy to initially seed or to reseed the PRNG.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2009-2014 Digital Bazaar, Inc.
 */
        var forge = __webpack_require__(1);
        __webpack_require__(15);
        __webpack_require__(70);
        __webpack_require__(71);
        __webpack_require__(3);

        (function() {
          // forge.random already defined
          if (forge.random && forge.random.getBytes) {
            module.exports = forge.random;
            return;
          }

          (function(jQuery) {
            // the default prng plugin, uses AES-128
            var prng_aes = {};
            var _prng_aes_output = new Array(4);
            var _prng_aes_buffer = forge.util.createBuffer();
            prng_aes.formatKey = function(key) {
              // convert the key into 32-bit integers
              var tmp = forge.util.createBuffer(key);
              key = new Array(4);
              key[0] = tmp.getInt32();
              key[1] = tmp.getInt32();
              key[2] = tmp.getInt32();
              key[3] = tmp.getInt32();

              // return the expanded key
              return forge.aes._expandKey(key, false);
            };
            prng_aes.formatSeed = function(seed) {
              // convert seed into 32-bit integers
              var tmp = forge.util.createBuffer(seed);
              seed = new Array(4);
              seed[0] = tmp.getInt32();
              seed[1] = tmp.getInt32();
              seed[2] = tmp.getInt32();
              seed[3] = tmp.getInt32();
              return seed;
            };
            prng_aes.cipher = function(key, seed) {
              forge.aes._updateBlock(key, seed, _prng_aes_output, false);
              _prng_aes_buffer.putInt32(_prng_aes_output[0]);
              _prng_aes_buffer.putInt32(_prng_aes_output[1]);
              _prng_aes_buffer.putInt32(_prng_aes_output[2]);
              _prng_aes_buffer.putInt32(_prng_aes_output[3]);
              return _prng_aes_buffer.getBytes();
            };
            prng_aes.increment = function(seed) {
              // FIXME: do we care about carry or signed issues?
              ++seed[3];
              return seed;
            };
            prng_aes.md = forge.md.sha256;

            /**
 * Creates a new PRNG.
 */
            function spawnPrng() {
              var ctx = forge.prng.create(prng_aes);

              /**
   * Gets random bytes. If a native secure crypto API is unavailable, this
   * method tries to make the bytes more unpredictable by drawing from data that
   * can be collected from the user of the browser, eg: mouse movement.
   *
   * If a callback is given, this method will be called asynchronously.
   *
   * @param count the number of random bytes to get.
   * @param [callback(err, bytes)] called once the operation completes.
   *
   * @return the random bytes in a string.
   */
              ctx.getBytes = function(count, callback) {
                return ctx.generate(count, callback);
              };

              /**
   * Gets random bytes asynchronously. If a native secure crypto API is
   * unavailable, this method tries to make the bytes more unpredictable by
   * drawing from data that can be collected from the user of the browser,
   * eg: mouse movement.
   *
   * @param count the number of random bytes to get.
   *
   * @return the random bytes in a string.
   */
              ctx.getBytesSync = function(count) {
                return ctx.generate(count);
              };

              return ctx;
            }

            // create default prng context
            var _ctx = spawnPrng();

            // add other sources of entropy only if window.crypto.getRandomValues is not
            // available -- otherwise this source will be automatically used by the prng
            var getRandomValues = null;
            if (typeof window !== "undefined") {
              var _crypto = window.crypto || window.msCrypto;
              if (_crypto && _crypto.getRandomValues) {
                getRandomValues = function(arr) {
                  return _crypto.getRandomValues(arr);
                };
              }
            }
            if (
              forge.options.usePureJavaScript ||
              (!forge.util.isNodejs && !getRandomValues)
            ) {
              // if this is a web worker, do not use weak entropy, instead register to
              // receive strong entropy asynchronously from the main thread
              if (
                typeof window === "undefined" ||
                window.document === undefined
              ) {
                // FIXME:
              }

              // get load time entropy
              _ctx.collectInt(+new Date(), 32);

              // add some entropy from navigator object
              if (typeof navigator !== "undefined") {
                var _navBytes = "";
                for (var key in navigator) {
                  try {
                    if (typeof navigator[key] == "string") {
                      _navBytes += navigator[key];
                    }
                  } catch (e) {
                    /* Some navigator keys might not be accessible, e.g. the geolocation
          attribute throws an exception if touched in Mozilla chrome://
          context.

          Silently ignore this and just don't use this as a source of
          entropy. */
                  }
                }
                _ctx.collect(_navBytes);
                _navBytes = null;
              }

              // add mouse and keyboard collectors if jquery is available
              if (jQuery) {
                // set up mouse entropy capture
                jQuery().mousemove(function(e) {
                  // add mouse coords
                  _ctx.collectInt(e.clientX, 16);
                  _ctx.collectInt(e.clientY, 16);
                });

                // set up keyboard entropy capture
                jQuery().keypress(function(e) {
                  _ctx.collectInt(e.charCode, 8);
                });
              }
            }

            /* Random API */
            if (!forge.random) {
              forge.random = _ctx;
            } else {
              // extend forge.random with _ctx
              for (var key in _ctx) {
                forge.random[key] = _ctx[key];
              }
            }

            // expose spawn PRNG
            forge.random.createInstance = spawnPrng;

            module.exports = forge.random;
          })(typeof jQuery !== "undefined" ? jQuery : null);
        })();

        /***/
      },
      /* 10 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var assert = __webpack_require__(7);
        var inherits = __webpack_require__(2);

        exports.inherits = inherits;

        function toArray(msg, enc) {
          if (Array.isArray(msg)) return msg.slice();
          if (!msg) return [];
          var res = [];
          if (typeof msg === "string") {
            if (!enc) {
              for (var i = 0; i < msg.length; i++) {
                var c = msg.charCodeAt(i);
                var hi = c >> 8;
                var lo = c & 0xff;
                if (hi) res.push(hi, lo);
                else res.push(lo);
              }
            } else if (enc === "hex") {
              msg = msg.replace(/[^a-z0-9]+/gi, "");
              if (msg.length % 2 !== 0) msg = "0" + msg;
              for (i = 0; i < msg.length; i += 2)
                res.push(parseInt(msg[i] + msg[i + 1], 16));
            }
          } else {
            for (i = 0; i < msg.length; i++) res[i] = msg[i] | 0;
          }
          return res;
        }
        exports.toArray = toArray;

        function toHex(msg) {
          var res = "";
          for (var i = 0; i < msg.length; i++)
            res += zero2(msg[i].toString(16));
          return res;
        }
        exports.toHex = toHex;

        function htonl(w) {
          var res =
            (w >>> 24) |
            ((w >>> 8) & 0xff00) |
            ((w << 8) & 0xff0000) |
            ((w & 0xff) << 24);
          return res >>> 0;
        }
        exports.htonl = htonl;

        function toHex32(msg, endian) {
          var res = "";
          for (var i = 0; i < msg.length; i++) {
            var w = msg[i];
            if (endian === "little") w = htonl(w);
            res += zero8(w.toString(16));
          }
          return res;
        }
        exports.toHex32 = toHex32;

        function zero2(word) {
          if (word.length === 1) return "0" + word;
          else return word;
        }
        exports.zero2 = zero2;

        function zero8(word) {
          if (word.length === 7) return "0" + word;
          else if (word.length === 6) return "00" + word;
          else if (word.length === 5) return "000" + word;
          else if (word.length === 4) return "0000" + word;
          else if (word.length === 3) return "00000" + word;
          else if (word.length === 2) return "000000" + word;
          else if (word.length === 1) return "0000000" + word;
          else return word;
        }
        exports.zero8 = zero8;

        function join32(msg, start, end, endian) {
          var len = end - start;
          assert(len % 4 === 0);
          var res = new Array(len / 4);
          for (var i = 0, k = start; i < res.length; i++, k += 4) {
            var w;
            if (endian === "big")
              w =
                (msg[k] << 24) |
                (msg[k + 1] << 16) |
                (msg[k + 2] << 8) |
                msg[k + 3];
            else
              w =
                (msg[k + 3] << 24) |
                (msg[k + 2] << 16) |
                (msg[k + 1] << 8) |
                msg[k];
            res[i] = w >>> 0;
          }
          return res;
        }
        exports.join32 = join32;

        function split32(msg, endian) {
          var res = new Array(msg.length * 4);
          for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
            var m = msg[i];
            if (endian === "big") {
              res[k] = m >>> 24;
              res[k + 1] = (m >>> 16) & 0xff;
              res[k + 2] = (m >>> 8) & 0xff;
              res[k + 3] = m & 0xff;
            } else {
              res[k + 3] = m >>> 24;
              res[k + 2] = (m >>> 16) & 0xff;
              res[k + 1] = (m >>> 8) & 0xff;
              res[k] = m & 0xff;
            }
          }
          return res;
        }
        exports.split32 = split32;

        function rotr32(w, b) {
          return (w >>> b) | (w << (32 - b));
        }
        exports.rotr32 = rotr32;

        function rotl32(w, b) {
          return (w << b) | (w >>> (32 - b));
        }
        exports.rotl32 = rotl32;

        function sum32(a, b) {
          return (a + b) >>> 0;
        }
        exports.sum32 = sum32;

        function sum32_3(a, b, c) {
          return (a + b + c) >>> 0;
        }
        exports.sum32_3 = sum32_3;

        function sum32_4(a, b, c, d) {
          return (a + b + c + d) >>> 0;
        }
        exports.sum32_4 = sum32_4;

        function sum32_5(a, b, c, d, e) {
          return (a + b + c + d + e) >>> 0;
        }
        exports.sum32_5 = sum32_5;

        function sum64(buf, pos, ah, al) {
          var bh = buf[pos];
          var bl = buf[pos + 1];

          var lo = (al + bl) >>> 0;
          var hi = (lo < al ? 1 : 0) + ah + bh;
          buf[pos] = hi >>> 0;
          buf[pos + 1] = lo;
        }
        exports.sum64 = sum64;

        function sum64_hi(ah, al, bh, bl) {
          var lo = (al + bl) >>> 0;
          var hi = (lo < al ? 1 : 0) + ah + bh;
          return hi >>> 0;
        }
        exports.sum64_hi = sum64_hi;

        function sum64_lo(ah, al, bh, bl) {
          var lo = al + bl;
          return lo >>> 0;
        }
        exports.sum64_lo = sum64_lo;

        function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
          var carry = 0;
          var lo = al;
          lo = (lo + bl) >>> 0;
          carry += lo < al ? 1 : 0;
          lo = (lo + cl) >>> 0;
          carry += lo < cl ? 1 : 0;
          lo = (lo + dl) >>> 0;
          carry += lo < dl ? 1 : 0;

          var hi = ah + bh + ch + dh + carry;
          return hi >>> 0;
        }
        exports.sum64_4_hi = sum64_4_hi;

        function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
          var lo = al + bl + cl + dl;
          return lo >>> 0;
        }
        exports.sum64_4_lo = sum64_4_lo;

        function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
          var carry = 0;
          var lo = al;
          lo = (lo + bl) >>> 0;
          carry += lo < al ? 1 : 0;
          lo = (lo + cl) >>> 0;
          carry += lo < cl ? 1 : 0;
          lo = (lo + dl) >>> 0;
          carry += lo < dl ? 1 : 0;
          lo = (lo + el) >>> 0;
          carry += lo < el ? 1 : 0;

          var hi = ah + bh + ch + dh + eh + carry;
          return hi >>> 0;
        }
        exports.sum64_5_hi = sum64_5_hi;

        function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
          var lo = al + bl + cl + dl + el;

          return lo >>> 0;
        }
        exports.sum64_5_lo = sum64_5_lo;

        function rotr64_hi(ah, al, num) {
          var r = (al << (32 - num)) | (ah >>> num);
          return r >>> 0;
        }
        exports.rotr64_hi = rotr64_hi;

        function rotr64_lo(ah, al, num) {
          var r = (ah << (32 - num)) | (al >>> num);
          return r >>> 0;
        }
        exports.rotr64_lo = rotr64_lo;

        function shr64_hi(ah, al, num) {
          return ah >>> num;
        }
        exports.shr64_hi = shr64_hi;

        function shr64_lo(ah, al, num) {
          var r = (ah << (32 - num)) | (al >>> num);
          return r >>> 0;
        }
        exports.shr64_lo = shr64_lo;

        /***/
      },
      /* 11 */
      /***/ function(module, exports, __webpack_require__) {
        /**
 * Javascript implementation of Abstract Syntax Notation Number One.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2015 Digital Bazaar, Inc.
 *
 * An API for storing data using the Abstract Syntax Notation Number One
 * format using DER (Distinguished Encoding Rules) encoding. This encoding is
 * commonly used to store data for PKI, i.e. X.509 Certificates, and this
 * implementation exists for that purpose.
 *
 * Abstract Syntax Notation Number One (ASN.1) is used to define the abstract
 * syntax of information without restricting the way the information is encoded
 * for transmission. It provides a standard that allows for open systems
 * communication. ASN.1 defines the syntax of information data and a number of
 * simple data types as well as a notation for describing them and specifying
 * values for them.
 *
 * The RSA algorithm creates public and private keys that are often stored in
 * X.509 or PKCS#X formats -- which use ASN.1 (encoded in DER format). This
 * class provides the most basic functionality required to store and load DSA
 * keys that are encoded according to ASN.1.
 *
 * The most common binary encodings for ASN.1 are BER (Basic Encoding Rules)
 * and DER (Distinguished Encoding Rules). DER is just a subset of BER that
 * has stricter requirements for how data must be encoded.
 *
 * Each ASN.1 structure has a tag (a byte identifying the ASN.1 structure type)
 * and a byte array for the value of this ASN1 structure which may be data or a
 * list of ASN.1 structures.
 *
 * Each ASN.1 structure using BER is (Tag-Length-Value):
 *
 * | byte 0 | bytes X | bytes Y |
 * |--------|---------|----------
 * |  tag   | length  |  value  |
 *
 * ASN.1 allows for tags to be of "High-tag-number form" which allows a tag to
 * be two or more octets, but that is not supported by this class. A tag is
 * only 1 byte. Bits 1-5 give the tag number (ie the data type within a
 * particular 'class'), 6 indicates whether or not the ASN.1 value is
 * constructed from other ASN.1 values, and bits 7 and 8 give the 'class'. If
 * bits 7 and 8 are both zero, the class is UNIVERSAL. If only bit 7 is set,
 * then the class is APPLICATION. If only bit 8 is set, then the class is
 * CONTEXT_SPECIFIC. If both bits 7 and 8 are set, then the class is PRIVATE.
 * The tag numbers for the data types for the class UNIVERSAL are listed below:
 *
 * UNIVERSAL 0 Reserved for use by the encoding rules
 * UNIVERSAL 1 Boolean type
 * UNIVERSAL 2 Integer type
 * UNIVERSAL 3 Bitstring type
 * UNIVERSAL 4 Octetstring type
 * UNIVERSAL 5 Null type
 * UNIVERSAL 6 Object identifier type
 * UNIVERSAL 7 Object descriptor type
 * UNIVERSAL 8 External type and Instance-of type
 * UNIVERSAL 9 Real type
 * UNIVERSAL 10 Enumerated type
 * UNIVERSAL 11 Embedded-pdv type
 * UNIVERSAL 12 UTF8String type
 * UNIVERSAL 13 Relative object identifier type
 * UNIVERSAL 14-15 Reserved for future editions
 * UNIVERSAL 16 Sequence and Sequence-of types
 * UNIVERSAL 17 Set and Set-of types
 * UNIVERSAL 18-22, 25-30 Character string types
 * UNIVERSAL 23-24 Time types
 *
 * The length of an ASN.1 structure is specified after the tag identifier.
 * There is a definite form and an indefinite form. The indefinite form may
 * be used if the encoding is constructed and not all immediately available.
 * The indefinite form is encoded using a length byte with only the 8th bit
 * set. The end of the constructed object is marked using end-of-contents
 * octets (two zero bytes).
 *
 * The definite form looks like this:
 *
 * The length may take up 1 or more bytes, it depends on the length of the
 * value of the ASN.1 structure. DER encoding requires that if the ASN.1
 * structure has a value that has a length greater than 127, more than 1 byte
 * will be used to store its length, otherwise just one byte will be used.
 * This is strict.
 *
 * In the case that the length of the ASN.1 value is less than 127, 1 octet
 * (byte) is used to store the "short form" length. The 8th bit has a value of
 * 0 indicating the length is "short form" and not "long form" and bits 7-1
 * give the length of the data. (The 8th bit is the left-most, most significant
 * bit: also known as big endian or network format).
 *
 * In the case that the length of the ASN.1 value is greater than 127, 2 to
 * 127 octets (bytes) are used to store the "long form" length. The first
 * byte's 8th bit is set to 1 to indicate the length is "long form." Bits 7-1
 * give the number of additional octets. All following octets are in base 256
 * with the most significant digit first (typical big-endian binary unsigned
 * integer storage). So, for instance, if the length of a value was 257, the
 * first byte would be set to:
 *
 * 10000010 = 130 = 0x82.
 *
 * This indicates there are 2 octets (base 256) for the length. The second and
 * third bytes (the octets just mentioned) would store the length in base 256:
 *
 * octet 2: 00000001 = 1 * 256^1 = 256
 * octet 3: 00000001 = 1 * 256^0 = 1
 * total = 257
 *
 * The algorithm for converting a js integer value of 257 to base-256 is:
 *
 * var value = 257;
 * var bytes = [];
 * bytes[0] = (value >>> 8) & 0xFF; // most significant byte first
 * bytes[1] = value & 0xFF;        // least significant byte last
 *
 * On the ASN.1 UNIVERSAL Object Identifier (OID) type:
 *
 * An OID can be written like: "value1.value2.value3...valueN"
 *
 * The DER encoding rules:
 *
 * The first byte has the value 40 * value1 + value2.
 * The following bytes, if any, encode the remaining values. Each value is
 * encoded in base 128, most significant digit first (big endian), with as
 * few digits as possible, and the most significant bit of each byte set
 * to 1 except the last in each value's encoding. For example: Given the
 * OID "1.2.840.113549", its DER encoding is (remember each byte except the
 * last one in each encoding is OR'd with 0x80):
 *
 * byte 1: 40 * 1 + 2 = 42 = 0x2A.
 * bytes 2-3: 128 * 6 + 72 = 840 = 6 72 = 6 72 = 0x0648 = 0x8648
 * bytes 4-6: 16384 * 6 + 128 * 119 + 13 = 6 119 13 = 0x06770D = 0x86F70D
 *
 * The final value is: 0x2A864886F70D.
 * The full OID (including ASN.1 tag and length of 6 bytes) is:
 * 0x06062A864886F70D
 */
        var forge = __webpack_require__(1);
        __webpack_require__(3);
        __webpack_require__(16);

        /* ASN.1 API */
        var asn1 = (module.exports = forge.asn1 = forge.asn1 || {});

        /**
 * ASN.1 classes.
 */
        asn1.Class = {
          UNIVERSAL: 0x00,
          APPLICATION: 0x40,
          CONTEXT_SPECIFIC: 0x80,
          PRIVATE: 0xc0
        };

        /**
 * ASN.1 types. Not all types are supported by this implementation, only
 * those necessary to implement a simple PKI are implemented.
 */
        asn1.Type = {
          NONE: 0,
          BOOLEAN: 1,
          INTEGER: 2,
          BITSTRING: 3,
          OCTETSTRING: 4,
          NULL: 5,
          OID: 6,
          ODESC: 7,
          EXTERNAL: 8,
          REAL: 9,
          ENUMERATED: 10,
          EMBEDDED: 11,
          UTF8: 12,
          ROID: 13,
          SEQUENCE: 16,
          SET: 17,
          PRINTABLESTRING: 19,
          IA5STRING: 22,
          UTCTIME: 23,
          GENERALIZEDTIME: 24,
          BMPSTRING: 30
        };

        /**
 * Creates a new asn1 object.
 *
 * @param tagClass the tag class for the object.
 * @param type the data type (tag number) for the object.
 * @param constructed true if the asn1 object is in constructed form.
 * @param value the value for the object, if it is not constructed.
 * @param [options] the options to use:
 *          [bitStringContents] the plain BIT STRING content including padding
 *            byte.
 *
 * @return the asn1 object.
 */
        asn1.create = function(tagClass, type, constructed, value, options) {
          /* An asn1 object has a tagClass, a type, a constructed flag, and a
    value. The value's type depends on the constructed flag. If
    constructed, it will contain a list of other asn1 objects. If not,
    it will contain the ASN.1 value as an array of bytes formatted
    according to the ASN.1 data type. */

          // remove undefined values
          if (forge.util.isArray(value)) {
            var tmp = [];
            for (var i = 0; i < value.length; ++i) {
              if (value[i] !== undefined) {
                tmp.push(value[i]);
              }
            }
            value = tmp;
          }

          var obj = {
            tagClass: tagClass,
            type: type,
            constructed: constructed,
            composed: constructed || forge.util.isArray(value),
            value: value
          };
          if (options && "bitStringContents" in options) {
            // TODO: copy byte buffer if it's a buffer not a string
            obj.bitStringContents = options.bitStringContents;
            // TODO: add readonly flag to avoid this overhead
            // save copy to detect changes
            obj.original = asn1.copy(obj);
          }
          return obj;
        };

        /**
 * Copies an asn1 object.
 *
 * @param obj the asn1 object.
 * @param [options] copy options:
 *          [excludeBitStringContents] true to not copy bitStringContents
 *
 * @return the a copy of the asn1 object.
 */
        asn1.copy = function(obj, options) {
          var copy;

          if (forge.util.isArray(obj)) {
            copy = [];
            for (var i = 0; i < obj.length; ++i) {
              copy.push(asn1.copy(obj[i], options));
            }
            return copy;
          }

          if (typeof obj === "string") {
            // TODO: copy byte buffer if it's a buffer not a string
            return obj;
          }

          copy = {
            tagClass: obj.tagClass,
            type: obj.type,
            constructed: obj.constructed,
            composed: obj.composed,
            value: asn1.copy(obj.value, options)
          };
          if (options && !options.excludeBitStringContents) {
            // TODO: copy byte buffer if it's a buffer not a string
            copy.bitStringContents = obj.bitStringContents;
          }
          return copy;
        };

        /**
 * Compares asn1 objects for equality.
 *
 * Note this function does not run in constant time.
 *
 * @param obj1 the first asn1 object.
 * @param obj2 the second asn1 object.
 * @param [options] compare options:
 *          [includeBitStringContents] true to compare bitStringContents
 *
 * @return true if the asn1 objects are equal.
 */
        asn1.equals = function(obj1, obj2, options) {
          if (forge.util.isArray(obj1)) {
            if (!forge.util.isArray(obj2)) {
              return false;
            }
            if (obj1.length !== obj2.length) {
              return false;
            }
            for (var i = 0; i < obj1.length; ++i) {
              if (!asn1.equals(obj1[i], obj2[i])) {
                return false;
              }
              return true;
            }
          }

          if (typeof obj1 !== typeof obj2) {
            return false;
          }

          if (typeof obj1 === "string") {
            return obj1 === obj2;
          }

          var equal =
            obj1.tagClass === obj2.tagClass &&
            obj1.type === obj2.type &&
            obj1.constructed === obj2.constructed &&
            obj1.composed === obj2.composed &&
            asn1.equals(obj1.value, obj2.value);
          if (options && options.includeBitStringContents) {
            equal = equal && obj1.bitStringContents === obj2.bitStringContents;
          }

          return equal;
        };

        /**
 * Gets the length of a BER-encoded ASN.1 value.
 *
 * In case the length is not specified, undefined is returned.
 *
 * @param b the BER-encoded ASN.1 byte buffer, starting with the first
 *          length byte.
 *
 * @return the length of the BER-encoded ASN.1 value or undefined.
 */
        asn1.getBerValueLength = function(b) {
          // TODO: move this function and related DER/BER functions to a der.js
          // file; better abstract ASN.1 away from der/ber.
          var b2 = b.getByte();
          if (b2 === 0x80) {
            return undefined;
          }

          // see if the length is "short form" or "long form" (bit 8 set)
          var length;
          var longForm = b2 & 0x80;
          if (!longForm) {
            // length is just the first byte
            length = b2;
          } else {
            // the number of bytes the length is specified in bits 7 through 1
            // and each length byte is in big-endian base-256
            length = b.getInt((b2 & 0x7f) << 3);
          }
          return length;
        };

        /**
 * Check if the byte buffer has enough bytes. Throws an Error if not.
 *
 * @param bytes the byte buffer to parse from.
 * @param remaining the bytes remaining in the current parsing state.
 * @param n the number of bytes the buffer must have.
 */
        function _checkBufferLength(bytes, remaining, n) {
          if (n > remaining) {
            var error = new Error("Too few bytes to parse DER.");
            error.available = bytes.length();
            error.remaining = remaining;
            error.requested = n;
            throw error;
          }
        }

        /**
 * Gets the length of a BER-encoded ASN.1 value.
 *
 * In case the length is not specified, undefined is returned.
 *
 * @param bytes the byte buffer to parse from.
 * @param remaining the bytes remaining in the current parsing state.
 *
 * @return the length of the BER-encoded ASN.1 value or undefined.
 */
        var _getValueLength = function(bytes, remaining) {
          // TODO: move this function and related DER/BER functions to a der.js
          // file; better abstract ASN.1 away from der/ber.
          // fromDer already checked that this byte exists
          var b2 = bytes.getByte();
          remaining--;
          if (b2 === 0x80) {
            return undefined;
          }

          // see if the length is "short form" or "long form" (bit 8 set)
          var length;
          var longForm = b2 & 0x80;
          if (!longForm) {
            // length is just the first byte
            length = b2;
          } else {
            // the number of bytes the length is specified in bits 7 through 1
            // and each length byte is in big-endian base-256
            var longFormBytes = b2 & 0x7f;
            _checkBufferLength(bytes, remaining, longFormBytes);
            length = bytes.getInt(longFormBytes << 3);
          }
          // FIXME: this will only happen for 32 bit getInt with high bit set
          if (length < 0) {
            throw new Error("Negative length: " + length);
          }
          return length;
        };

        /**
 * Parses an asn1 object from a byte buffer in DER format.
 *
 * @param bytes the byte buffer to parse from.
 * @param [strict] true to be strict when checking value lengths, false to
 *          allow truncated values (default: true).
 * @param [options] object with options or boolean strict flag
 *          [strict] true to be strict when checking value lengths, false to
 *            allow truncated values (default: true).
 *          [decodeBitStrings] true to attempt to decode the content of
 *            BIT STRINGs (not OCTET STRINGs) using strict mode. Note that
 *            without schema support to understand the data context this can
 *            erroneously decode values that happen to be valid ASN.1. This
 *            flag will be deprecated or removed as soon as schema support is
 *            available. (default: true)
 *
 * @return the parsed asn1 object.
 */
        asn1.fromDer = function(bytes, options) {
          if (options === undefined) {
            options = {
              strict: true,
              decodeBitStrings: true
            };
          }
          if (typeof options === "boolean") {
            options = {
              strict: options,
              decodeBitStrings: true
            };
          }
          if (!("strict" in options)) {
            options.strict = true;
          }
          if (!("decodeBitStrings" in options)) {
            options.decodeBitStrings = true;
          }

          // wrap in buffer if needed
          if (typeof bytes === "string") {
            bytes = forge.util.createBuffer(bytes);
          }

          return _fromDer(bytes, bytes.length(), 0, options);
        };

        /**
 * Internal function to parse an asn1 object from a byte buffer in DER format.
 *
 * @param bytes the byte buffer to parse from.
 * @param remaining the number of bytes remaining for this chunk.
 * @param depth the current parsing depth.
 * @param options object with same options as fromDer().
 *
 * @return the parsed asn1 object.
 */
        function _fromDer(bytes, remaining, depth, options) {
          // temporary storage for consumption calculations
          var start;

          // minimum length for ASN.1 DER structure is 2
          _checkBufferLength(bytes, remaining, 2);

          // get the first byte
          var b1 = bytes.getByte();
          // consumed one byte
          remaining--;

          // get the tag class
          var tagClass = b1 & 0xc0;

          // get the type (bits 1-5)
          var type = b1 & 0x1f;

          // get the variable value length and adjust remaining bytes
          start = bytes.length();
          var length = _getValueLength(bytes, remaining);
          remaining -= start - bytes.length();

          // ensure there are enough bytes to get the value
          if (length !== undefined && length > remaining) {
            if (options.strict) {
              var error = new Error("Too few bytes to read ASN.1 value.");
              error.available = bytes.length();
              error.remaining = remaining;
              error.requested = length;
              throw error;
            }
            // Note: be lenient with truncated values and use remaining state bytes
            length = remaining;
          }

          // value storage
          var value;
          // possible BIT STRING contents storage
          var bitStringContents;

          // constructed flag is bit 6 (32 = 0x20) of the first byte
          var constructed = (b1 & 0x20) === 0x20;
          if (constructed) {
            // parse child asn1 objects from the value
            value = [];
            if (length === undefined) {
              // asn1 object of indefinite length, read until end tag
              for (;;) {
                _checkBufferLength(bytes, remaining, 2);
                if (bytes.bytes(2) === String.fromCharCode(0, 0)) {
                  bytes.getBytes(2);
                  remaining -= 2;
                  break;
                }
                start = bytes.length();
                value.push(_fromDer(bytes, remaining, depth + 1, options));
                remaining -= start - bytes.length();
              }
            } else {
              // parsing asn1 object of definite length
              while (length > 0) {
                start = bytes.length();
                value.push(_fromDer(bytes, length, depth + 1, options));
                remaining -= start - bytes.length();
                length -= start - bytes.length();
              }
            }
          }

          // if a BIT STRING, save the contents including padding
          if (
            value === undefined &&
            tagClass === asn1.Class.UNIVERSAL &&
            type === asn1.Type.BITSTRING
          ) {
            bitStringContents = bytes.bytes(length);
          }

          // determine if a non-constructed value should be decoded as a composed
          // value that contains other ASN.1 objects. BIT STRINGs (and OCTET STRINGs)
          // can be used this way.
          if (
            value === undefined &&
            options.decodeBitStrings &&
            tagClass === asn1.Class.UNIVERSAL &&
            // FIXME: OCTET STRINGs not yet supported here
            // .. other parts of forge expect to decode OCTET STRINGs manually
            type ===
              asn1.Type.BITSTRING /*|| type === asn1.Type.OCTETSTRING*/ &&
            length > 1
          ) {
            // save read position
            var savedRead = bytes.read;
            var savedRemaining = remaining;
            var unused = 0;
            if (type === asn1.Type.BITSTRING) {
              /* The first octet gives the number of bits by which the length of the
        bit string is less than the next multiple of eight (this is called
        the "number of unused bits").

        The second and following octets give the value of the bit string
        converted to an octet string. */
              _checkBufferLength(bytes, remaining, 1);
              unused = bytes.getByte();
              remaining--;
            }
            // if all bits are used, maybe the BIT/OCTET STRING holds ASN.1 objs
            if (unused === 0) {
              try {
                // attempt to parse child asn1 object from the value
                // (stored in array to signal composed value)
                start = bytes.length();
                var subOptions = {
                  // enforce strict mode to avoid parsing ASN.1 from plain data
                  verbose: options.verbose,
                  strict: true,
                  decodeBitStrings: true
                };
                var composed = _fromDer(
                  bytes,
                  remaining,
                  depth + 1,
                  subOptions
                );
                var used = start - bytes.length();
                remaining -= used;
                if (type == asn1.Type.BITSTRING) {
                  used++;
                }

                // if the data all decoded and the class indicates UNIVERSAL or
                // CONTEXT_SPECIFIC then assume we've got an encapsulated ASN.1 object
                var tc = composed.tagClass;
                if (
                  used === length &&
                  (tc === asn1.Class.UNIVERSAL ||
                    tc === asn1.Class.CONTEXT_SPECIFIC)
                ) {
                  value = [composed];
                }
              } catch (ex) {}
            }
            if (value === undefined) {
              // restore read position
              bytes.read = savedRead;
              remaining = savedRemaining;
            }
          }

          if (value === undefined) {
            // asn1 not constructed or composed, get raw value
            // TODO: do DER to OID conversion and vice-versa in .toDer?

            if (length === undefined) {
              if (options.strict) {
                throw new Error(
                  "Non-constructed ASN.1 object of indefinite length."
                );
              }
              // be lenient and use remaining state bytes
              length = remaining;
            }

            if (type === asn1.Type.BMPSTRING) {
              value = "";
              for (; length > 0; length -= 2) {
                _checkBufferLength(bytes, remaining, 2);
                value += String.fromCharCode(bytes.getInt16());
                remaining -= 2;
              }
            } else {
              value = bytes.getBytes(length);
            }
          }

          // add BIT STRING contents if available
          var asn1Options =
            bitStringContents === undefined
              ? null
              : {
                  bitStringContents: bitStringContents
                };

          // create and return asn1 object
          return asn1.create(tagClass, type, constructed, value, asn1Options);
        }

        /**
 * Converts the given asn1 object to a buffer of bytes in DER format.
 *
 * @param asn1 the asn1 object to convert to bytes.
 *
 * @return the buffer of bytes.
 */
        asn1.toDer = function(obj) {
          var bytes = forge.util.createBuffer();

          // build the first byte
          var b1 = obj.tagClass | obj.type;

          // for storing the ASN.1 value
          var value = forge.util.createBuffer();

          // use BIT STRING contents if available and data not changed
          var useBitStringContents = false;
          if ("bitStringContents" in obj) {
            useBitStringContents = true;
            if (obj.original) {
              useBitStringContents = asn1.equals(obj, obj.original);
            }
          }

          if (useBitStringContents) {
            value.putBytes(obj.bitStringContents);
          } else if (obj.composed) {
            // if composed, use each child asn1 object's DER bytes as value
            // turn on 6th bit (0x20 = 32) to indicate asn1 is constructed
            // from other asn1 objects
            if (obj.constructed) {
              b1 |= 0x20;
            } else {
              // type is a bit string, add unused bits of 0x00
              value.putByte(0x00);
            }

            // add all of the child DER bytes together
            for (var i = 0; i < obj.value.length; ++i) {
              if (obj.value[i] !== undefined) {
                value.putBuffer(asn1.toDer(obj.value[i]));
              }
            }
          } else {
            // use asn1.value directly
            if (obj.type === asn1.Type.BMPSTRING) {
              for (var i = 0; i < obj.value.length; ++i) {
                value.putInt16(obj.value.charCodeAt(i));
              }
            } else {
              // ensure integer is minimally-encoded
              // TODO: should all leading bytes be stripped vs just one?
              // .. ex '00 00 01' => '01'?
              if (
                obj.type === asn1.Type.INTEGER &&
                obj.value.length > 1 &&
                // leading 0x00 for positive integer
                ((obj.value.charCodeAt(0) === 0 &&
                  (obj.value.charCodeAt(1) & 0x80) === 0) ||
                  // leading 0xFF for negative integer
                  (obj.value.charCodeAt(0) === 0xff &&
                    (obj.value.charCodeAt(1) & 0x80) === 0x80))
              ) {
                value.putBytes(obj.value.substr(1));
              } else {
                value.putBytes(obj.value);
              }
            }
          }

          // add tag byte
          bytes.putByte(b1);

          // use "short form" encoding
          if (value.length() <= 127) {
            // one byte describes the length
            // bit 8 = 0 and bits 7-1 = length
            bytes.putByte(value.length() & 0x7f);
          } else {
            // use "long form" encoding
            // 2 to 127 bytes describe the length
            // first byte: bit 8 = 1 and bits 7-1 = # of additional bytes
            // other bytes: length in base 256, big-endian
            var len = value.length();
            var lenBytes = "";
            do {
              lenBytes += String.fromCharCode(len & 0xff);
              len = len >>> 8;
            } while (len > 0);

            // set first byte to # bytes used to store the length and turn on
            // bit 8 to indicate long-form length is used
            bytes.putByte(lenBytes.length | 0x80);

            // concatenate length bytes in reverse since they were generated
            // little endian and we need big endian
            for (var i = lenBytes.length - 1; i >= 0; --i) {
              bytes.putByte(lenBytes.charCodeAt(i));
            }
          }

          // concatenate value bytes
          bytes.putBuffer(value);
          return bytes;
        };

        /**
 * Converts an OID dot-separated string to a byte buffer. The byte buffer
 * contains only the DER-encoded value, not any tag or length bytes.
 *
 * @param oid the OID dot-separated string.
 *
 * @return the byte buffer.
 */
        asn1.oidToDer = function(oid) {
          // split OID into individual values
          var values = oid.split(".");
          var bytes = forge.util.createBuffer();

          // first byte is 40 * value1 + value2
          bytes.putByte(40 * parseInt(values[0], 10) + parseInt(values[1], 10));
          // other bytes are each value in base 128 with 8th bit set except for
          // the last byte for each value
          var last, valueBytes, value, b;
          for (var i = 2; i < values.length; ++i) {
            // produce value bytes in reverse because we don't know how many
            // bytes it will take to store the value
            last = true;
            valueBytes = [];
            value = parseInt(values[i], 10);
            do {
              b = value & 0x7f;
              value = value >>> 7;
              // if value is not last, then turn on 8th bit
              if (!last) {
                b |= 0x80;
              }
              valueBytes.push(b);
              last = false;
            } while (value > 0);

            // add value bytes in reverse (needs to be in big endian)
            for (var n = valueBytes.length - 1; n >= 0; --n) {
              bytes.putByte(valueBytes[n]);
            }
          }

          return bytes;
        };

        /**
 * Converts a DER-encoded byte buffer to an OID dot-separated string. The
 * byte buffer should contain only the DER-encoded value, not any tag or
 * length bytes.
 *
 * @param bytes the byte buffer.
 *
 * @return the OID dot-separated string.
 */
        asn1.derToOid = function(bytes) {
          var oid;

          // wrap in buffer if needed
          if (typeof bytes === "string") {
            bytes = forge.util.createBuffer(bytes);
          }

          // first byte is 40 * value1 + value2
          var b = bytes.getByte();
          oid = Math.floor(b / 40) + "." + b % 40;

          // other bytes are each value in base 128 with 8th bit set except for
          // the last byte for each value
          var value = 0;
          while (bytes.length() > 0) {
            b = bytes.getByte();
            value = value << 7;
            // not the last byte for the value
            if (b & 0x80) {
              value += b & 0x7f;
            } else {
              // last byte
              oid += "." + (value + b);
              value = 0;
            }
          }

          return oid;
        };

        /**
 * Converts a UTCTime value to a date.
 *
 * Note: GeneralizedTime has 4 digits for the year and is used for X.509
 * dates passed 2049. Parsing that structure hasn't been implemented yet.
 *
 * @param utc the UTCTime value to convert.
 *
 * @return the date.
 */
        asn1.utcTimeToDate = function(utc) {
          /* The following formats can be used:

    YYMMDDhhmmZ
    YYMMDDhhmm+hh'mm'
    YYMMDDhhmm-hh'mm'
    YYMMDDhhmmssZ
    YYMMDDhhmmss+hh'mm'
    YYMMDDhhmmss-hh'mm'

    Where:

    YY is the least significant two digits of the year
    MM is the month (01 to 12)
    DD is the day (01 to 31)
    hh is the hour (00 to 23)
    mm are the minutes (00 to 59)
    ss are the seconds (00 to 59)
    Z indicates that local time is GMT, + indicates that local time is
    later than GMT, and - indicates that local time is earlier than GMT
    hh' is the absolute value of the offset from GMT in hours
    mm' is the absolute value of the offset from GMT in minutes */
          var date = new Date();

          // if YY >= 50 use 19xx, if YY < 50 use 20xx
          var year = parseInt(utc.substr(0, 2), 10);
          year = year >= 50 ? 1900 + year : 2000 + year;
          var MM = parseInt(utc.substr(2, 2), 10) - 1; // use 0-11 for month
          var DD = parseInt(utc.substr(4, 2), 10);
          var hh = parseInt(utc.substr(6, 2), 10);
          var mm = parseInt(utc.substr(8, 2), 10);
          var ss = 0;

          // not just YYMMDDhhmmZ
          if (utc.length > 11) {
            // get character after minutes
            var c = utc.charAt(10);
            var end = 10;

            // see if seconds are present
            if (c !== "+" && c !== "-") {
              // get seconds
              ss = parseInt(utc.substr(10, 2), 10);
              end += 2;
            }
          }

          // update date
          date.setUTCFullYear(year, MM, DD);
          date.setUTCHours(hh, mm, ss, 0);

          if (end) {
            // get +/- after end of time
            c = utc.charAt(end);
            if (c === "+" || c === "-") {
              // get hours+minutes offset
              var hhoffset = parseInt(utc.substr(end + 1, 2), 10);
              var mmoffset = parseInt(utc.substr(end + 4, 2), 10);

              // calculate offset in milliseconds
              var offset = hhoffset * 60 + mmoffset;
              offset *= 60000;

              // apply offset
              if (c === "+") {
                date.setTime(+date - offset);
              } else {
                date.setTime(+date + offset);
              }
            }
          }

          return date;
        };

        /**
 * Converts a GeneralizedTime value to a date.
 *
 * @param gentime the GeneralizedTime value to convert.
 *
 * @return the date.
 */
        asn1.generalizedTimeToDate = function(gentime) {
          /* The following formats can be used:

    YYYYMMDDHHMMSS
    YYYYMMDDHHMMSS.fff
    YYYYMMDDHHMMSSZ
    YYYYMMDDHHMMSS.fffZ
    YYYYMMDDHHMMSS+hh'mm'
    YYYYMMDDHHMMSS.fff+hh'mm'
    YYYYMMDDHHMMSS-hh'mm'
    YYYYMMDDHHMMSS.fff-hh'mm'

    Where:

    YYYY is the year
    MM is the month (01 to 12)
    DD is the day (01 to 31)
    hh is the hour (00 to 23)
    mm are the minutes (00 to 59)
    ss are the seconds (00 to 59)
    .fff is the second fraction, accurate to three decimal places
    Z indicates that local time is GMT, + indicates that local time is
    later than GMT, and - indicates that local time is earlier than GMT
    hh' is the absolute value of the offset from GMT in hours
    mm' is the absolute value of the offset from GMT in minutes */
          var date = new Date();

          var YYYY = parseInt(gentime.substr(0, 4), 10);
          var MM = parseInt(gentime.substr(4, 2), 10) - 1; // use 0-11 for month
          var DD = parseInt(gentime.substr(6, 2), 10);
          var hh = parseInt(gentime.substr(8, 2), 10);
          var mm = parseInt(gentime.substr(10, 2), 10);
          var ss = parseInt(gentime.substr(12, 2), 10);
          var fff = 0;
          var offset = 0;
          var isUTC = false;

          if (gentime.charAt(gentime.length - 1) === "Z") {
            isUTC = true;
          }

          var end = gentime.length - 5,
            c = gentime.charAt(end);
          if (c === "+" || c === "-") {
            // get hours+minutes offset
            var hhoffset = parseInt(gentime.substr(end + 1, 2), 10);
            var mmoffset = parseInt(gentime.substr(end + 4, 2), 10);

            // calculate offset in milliseconds
            offset = hhoffset * 60 + mmoffset;
            offset *= 60000;

            // apply offset
            if (c === "+") {
              offset *= -1;
            }

            isUTC = true;
          }

          // check for second fraction
          if (gentime.charAt(14) === ".") {
            fff = parseFloat(gentime.substr(14), 10) * 1000;
          }

          if (isUTC) {
            date.setUTCFullYear(YYYY, MM, DD);
            date.setUTCHours(hh, mm, ss, fff);

            // apply offset
            date.setTime(+date + offset);
          } else {
            date.setFullYear(YYYY, MM, DD);
            date.setHours(hh, mm, ss, fff);
          }

          return date;
        };

        /**
 * Converts a date to a UTCTime value.
 *
 * Note: GeneralizedTime has 4 digits for the year and is used for X.509
 * dates passed 2049. Converting to a GeneralizedTime hasn't been
 * implemented yet.
 *
 * @param date the date to convert.
 *
 * @return the UTCTime value.
 */
        asn1.dateToUtcTime = function(date) {
          // TODO: validate; currently assumes proper format
          if (typeof date === "string") {
            return date;
          }

          var rval = "";

          // create format YYMMDDhhmmssZ
          var format = [];
          format.push(("" + date.getUTCFullYear()).substr(2));
          format.push("" + (date.getUTCMonth() + 1));
          format.push("" + date.getUTCDate());
          format.push("" + date.getUTCHours());
          format.push("" + date.getUTCMinutes());
          format.push("" + date.getUTCSeconds());

          // ensure 2 digits are used for each format entry
          for (var i = 0; i < format.length; ++i) {
            if (format[i].length < 2) {
              rval += "0";
            }
            rval += format[i];
          }
          rval += "Z";

          return rval;
        };

        /**
 * Converts a date to a GeneralizedTime value.
 *
 * @param date the date to convert.
 *
 * @return the GeneralizedTime value as a string.
 */
        asn1.dateToGeneralizedTime = function(date) {
          // TODO: validate; currently assumes proper format
          if (typeof date === "string") {
            return date;
          }

          var rval = "";

          // create format YYYYMMDDHHMMSSZ
          var format = [];
          format.push("" + date.getUTCFullYear());
          format.push("" + (date.getUTCMonth() + 1));
          format.push("" + date.getUTCDate());
          format.push("" + date.getUTCHours());
          format.push("" + date.getUTCMinutes());
          format.push("" + date.getUTCSeconds());

          // ensure 2 digits are used for each format entry
          for (var i = 0; i < format.length; ++i) {
            if (format[i].length < 2) {
              rval += "0";
            }
            rval += format[i];
          }
          rval += "Z";

          return rval;
        };

        /**
 * Converts a javascript integer to a DER-encoded byte buffer to be used
 * as the value for an INTEGER type.
 *
 * @param x the integer.
 *
 * @return the byte buffer.
 */
        asn1.integerToDer = function(x) {
          var rval = forge.util.createBuffer();
          if (x >= -0x80 && x < 0x80) {
            return rval.putSignedInt(x, 8);
          }
          if (x >= -0x8000 && x < 0x8000) {
            return rval.putSignedInt(x, 16);
          }
          if (x >= -0x800000 && x < 0x800000) {
            return rval.putSignedInt(x, 24);
          }
          if (x >= -0x80000000 && x < 0x80000000) {
            return rval.putSignedInt(x, 32);
          }
          var error = new Error("Integer too large; max is 32-bits.");
          error.integer = x;
          throw error;
        };

        /**
 * Converts a DER-encoded byte buffer to a javascript integer. This is
 * typically used to decode the value of an INTEGER type.
 *
 * @param bytes the byte buffer.
 *
 * @return the integer.
 */
        asn1.derToInteger = function(bytes) {
          // wrap in buffer if needed
          if (typeof bytes === "string") {
            bytes = forge.util.createBuffer(bytes);
          }

          var n = bytes.length() * 8;
          if (n > 32) {
            throw new Error("Integer too large; max is 32-bits.");
          }
          return bytes.getSignedInt(n);
        };

        /**
 * Validates the that given ASN.1 object is at least a super set of the
 * given ASN.1 structure. Only tag classes and types are checked. An
 * optional map may also be provided to capture ASN.1 values while the
 * structure is checked.
 *
 * To capture an ASN.1 value, set an object in the validator's 'capture'
 * parameter to the key to use in the capture map. To capture the full
 * ASN.1 object, specify 'captureAsn1'. To capture BIT STRING bytes, including
 * the leading unused bits counter byte, specify 'captureBitStringContents'.
 * To capture BIT STRING bytes, without the leading unused bits counter byte,
 * specify 'captureBitStringValue'.
 *
 * Objects in the validator may set a field 'optional' to true to indicate
 * that it isn't necessary to pass validation.
 *
 * @param obj the ASN.1 object to validate.
 * @param v the ASN.1 structure validator.
 * @param capture an optional map to capture values in.
 * @param errors an optional array for storing validation errors.
 *
 * @return true on success, false on failure.
 */
        asn1.validate = function(obj, v, capture, errors) {
          var rval = false;

          // ensure tag class and type are the same if specified
          if (
            (obj.tagClass === v.tagClass ||
              typeof v.tagClass === "undefined") &&
            (obj.type === v.type || typeof v.type === "undefined")
          ) {
            // ensure constructed flag is the same if specified
            if (
              obj.constructed === v.constructed ||
              typeof v.constructed === "undefined"
            ) {
              rval = true;

              // handle sub values
              if (v.value && forge.util.isArray(v.value)) {
                var j = 0;
                for (var i = 0; rval && i < v.value.length; ++i) {
                  rval = v.value[i].optional || false;
                  if (obj.value[j]) {
                    rval = asn1.validate(
                      obj.value[j],
                      v.value[i],
                      capture,
                      errors
                    );
                    if (rval) {
                      ++j;
                    } else if (v.value[i].optional) {
                      rval = true;
                    }
                  }
                  if (!rval && errors) {
                    errors.push(
                      "[" +
                        v.name +
                        "] " +
                        'Tag class "' +
                        v.tagClass +
                        '", type "' +
                        v.type +
                        '" expected value length "' +
                        v.value.length +
                        '", got "' +
                        obj.value.length +
                        '"'
                    );
                  }
                }
              }

              if (rval && capture) {
                if (v.capture) {
                  capture[v.capture] = obj.value;
                }
                if (v.captureAsn1) {
                  capture[v.captureAsn1] = obj;
                }
                if (v.captureBitStringContents && "bitStringContents" in obj) {
                  capture[v.captureBitStringContents] = obj.bitStringContents;
                }
                if (v.captureBitStringValue && "bitStringContents" in obj) {
                  var value;
                  if (obj.bitStringContents.length < 2) {
                    capture[v.captureBitStringValue] = "";
                  } else {
                    // FIXME: support unused bits with data shifting
                    var unused = obj.bitStringContents.charCodeAt(0);
                    if (unused !== 0) {
                      throw new Error(
                        "captureBitStringValue only supported for zero unused bits"
                      );
                    }
                    capture[
                      v.captureBitStringValue
                    ] = obj.bitStringContents.slice(1);
                  }
                }
              }
            } else if (errors) {
              errors.push(
                "[" +
                  v.name +
                  "] " +
                  'Expected constructed "' +
                  v.constructed +
                  '", got "' +
                  obj.constructed +
                  '"'
              );
            }
          } else if (errors) {
            if (obj.tagClass !== v.tagClass) {
              errors.push(
                "[" +
                  v.name +
                  "] " +
                  'Expected tag class "' +
                  v.tagClass +
                  '", got "' +
                  obj.tagClass +
                  '"'
              );
            }
            if (obj.type !== v.type) {
              errors.push(
                "[" +
                  v.name +
                  "] " +
                  'Expected type "' +
                  v.type +
                  '", got "' +
                  obj.type +
                  '"'
              );
            }
          }
          return rval;
        };

        // regex for testing for non-latin characters
        var _nonLatinRegex = /[^\\u0000-\\u00ff]/;

        /**
 * Pretty prints an ASN.1 object to a string.
 *
 * @param obj the object to write out.
 * @param level the level in the tree.
 * @param indentation the indentation to use.
 *
 * @return the string.
 */
        asn1.prettyPrint = function(obj, level, indentation) {
          var rval = "";

          // set default level and indentation
          level = level || 0;
          indentation = indentation || 2;

          // start new line for deep levels
          if (level > 0) {
            rval += "\n";
          }

          // create indent
          var indent = "";
          for (var i = 0; i < level * indentation; ++i) {
            indent += " ";
          }

          // print class:type
          rval += indent + "Tag: ";
          switch (obj.tagClass) {
            case asn1.Class.UNIVERSAL:
              rval += "Universal:";
              break;
            case asn1.Class.APPLICATION:
              rval += "Application:";
              break;
            case asn1.Class.CONTEXT_SPECIFIC:
              rval += "Context-Specific:";
              break;
            case asn1.Class.PRIVATE:
              rval += "Private:";
              break;
          }

          if (obj.tagClass === asn1.Class.UNIVERSAL) {
            rval += obj.type;

            // known types
            switch (obj.type) {
              case asn1.Type.NONE:
                rval += " (None)";
                break;
              case asn1.Type.BOOLEAN:
                rval += " (Boolean)";
                break;
              case asn1.Type.INTEGER:
                rval += " (Integer)";
                break;
              case asn1.Type.BITSTRING:
                rval += " (Bit string)";
                break;
              case asn1.Type.OCTETSTRING:
                rval += " (Octet string)";
                break;
              case asn1.Type.NULL:
                rval += " (Null)";
                break;
              case asn1.Type.OID:
                rval += " (Object Identifier)";
                break;
              case asn1.Type.ODESC:
                rval += " (Object Descriptor)";
                break;
              case asn1.Type.EXTERNAL:
                rval += " (External or Instance of)";
                break;
              case asn1.Type.REAL:
                rval += " (Real)";
                break;
              case asn1.Type.ENUMERATED:
                rval += " (Enumerated)";
                break;
              case asn1.Type.EMBEDDED:
                rval += " (Embedded PDV)";
                break;
              case asn1.Type.UTF8:
                rval += " (UTF8)";
                break;
              case asn1.Type.ROID:
                rval += " (Relative Object Identifier)";
                break;
              case asn1.Type.SEQUENCE:
                rval += " (Sequence)";
                break;
              case asn1.Type.SET:
                rval += " (Set)";
                break;
              case asn1.Type.PRINTABLESTRING:
                rval += " (Printable String)";
                break;
              case asn1.Type.IA5String:
                rval += " (IA5String (ASCII))";
                break;
              case asn1.Type.UTCTIME:
                rval += " (UTC time)";
                break;
              case asn1.Type.GENERALIZEDTIME:
                rval += " (Generalized time)";
                break;
              case asn1.Type.BMPSTRING:
                rval += " (BMP String)";
                break;
            }
          } else {
            rval += obj.type;
          }

          rval += "\n";
          rval += indent + "Constructed: " + obj.constructed + "\n";

          if (obj.composed) {
            var subvalues = 0;
            var sub = "";
            for (var i = 0; i < obj.value.length; ++i) {
              if (obj.value[i] !== undefined) {
                subvalues += 1;
                sub += asn1.prettyPrint(obj.value[i], level + 1, indentation);
                if (i + 1 < obj.value.length) {
                  sub += ",";
                }
              }
            }
            rval += indent + "Sub values: " + subvalues + sub;
          } else {
            rval += indent + "Value: ";
            if (obj.type === asn1.Type.OID) {
              var oid = asn1.derToOid(obj.value);
              rval += oid;
              if (forge.pki && forge.pki.oids) {
                if (oid in forge.pki.oids) {
                  rval += " (" + forge.pki.oids[oid] + ") ";
                }
              }
            }
            if (obj.type === asn1.Type.INTEGER) {
              try {
                rval += asn1.derToInteger(obj.value);
              } catch (ex) {
                rval += "0x" + forge.util.bytesToHex(obj.value);
              }
            } else if (obj.type === asn1.Type.BITSTRING) {
              // TODO: shift bits as needed to display without padding
              if (obj.value.length > 1) {
                // remove unused bits field
                rval += "0x" + forge.util.bytesToHex(obj.value.slice(1));
              } else {
                rval += "(none)";
              }
              // show unused bit count
              if (obj.value.length > 0) {
                var unused = obj.value.charCodeAt(0);
                if (unused == 1) {
                  rval += " (1 unused bit shown)";
                } else if (unused > 1) {
                  rval += " (" + unused + " unused bits shown)";
                }
              }
            } else if (obj.type === asn1.Type.OCTETSTRING) {
              if (!_nonLatinRegex.test(obj.value)) {
                rval += "(" + obj.value + ") ";
              }
              rval += "0x" + forge.util.bytesToHex(obj.value);
            } else if (obj.type === asn1.Type.UTF8) {
              rval += forge.util.decodeUtf8(obj.value);
            } else if (
              obj.type === asn1.Type.PRINTABLESTRING ||
              obj.type === asn1.Type.IA5String
            ) {
              rval += obj.value;
            } else if (_nonLatinRegex.test(obj.value)) {
              rval += "0x" + forge.util.bytesToHex(obj.value);
            } else if (obj.value.length === 0) {
              rval += "[null]";
            } else {
              rval += obj.value;
            }
          }

          return rval;
        };

        /***/
      },
      /* 12 */
      /***/ function(module, exports, __webpack_require__) {
        /**
 * Node.js module for Forge message digests.
 *
 * @author Dave Longley
 *
 * Copyright 2011-2017 Digital Bazaar, Inc.
 */
        var forge = __webpack_require__(1);

        module.exports = forge.md = forge.md || {};
        forge.md.algorithms = forge.md.algorithms || {};

        /***/
      },
      /* 13 */
      /***/ function(module, exports, __webpack_require__) {
        /* eslint-disable node/no-deprecated-api */
        var buffer = __webpack_require__(0);
        var Buffer = buffer.Buffer;

        // alternative to using Object.keys for old browsers
        function copyProps(src, dst) {
          for (var key in src) {
            dst[key] = src[key];
          }
        }
        if (
          Buffer.from &&
          Buffer.alloc &&
          Buffer.allocUnsafe &&
          Buffer.allocUnsafeSlow
        ) {
          module.exports = buffer;
        } else {
          // Copy properties from require('buffer')
          copyProps(buffer, exports);
          exports.Buffer = SafeBuffer;
        }

        function SafeBuffer(arg, encodingOrOffset, length) {
          return Buffer(arg, encodingOrOffset, length);
        }

        // Copy static methods from Buffer
        copyProps(Buffer, SafeBuffer);

        SafeBuffer.from = function(arg, encodingOrOffset, length) {
          if (typeof arg === "number") {
            throw new TypeError("Argument must not be a number");
          }
          return Buffer(arg, encodingOrOffset, length);
        };

        SafeBuffer.alloc = function(size, fill, encoding) {
          if (typeof size !== "number") {
            throw new TypeError("Argument must be a number");
          }
          var buf = Buffer(size);
          if (fill !== undefined) {
            if (typeof encoding === "string") {
              buf.fill(fill, encoding);
            } else {
              buf.fill(fill);
            }
          } else {
            buf.fill(0);
          }
          return buf;
        };

        SafeBuffer.allocUnsafe = function(size) {
          if (typeof size !== "number") {
            throw new TypeError("Argument must be a number");
          }
          return Buffer(size);
        };

        SafeBuffer.allocUnsafeSlow = function(size) {
          if (typeof size !== "number") {
            throw new TypeError("Argument must be a number");
          }
          return buffer.SlowBuffer(size);
        };

        /***/
      },
      /* 14 */
      /***/ function(module, exports, __webpack_require__) {
        var Buffer = __webpack_require__(13).Buffer;
        var Transform = __webpack_require__(19).Transform;
        var StringDecoder = __webpack_require__(55).StringDecoder;
        var inherits = __webpack_require__(2);

        function CipherBase(hashMode) {
          Transform.call(this);
          this.hashMode = typeof hashMode === "string";
          if (this.hashMode) {
            this[hashMode] = this._finalOrDigest;
          } else {
            this.final = this._finalOrDigest;
          }
          if (this._final) {
            this.__final = this._final;
            this._final = null;
          }
          this._decoder = null;
          this._encoding = null;
        }
        inherits(CipherBase, Transform);

        CipherBase.prototype.update = function(data, inputEnc, outputEnc) {
          if (typeof data === "string") {
            data = Buffer.from(data, inputEnc);
          }

          var outData = this._update(data);
          if (this.hashMode) return this;

          if (outputEnc) {
            outData = this._toString(outData, outputEnc);
          }

          return outData;
        };

        CipherBase.prototype.setAutoPadding = function() {};
        CipherBase.prototype.getAuthTag = function() {
          throw new Error("trying to get auth tag in unsupported state");
        };

        CipherBase.prototype.setAuthTag = function() {
          throw new Error("trying to set auth tag in unsupported state");
        };

        CipherBase.prototype.setAAD = function() {
          throw new Error("trying to set aad in unsupported state");
        };

        CipherBase.prototype._transform = function(data, _, next) {
          var err;
          try {
            if (this.hashMode) {
              this._update(data);
            } else {
              this.push(this._update(data));
            }
          } catch (e) {
            err = e;
          } finally {
            next(err);
          }
        };
        CipherBase.prototype._flush = function(done) {
          var err;
          try {
            this.push(this.__final());
          } catch (e) {
            err = e;
          }

          done(err);
        };
        CipherBase.prototype._finalOrDigest = function(outputEnc) {
          var outData = this.__final() || Buffer.alloc(0);
          if (outputEnc) {
            outData = this._toString(outData, outputEnc, true);
          }
          return outData;
        };

        CipherBase.prototype._toString = function(value, enc, fin) {
          if (!this._decoder) {
            this._decoder = new StringDecoder(enc);
            this._encoding = enc;
          }

          if (this._encoding !== enc) throw new Error("can't switch encodings");

          var out = this._decoder.write(value);
          if (fin) {
            out += this._decoder.end();
          }

          return out;
        };

        module.exports = CipherBase;

        /***/
      },
      /* 15 */
      /***/ function(module, exports, __webpack_require__) {
        /**
 * Advanced Encryption Standard (AES) implementation.
 *
 * This implementation is based on the public domain library 'jscrypto' which
 * was written by:
 *
 * Emily Stark (estark@stanford.edu)
 * Mike Hamburg (mhamburg@stanford.edu)
 * Dan Boneh (dabo@cs.stanford.edu)
 *
 * Parts of this code are based on the OpenSSL implementation of AES:
 * http://www.openssl.org
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
 */
        var forge = __webpack_require__(1);
        __webpack_require__(43);
        __webpack_require__(64);
        __webpack_require__(3);

        /* AES API */
        module.exports = forge.aes = forge.aes || {};

        /**
 * Deprecated. Instead, use:
 *
 * var cipher = forge.cipher.createCipher('AES-<mode>', key);
 * cipher.start({iv: iv});
 *
 * Creates an AES cipher object to encrypt data using the given symmetric key.
 * The output will be stored in the 'output' member of the returned cipher.
 *
 * The key and iv may be given as a string of bytes, an array of bytes,
 * a byte buffer, or an array of 32-bit words.
 *
 * @param key the symmetric key to use.
 * @param iv the initialization vector to use.
 * @param output the buffer to write to, null to create one.
 * @param mode the cipher mode to use (default: 'CBC').
 *
 * @return the cipher.
 */
        forge.aes.startEncrypting = function(key, iv, output, mode) {
          var cipher = _createCipher({
            key: key,
            output: output,
            decrypt: false,
            mode: mode
          });
          cipher.start(iv);
          return cipher;
        };

        /**
 * Deprecated. Instead, use:
 *
 * var cipher = forge.cipher.createCipher('AES-<mode>', key);
 *
 * Creates an AES cipher object to encrypt data using the given symmetric key.
 *
 * The key may be given as a string of bytes, an array of bytes, a
 * byte buffer, or an array of 32-bit words.
 *
 * @param key the symmetric key to use.
 * @param mode the cipher mode to use (default: 'CBC').
 *
 * @return the cipher.
 */
        forge.aes.createEncryptionCipher = function(key, mode) {
          return _createCipher({
            key: key,
            output: null,
            decrypt: false,
            mode: mode
          });
        };

        /**
 * Deprecated. Instead, use:
 *
 * var decipher = forge.cipher.createDecipher('AES-<mode>', key);
 * decipher.start({iv: iv});
 *
 * Creates an AES cipher object to decrypt data using the given symmetric key.
 * The output will be stored in the 'output' member of the returned cipher.
 *
 * The key and iv may be given as a string of bytes, an array of bytes,
 * a byte buffer, or an array of 32-bit words.
 *
 * @param key the symmetric key to use.
 * @param iv the initialization vector to use.
 * @param output the buffer to write to, null to create one.
 * @param mode the cipher mode to use (default: 'CBC').
 *
 * @return the cipher.
 */
        forge.aes.startDecrypting = function(key, iv, output, mode) {
          var cipher = _createCipher({
            key: key,
            output: output,
            decrypt: true,
            mode: mode
          });
          cipher.start(iv);
          return cipher;
        };

        /**
 * Deprecated. Instead, use:
 *
 * var decipher = forge.cipher.createDecipher('AES-<mode>', key);
 *
 * Creates an AES cipher object to decrypt data using the given symmetric key.
 *
 * The key may be given as a string of bytes, an array of bytes, a
 * byte buffer, or an array of 32-bit words.
 *
 * @param key the symmetric key to use.
 * @param mode the cipher mode to use (default: 'CBC').
 *
 * @return the cipher.
 */
        forge.aes.createDecryptionCipher = function(key, mode) {
          return _createCipher({
            key: key,
            output: null,
            decrypt: true,
            mode: mode
          });
        };

        /**
 * Creates a new AES cipher algorithm object.
 *
 * @param name the name of the algorithm.
 * @param mode the mode factory function.
 *
 * @return the AES algorithm object.
 */
        forge.aes.Algorithm = function(name, mode) {
          if (!init) {
            initialize();
          }
          var self = this;
          self.name = name;
          self.mode = new mode({
            blockSize: 16,
            cipher: {
              encrypt: function(inBlock, outBlock) {
                return _updateBlock(self._w, inBlock, outBlock, false);
              },
              decrypt: function(inBlock, outBlock) {
                return _updateBlock(self._w, inBlock, outBlock, true);
              }
            }
          });
          self._init = false;
        };

        /**
 * Initializes this AES algorithm by expanding its key.
 *
 * @param options the options to use.
 *          key the key to use with this algorithm.
 *          decrypt true if the algorithm should be initialized for decryption,
 *            false for encryption.
 */
        forge.aes.Algorithm.prototype.initialize = function(options) {
          if (this._init) {
            return;
          }

          var key = options.key;
          var tmp;

          /* Note: The key may be a string of bytes, an array of bytes, a byte
    buffer, or an array of 32-bit integers. If the key is in bytes, then
    it must be 16, 24, or 32 bytes in length. If it is in 32-bit
    integers, it must be 4, 6, or 8 integers long. */

          if (
            typeof key === "string" &&
            (key.length === 16 || key.length === 24 || key.length === 32)
          ) {
            // convert key string into byte buffer
            key = forge.util.createBuffer(key);
          } else if (
            forge.util.isArray(key) &&
            (key.length === 16 || key.length === 24 || key.length === 32)
          ) {
            // convert key integer array into byte buffer
            tmp = key;
            key = forge.util.createBuffer();
            for (var i = 0; i < tmp.length; ++i) {
              key.putByte(tmp[i]);
            }
          }

          // convert key byte buffer into 32-bit integer array
          if (!forge.util.isArray(key)) {
            tmp = key;
            key = [];

            // key lengths of 16, 24, 32 bytes allowed
            var len = tmp.length();
            if (len === 16 || len === 24 || len === 32) {
              len = len >>> 2;
              for (var i = 0; i < len; ++i) {
                key.push(tmp.getInt32());
              }
            }
          }

          // key must be an array of 32-bit integers by now
          if (
            !forge.util.isArray(key) ||
            !(key.length === 4 || key.length === 6 || key.length === 8)
          ) {
            throw new Error("Invalid key parameter.");
          }

          // encryption operation is always used for these modes
          var mode = this.mode.name;
          var encryptOp = ["CFB", "OFB", "CTR", "GCM"].indexOf(mode) !== -1;

          // do key expansion
          this._w = _expandKey(key, options.decrypt && !encryptOp);
          this._init = true;
        };

        /**
 * Expands a key. Typically only used for testing.
 *
 * @param key the symmetric key to expand, as an array of 32-bit words.
 * @param decrypt true to expand for decryption, false for encryption.
 *
 * @return the expanded key.
 */
        forge.aes._expandKey = function(key, decrypt) {
          if (!init) {
            initialize();
          }
          return _expandKey(key, decrypt);
        };

        /**
 * Updates a single block. Typically only used for testing.
 *
 * @param w the expanded key to use.
 * @param input an array of block-size 32-bit words.
 * @param output an array of block-size 32-bit words.
 * @param decrypt true to decrypt, false to encrypt.
 */
        forge.aes._updateBlock = _updateBlock;

        /** Register AES algorithms **/

        registerAlgorithm("AES-ECB", forge.cipher.modes.ecb);
        registerAlgorithm("AES-CBC", forge.cipher.modes.cbc);
        registerAlgorithm("AES-CFB", forge.cipher.modes.cfb);
        registerAlgorithm("AES-OFB", forge.cipher.modes.ofb);
        registerAlgorithm("AES-CTR", forge.cipher.modes.ctr);
        registerAlgorithm("AES-GCM", forge.cipher.modes.gcm);

        function registerAlgorithm(name, mode) {
          var factory = function() {
            return new forge.aes.Algorithm(name, mode);
          };
          forge.cipher.registerAlgorithm(name, factory);
        }

        /** AES implementation **/

        var init = false; // not yet initialized
        var Nb = 4; // number of words comprising the state (AES = 4)
        var sbox; // non-linear substitution table used in key expansion
        var isbox; // inversion of sbox
        var rcon; // round constant word array
        var mix; // mix-columns table
        var imix; // inverse mix-columns table

        /**
 * Performs initialization, ie: precomputes tables to optimize for speed.
 *
 * One way to understand how AES works is to imagine that 'addition' and
 * 'multiplication' are interfaces that require certain mathematical
 * properties to hold true (ie: they are associative) but they might have
 * different implementations and produce different kinds of results ...
 * provided that their mathematical properties remain true. AES defines
 * its own methods of addition and multiplication but keeps some important
 * properties the same, ie: associativity and distributivity. The
 * explanation below tries to shed some light on how AES defines addition
 * and multiplication of bytes and 32-bit words in order to perform its
 * encryption and decryption algorithms.
 *
 * The basics:
 *
 * The AES algorithm views bytes as binary representations of polynomials
 * that have either 1 or 0 as the coefficients. It defines the addition
 * or subtraction of two bytes as the XOR operation. It also defines the
 * multiplication of two bytes as a finite field referred to as GF(2^8)
 * (Note: 'GF' means "Galois Field" which is a field that contains a finite
 * number of elements so GF(2^8) has 256 elements).
 *
 * This means that any two bytes can be represented as binary polynomials;
 * when they multiplied together and modularly reduced by an irreducible
 * polynomial of the 8th degree, the results are the field GF(2^8). The
 * specific irreducible polynomial that AES uses in hexadecimal is 0x11b.
 * This multiplication is associative with 0x01 as the identity:
 *
 * (b * 0x01 = GF(b, 0x01) = b).
 *
 * The operation GF(b, 0x02) can be performed at the byte level by left
 * shifting b once and then XOR'ing it (to perform the modular reduction)
 * with 0x11b if b is >= 128. Repeated application of the multiplication
 * of 0x02 can be used to implement the multiplication of any two bytes.
 *
 * For instance, multiplying 0x57 and 0x13, denoted as GF(0x57, 0x13), can
 * be performed by factoring 0x13 into 0x01, 0x02, and 0x10. Then these
 * factors can each be multiplied by 0x57 and then added together. To do
 * the multiplication, values for 0x57 multiplied by each of these 3 factors
 * can be precomputed and stored in a table. To add them, the values from
 * the table are XOR'd together.
 *
 * AES also defines addition and multiplication of words, that is 4-byte
 * numbers represented as polynomials of 3 degrees where the coefficients
 * are the values of the bytes.
 *
 * The word [a0, a1, a2, a3] is a polynomial a3x^3 + a2x^2 + a1x + a0.
 *
 * Addition is performed by XOR'ing like powers of x. Multiplication
 * is performed in two steps, the first is an algebriac expansion as
 * you would do normally (where addition is XOR). But the result is
 * a polynomial larger than 3 degrees and thus it cannot fit in a word. So
 * next the result is modularly reduced by an AES-specific polynomial of
 * degree 4 which will always produce a polynomial of less than 4 degrees
 * such that it will fit in a word. In AES, this polynomial is x^4 + 1.
 *
 * The modular product of two polynomials 'a' and 'b' is thus:
 *
 * d(x) = d3x^3 + d2x^2 + d1x + d0
 * with
 * d0 = GF(a0, b0) ^ GF(a3, b1) ^ GF(a2, b2) ^ GF(a1, b3)
 * d1 = GF(a1, b0) ^ GF(a0, b1) ^ GF(a3, b2) ^ GF(a2, b3)
 * d2 = GF(a2, b0) ^ GF(a1, b1) ^ GF(a0, b2) ^ GF(a3, b3)
 * d3 = GF(a3, b0) ^ GF(a2, b1) ^ GF(a1, b2) ^ GF(a0, b3)
 *
 * As a matrix:
 *
 * [d0] = [a0 a3 a2 a1][b0]
 * [d1]   [a1 a0 a3 a2][b1]
 * [d2]   [a2 a1 a0 a3][b2]
 * [d3]   [a3 a2 a1 a0][b3]
 *
 * Special polynomials defined by AES (0x02 == {02}):
 * a(x)    = {03}x^3 + {01}x^2 + {01}x + {02}
 * a^-1(x) = {0b}x^3 + {0d}x^2 + {09}x + {0e}.
 *
 * These polynomials are used in the MixColumns() and InverseMixColumns()
 * operations, respectively, to cause each element in the state to affect
 * the output (referred to as diffusing).
 *
 * RotWord() uses: a0 = a1 = a2 = {00} and a3 = {01}, which is the
 * polynomial x3.
 *
 * The ShiftRows() method modifies the last 3 rows in the state (where
 * the state is 4 words with 4 bytes per word) by shifting bytes cyclically.
 * The 1st byte in the second row is moved to the end of the row. The 1st
 * and 2nd bytes in the third row are moved to the end of the row. The 1st,
 * 2nd, and 3rd bytes are moved in the fourth row.
 *
 * More details on how AES arithmetic works:
 *
 * In the polynomial representation of binary numbers, XOR performs addition
 * and subtraction and multiplication in GF(2^8) denoted as GF(a, b)
 * corresponds with the multiplication of polynomials modulo an irreducible
 * polynomial of degree 8. In other words, for AES, GF(a, b) will multiply
 * polynomial 'a' with polynomial 'b' and then do a modular reduction by
 * an AES-specific irreducible polynomial of degree 8.
 *
 * A polynomial is irreducible if its only divisors are one and itself. For
 * the AES algorithm, this irreducible polynomial is:
 *
 * m(x) = x^8 + x^4 + x^3 + x + 1,
 *
 * or {01}{1b} in hexadecimal notation, where each coefficient is a bit:
 * 100011011 = 283 = 0x11b.
 *
 * For example, GF(0x57, 0x83) = 0xc1 because
 *
 * 0x57 = 87  = 01010111 = x^6 + x^4 + x^2 + x + 1
 * 0x85 = 131 = 10000101 = x^7 + x + 1
 *
 * (x^6 + x^4 + x^2 + x + 1) * (x^7 + x + 1)
 * =  x^13 + x^11 + x^9 + x^8 + x^7 +
 *    x^7 + x^5 + x^3 + x^2 + x +
 *    x^6 + x^4 + x^2 + x + 1
 * =  x^13 + x^11 + x^9 + x^8 + x^6 + x^5 + x^4 + x^3 + 1 = y
 *    y modulo (x^8 + x^4 + x^3 + x + 1)
 * =  x^7 + x^6 + 1.
 *
 * The modular reduction by m(x) guarantees the result will be a binary
 * polynomial of less than degree 8, so that it can fit in a byte.
 *
 * The operation to multiply a binary polynomial b with x (the polynomial
 * x in binary representation is 00000010) is:
 *
 * b_7x^8 + b_6x^7 + b_5x^6 + b_4x^5 + b_3x^4 + b_2x^3 + b_1x^2 + b_0x^1
 *
 * To get GF(b, x) we must reduce that by m(x). If b_7 is 0 (that is the
 * most significant bit is 0 in b) then the result is already reduced. If
 * it is 1, then we can reduce it by subtracting m(x) via an XOR.
 *
 * It follows that multiplication by x (00000010 or 0x02) can be implemented
 * by performing a left shift followed by a conditional bitwise XOR with
 * 0x1b. This operation on bytes is denoted by xtime(). Multiplication by
 * higher powers of x can be implemented by repeated application of xtime().
 *
 * By adding intermediate results, multiplication by any constant can be
 * implemented. For instance:
 *
 * GF(0x57, 0x13) = 0xfe because:
 *
 * xtime(b) = (b & 128) ? (b << 1 ^ 0x11b) : (b << 1)
 *
 * Note: We XOR with 0x11b instead of 0x1b because in javascript our
 * datatype for b can be larger than 1 byte, so a left shift will not
 * automatically eliminate bits that overflow a byte ... by XOR'ing the
 * overflow bit with 1 (the extra one from 0x11b) we zero it out.
 *
 * GF(0x57, 0x02) = xtime(0x57) = 0xae
 * GF(0x57, 0x04) = xtime(0xae) = 0x47
 * GF(0x57, 0x08) = xtime(0x47) = 0x8e
 * GF(0x57, 0x10) = xtime(0x8e) = 0x07
 *
 * GF(0x57, 0x13) = GF(0x57, (0x01 ^ 0x02 ^ 0x10))
 *
 * And by the distributive property (since XOR is addition and GF() is
 * multiplication):
 *
 * = GF(0x57, 0x01) ^ GF(0x57, 0x02) ^ GF(0x57, 0x10)
 * = 0x57 ^ 0xae ^ 0x07
 * = 0xfe.
 */
        function initialize() {
          init = true;

          /* Populate the Rcon table. These are the values given by
    [x^(i-1),{00},{00},{00}] where x^(i-1) are powers of x (and x = 0x02)
    in the field of GF(2^8), where i starts at 1.

    rcon[0] = [0x00, 0x00, 0x00, 0x00]
    rcon[1] = [0x01, 0x00, 0x00, 0x00] 2^(1-1) = 2^0 = 1
    rcon[2] = [0x02, 0x00, 0x00, 0x00] 2^(2-1) = 2^1 = 2
    ...
    rcon[9]  = [0x1B, 0x00, 0x00, 0x00] 2^(9-1)  = 2^8 = 0x1B
    rcon[10] = [0x36, 0x00, 0x00, 0x00] 2^(10-1) = 2^9 = 0x36

    We only store the first byte because it is the only one used.
  */
          rcon = [
            0x00,
            0x01,
            0x02,
            0x04,
            0x08,
            0x10,
            0x20,
            0x40,
            0x80,
            0x1b,
            0x36
          ];

          // compute xtime table which maps i onto GF(i, 0x02)
          var xtime = new Array(256);
          for (var i = 0; i < 128; ++i) {
            xtime[i] = i << 1;
            xtime[i + 128] = ((i + 128) << 1) ^ 0x11b;
          }

          // compute all other tables
          sbox = new Array(256);
          isbox = new Array(256);
          mix = new Array(4);
          imix = new Array(4);
          for (var i = 0; i < 4; ++i) {
            mix[i] = new Array(256);
            imix[i] = new Array(256);
          }
          var e = 0,
            ei = 0,
            e2,
            e4,
            e8,
            sx,
            sx2,
            me,
            ime;
          for (var i = 0; i < 256; ++i) {
            /* We need to generate the SubBytes() sbox and isbox tables so that
      we can perform byte substitutions. This requires us to traverse
      all of the elements in GF, find their multiplicative inverses,
      and apply to each the following affine transformation:

      bi' = bi ^ b(i + 4) mod 8 ^ b(i + 5) mod 8 ^ b(i + 6) mod 8 ^
            b(i + 7) mod 8 ^ ci
      for 0 <= i < 8, where bi is the ith bit of the byte, and ci is the
      ith bit of a byte c with the value {63} or {01100011}.

      It is possible to traverse every possible value in a Galois field
      using what is referred to as a 'generator'. There are many
      generators (128 out of 256): 3,5,6,9,11,82 to name a few. To fully
      traverse GF we iterate 255 times, multiplying by our generator
      each time.

      On each iteration we can determine the multiplicative inverse for
      the current element.

      Suppose there is an element in GF 'e'. For a given generator 'g',
      e = g^x. The multiplicative inverse of e is g^(255 - x). It turns
      out that if use the inverse of a generator as another generator
      it will produce all of the corresponding multiplicative inverses
      at the same time. For this reason, we choose 5 as our inverse
      generator because it only requires 2 multiplies and 1 add and its
      inverse, 82, requires relatively few operations as well.

      In order to apply the affine transformation, the multiplicative
      inverse 'ei' of 'e' can be repeatedly XOR'd (4 times) with a
      bit-cycling of 'ei'. To do this 'ei' is first stored in 's' and
      'x'. Then 's' is left shifted and the high bit of 's' is made the
      low bit. The resulting value is stored in 's'. Then 'x' is XOR'd
      with 's' and stored in 'x'. On each subsequent iteration the same
      operation is performed. When 4 iterations are complete, 'x' is
      XOR'd with 'c' (0x63) and the transformed value is stored in 'x'.
      For example:

      s = 01000001
      x = 01000001

      iteration 1: s = 10000010, x ^= s
      iteration 2: s = 00000101, x ^= s
      iteration 3: s = 00001010, x ^= s
      iteration 4: s = 00010100, x ^= s
      x ^= 0x63

      This can be done with a loop where s = (s << 1) | (s >> 7). However,
      it can also be done by using a single 16-bit (in this case 32-bit)
      number 'sx'. Since XOR is an associative operation, we can set 'sx'
      to 'ei' and then XOR it with 'sx' left-shifted 1,2,3, and 4 times.
      The most significant bits will flow into the high 8 bit positions
      and be correctly XOR'd with one another. All that remains will be
      to cycle the high 8 bits by XOR'ing them all with the lower 8 bits
      afterwards.

      At the same time we're populating sbox and isbox we can precompute
      the multiplication we'll need to do to do MixColumns() later.
    */

            // apply affine transformation
            sx = ei ^ (ei << 1) ^ (ei << 2) ^ (ei << 3) ^ (ei << 4);
            sx = (sx >> 8) ^ (sx & 255) ^ 0x63;

            // update tables
            sbox[e] = sx;
            isbox[sx] = e;

            /* Mixing columns is done using matrix multiplication. The columns
      that are to be mixed are each a single word in the current state.
      The state has Nb columns (4 columns). Therefore each column is a
      4 byte word. So to mix the columns in a single column 'c' where
      its rows are r0, r1, r2, and r3, we use the following matrix
      multiplication:

      [2 3 1 1]*[r0,c]=[r'0,c]
      [1 2 3 1] [r1,c] [r'1,c]
      [1 1 2 3] [r2,c] [r'2,c]
      [3 1 1 2] [r3,c] [r'3,c]

      r0, r1, r2, and r3 are each 1 byte of one of the words in the
      state (a column). To do matrix multiplication for each mixed
      column c' we multiply the corresponding row from the left matrix
      with the corresponding column from the right matrix. In total, we
      get 4 equations:

      r0,c' = 2*r0,c + 3*r1,c + 1*r2,c + 1*r3,c
      r1,c' = 1*r0,c + 2*r1,c + 3*r2,c + 1*r3,c
      r2,c' = 1*r0,c + 1*r1,c + 2*r2,c + 3*r3,c
      r3,c' = 3*r0,c + 1*r1,c + 1*r2,c + 2*r3,c

      As usual, the multiplication is as previously defined and the
      addition is XOR. In order to optimize mixing columns we can store
      the multiplication results in tables. If you think of the whole
      column as a word (it might help to visualize by mentally rotating
      the equations above by counterclockwise 90 degrees) then you can
      see that it would be useful to map the multiplications performed on
      each byte (r0, r1, r2, r3) onto a word as well. For instance, we
      could map 2*r0,1*r0,1*r0,3*r0 onto a word by storing 2*r0 in the
      highest 8 bits and 3*r0 in the lowest 8 bits (with the other two
      respectively in the middle). This means that a table can be
      constructed that uses r0 as an index to the word. We can do the
      same with r1, r2, and r3, creating a total of 4 tables.

      To construct a full c', we can just look up each byte of c in
      their respective tables and XOR the results together.

      Also, to build each table we only have to calculate the word
      for 2,1,1,3 for every byte ... which we can do on each iteration
      of this loop since we will iterate over every byte. After we have
      calculated 2,1,1,3 we can get the results for the other tables
      by cycling the byte at the end to the beginning. For instance
      we can take the result of table 2,1,1,3 and produce table 3,2,1,1
      by moving the right most byte to the left most position just like
      how you can imagine the 3 moved out of 2,1,1,3 and to the front
      to produce 3,2,1,1.

      There is another optimization in that the same multiples of
      the current element we need in order to advance our generator
      to the next iteration can be reused in performing the 2,1,1,3
      calculation. We also calculate the inverse mix column tables,
      with e,9,d,b being the inverse of 2,1,1,3.

      When we're done, and we need to actually mix columns, the first
      byte of each state word should be put through mix[0] (2,1,1,3),
      the second through mix[1] (3,2,1,1) and so forth. Then they should
      be XOR'd together to produce the fully mixed column.
    */

            // calculate mix and imix table values
            sx2 = xtime[sx];
            e2 = xtime[e];
            e4 = xtime[e2];
            e8 = xtime[e4];
            me =
              (sx2 << 24) ^ // 2
              (sx << 16) ^ // 1
              (sx << 8) ^ // 1
              (sx ^ sx2); // 3
            ime =
              ((e2 ^ e4 ^ e8) << 24) ^ // E (14)
              ((e ^ e8) << 16) ^ // 9
              ((e ^ e4 ^ e8) << 8) ^ // D (13)
              (e ^ e2 ^ e8); // B (11)
            // produce each of the mix tables by rotating the 2,1,1,3 value
            for (var n = 0; n < 4; ++n) {
              mix[n][e] = me;
              imix[n][sx] = ime;
              // cycle the right most byte to the left most position
              // ie: 2,1,1,3 becomes 3,2,1,1
              me = (me << 24) | (me >>> 8);
              ime = (ime << 24) | (ime >>> 8);
            }

            // get next element and inverse
            if (e === 0) {
              // 1 is the inverse of 1
              e = ei = 1;
            } else {
              // e = 2e + 2*2*2*(10e)) = multiply e by 82 (chosen generator)
              // ei = ei + 2*2*ei = multiply ei by 5 (inverse generator)
              e = e2 ^ xtime[xtime[xtime[e2 ^ e8]]];
              ei ^= xtime[xtime[ei]];
            }
          }
        }

        /**
 * Generates a key schedule using the AES key expansion algorithm.
 *
 * The AES algorithm takes the Cipher Key, K, and performs a Key Expansion
 * routine to generate a key schedule. The Key Expansion generates a total
 * of Nb*(Nr + 1) words: the algorithm requires an initial set of Nb words,
 * and each of the Nr rounds requires Nb words of key data. The resulting
 * key schedule consists of a linear array of 4-byte words, denoted [wi ],
 * with i in the range 0 ≤ i < Nb(Nr + 1).
 *
 * KeyExpansion(byte key[4*Nk], word w[Nb*(Nr+1)], Nk)
 * AES-128 (Nb=4, Nk=4, Nr=10)
 * AES-192 (Nb=4, Nk=6, Nr=12)
 * AES-256 (Nb=4, Nk=8, Nr=14)
 * Note: Nr=Nk+6.
 *
 * Nb is the number of columns (32-bit words) comprising the State (or
 * number of bytes in a block). For AES, Nb=4.
 *
 * @param key the key to schedule (as an array of 32-bit words).
 * @param decrypt true to modify the key schedule to decrypt, false not to.
 *
 * @return the generated key schedule.
 */
        function _expandKey(key, decrypt) {
          // copy the key's words to initialize the key schedule
          var w = key.slice(0);

          /* RotWord() will rotate a word, moving the first byte to the last
    byte's position (shifting the other bytes left).

    We will be getting the value of Rcon at i / Nk. 'i' will iterate
    from Nk to (Nb * Nr+1). Nk = 4 (4 byte key), Nb = 4 (4 words in
    a block), Nr = Nk + 6 (10). Therefore 'i' will iterate from
    4 to 44 (exclusive). Each time we iterate 4 times, i / Nk will
    increase by 1. We use a counter iNk to keep track of this.
   */

          // go through the rounds expanding the key
          var temp,
            iNk = 1;
          var Nk = w.length;
          var Nr1 = Nk + 6 + 1;
          var end = Nb * Nr1;
          for (var i = Nk; i < end; ++i) {
            temp = w[i - 1];
            if (i % Nk === 0) {
              // temp = SubWord(RotWord(temp)) ^ Rcon[i / Nk]
              temp =
                (sbox[(temp >>> 16) & 255] << 24) ^
                (sbox[(temp >>> 8) & 255] << 16) ^
                (sbox[temp & 255] << 8) ^
                sbox[temp >>> 24] ^
                (rcon[iNk] << 24);
              iNk++;
            } else if (Nk > 6 && i % Nk === 4) {
              // temp = SubWord(temp)
              temp =
                (sbox[temp >>> 24] << 24) ^
                (sbox[(temp >>> 16) & 255] << 16) ^
                (sbox[(temp >>> 8) & 255] << 8) ^
                sbox[temp & 255];
            }
            w[i] = w[i - Nk] ^ temp;
          }

          /* When we are updating a cipher block we always use the code path for
     encryption whether we are decrypting or not (to shorten code and
     simplify the generation of look up tables). However, because there
     are differences in the decryption algorithm, other than just swapping
     in different look up tables, we must transform our key schedule to
     account for these changes:

     1. The decryption algorithm gets its key rounds in reverse order.
     2. The decryption algorithm adds the round key before mixing columns
       instead of afterwards.

     We don't need to modify our key schedule to handle the first case,
     we can just traverse the key schedule in reverse order when decrypting.

     The second case requires a little work.

     The tables we built for performing rounds will take an input and then
     perform SubBytes() and MixColumns() or, for the decrypt version,
     InvSubBytes() and InvMixColumns(). But the decrypt algorithm requires
     us to AddRoundKey() before InvMixColumns(). This means we'll need to
     apply some transformations to the round key to inverse-mix its columns
     so they'll be correct for moving AddRoundKey() to after the state has
     had its columns inverse-mixed.

     To inverse-mix the columns of the state when we're decrypting we use a
     lookup table that will apply InvSubBytes() and InvMixColumns() at the
     same time. However, the round key's bytes are not inverse-substituted
     in the decryption algorithm. To get around this problem, we can first
     substitute the bytes in the round key so that when we apply the
     transformation via the InvSubBytes()+InvMixColumns() table, it will
     undo our substitution leaving us with the original value that we
     want -- and then inverse-mix that value.

     This change will correctly alter our key schedule so that we can XOR
     each round key with our already transformed decryption state. This
     allows us to use the same code path as the encryption algorithm.

     We make one more change to the decryption key. Since the decryption
     algorithm runs in reverse from the encryption algorithm, we reverse
     the order of the round keys to avoid having to iterate over the key
     schedule backwards when running the encryption algorithm later in
     decryption mode. In addition to reversing the order of the round keys,
     we also swap each round key's 2nd and 4th rows. See the comments
     section where rounds are performed for more details about why this is
     done. These changes are done inline with the other substitution
     described above.
  */
          if (decrypt) {
            var tmp;
            var m0 = imix[0];
            var m1 = imix[1];
            var m2 = imix[2];
            var m3 = imix[3];
            var wnew = w.slice(0);
            end = w.length;
            for (var i = 0, wi = end - Nb; i < end; i += Nb, wi -= Nb) {
              // do not sub the first or last round key (round keys are Nb
              // words) as no column mixing is performed before they are added,
              // but do change the key order
              if (i === 0 || i === end - Nb) {
                wnew[i] = w[wi];
                wnew[i + 1] = w[wi + 3];
                wnew[i + 2] = w[wi + 2];
                wnew[i + 3] = w[wi + 1];
              } else {
                // substitute each round key byte because the inverse-mix
                // table will inverse-substitute it (effectively cancel the
                // substitution because round key bytes aren't sub'd in
                // decryption mode) and swap indexes 3 and 1
                for (var n = 0; n < Nb; ++n) {
                  tmp = w[wi + n];
                  wnew[i + (3 & -n)] =
                    m0[sbox[tmp >>> 24]] ^
                    m1[sbox[(tmp >>> 16) & 255]] ^
                    m2[sbox[(tmp >>> 8) & 255]] ^
                    m3[sbox[tmp & 255]];
                }
              }
            }
            w = wnew;
          }

          return w;
        }

        /**
 * Updates a single block (16 bytes) using AES. The update will either
 * encrypt or decrypt the block.
 *
 * @param w the key schedule.
 * @param input the input block (an array of 32-bit words).
 * @param output the updated output block.
 * @param decrypt true to decrypt the block, false to encrypt it.
 */
        function _updateBlock(w, input, output, decrypt) {
          /*
  Cipher(byte in[4*Nb], byte out[4*Nb], word w[Nb*(Nr+1)])
  begin
    byte state[4,Nb]
    state = in
    AddRoundKey(state, w[0, Nb-1])
    for round = 1 step 1 to Nr–1
      SubBytes(state)
      ShiftRows(state)
      MixColumns(state)
      AddRoundKey(state, w[round*Nb, (round+1)*Nb-1])
    end for
    SubBytes(state)
    ShiftRows(state)
    AddRoundKey(state, w[Nr*Nb, (Nr+1)*Nb-1])
    out = state
  end

  InvCipher(byte in[4*Nb], byte out[4*Nb], word w[Nb*(Nr+1)])
  begin
    byte state[4,Nb]
    state = in
    AddRoundKey(state, w[Nr*Nb, (Nr+1)*Nb-1])
    for round = Nr-1 step -1 downto 1
      InvShiftRows(state)
      InvSubBytes(state)
      AddRoundKey(state, w[round*Nb, (round+1)*Nb-1])
      InvMixColumns(state)
    end for
    InvShiftRows(state)
    InvSubBytes(state)
    AddRoundKey(state, w[0, Nb-1])
    out = state
  end
  */

          // Encrypt: AddRoundKey(state, w[0, Nb-1])
          // Decrypt: AddRoundKey(state, w[Nr*Nb, (Nr+1)*Nb-1])
          var Nr = w.length / 4 - 1;
          var m0, m1, m2, m3, sub;
          if (decrypt) {
            m0 = imix[0];
            m1 = imix[1];
            m2 = imix[2];
            m3 = imix[3];
            sub = isbox;
          } else {
            m0 = mix[0];
            m1 = mix[1];
            m2 = mix[2];
            m3 = mix[3];
            sub = sbox;
          }
          var a, b, c, d, a2, b2, c2;
          a = input[0] ^ w[0];
          b = input[decrypt ? 3 : 1] ^ w[1];
          c = input[2] ^ w[2];
          d = input[decrypt ? 1 : 3] ^ w[3];
          var i = 3;

          /* In order to share code we follow the encryption algorithm when both
    encrypting and decrypting. To account for the changes required in the
    decryption algorithm, we use different lookup tables when decrypting
    and use a modified key schedule to account for the difference in the
    order of transformations applied when performing rounds. We also get
    key rounds in reverse order (relative to encryption). */
          for (var round = 1; round < Nr; ++round) {
            /* As described above, we'll be using table lookups to perform the
      column mixing. Each column is stored as a word in the state (the
      array 'input' has one column as a word at each index). In order to
      mix a column, we perform these transformations on each row in c,
      which is 1 byte in each word. The new column for c0 is c'0:

               m0      m1      m2      m3
      r0,c'0 = 2*r0,c0 + 3*r1,c0 + 1*r2,c0 + 1*r3,c0
      r1,c'0 = 1*r0,c0 + 2*r1,c0 + 3*r2,c0 + 1*r3,c0
      r2,c'0 = 1*r0,c0 + 1*r1,c0 + 2*r2,c0 + 3*r3,c0
      r3,c'0 = 3*r0,c0 + 1*r1,c0 + 1*r2,c0 + 2*r3,c0

      So using mix tables where c0 is a word with r0 being its upper
      8 bits and r3 being its lower 8 bits:

      m0[c0 >> 24] will yield this word: [2*r0,1*r0,1*r0,3*r0]
      ...
      m3[c0 & 255] will yield this word: [1*r3,1*r3,3*r3,2*r3]

      Therefore to mix the columns in each word in the state we
      do the following (& 255 omitted for brevity):
      c'0,r0 = m0[c0 >> 24] ^ m1[c1 >> 16] ^ m2[c2 >> 8] ^ m3[c3]
      c'0,r1 = m0[c0 >> 24] ^ m1[c1 >> 16] ^ m2[c2 >> 8] ^ m3[c3]
      c'0,r2 = m0[c0 >> 24] ^ m1[c1 >> 16] ^ m2[c2 >> 8] ^ m3[c3]
      c'0,r3 = m0[c0 >> 24] ^ m1[c1 >> 16] ^ m2[c2 >> 8] ^ m3[c3]

      However, before mixing, the algorithm requires us to perform
      ShiftRows(). The ShiftRows() transformation cyclically shifts the
      last 3 rows of the state over different offsets. The first row
      (r = 0) is not shifted.

      s'_r,c = s_r,(c + shift(r, Nb) mod Nb
      for 0 < r < 4 and 0 <= c < Nb and
      shift(1, 4) = 1
      shift(2, 4) = 2
      shift(3, 4) = 3.

      This causes the first byte in r = 1 to be moved to the end of
      the row, the first 2 bytes in r = 2 to be moved to the end of
      the row, the first 3 bytes in r = 3 to be moved to the end of
      the row:

      r1: [c0 c1 c2 c3] => [c1 c2 c3 c0]
      r2: [c0 c1 c2 c3]    [c2 c3 c0 c1]
      r3: [c0 c1 c2 c3]    [c3 c0 c1 c2]

      We can make these substitutions inline with our column mixing to
      generate an updated set of equations to produce each word in the
      state (note the columns have changed positions):

      c0 c1 c2 c3 => c0 c1 c2 c3
      c0 c1 c2 c3    c1 c2 c3 c0  (cycled 1 byte)
      c0 c1 c2 c3    c2 c3 c0 c1  (cycled 2 bytes)
      c0 c1 c2 c3    c3 c0 c1 c2  (cycled 3 bytes)

      Therefore:

      c'0 = 2*r0,c0 + 3*r1,c1 + 1*r2,c2 + 1*r3,c3
      c'0 = 1*r0,c0 + 2*r1,c1 + 3*r2,c2 + 1*r3,c3
      c'0 = 1*r0,c0 + 1*r1,c1 + 2*r2,c2 + 3*r3,c3
      c'0 = 3*r0,c0 + 1*r1,c1 + 1*r2,c2 + 2*r3,c3

      c'1 = 2*r0,c1 + 3*r1,c2 + 1*r2,c3 + 1*r3,c0
      c'1 = 1*r0,c1 + 2*r1,c2 + 3*r2,c3 + 1*r3,c0
      c'1 = 1*r0,c1 + 1*r1,c2 + 2*r2,c3 + 3*r3,c0
      c'1 = 3*r0,c1 + 1*r1,c2 + 1*r2,c3 + 2*r3,c0

      ... and so forth for c'2 and c'3. The important distinction is
      that the columns are cycling, with c0 being used with the m0
      map when calculating c0, but c1 being used with the m0 map when
      calculating c1 ... and so forth.

      When performing the inverse we transform the mirror image and
      skip the bottom row, instead of the top one, and move upwards:

      c3 c2 c1 c0 => c0 c3 c2 c1  (cycled 3 bytes) *same as encryption
      c3 c2 c1 c0    c1 c0 c3 c2  (cycled 2 bytes)
      c3 c2 c1 c0    c2 c1 c0 c3  (cycled 1 byte)  *same as encryption
      c3 c2 c1 c0    c3 c2 c1 c0

      If you compare the resulting matrices for ShiftRows()+MixColumns()
      and for InvShiftRows()+InvMixColumns() the 2nd and 4th columns are
      different (in encrypt mode vs. decrypt mode). So in order to use
      the same code to handle both encryption and decryption, we will
      need to do some mapping.

      If in encryption mode we let a=c0, b=c1, c=c2, d=c3, and r<N> be
      a row number in the state, then the resulting matrix in encryption
      mode for applying the above transformations would be:

      r1: a b c d
      r2: b c d a
      r3: c d a b
      r4: d a b c

      If we did the same in decryption mode we would get:

      r1: a d c b
      r2: b a d c
      r3: c b a d
      r4: d c b a

      If instead we swap d and b (set b=c3 and d=c1), then we get:

      r1: a b c d
      r2: d a b c
      r3: c d a b
      r4: b c d a

      Now the 1st and 3rd rows are the same as the encryption matrix. All
      we need to do then to make the mapping exactly the same is to swap
      the 2nd and 4th rows when in decryption mode. To do this without
      having to do it on each iteration, we swapped the 2nd and 4th rows
      in the decryption key schedule. We also have to do the swap above
      when we first pull in the input and when we set the final output. */
            a2 =
              m0[a >>> 24] ^
              m1[(b >>> 16) & 255] ^
              m2[(c >>> 8) & 255] ^
              m3[d & 255] ^
              w[++i];
            b2 =
              m0[b >>> 24] ^
              m1[(c >>> 16) & 255] ^
              m2[(d >>> 8) & 255] ^
              m3[a & 255] ^
              w[++i];
            c2 =
              m0[c >>> 24] ^
              m1[(d >>> 16) & 255] ^
              m2[(a >>> 8) & 255] ^
              m3[b & 255] ^
              w[++i];
            d =
              m0[d >>> 24] ^
              m1[(a >>> 16) & 255] ^
              m2[(b >>> 8) & 255] ^
              m3[c & 255] ^
              w[++i];
            a = a2;
            b = b2;
            c = c2;
          }

          /*
    Encrypt:
    SubBytes(state)
    ShiftRows(state)
    AddRoundKey(state, w[Nr*Nb, (Nr+1)*Nb-1])

    Decrypt:
    InvShiftRows(state)
    InvSubBytes(state)
    AddRoundKey(state, w[0, Nb-1])
   */
          // Note: rows are shifted inline
          output[0] =
            (sub[a >>> 24] << 24) ^
            (sub[(b >>> 16) & 255] << 16) ^
            (sub[(c >>> 8) & 255] << 8) ^
            sub[d & 255] ^
            w[++i];
          output[decrypt ? 3 : 1] =
            (sub[b >>> 24] << 24) ^
            (sub[(c >>> 16) & 255] << 16) ^
            (sub[(d >>> 8) & 255] << 8) ^
            sub[a & 255] ^
            w[++i];
          output[2] =
            (sub[c >>> 24] << 24) ^
            (sub[(d >>> 16) & 255] << 16) ^
            (sub[(a >>> 8) & 255] << 8) ^
            sub[b & 255] ^
            w[++i];
          output[decrypt ? 1 : 3] =
            (sub[d >>> 24] << 24) ^
            (sub[(a >>> 16) & 255] << 16) ^
            (sub[(b >>> 8) & 255] << 8) ^
            sub[c & 255] ^
            w[++i];
        }

        /**
 * Deprecated. Instead, use:
 *
 * forge.cipher.createCipher('AES-<mode>', key);
 * forge.cipher.createDecipher('AES-<mode>', key);
 *
 * Creates a deprecated AES cipher object. This object's mode will default to
 * CBC (cipher-block-chaining).
 *
 * The key and iv may be given as a string of bytes, an array of bytes, a
 * byte buffer, or an array of 32-bit words.
 *
 * @param options the options to use.
 *          key the symmetric key to use.
 *          output the buffer to write to.
 *          decrypt true for decryption, false for encryption.
 *          mode the cipher mode to use (default: 'CBC').
 *
 * @return the cipher.
 */
        function _createCipher(options) {
          options = options || {};
          var mode = (options.mode || "CBC").toUpperCase();
          var algorithm = "AES-" + mode;

          var cipher;
          if (options.decrypt) {
            cipher = forge.cipher.createDecipher(algorithm, options.key);
          } else {
            cipher = forge.cipher.createCipher(algorithm, options.key);
          }

          // backwards compatible start API
          var start = cipher.start;
          cipher.start = function(iv, options) {
            // backwards compatibility: support second arg as output buffer
            var output = null;
            if (options instanceof forge.util.ByteBuffer) {
              output = options;
              options = {};
            }
            options = options || {};
            options.output = output;
            options.iv = iv;
            start.call(cipher, options);
          };

          return cipher;
        }

        /***/
      },
      /* 16 */
      /***/ function(module, exports, __webpack_require__) {
        /**
 * Object IDs for ASN.1.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2013 Digital Bazaar, Inc.
 */
        var forge = __webpack_require__(1);

        forge.pki = forge.pki || {};
        var oids = (module.exports = forge.pki.oids = forge.oids =
          forge.oids || {});

        // set id to name mapping and name to id mapping
        function _IN(id, name) {
          oids[id] = name;
          oids[name] = id;
        }
        // set id to name mapping only
        function _I_(id, name) {
          oids[id] = name;
        }

        // algorithm OIDs
        _IN("1.2.840.113549.1.1.1", "rsaEncryption");
        // Note: md2 & md4 not implemented
        //_IN('1.2.840.113549.1.1.2', 'md2WithRSAEncryption');
        //_IN('1.2.840.113549.1.1.3', 'md4WithRSAEncryption');
        _IN("1.2.840.113549.1.1.4", "md5WithRSAEncryption");
        _IN("1.2.840.113549.1.1.5", "sha1WithRSAEncryption");
        _IN("1.2.840.113549.1.1.7", "RSAES-OAEP");
        _IN("1.2.840.113549.1.1.8", "mgf1");
        _IN("1.2.840.113549.1.1.9", "pSpecified");
        _IN("1.2.840.113549.1.1.10", "RSASSA-PSS");
        _IN("1.2.840.113549.1.1.11", "sha256WithRSAEncryption");
        _IN("1.2.840.113549.1.1.12", "sha384WithRSAEncryption");
        _IN("1.2.840.113549.1.1.13", "sha512WithRSAEncryption");

        _IN("1.3.14.3.2.7", "desCBC");

        _IN("1.3.14.3.2.26", "sha1");
        _IN("2.16.840.1.101.3.4.2.1", "sha256");
        _IN("2.16.840.1.101.3.4.2.2", "sha384");
        _IN("2.16.840.1.101.3.4.2.3", "sha512");
        _IN("1.2.840.113549.2.5", "md5");

        // pkcs#7 content types
        _IN("1.2.840.113549.1.7.1", "data");
        _IN("1.2.840.113549.1.7.2", "signedData");
        _IN("1.2.840.113549.1.7.3", "envelopedData");
        _IN("1.2.840.113549.1.7.4", "signedAndEnvelopedData");
        _IN("1.2.840.113549.1.7.5", "digestedData");
        _IN("1.2.840.113549.1.7.6", "encryptedData");

        // pkcs#9 oids
        _IN("1.2.840.113549.1.9.1", "emailAddress");
        _IN("1.2.840.113549.1.9.2", "unstructuredName");
        _IN("1.2.840.113549.1.9.3", "contentType");
        _IN("1.2.840.113549.1.9.4", "messageDigest");
        _IN("1.2.840.113549.1.9.5", "signingTime");
        _IN("1.2.840.113549.1.9.6", "counterSignature");
        _IN("1.2.840.113549.1.9.7", "challengePassword");
        _IN("1.2.840.113549.1.9.8", "unstructuredAddress");
        _IN("1.2.840.113549.1.9.14", "extensionRequest");

        _IN("1.2.840.113549.1.9.20", "friendlyName");
        _IN("1.2.840.113549.1.9.21", "localKeyId");
        _IN("1.2.840.113549.1.9.22.1", "x509Certificate");

        // pkcs#12 safe bags
        _IN("1.2.840.113549.1.12.10.1.1", "keyBag");
        _IN("1.2.840.113549.1.12.10.1.2", "pkcs8ShroudedKeyBag");
        _IN("1.2.840.113549.1.12.10.1.3", "certBag");
        _IN("1.2.840.113549.1.12.10.1.4", "crlBag");
        _IN("1.2.840.113549.1.12.10.1.5", "secretBag");
        _IN("1.2.840.113549.1.12.10.1.6", "safeContentsBag");

        // password-based-encryption for pkcs#12
        _IN("1.2.840.113549.1.5.13", "pkcs5PBES2");
        _IN("1.2.840.113549.1.5.12", "pkcs5PBKDF2");

        _IN("1.2.840.113549.1.12.1.1", "pbeWithSHAAnd128BitRC4");
        _IN("1.2.840.113549.1.12.1.2", "pbeWithSHAAnd40BitRC4");
        _IN("1.2.840.113549.1.12.1.3", "pbeWithSHAAnd3-KeyTripleDES-CBC");
        _IN("1.2.840.113549.1.12.1.4", "pbeWithSHAAnd2-KeyTripleDES-CBC");
        _IN("1.2.840.113549.1.12.1.5", "pbeWithSHAAnd128BitRC2-CBC");
        _IN("1.2.840.113549.1.12.1.6", "pbewithSHAAnd40BitRC2-CBC");

        // hmac OIDs
        _IN("1.2.840.113549.2.7", "hmacWithSHA1");
        _IN("1.2.840.113549.2.8", "hmacWithSHA224");
        _IN("1.2.840.113549.2.9", "hmacWithSHA256");
        _IN("1.2.840.113549.2.10", "hmacWithSHA384");
        _IN("1.2.840.113549.2.11", "hmacWithSHA512");

        // symmetric key algorithm oids
        _IN("1.2.840.113549.3.7", "des-EDE3-CBC");
        _IN("2.16.840.1.101.3.4.1.2", "aes128-CBC");
        _IN("2.16.840.1.101.3.4.1.22", "aes192-CBC");
        _IN("2.16.840.1.101.3.4.1.42", "aes256-CBC");

        // certificate issuer/subject OIDs
        _IN("2.5.4.3", "commonName");
        _IN("2.5.4.5", "serialName");
        _IN("2.5.4.6", "countryName");
        _IN("2.5.4.7", "localityName");
        _IN("2.5.4.8", "stateOrProvinceName");
        _IN("2.5.4.10", "organizationName");
        _IN("2.5.4.11", "organizationalUnitName");

        // X.509 extension OIDs
        _IN("2.16.840.1.113730.1.1", "nsCertType");
        _I_("2.5.29.1", "authorityKeyIdentifier"); // deprecated, use .35
        _I_("2.5.29.2", "keyAttributes"); // obsolete use .37 or .15
        _I_("2.5.29.3", "certificatePolicies"); // deprecated, use .32
        _I_("2.5.29.4", "keyUsageRestriction"); // obsolete use .37 or .15
        _I_("2.5.29.5", "policyMapping"); // deprecated use .33
        _I_("2.5.29.6", "subtreesConstraint"); // obsolete use .30
        _I_("2.5.29.7", "subjectAltName"); // deprecated use .17
        _I_("2.5.29.8", "issuerAltName"); // deprecated use .18
        _I_("2.5.29.9", "subjectDirectoryAttributes");
        _I_("2.5.29.10", "basicConstraints"); // deprecated use .19
        _I_("2.5.29.11", "nameConstraints"); // deprecated use .30
        _I_("2.5.29.12", "policyConstraints"); // deprecated use .36
        _I_("2.5.29.13", "basicConstraints"); // deprecated use .19
        _IN("2.5.29.14", "subjectKeyIdentifier");
        _IN("2.5.29.15", "keyUsage");
        _I_("2.5.29.16", "privateKeyUsagePeriod");
        _IN("2.5.29.17", "subjectAltName");
        _IN("2.5.29.18", "issuerAltName");
        _IN("2.5.29.19", "basicConstraints");
        _I_("2.5.29.20", "cRLNumber");
        _I_("2.5.29.21", "cRLReason");
        _I_("2.5.29.22", "expirationDate");
        _I_("2.5.29.23", "instructionCode");
        _I_("2.5.29.24", "invalidityDate");
        _I_("2.5.29.25", "cRLDistributionPoints"); // deprecated use .31
        _I_("2.5.29.26", "issuingDistributionPoint"); // deprecated use .28
        _I_("2.5.29.27", "deltaCRLIndicator");
        _I_("2.5.29.28", "issuingDistributionPoint");
        _I_("2.5.29.29", "certificateIssuer");
        _I_("2.5.29.30", "nameConstraints");
        _IN("2.5.29.31", "cRLDistributionPoints");
        _IN("2.5.29.32", "certificatePolicies");
        _I_("2.5.29.33", "policyMappings");
        _I_("2.5.29.34", "policyConstraints"); // deprecated use .36
        _IN("2.5.29.35", "authorityKeyIdentifier");
        _I_("2.5.29.36", "policyConstraints");
        _IN("2.5.29.37", "extKeyUsage");
        _I_("2.5.29.46", "freshestCRL");
        _I_("2.5.29.54", "inhibitAnyPolicy");

        // extKeyUsage purposes
        _IN("1.3.6.1.4.1.11129.2.4.2", "timestampList");
        _IN("1.3.6.1.5.5.7.1.1", "authorityInfoAccess");
        _IN("1.3.6.1.5.5.7.3.1", "serverAuth");
        _IN("1.3.6.1.5.5.7.3.2", "clientAuth");
        _IN("1.3.6.1.5.5.7.3.3", "codeSigning");
        _IN("1.3.6.1.5.5.7.3.4", "emailProtection");
        _IN("1.3.6.1.5.5.7.3.8", "timeStamping");

        /***/
      },
      /* 17 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";
        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.

        // a duplex stream is just a stream that is both readable and writable.
        // Since JS doesn't have multiple prototypal inheritance, this class
        // prototypally inherits from Readable, and then parasitically from
        // Writable.

        /*<replacement>*/

        var processNextTick = __webpack_require__(33);
        /*</replacement>*/

        /*<replacement>*/
        var objectKeys =
          Object.keys ||
          function(obj) {
            var keys = [];
            for (var key in obj) {
              keys.push(key);
            }
            return keys;
          };
        /*</replacement>*/

        module.exports = Duplex;

        /*<replacement>*/
        var util = __webpack_require__(23);
        util.inherits = __webpack_require__(2);
        /*</replacement>*/

        var Readable = __webpack_require__(82);
        var Writable = __webpack_require__(54);

        util.inherits(Duplex, Readable);

        var keys = objectKeys(Writable.prototype);
        for (var v = 0; v < keys.length; v++) {
          var method = keys[v];
          if (!Duplex.prototype[method])
            Duplex.prototype[method] = Writable.prototype[method];
        }

        function Duplex(options) {
          if (!(this instanceof Duplex)) return new Duplex(options);

          Readable.call(this, options);
          Writable.call(this, options);

          if (options && options.readable === false) this.readable = false;

          if (options && options.writable === false) this.writable = false;

          this.allowHalfOpen = true;
          if (options && options.allowHalfOpen === false)
            this.allowHalfOpen = false;

          this.once("end", onend);
        }

        // the no-half-open enforcer
        function onend() {
          // if we allow half-open state, or if the writable side ended,
          // then we're ok.
          if (this.allowHalfOpen || this._writableState.ended) return;

          // no more data can be written.
          // But allow more writes to happen in this tick.
          processNextTick(onEndNT, this);
        }

        function onEndNT(self) {
          self.end();
        }

        Object.defineProperty(Duplex.prototype, "destroyed", {
          get: function() {
            if (
              this._readableState === undefined ||
              this._writableState === undefined
            ) {
              return false;
            }
            return (
              this._readableState.destroyed && this._writableState.destroyed
            );
          },
          set: function(value) {
            // we ignore the value if the stream
            // has not been initialized yet
            if (
              this._readableState === undefined ||
              this._writableState === undefined
            ) {
              return;
            }

            // backward compatibility, the user is explicitly
            // managing destroyed
            this._readableState.destroyed = value;
            this._writableState.destroyed = value;
          }
        });

        Duplex.prototype._destroy = function(err, cb) {
          this.push(null);
          this.end();

          processNextTick(cb, err);
        };

        function forEach(xs, f) {
          for (var i = 0, l = xs.length; i < l; i++) {
            f(xs[i], i);
          }
        }

        /***/
      },
      /* 18 */
      /***/ function(module, exports, __webpack_require__) {
        /**
 * Javascript implementation of basic PEM (Privacy Enhanced Mail) algorithms.
 *
 * See: RFC 1421.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2013-2014 Digital Bazaar, Inc.
 *
 * A Forge PEM object has the following fields:
 *
 * type: identifies the type of message (eg: "RSA PRIVATE KEY").
 *
 * procType: identifies the type of processing performed on the message,
 *   it has two subfields: version and type, eg: 4,ENCRYPTED.
 *
 * contentDomain: identifies the type of content in the message, typically
 *   only uses the value: "RFC822".
 *
 * dekInfo: identifies the message encryption algorithm and mode and includes
 *   any parameters for the algorithm, it has two subfields: algorithm and
 *   parameters, eg: DES-CBC,F8143EDE5960C597.
 *
 * headers: contains all other PEM encapsulated headers -- where order is
 *   significant (for pairing data like recipient ID + key info).
 *
 * body: the binary-encoded body.
 */
        var forge = __webpack_require__(1);
        __webpack_require__(3);

        // shortcut for pem API
        var pem = (module.exports = forge.pem = forge.pem || {});

        /**
 * Encodes (serializes) the given PEM object.
 *
 * @param msg the PEM message object to encode.
 * @param options the options to use:
 *          maxline the maximum characters per line for the body, (default: 64).
 *
 * @return the PEM-formatted string.
 */
        pem.encode = function(msg, options) {
          options = options || {};
          var rval = "-----BEGIN " + msg.type + "-----\r\n";

          // encode special headers
          var header;
          if (msg.procType) {
            header = {
              name: "Proc-Type",
              values: [String(msg.procType.version), msg.procType.type]
            };
            rval += foldHeader(header);
          }
          if (msg.contentDomain) {
            header = { name: "Content-Domain", values: [msg.contentDomain] };
            rval += foldHeader(header);
          }
          if (msg.dekInfo) {
            header = { name: "DEK-Info", values: [msg.dekInfo.algorithm] };
            if (msg.dekInfo.parameters) {
              header.values.push(msg.dekInfo.parameters);
            }
            rval += foldHeader(header);
          }

          if (msg.headers) {
            // encode all other headers
            for (var i = 0; i < msg.headers.length; ++i) {
              rval += foldHeader(msg.headers[i]);
            }
          }

          // terminate header
          if (msg.procType) {
            rval += "\r\n";
          }

          // add body
          rval += forge.util.encode64(msg.body, options.maxline || 64) + "\r\n";

          rval += "-----END " + msg.type + "-----\r\n";
          return rval;
        };

        /**
 * Decodes (deserializes) all PEM messages found in the given string.
 *
 * @param str the PEM-formatted string to decode.
 *
 * @return the PEM message objects in an array.
 */
        pem.decode = function(str) {
          var rval = [];

          // split string into PEM messages (be lenient w/EOF on BEGIN line)
          var rMessage = /\s*-----BEGIN ([A-Z0-9- ]+)-----\r?\n?([\x21-\x7e\s]+?(?:\r?\n\r?\n))?([:A-Za-z0-9+\/=\s]+?)-----END \1-----/g;
          var rHeader = /([\x21-\x7e]+):\s*([\x21-\x7e\s^:]+)/;
          var rCRLF = /\r?\n/;
          var match;
          while (true) {
            match = rMessage.exec(str);
            if (!match) {
              break;
            }

            var msg = {
              type: match[1],
              procType: null,
              contentDomain: null,
              dekInfo: null,
              headers: [],
              body: forge.util.decode64(match[3])
            };
            rval.push(msg);

            // no headers
            if (!match[2]) {
              continue;
            }

            // parse headers
            var lines = match[2].split(rCRLF);
            var li = 0;
            while (match && li < lines.length) {
              // get line, trim any rhs whitespace
              var line = lines[li].replace(/\s+$/, "");

              // RFC2822 unfold any following folded lines
              for (var nl = li + 1; nl < lines.length; ++nl) {
                var next = lines[nl];
                if (!/\s/.test(next[0])) {
                  break;
                }
                line += next;
                li = nl;
              }

              // parse header
              match = line.match(rHeader);
              if (match) {
                var header = { name: match[1], values: [] };
                var values = match[2].split(",");
                for (var vi = 0; vi < values.length; ++vi) {
                  header.values.push(ltrim(values[vi]));
                }

                // Proc-Type must be the first header
                if (!msg.procType) {
                  if (header.name !== "Proc-Type") {
                    throw new Error(
                      "Invalid PEM formatted message. The first " +
                        'encapsulated header must be "Proc-Type".'
                    );
                  } else if (header.values.length !== 2) {
                    throw new Error(
                      'Invalid PEM formatted message. The "Proc-Type" ' +
                        "header must have two subfields."
                    );
                  }
                  msg.procType = { version: values[0], type: values[1] };
                } else if (
                  !msg.contentDomain &&
                  header.name === "Content-Domain"
                ) {
                  // special-case Content-Domain
                  msg.contentDomain = values[0] || "";
                } else if (!msg.dekInfo && header.name === "DEK-Info") {
                  // special-case DEK-Info
                  if (header.values.length === 0) {
                    throw new Error(
                      'Invalid PEM formatted message. The "DEK-Info" ' +
                        "header must have at least one subfield."
                    );
                  }
                  msg.dekInfo = {
                    algorithm: values[0],
                    parameters: values[1] || null
                  };
                } else {
                  msg.headers.push(header);
                }
              }

              ++li;
            }

            if (msg.procType === "ENCRYPTED" && !msg.dekInfo) {
              throw new Error(
                'Invalid PEM formatted message. The "DEK-Info" ' +
                  'header must be present if "Proc-Type" is "ENCRYPTED".'
              );
            }
          }

          if (rval.length === 0) {
            throw new Error("Invalid PEM formatted message.");
          }

          return rval;
        };

        function foldHeader(header) {
          var rval = header.name + ": ";

          // ensure values with CRLF are folded
          var values = [];
          var insertSpace = function(match, $1) {
            return " " + $1;
          };
          for (var i = 0; i < header.values.length; ++i) {
            values.push(header.values[i].replace(/^(\S+\r\n)/, insertSpace));
          }
          rval += values.join(",") + "\r\n";

          // do folding
          var length = 0;
          var candidate = -1;
          for (var i = 0; i < rval.length; ++i, ++length) {
            if (length > 65 && candidate !== -1) {
              var insert = rval[candidate];
              if (insert === ",") {
                ++candidate;
                rval =
                  rval.substr(0, candidate) + "\r\n " + rval.substr(candidate);
              } else {
                rval =
                  rval.substr(0, candidate) +
                  "\r\n" +
                  insert +
                  rval.substr(candidate + 1);
              }
              length = i - candidate - 1;
              candidate = -1;
              ++i;
            } else if (rval[i] === " " || rval[i] === "\t" || rval[i] === ",") {
              candidate = i;
            }
          }

          return rval;
        }

        function ltrim(str) {
          return str.replace(/^\s+/, "");
        }

        /***/
      },
      /* 19 */
      /***/ function(module, exports, __webpack_require__) {
        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.

        module.exports = Stream;

        var EE = __webpack_require__(52).EventEmitter;
        var inherits = __webpack_require__(2);

        inherits(Stream, EE);
        Stream.Readable = __webpack_require__(53);
        Stream.Writable = __webpack_require__(146);
        Stream.Duplex = __webpack_require__(147);
        Stream.Transform = __webpack_require__(148);
        Stream.PassThrough = __webpack_require__(149);

        // Backwards-compat with node 0.4.x
        Stream.Stream = Stream;

        // old-style streams.  Note that the pipe method (the only relevant
        // part of this class) is overridden in the Readable class.

        function Stream() {
          EE.call(this);
        }

        Stream.prototype.pipe = function(dest, options) {
          var source = this;

          function ondata(chunk) {
            if (dest.writable) {
              if (false === dest.write(chunk) && source.pause) {
                source.pause();
              }
            }
          }

          source.on("data", ondata);

          function ondrain() {
            if (source.readable && source.resume) {
              source.resume();
            }
          }

          dest.on("drain", ondrain);

          // If the 'end' option is not supplied, dest.end() will be called when
          // source gets the 'end' or 'close' events.  Only dest.end() once.
          if (!dest._isStdio && (!options || options.end !== false)) {
            source.on("end", onend);
            source.on("close", onclose);
          }

          var didOnEnd = false;
          function onend() {
            if (didOnEnd) return;
            didOnEnd = true;

            dest.end();
          }

          function onclose() {
            if (didOnEnd) return;
            didOnEnd = true;

            if (typeof dest.destroy === "function") dest.destroy();
          }

          // don't leave dangling pipes when there are errors.
          function onerror(er) {
            cleanup();
            if (EE.listenerCount(this, "error") === 0) {
              throw er; // Unhandled stream error in pipe.
            }
          }

          source.on("error", onerror);
          dest.on("error", onerror);

          // remove all the event listeners that were added.
          function cleanup() {
            source.removeListener("data", ondata);
            dest.removeListener("drain", ondrain);

            source.removeListener("end", onend);
            source.removeListener("close", onclose);

            source.removeListener("error", onerror);
            dest.removeListener("error", onerror);

            source.removeListener("end", cleanup);
            source.removeListener("close", cleanup);

            dest.removeListener("close", cleanup);
          }

          source.on("end", cleanup);
          source.on("close", cleanup);

          dest.on("close", cleanup);

          dest.emit("pipe", source);

          // Allow for unix-like usage: A.pipe(B).pipe(C)
          return dest;
        };

        /***/
      },
      /* 20 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(Buffer) {
          // prototype class for hash functions
          function Hash(blockSize, finalSize) {
            this._block = new Buffer(blockSize);
            this._finalSize = finalSize;
            this._blockSize = blockSize;
            this._len = 0;
            this._s = 0;
          }

          Hash.prototype.update = function(data, enc) {
            if (typeof data === "string") {
              enc = enc || "utf8";
              data = new Buffer(data, enc);
            }

            var l = (this._len += data.length);
            var s = this._s || 0;
            var f = 0;
            var buffer = this._block;

            while (s < l) {
              var t = Math.min(
                data.length,
                f + this._blockSize - s % this._blockSize
              );
              var ch = t - f;

              for (var i = 0; i < ch; i++) {
                buffer[s % this._blockSize + i] = data[i + f];
              }

              s += ch;
              f += ch;

              if (s % this._blockSize === 0) {
                this._update(buffer);
              }
            }
            this._s = s;

            return this;
          };

          Hash.prototype.digest = function(enc) {
            // Suppose the length of the message M, in bits, is l
            var l = this._len * 8;

            // Append the bit 1 to the end of the message
            this._block[this._len % this._blockSize] = 0x80;

            // and then k zero bits, where k is the smallest non-negative solution to the equation (l + 1 + k) === finalSize mod blockSize
            this._block.fill(0, this._len % this._blockSize + 1);

            if (l % (this._blockSize * 8) >= this._finalSize * 8) {
              this._update(this._block);
              this._block.fill(0);
            }

            // to this append the block which is equal to the number l written in binary
            // TODO: handle case where l is > Math.pow(2, 29)
            this._block.writeInt32BE(l, this._blockSize - 4);

            var hash = this._update(this._block) || this._hash();

            return enc ? hash.toString(enc) : hash;
          };

          Hash.prototype._update = function() {
            throw new Error("_update must be implemented by subclass");
          };

          module.exports = Hash;

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(0).Buffer));

        /***/
      },
      /* 21 */
      /***/ function(module, exports, __webpack_require__) {
        /**
 * Hash-based Message Authentication Code implementation. Requires a message
 * digest object that can be obtained, for example, from forge.md.sha1 or
 * forge.md.md5.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2012 Digital Bazaar, Inc. All rights reserved.
 */
        var forge = __webpack_require__(1);
        __webpack_require__(12);
        __webpack_require__(3);

        /* HMAC API */
        var hmac = (module.exports = forge.hmac = forge.hmac || {});

        /**
 * Creates an HMAC object that uses the given message digest object.
 *
 * @return an HMAC object.
 */
        hmac.create = function() {
          // the hmac key to use
          var _key = null;

          // the message digest to use
          var _md = null;

          // the inner padding
          var _ipadding = null;

          // the outer padding
          var _opadding = null;

          // hmac context
          var ctx = {};

          /**
   * Starts or restarts the HMAC with the given key and message digest.
   *
   * @param md the message digest to use, null to reuse the previous one,
   *           a string to use builtin 'sha1', 'md5', 'sha256'.
   * @param key the key to use as a string, array of bytes, byte buffer,
   *           or null to reuse the previous key.
   */
          ctx.start = function(md, key) {
            if (md !== null) {
              if (typeof md === "string") {
                // create builtin message digest
                md = md.toLowerCase();
                if (md in forge.md.algorithms) {
                  _md = forge.md.algorithms[md].create();
                } else {
                  throw new Error('Unknown hash algorithm "' + md + '"');
                }
              } else {
                // store message digest
                _md = md;
              }
            }

            if (key === null) {
              // reuse previous key
              key = _key;
            } else {
              if (typeof key === "string") {
                // convert string into byte buffer
                key = forge.util.createBuffer(key);
              } else if (forge.util.isArray(key)) {
                // convert byte array into byte buffer
                var tmp = key;
                key = forge.util.createBuffer();
                for (var i = 0; i < tmp.length; ++i) {
                  key.putByte(tmp[i]);
                }
              }

              // if key is longer than blocksize, hash it
              var keylen = key.length();
              if (keylen > _md.blockLength) {
                _md.start();
                _md.update(key.bytes());
                key = _md.digest();
              }

              // mix key into inner and outer padding
              // ipadding = [0x36 * blocksize] ^ key
              // opadding = [0x5C * blocksize] ^ key
              _ipadding = forge.util.createBuffer();
              _opadding = forge.util.createBuffer();
              keylen = key.length();
              for (var i = 0; i < keylen; ++i) {
                var tmp = key.at(i);
                _ipadding.putByte(0x36 ^ tmp);
                _opadding.putByte(0x5c ^ tmp);
              }

              // if key is shorter than blocksize, add additional padding
              if (keylen < _md.blockLength) {
                var tmp = _md.blockLength - keylen;
                for (var i = 0; i < tmp; ++i) {
                  _ipadding.putByte(0x36);
                  _opadding.putByte(0x5c);
                }
              }
              _key = key;
              _ipadding = _ipadding.bytes();
              _opadding = _opadding.bytes();
            }

            // digest is done like so: hash(opadding | hash(ipadding | message))

            // prepare to do inner hash
            // hash(ipadding | message)
            _md.start();
            _md.update(_ipadding);
          };

          /**
   * Updates the HMAC with the given message bytes.
   *
   * @param bytes the bytes to update with.
   */
          ctx.update = function(bytes) {
            _md.update(bytes);
          };

          /**
   * Produces the Message Authentication Code (MAC).
   *
   * @return a byte buffer containing the digest value.
   */
          ctx.getMac = function() {
            // digest is done like so: hash(opadding | hash(ipadding | message))
            // here we do the outer hashing
            var inner = _md.digest().bytes();
            _md.start();
            _md.update(_opadding);
            _md.update(inner);
            return _md.digest();
          };
          // alias for getMac
          ctx.digest = ctx.getMac;

          return ctx;
        };

        /***/
      },
      /* 22 */
      /***/ function(module, exports, __webpack_require__) {
        /**
 * Secure Hash Algorithm with 160-bit digest (SHA-1) implementation.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2015 Digital Bazaar, Inc.
 */
        var forge = __webpack_require__(1);
        __webpack_require__(12);
        __webpack_require__(3);

        var sha1 = (module.exports = forge.sha1 = forge.sha1 || {});
        forge.md.sha1 = forge.md.algorithms.sha1 = sha1;

        /**
 * Creates a SHA-1 message digest object.
 *
 * @return a message digest object.
 */
        sha1.create = function() {
          // do initialization as necessary
          if (!_initialized) {
            _init();
          }

          // SHA-1 state contains five 32-bit integers
          var _state = null;

          // input buffer
          var _input = forge.util.createBuffer();

          // used for word storage
          var _w = new Array(80);

          // message digest object
          var md = {
            algorithm: "sha1",
            blockLength: 64,
            digestLength: 20,
            // 56-bit length of message so far (does not including padding)
            messageLength: 0,
            // true message length
            fullMessageLength: null,
            // size of message length in bytes
            messageLengthSize: 8
          };

          /**
   * Starts the digest.
   *
   * @return this digest object.
   */
          md.start = function() {
            // up to 56-bit message length for convenience
            md.messageLength = 0;

            // full message length (set md.messageLength64 for backwards-compatibility)
            md.fullMessageLength = md.messageLength64 = [];
            var int32s = md.messageLengthSize / 4;
            for (var i = 0; i < int32s; ++i) {
              md.fullMessageLength.push(0);
            }
            _input = forge.util.createBuffer();
            _state = {
              h0: 0x67452301,
              h1: 0xefcdab89,
              h2: 0x98badcfe,
              h3: 0x10325476,
              h4: 0xc3d2e1f0
            };
            return md;
          };
          // start digest automatically for first time
          md.start();

          /**
   * Updates the digest with the given message input. The given input can
   * treated as raw input (no encoding will be applied) or an encoding of
   * 'utf8' maybe given to encode the input using UTF-8.
   *
   * @param msg the message input to update with.
   * @param encoding the encoding to use (default: 'raw', other: 'utf8').
   *
   * @return this digest object.
   */
          md.update = function(msg, encoding) {
            if (encoding === "utf8") {
              msg = forge.util.encodeUtf8(msg);
            }

            // update message length
            var len = msg.length;
            md.messageLength += len;
            len = [(len / 0x100000000) >>> 0, len >>> 0];
            for (var i = md.fullMessageLength.length - 1; i >= 0; --i) {
              md.fullMessageLength[i] += len[1];
              len[1] = len[0] + ((md.fullMessageLength[i] / 0x100000000) >>> 0);
              md.fullMessageLength[i] = md.fullMessageLength[i] >>> 0;
              len[0] = (len[1] / 0x100000000) >>> 0;
            }

            // add bytes to input buffer
            _input.putBytes(msg);

            // process bytes
            _update(_state, _w, _input);

            // compact input buffer every 2K or if empty
            if (_input.read > 2048 || _input.length() === 0) {
              _input.compact();
            }

            return md;
          };

          /**
    * Produces the digest.
    *
    * @return a byte buffer containing the digest value.
    */
          md.digest = function() {
            /* Note: Here we copy the remaining bytes in the input buffer and
    add the appropriate SHA-1 padding. Then we do the final update
    on a copy of the state so that if the user wants to get
    intermediate digests they can do so. */

            /* Determine the number of bytes that must be added to the message
    to ensure its length is congruent to 448 mod 512. In other words,
    the data to be digested must be a multiple of 512 bits (or 128 bytes).
    This data includes the message, some padding, and the length of the
    message. Since the length of the message will be encoded as 8 bytes (64
    bits), that means that the last segment of the data must have 56 bytes
    (448 bits) of message and padding. Therefore, the length of the message
    plus the padding must be congruent to 448 mod 512 because
    512 - 128 = 448.

    In order to fill up the message length it must be filled with
    padding that begins with 1 bit followed by all 0 bits. Padding
    must *always* be present, so if the message length is already
    congruent to 448 mod 512, then 512 padding bits must be added. */

            var finalBlock = forge.util.createBuffer();
            finalBlock.putBytes(_input.bytes());

            // compute remaining size to be digested (include message length size)
            var remaining =
              md.fullMessageLength[md.fullMessageLength.length - 1] +
              md.messageLengthSize;

            // add padding for overflow blockSize - overflow
            // _padding starts with 1 byte with first bit is set (byte value 128), then
            // there may be up to (blockSize - 1) other pad bytes
            var overflow = remaining & (md.blockLength - 1);
            finalBlock.putBytes(_padding.substr(0, md.blockLength - overflow));

            // serialize message length in bits in big-endian order; since length
            // is stored in bytes we multiply by 8 and add carry from next int
            var next, carry;
            var bits = md.fullMessageLength[0] * 8;
            for (var i = 0; i < md.fullMessageLength.length - 1; ++i) {
              next = md.fullMessageLength[i + 1] * 8;
              carry = (next / 0x100000000) >>> 0;
              bits += carry;
              finalBlock.putInt32(bits >>> 0);
              bits = next >>> 0;
            }
            finalBlock.putInt32(bits);

            var s2 = {
              h0: _state.h0,
              h1: _state.h1,
              h2: _state.h2,
              h3: _state.h3,
              h4: _state.h4
            };
            _update(s2, _w, finalBlock);
            var rval = forge.util.createBuffer();
            rval.putInt32(s2.h0);
            rval.putInt32(s2.h1);
            rval.putInt32(s2.h2);
            rval.putInt32(s2.h3);
            rval.putInt32(s2.h4);
            return rval;
          };

          return md;
        };

        // sha-1 padding bytes not initialized yet
        var _padding = null;
        var _initialized = false;

        /**
 * Initializes the constant tables.
 */
        function _init() {
          // create padding
          _padding = String.fromCharCode(128);
          _padding += forge.util.fillString(String.fromCharCode(0x00), 64);

          // now initialized
          _initialized = true;
        }

        /**
 * Updates a SHA-1 state with the given byte buffer.
 *
 * @param s the SHA-1 state to update.
 * @param w the array to use to store words.
 * @param bytes the byte buffer to update with.
 */
        function _update(s, w, bytes) {
          // consume 512 bit (64 byte) chunks
          var t, a, b, c, d, e, f, i;
          var len = bytes.length();
          while (len >= 64) {
            // the w array will be populated with sixteen 32-bit big-endian words
            // and then extended into 80 32-bit words according to SHA-1 algorithm
            // and for 32-79 using Max Locktyukhin's optimization

            // initialize hash value for this chunk
            a = s.h0;
            b = s.h1;
            c = s.h2;
            d = s.h3;
            e = s.h4;

            // round 1
            for (i = 0; i < 16; ++i) {
              t = bytes.getInt32();
              w[i] = t;
              f = d ^ (b & (c ^ d));
              t = ((a << 5) | (a >>> 27)) + f + e + 0x5a827999 + t;
              e = d;
              d = c;
              // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
              c = ((b << 30) | (b >>> 2)) >>> 0;
              b = a;
              a = t;
            }
            for (; i < 20; ++i) {
              t = w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16];
              t = (t << 1) | (t >>> 31);
              w[i] = t;
              f = d ^ (b & (c ^ d));
              t = ((a << 5) | (a >>> 27)) + f + e + 0x5a827999 + t;
              e = d;
              d = c;
              // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
              c = ((b << 30) | (b >>> 2)) >>> 0;
              b = a;
              a = t;
            }
            // round 2
            for (; i < 32; ++i) {
              t = w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16];
              t = (t << 1) | (t >>> 31);
              w[i] = t;
              f = b ^ c ^ d;
              t = ((a << 5) | (a >>> 27)) + f + e + 0x6ed9eba1 + t;
              e = d;
              d = c;
              // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
              c = ((b << 30) | (b >>> 2)) >>> 0;
              b = a;
              a = t;
            }
            for (; i < 40; ++i) {
              t = w[i - 6] ^ w[i - 16] ^ w[i - 28] ^ w[i - 32];
              t = (t << 2) | (t >>> 30);
              w[i] = t;
              f = b ^ c ^ d;
              t = ((a << 5) | (a >>> 27)) + f + e + 0x6ed9eba1 + t;
              e = d;
              d = c;
              // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
              c = ((b << 30) | (b >>> 2)) >>> 0;
              b = a;
              a = t;
            }
            // round 3
            for (; i < 60; ++i) {
              t = w[i - 6] ^ w[i - 16] ^ w[i - 28] ^ w[i - 32];
              t = (t << 2) | (t >>> 30);
              w[i] = t;
              f = (b & c) | (d & (b ^ c));
              t = ((a << 5) | (a >>> 27)) + f + e + 0x8f1bbcdc + t;
              e = d;
              d = c;
              // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
              c = ((b << 30) | (b >>> 2)) >>> 0;
              b = a;
              a = t;
            }
            // round 4
            for (; i < 80; ++i) {
              t = w[i - 6] ^ w[i - 16] ^ w[i - 28] ^ w[i - 32];
              t = (t << 2) | (t >>> 30);
              w[i] = t;
              f = b ^ c ^ d;
              t = ((a << 5) | (a >>> 27)) + f + e + 0xca62c1d6 + t;
              e = d;
              d = c;
              // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
              c = ((b << 30) | (b >>> 2)) >>> 0;
              b = a;
              a = t;
            }

            // update hash state
            s.h0 = (s.h0 + a) | 0;
            s.h1 = (s.h1 + b) | 0;
            s.h2 = (s.h2 + c) | 0;
            s.h3 = (s.h3 + d) | 0;
            s.h4 = (s.h4 + e) | 0;

            len -= 64;
          }
        }

        /***/
      },
      /* 23 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(Buffer) {
          // Copyright Joyent, Inc. and other Node contributors.
          //
          // Permission is hereby granted, free of charge, to any person obtaining a
          // copy of this software and associated documentation files (the
          // "Software"), to deal in the Software without restriction, including
          // without limitation the rights to use, copy, modify, merge, publish,
          // distribute, sublicense, and/or sell copies of the Software, and to permit
          // persons to whom the Software is furnished to do so, subject to the
          // following conditions:
          //
          // The above copyright notice and this permission notice shall be included
          // in all copies or substantial portions of the Software.
          //
          // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
          // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
          // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
          // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
          // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
          // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
          // USE OR OTHER DEALINGS IN THE SOFTWARE.

          // NOTE: These type checking functions intentionally don't use `instanceof`
          // because it is fragile and can be easily faked with `Object.create()`.

          function isArray(arg) {
            if (Array.isArray) {
              return Array.isArray(arg);
            }
            return objectToString(arg) === "[object Array]";
          }
          exports.isArray = isArray;

          function isBoolean(arg) {
            return typeof arg === "boolean";
          }
          exports.isBoolean = isBoolean;

          function isNull(arg) {
            return arg === null;
          }
          exports.isNull = isNull;

          function isNullOrUndefined(arg) {
            return arg == null;
          }
          exports.isNullOrUndefined = isNullOrUndefined;

          function isNumber(arg) {
            return typeof arg === "number";
          }
          exports.isNumber = isNumber;

          function isString(arg) {
            return typeof arg === "string";
          }
          exports.isString = isString;

          function isSymbol(arg) {
            return typeof arg === "symbol";
          }
          exports.isSymbol = isSymbol;

          function isUndefined(arg) {
            return arg === void 0;
          }
          exports.isUndefined = isUndefined;

          function isRegExp(re) {
            return objectToString(re) === "[object RegExp]";
          }
          exports.isRegExp = isRegExp;

          function isObject(arg) {
            return typeof arg === "object" && arg !== null;
          }
          exports.isObject = isObject;

          function isDate(d) {
            return objectToString(d) === "[object Date]";
          }
          exports.isDate = isDate;

          function isError(e) {
            return objectToString(e) === "[object Error]" || e instanceof Error;
          }
          exports.isError = isError;

          function isFunction(arg) {
            return typeof arg === "function";
          }
          exports.isFunction = isFunction;

          function isPrimitive(arg) {
            return (
              arg === null ||
              typeof arg === "boolean" ||
              typeof arg === "number" ||
              typeof arg === "string" ||
              typeof arg === "symbol" || // ES6 symbol
              typeof arg === "undefined"
            );
          }
          exports.isPrimitive = isPrimitive;

          exports.isBuffer = Buffer.isBuffer;

          function objectToString(o) {
            return Object.prototype.toString.call(o);
          }

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(0).Buffer));

        /***/
      },
      /* 24 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";
        /* WEBPACK VAR INJECTION */ (function(global, process) {
          function oldBrowser() {
            throw new Error(
              "secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11"
            );
          }

          var Buffer = __webpack_require__(13).Buffer;
          var crypto = global.crypto || global.msCrypto;

          if (crypto && crypto.getRandomValues) {
            module.exports = randomBytes;
          } else {
            module.exports = oldBrowser;
          }

          function randomBytes(size, cb) {
            // phantomjs needs to throw
            if (size > 65536)
              throw new Error("requested too many random bytes");
            // in case browserify  isn't using the Uint8Array version
            var rawBytes = new global.Uint8Array(size);

            // This will not work in older browsers.
            // See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
            if (size > 0) {
              // getRandomValues fails on IE if size == 0
              crypto.getRandomValues(rawBytes);
            }

            // XXX: phantomjs doesn't like a buffer being passed here
            var bytes = Buffer.from(rawBytes.buffer);

            if (typeof cb === "function") {
              return process.nextTick(function() {
                cb(null, bytes);
              });
            }

            return bytes;
          }

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(8), __webpack_require__(6)));

        /***/
      },
      /* 25 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";
        /* WEBPACK VAR INJECTION */ (function(Buffer) {
          var inherits = __webpack_require__(2);
          var md5 = __webpack_require__(35);
          var RIPEMD160 = __webpack_require__(56);
          var sha = __webpack_require__(57);

          var Base = __webpack_require__(14);

          function HashNoConstructor(hash) {
            Base.call(this, "digest");

            this._hash = hash;
            this.buffers = [];
          }

          inherits(HashNoConstructor, Base);

          HashNoConstructor.prototype._update = function(data) {
            this.buffers.push(data);
          };

          HashNoConstructor.prototype._final = function() {
            var buf = Buffer.concat(this.buffers);
            var r = this._hash(buf);
            this.buffers = null;

            return r;
          };

          function Hash(hash) {
            Base.call(this, "digest");

            this._hash = hash;
          }

          inherits(Hash, Base);

          Hash.prototype._update = function(data) {
            this._hash.update(data);
          };

          Hash.prototype._final = function() {
            return this._hash.digest();
          };

          module.exports = function createHash(alg) {
            alg = alg.toLowerCase();
            if (alg === "md5") return new HashNoConstructor(md5);
            if (alg === "rmd160" || alg === "ripemd160")
              return new Hash(new RIPEMD160());

            return new Hash(sha(alg));
          };

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(0).Buffer));

        /***/
      },
      /* 26 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(Buffer) {
          module.exports = function xor(a, b) {
            var length = Math.min(a.length, b.length);
            var buffer = new Buffer(length);

            for (var i = 0; i < length; ++i) {
              buffer[i] = a[i] ^ b[i];
            }

            return buffer;
          };

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(0).Buffer));

        /***/
      },
      /* 27 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var utils = __webpack_require__(10);
        var assert = __webpack_require__(7);

        function BlockHash() {
          this.pending = null;
          this.pendingTotal = 0;
          this.blockSize = this.constructor.blockSize;
          this.outSize = this.constructor.outSize;
          this.hmacStrength = this.constructor.hmacStrength;
          this.padLength = this.constructor.padLength / 8;
          this.endian = "big";

          this._delta8 = this.blockSize / 8;
          this._delta32 = this.blockSize / 32;
        }
        exports.BlockHash = BlockHash;

        BlockHash.prototype.update = function update(msg, enc) {
          // Convert message to array, pad it, and join into 32bit blocks
          msg = utils.toArray(msg, enc);
          if (!this.pending) this.pending = msg;
          else this.pending = this.pending.concat(msg);
          this.pendingTotal += msg.length;

          // Enough data, try updating
          if (this.pending.length >= this._delta8) {
            msg = this.pending;

            // Process pending data in blocks
            var r = msg.length % this._delta8;
            this.pending = msg.slice(msg.length - r, msg.length);
            if (this.pending.length === 0) this.pending = null;

            msg = utils.join32(msg, 0, msg.length - r, this.endian);
            for (var i = 0; i < msg.length; i += this._delta32)
              this._update(msg, i, i + this._delta32);
          }

          return this;
        };

        BlockHash.prototype.digest = function digest(enc) {
          this.update(this._pad());
          assert(this.pending === null);

          return this._digest(enc);
        };

        BlockHash.prototype._pad = function pad() {
          var len = this.pendingTotal;
          var bytes = this._delta8;
          var k = bytes - (len + this.padLength) % bytes;
          var res = new Array(k + this.padLength);
          res[0] = 0x80;
          for (var i = 1; i < k; i++) res[i] = 0;

          // Append length
          len <<= 3;
          if (this.endian === "big") {
            for (var t = 8; t < this.padLength; t++) res[i++] = 0;

            res[i++] = 0;
            res[i++] = 0;
            res[i++] = 0;
            res[i++] = 0;
            res[i++] = (len >>> 24) & 0xff;
            res[i++] = (len >>> 16) & 0xff;
            res[i++] = (len >>> 8) & 0xff;
            res[i++] = len & 0xff;
          } else {
            res[i++] = len & 0xff;
            res[i++] = (len >>> 8) & 0xff;
            res[i++] = (len >>> 16) & 0xff;
            res[i++] = (len >>> 24) & 0xff;
            res[i++] = 0;
            res[i++] = 0;
            res[i++] = 0;
            res[i++] = 0;

            for (t = 8; t < this.padLength; t++) res[i++] = 0;
          }

          return res;
        };

        /***/
      },
      /* 28 */
      /***/ function(module, exports, __webpack_require__) {
        var asn1 = exports;

        asn1.bignum = __webpack_require__(4);

        asn1.define = __webpack_require__(202).define;
        asn1.base = __webpack_require__(29);
        asn1.constants = __webpack_require__(112);
        asn1.decoders = __webpack_require__(208);
        asn1.encoders = __webpack_require__(210);

        /***/
      },
      /* 29 */
      /***/ function(module, exports, __webpack_require__) {
        var base = exports;

        base.Reporter = __webpack_require__(205).Reporter;
        base.DecoderBuffer = __webpack_require__(111).DecoderBuffer;
        base.EncoderBuffer = __webpack_require__(111).EncoderBuffer;
        base.Node = __webpack_require__(206);

        /***/
      },
      /* 30 */
      /***/ function(module, exports, __webpack_require__) {
        /**
 * DES (Data Encryption Standard) implementation.
 *
 * This implementation supports DES as well as 3DES-EDE in ECB and CBC mode.
 * It is based on the BSD-licensed implementation by Paul Tero:
 *
 * Paul Tero, July 2001
 * http://www.tero.co.uk/des/
 *
 * Optimised for performance with large blocks by Michael Hayworth, November 2001
 * http://www.netdealing.com
 *
 * THIS SOFTWARE IS PROVIDED "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * @author Stefan Siegl
 * @author Dave Longley
 *
 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
 * Copyright (c) 2012-2014 Digital Bazaar, Inc.
 */
        var forge = __webpack_require__(1);
        __webpack_require__(43);
        __webpack_require__(64);
        __webpack_require__(3);

        /* DES API */
        module.exports = forge.des = forge.des || {};

        /**
 * Deprecated. Instead, use:
 *
 * var cipher = forge.cipher.createCipher('DES-<mode>', key);
 * cipher.start({iv: iv});
 *
 * Creates an DES cipher object to encrypt data using the given symmetric key.
 * The output will be stored in the 'output' member of the returned cipher.
 *
 * The key and iv may be given as binary-encoded strings of bytes or
 * byte buffers.
 *
 * @param key the symmetric key to use (64 or 192 bits).
 * @param iv the initialization vector to use.
 * @param output the buffer to write to, null to create one.
 * @param mode the cipher mode to use (default: 'CBC' if IV is
 *          given, 'ECB' if null).
 *
 * @return the cipher.
 */
        forge.des.startEncrypting = function(key, iv, output, mode) {
          var cipher = _createCipher({
            key: key,
            output: output,
            decrypt: false,
            mode: mode || (iv === null ? "ECB" : "CBC")
          });
          cipher.start(iv);
          return cipher;
        };

        /**
 * Deprecated. Instead, use:
 *
 * var cipher = forge.cipher.createCipher('DES-<mode>', key);
 *
 * Creates an DES cipher object to encrypt data using the given symmetric key.
 *
 * The key may be given as a binary-encoded string of bytes or a byte buffer.
 *
 * @param key the symmetric key to use (64 or 192 bits).
 * @param mode the cipher mode to use (default: 'CBC').
 *
 * @return the cipher.
 */
        forge.des.createEncryptionCipher = function(key, mode) {
          return _createCipher({
            key: key,
            output: null,
            decrypt: false,
            mode: mode
          });
        };

        /**
 * Deprecated. Instead, use:
 *
 * var decipher = forge.cipher.createDecipher('DES-<mode>', key);
 * decipher.start({iv: iv});
 *
 * Creates an DES cipher object to decrypt data using the given symmetric key.
 * The output will be stored in the 'output' member of the returned cipher.
 *
 * The key and iv may be given as binary-encoded strings of bytes or
 * byte buffers.
 *
 * @param key the symmetric key to use (64 or 192 bits).
 * @param iv the initialization vector to use.
 * @param output the buffer to write to, null to create one.
 * @param mode the cipher mode to use (default: 'CBC' if IV is
 *          given, 'ECB' if null).
 *
 * @return the cipher.
 */
        forge.des.startDecrypting = function(key, iv, output, mode) {
          var cipher = _createCipher({
            key: key,
            output: output,
            decrypt: true,
            mode: mode || (iv === null ? "ECB" : "CBC")
          });
          cipher.start(iv);
          return cipher;
        };

        /**
 * Deprecated. Instead, use:
 *
 * var decipher = forge.cipher.createDecipher('DES-<mode>', key);
 *
 * Creates an DES cipher object to decrypt data using the given symmetric key.
 *
 * The key may be given as a binary-encoded string of bytes or a byte buffer.
 *
 * @param key the symmetric key to use (64 or 192 bits).
 * @param mode the cipher mode to use (default: 'CBC').
 *
 * @return the cipher.
 */
        forge.des.createDecryptionCipher = function(key, mode) {
          return _createCipher({
            key: key,
            output: null,
            decrypt: true,
            mode: mode
          });
        };

        /**
 * Creates a new DES cipher algorithm object.
 *
 * @param name the name of the algorithm.
 * @param mode the mode factory function.
 *
 * @return the DES algorithm object.
 */
        forge.des.Algorithm = function(name, mode) {
          var self = this;
          self.name = name;
          self.mode = new mode({
            blockSize: 8,
            cipher: {
              encrypt: function(inBlock, outBlock) {
                return _updateBlock(self._keys, inBlock, outBlock, false);
              },
              decrypt: function(inBlock, outBlock) {
                return _updateBlock(self._keys, inBlock, outBlock, true);
              }
            }
          });
          self._init = false;
        };

        /**
 * Initializes this DES algorithm by expanding its key.
 *
 * @param options the options to use.
 *          key the key to use with this algorithm.
 *          decrypt true if the algorithm should be initialized for decryption,
 *            false for encryption.
 */
        forge.des.Algorithm.prototype.initialize = function(options) {
          if (this._init) {
            return;
          }

          var key = forge.util.createBuffer(options.key);
          if (this.name.indexOf("3DES") === 0) {
            if (key.length() !== 24) {
              throw new Error(
                "Invalid Triple-DES key size: " + key.length() * 8
              );
            }
          }

          // do key expansion to 16 or 48 subkeys (single or triple DES)
          this._keys = _createKeys(key);
          this._init = true;
        };

        /** Register DES algorithms **/

        registerAlgorithm("DES-ECB", forge.cipher.modes.ecb);
        registerAlgorithm("DES-CBC", forge.cipher.modes.cbc);
        registerAlgorithm("DES-CFB", forge.cipher.modes.cfb);
        registerAlgorithm("DES-OFB", forge.cipher.modes.ofb);
        registerAlgorithm("DES-CTR", forge.cipher.modes.ctr);

        registerAlgorithm("3DES-ECB", forge.cipher.modes.ecb);
        registerAlgorithm("3DES-CBC", forge.cipher.modes.cbc);
        registerAlgorithm("3DES-CFB", forge.cipher.modes.cfb);
        registerAlgorithm("3DES-OFB", forge.cipher.modes.ofb);
        registerAlgorithm("3DES-CTR", forge.cipher.modes.ctr);

        function registerAlgorithm(name, mode) {
          var factory = function() {
            return new forge.des.Algorithm(name, mode);
          };
          forge.cipher.registerAlgorithm(name, factory);
        }

        /** DES implementation **/

        var spfunction1 = [
          0x1010400,
          0,
          0x10000,
          0x1010404,
          0x1010004,
          0x10404,
          0x4,
          0x10000,
          0x400,
          0x1010400,
          0x1010404,
          0x400,
          0x1000404,
          0x1010004,
          0x1000000,
          0x4,
          0x404,
          0x1000400,
          0x1000400,
          0x10400,
          0x10400,
          0x1010000,
          0x1010000,
          0x1000404,
          0x10004,
          0x1000004,
          0x1000004,
          0x10004,
          0,
          0x404,
          0x10404,
          0x1000000,
          0x10000,
          0x1010404,
          0x4,
          0x1010000,
          0x1010400,
          0x1000000,
          0x1000000,
          0x400,
          0x1010004,
          0x10000,
          0x10400,
          0x1000004,
          0x400,
          0x4,
          0x1000404,
          0x10404,
          0x1010404,
          0x10004,
          0x1010000,
          0x1000404,
          0x1000004,
          0x404,
          0x10404,
          0x1010400,
          0x404,
          0x1000400,
          0x1000400,
          0,
          0x10004,
          0x10400,
          0,
          0x1010004
        ];
        var spfunction2 = [
          -0x7fef7fe0,
          -0x7fff8000,
          0x8000,
          0x108020,
          0x100000,
          0x20,
          -0x7fefffe0,
          -0x7fff7fe0,
          -0x7fffffe0,
          -0x7fef7fe0,
          -0x7fef8000,
          -0x80000000,
          -0x7fff8000,
          0x100000,
          0x20,
          -0x7fefffe0,
          0x108000,
          0x100020,
          -0x7fff7fe0,
          0,
          -0x80000000,
          0x8000,
          0x108020,
          -0x7ff00000,
          0x100020,
          -0x7fffffe0,
          0,
          0x108000,
          0x8020,
          -0x7fef8000,
          -0x7ff00000,
          0x8020,
          0,
          0x108020,
          -0x7fefffe0,
          0x100000,
          -0x7fff7fe0,
          -0x7ff00000,
          -0x7fef8000,
          0x8000,
          -0x7ff00000,
          -0x7fff8000,
          0x20,
          -0x7fef7fe0,
          0x108020,
          0x20,
          0x8000,
          -0x80000000,
          0x8020,
          -0x7fef8000,
          0x100000,
          -0x7fffffe0,
          0x100020,
          -0x7fff7fe0,
          -0x7fffffe0,
          0x100020,
          0x108000,
          0,
          -0x7fff8000,
          0x8020,
          -0x80000000,
          -0x7fefffe0,
          -0x7fef7fe0,
          0x108000
        ];
        var spfunction3 = [
          0x208,
          0x8020200,
          0,
          0x8020008,
          0x8000200,
          0,
          0x20208,
          0x8000200,
          0x20008,
          0x8000008,
          0x8000008,
          0x20000,
          0x8020208,
          0x20008,
          0x8020000,
          0x208,
          0x8000000,
          0x8,
          0x8020200,
          0x200,
          0x20200,
          0x8020000,
          0x8020008,
          0x20208,
          0x8000208,
          0x20200,
          0x20000,
          0x8000208,
          0x8,
          0x8020208,
          0x200,
          0x8000000,
          0x8020200,
          0x8000000,
          0x20008,
          0x208,
          0x20000,
          0x8020200,
          0x8000200,
          0,
          0x200,
          0x20008,
          0x8020208,
          0x8000200,
          0x8000008,
          0x200,
          0,
          0x8020008,
          0x8000208,
          0x20000,
          0x8000000,
          0x8020208,
          0x8,
          0x20208,
          0x20200,
          0x8000008,
          0x8020000,
          0x8000208,
          0x208,
          0x8020000,
          0x20208,
          0x8,
          0x8020008,
          0x20200
        ];
        var spfunction4 = [
          0x802001,
          0x2081,
          0x2081,
          0x80,
          0x802080,
          0x800081,
          0x800001,
          0x2001,
          0,
          0x802000,
          0x802000,
          0x802081,
          0x81,
          0,
          0x800080,
          0x800001,
          0x1,
          0x2000,
          0x800000,
          0x802001,
          0x80,
          0x800000,
          0x2001,
          0x2080,
          0x800081,
          0x1,
          0x2080,
          0x800080,
          0x2000,
          0x802080,
          0x802081,
          0x81,
          0x800080,
          0x800001,
          0x802000,
          0x802081,
          0x81,
          0,
          0,
          0x802000,
          0x2080,
          0x800080,
          0x800081,
          0x1,
          0x802001,
          0x2081,
          0x2081,
          0x80,
          0x802081,
          0x81,
          0x1,
          0x2000,
          0x800001,
          0x2001,
          0x802080,
          0x800081,
          0x2001,
          0x2080,
          0x800000,
          0x802001,
          0x80,
          0x800000,
          0x2000,
          0x802080
        ];
        var spfunction5 = [
          0x100,
          0x2080100,
          0x2080000,
          0x42000100,
          0x80000,
          0x100,
          0x40000000,
          0x2080000,
          0x40080100,
          0x80000,
          0x2000100,
          0x40080100,
          0x42000100,
          0x42080000,
          0x80100,
          0x40000000,
          0x2000000,
          0x40080000,
          0x40080000,
          0,
          0x40000100,
          0x42080100,
          0x42080100,
          0x2000100,
          0x42080000,
          0x40000100,
          0,
          0x42000000,
          0x2080100,
          0x2000000,
          0x42000000,
          0x80100,
          0x80000,
          0x42000100,
          0x100,
          0x2000000,
          0x40000000,
          0x2080000,
          0x42000100,
          0x40080100,
          0x2000100,
          0x40000000,
          0x42080000,
          0x2080100,
          0x40080100,
          0x100,
          0x2000000,
          0x42080000,
          0x42080100,
          0x80100,
          0x42000000,
          0x42080100,
          0x2080000,
          0,
          0x40080000,
          0x42000000,
          0x80100,
          0x2000100,
          0x40000100,
          0x80000,
          0,
          0x40080000,
          0x2080100,
          0x40000100
        ];
        var spfunction6 = [
          0x20000010,
          0x20400000,
          0x4000,
          0x20404010,
          0x20400000,
          0x10,
          0x20404010,
          0x400000,
          0x20004000,
          0x404010,
          0x400000,
          0x20000010,
          0x400010,
          0x20004000,
          0x20000000,
          0x4010,
          0,
          0x400010,
          0x20004010,
          0x4000,
          0x404000,
          0x20004010,
          0x10,
          0x20400010,
          0x20400010,
          0,
          0x404010,
          0x20404000,
          0x4010,
          0x404000,
          0x20404000,
          0x20000000,
          0x20004000,
          0x10,
          0x20400010,
          0x404000,
          0x20404010,
          0x400000,
          0x4010,
          0x20000010,
          0x400000,
          0x20004000,
          0x20000000,
          0x4010,
          0x20000010,
          0x20404010,
          0x404000,
          0x20400000,
          0x404010,
          0x20404000,
          0,
          0x20400010,
          0x10,
          0x4000,
          0x20400000,
          0x404010,
          0x4000,
          0x400010,
          0x20004010,
          0,
          0x20404000,
          0x20000000,
          0x400010,
          0x20004010
        ];
        var spfunction7 = [
          0x200000,
          0x4200002,
          0x4000802,
          0,
          0x800,
          0x4000802,
          0x200802,
          0x4200800,
          0x4200802,
          0x200000,
          0,
          0x4000002,
          0x2,
          0x4000000,
          0x4200002,
          0x802,
          0x4000800,
          0x200802,
          0x200002,
          0x4000800,
          0x4000002,
          0x4200000,
          0x4200800,
          0x200002,
          0x4200000,
          0x800,
          0x802,
          0x4200802,
          0x200800,
          0x2,
          0x4000000,
          0x200800,
          0x4000000,
          0x200800,
          0x200000,
          0x4000802,
          0x4000802,
          0x4200002,
          0x4200002,
          0x2,
          0x200002,
          0x4000000,
          0x4000800,
          0x200000,
          0x4200800,
          0x802,
          0x200802,
          0x4200800,
          0x802,
          0x4000002,
          0x4200802,
          0x4200000,
          0x200800,
          0,
          0x2,
          0x4200802,
          0,
          0x200802,
          0x4200000,
          0x800,
          0x4000002,
          0x4000800,
          0x800,
          0x200002
        ];
        var spfunction8 = [
          0x10001040,
          0x1000,
          0x40000,
          0x10041040,
          0x10000000,
          0x10001040,
          0x40,
          0x10000000,
          0x40040,
          0x10040000,
          0x10041040,
          0x41000,
          0x10041000,
          0x41040,
          0x1000,
          0x40,
          0x10040000,
          0x10000040,
          0x10001000,
          0x1040,
          0x41000,
          0x40040,
          0x10040040,
          0x10041000,
          0x1040,
          0,
          0,
          0x10040040,
          0x10000040,
          0x10001000,
          0x41040,
          0x40000,
          0x41040,
          0x40000,
          0x10041000,
          0x1000,
          0x40,
          0x10040040,
          0x1000,
          0x41040,
          0x10001000,
          0x40,
          0x10000040,
          0x10040000,
          0x10040040,
          0x10000000,
          0x40000,
          0x10001040,
          0,
          0x10041040,
          0x40040,
          0x10000040,
          0x10040000,
          0x10001000,
          0x10001040,
          0,
          0x10041040,
          0x41000,
          0x41000,
          0x1040,
          0x1040,
          0x40040,
          0x10000000,
          0x10041000
        ];

        /**
 * Create necessary sub keys.
 *
 * @param key the 64-bit or 192-bit key.
 *
 * @return the expanded keys.
 */
        function _createKeys(key) {
          var pc2bytes0 = [
              0,
              0x4,
              0x20000000,
              0x20000004,
              0x10000,
              0x10004,
              0x20010000,
              0x20010004,
              0x200,
              0x204,
              0x20000200,
              0x20000204,
              0x10200,
              0x10204,
              0x20010200,
              0x20010204
            ],
            pc2bytes1 = [
              0,
              0x1,
              0x100000,
              0x100001,
              0x4000000,
              0x4000001,
              0x4100000,
              0x4100001,
              0x100,
              0x101,
              0x100100,
              0x100101,
              0x4000100,
              0x4000101,
              0x4100100,
              0x4100101
            ],
            pc2bytes2 = [
              0,
              0x8,
              0x800,
              0x808,
              0x1000000,
              0x1000008,
              0x1000800,
              0x1000808,
              0,
              0x8,
              0x800,
              0x808,
              0x1000000,
              0x1000008,
              0x1000800,
              0x1000808
            ],
            pc2bytes3 = [
              0,
              0x200000,
              0x8000000,
              0x8200000,
              0x2000,
              0x202000,
              0x8002000,
              0x8202000,
              0x20000,
              0x220000,
              0x8020000,
              0x8220000,
              0x22000,
              0x222000,
              0x8022000,
              0x8222000
            ],
            pc2bytes4 = [
              0,
              0x40000,
              0x10,
              0x40010,
              0,
              0x40000,
              0x10,
              0x40010,
              0x1000,
              0x41000,
              0x1010,
              0x41010,
              0x1000,
              0x41000,
              0x1010,
              0x41010
            ],
            pc2bytes5 = [
              0,
              0x400,
              0x20,
              0x420,
              0,
              0x400,
              0x20,
              0x420,
              0x2000000,
              0x2000400,
              0x2000020,
              0x2000420,
              0x2000000,
              0x2000400,
              0x2000020,
              0x2000420
            ],
            pc2bytes6 = [
              0,
              0x10000000,
              0x80000,
              0x10080000,
              0x2,
              0x10000002,
              0x80002,
              0x10080002,
              0,
              0x10000000,
              0x80000,
              0x10080000,
              0x2,
              0x10000002,
              0x80002,
              0x10080002
            ],
            pc2bytes7 = [
              0,
              0x10000,
              0x800,
              0x10800,
              0x20000000,
              0x20010000,
              0x20000800,
              0x20010800,
              0x20000,
              0x30000,
              0x20800,
              0x30800,
              0x20020000,
              0x20030000,
              0x20020800,
              0x20030800
            ],
            pc2bytes8 = [
              0,
              0x40000,
              0,
              0x40000,
              0x2,
              0x40002,
              0x2,
              0x40002,
              0x2000000,
              0x2040000,
              0x2000000,
              0x2040000,
              0x2000002,
              0x2040002,
              0x2000002,
              0x2040002
            ],
            pc2bytes9 = [
              0,
              0x10000000,
              0x8,
              0x10000008,
              0,
              0x10000000,
              0x8,
              0x10000008,
              0x400,
              0x10000400,
              0x408,
              0x10000408,
              0x400,
              0x10000400,
              0x408,
              0x10000408
            ],
            pc2bytes10 = [
              0,
              0x20,
              0,
              0x20,
              0x100000,
              0x100020,
              0x100000,
              0x100020,
              0x2000,
              0x2020,
              0x2000,
              0x2020,
              0x102000,
              0x102020,
              0x102000,
              0x102020
            ],
            pc2bytes11 = [
              0,
              0x1000000,
              0x200,
              0x1000200,
              0x200000,
              0x1200000,
              0x200200,
              0x1200200,
              0x4000000,
              0x5000000,
              0x4000200,
              0x5000200,
              0x4200000,
              0x5200000,
              0x4200200,
              0x5200200
            ],
            pc2bytes12 = [
              0,
              0x1000,
              0x8000000,
              0x8001000,
              0x80000,
              0x81000,
              0x8080000,
              0x8081000,
              0x10,
              0x1010,
              0x8000010,
              0x8001010,
              0x80010,
              0x81010,
              0x8080010,
              0x8081010
            ],
            pc2bytes13 = [
              0,
              0x4,
              0x100,
              0x104,
              0,
              0x4,
              0x100,
              0x104,
              0x1,
              0x5,
              0x101,
              0x105,
              0x1,
              0x5,
              0x101,
              0x105
            ];

          // how many iterations (1 for des, 3 for triple des)
          // changed by Paul 16/6/2007 to use Triple DES for 9+ byte keys
          var iterations = key.length() > 8 ? 3 : 1;

          // stores the return keys
          var keys = [];

          // now define the left shifts which need to be done
          var shifts = [0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0];

          var n = 0,
            tmp;
          for (var j = 0; j < iterations; j++) {
            var left = key.getInt32();
            var right = key.getInt32();

            tmp = ((left >>> 4) ^ right) & 0x0f0f0f0f;
            right ^= tmp;
            left ^= tmp << 4;

            tmp = ((right >>> -16) ^ left) & 0x0000ffff;
            left ^= tmp;
            right ^= tmp << -16;

            tmp = ((left >>> 2) ^ right) & 0x33333333;
            right ^= tmp;
            left ^= tmp << 2;

            tmp = ((right >>> -16) ^ left) & 0x0000ffff;
            left ^= tmp;
            right ^= tmp << -16;

            tmp = ((left >>> 1) ^ right) & 0x55555555;
            right ^= tmp;
            left ^= tmp << 1;

            tmp = ((right >>> 8) ^ left) & 0x00ff00ff;
            left ^= tmp;
            right ^= tmp << 8;

            tmp = ((left >>> 1) ^ right) & 0x55555555;
            right ^= tmp;
            left ^= tmp << 1;

            // right needs to be shifted and OR'd with last four bits of left
            tmp = (left << 8) | ((right >>> 20) & 0x000000f0);

            // left needs to be put upside down
            left =
              (right << 24) |
              ((right << 8) & 0xff0000) |
              ((right >>> 8) & 0xff00) |
              ((right >>> 24) & 0xf0);
            right = tmp;

            // now go through and perform these shifts on the left and right keys
            for (var i = 0; i < shifts.length; ++i) {
              //shift the keys either one or two bits to the left
              if (shifts[i]) {
                left = (left << 2) | (left >>> 26);
                right = (right << 2) | (right >>> 26);
              } else {
                left = (left << 1) | (left >>> 27);
                right = (right << 1) | (right >>> 27);
              }
              left &= -0xf;
              right &= -0xf;

              // now apply PC-2, in such a way that E is easier when encrypting or
              // decrypting this conversion will look like PC-2 except only the last 6
              // bits of each byte are used rather than 48 consecutive bits and the
              // order of lines will be according to how the S selection functions will
              // be applied: S2, S4, S6, S8, S1, S3, S5, S7
              var lefttmp =
                pc2bytes0[left >>> 28] |
                pc2bytes1[(left >>> 24) & 0xf] |
                pc2bytes2[(left >>> 20) & 0xf] |
                pc2bytes3[(left >>> 16) & 0xf] |
                pc2bytes4[(left >>> 12) & 0xf] |
                pc2bytes5[(left >>> 8) & 0xf] |
                pc2bytes6[(left >>> 4) & 0xf];
              var righttmp =
                pc2bytes7[right >>> 28] |
                pc2bytes8[(right >>> 24) & 0xf] |
                pc2bytes9[(right >>> 20) & 0xf] |
                pc2bytes10[(right >>> 16) & 0xf] |
                pc2bytes11[(right >>> 12) & 0xf] |
                pc2bytes12[(right >>> 8) & 0xf] |
                pc2bytes13[(right >>> 4) & 0xf];
              tmp = ((righttmp >>> 16) ^ lefttmp) & 0x0000ffff;
              keys[n++] = lefttmp ^ tmp;
              keys[n++] = righttmp ^ (tmp << 16);
            }
          }

          return keys;
        }

        /**
 * Updates a single block (1 byte) using DES. The update will either
 * encrypt or decrypt the block.
 *
 * @param keys the expanded keys.
 * @param input the input block (an array of 32-bit words).
 * @param output the updated output block.
 * @param decrypt true to decrypt the block, false to encrypt it.
 */
        function _updateBlock(keys, input, output, decrypt) {
          // set up loops for single or triple DES
          var iterations = keys.length === 32 ? 3 : 9;
          var looping;
          if (iterations === 3) {
            looping = decrypt ? [30, -2, -2] : [0, 32, 2];
          } else {
            looping = decrypt
              ? [94, 62, -2, 32, 64, 2, 30, -2, -2]
              : [0, 32, 2, 62, 30, -2, 64, 96, 2];
          }

          var tmp;

          var left = input[0];
          var right = input[1];

          // first each 64 bit chunk of the message must be permuted according to IP
          tmp = ((left >>> 4) ^ right) & 0x0f0f0f0f;
          right ^= tmp;
          left ^= tmp << 4;

          tmp = ((left >>> 16) ^ right) & 0x0000ffff;
          right ^= tmp;
          left ^= tmp << 16;

          tmp = ((right >>> 2) ^ left) & 0x33333333;
          left ^= tmp;
          right ^= tmp << 2;

          tmp = ((right >>> 8) ^ left) & 0x00ff00ff;
          left ^= tmp;
          right ^= tmp << 8;

          tmp = ((left >>> 1) ^ right) & 0x55555555;
          right ^= tmp;
          left ^= tmp << 1;

          // rotate left 1 bit
          left = (left << 1) | (left >>> 31);
          right = (right << 1) | (right >>> 31);

          for (var j = 0; j < iterations; j += 3) {
            var endloop = looping[j + 1];
            var loopinc = looping[j + 2];

            // now go through and perform the encryption or decryption
            for (var i = looping[j]; i != endloop; i += loopinc) {
              var right1 = right ^ keys[i];
              var right2 = ((right >>> 4) | (right << 28)) ^ keys[i + 1];

              // passing these bytes through the S selection functions
              tmp = left;
              left = right;
              right =
                tmp ^
                (spfunction2[(right1 >>> 24) & 0x3f] |
                  spfunction4[(right1 >>> 16) & 0x3f] |
                  spfunction6[(right1 >>> 8) & 0x3f] |
                  spfunction8[right1 & 0x3f] |
                  spfunction1[(right2 >>> 24) & 0x3f] |
                  spfunction3[(right2 >>> 16) & 0x3f] |
                  spfunction5[(right2 >>> 8) & 0x3f] |
                  spfunction7[right2 & 0x3f]);
            }
            // unreverse left and right
            tmp = left;
            left = right;
            right = tmp;
          }

          // rotate right 1 bit
          left = (left >>> 1) | (left << 31);
          right = (right >>> 1) | (right << 31);

          // now perform IP-1, which is IP in the opposite direction
          tmp = ((left >>> 1) ^ right) & 0x55555555;
          right ^= tmp;
          left ^= tmp << 1;

          tmp = ((right >>> 8) ^ left) & 0x00ff00ff;
          left ^= tmp;
          right ^= tmp << 8;

          tmp = ((right >>> 2) ^ left) & 0x33333333;
          left ^= tmp;
          right ^= tmp << 2;

          tmp = ((left >>> 16) ^ right) & 0x0000ffff;
          right ^= tmp;
          left ^= tmp << 16;

          tmp = ((left >>> 4) ^ right) & 0x0f0f0f0f;
          right ^= tmp;
          left ^= tmp << 4;

          output[0] = left;
          output[1] = right;
        }

        /**
 * Deprecated. Instead, use:
 *
 * forge.cipher.createCipher('DES-<mode>', key);
 * forge.cipher.createDecipher('DES-<mode>', key);
 *
 * Creates a deprecated DES cipher object. This object's mode will default to
 * CBC (cipher-block-chaining).
 *
 * The key may be given as a binary-encoded string of bytes or a byte buffer.
 *
 * @param options the options to use.
 *          key the symmetric key to use (64 or 192 bits).
 *          output the buffer to write to.
 *          decrypt true for decryption, false for encryption.
 *          mode the cipher mode to use (default: 'CBC').
 *
 * @return the cipher.
 */
        function _createCipher(options) {
          options = options || {};
          var mode = (options.mode || "CBC").toUpperCase();
          var algorithm = "DES-" + mode;

          var cipher;
          if (options.decrypt) {
            cipher = forge.cipher.createDecipher(algorithm, options.key);
          } else {
            cipher = forge.cipher.createCipher(algorithm, options.key);
          }

          // backwards compatible start API
          var start = cipher.start;
          cipher.start = function(iv, options) {
            // backwards compatibility: support second arg as output buffer
            var output = null;
            if (options instanceof forge.util.ByteBuffer) {
              output = options;
              options = {};
            }
            options = options || {};
            options.output = output;
            options.iv = iv;
            start.call(cipher, options);
          };

          return cipher;
        }

        /***/
      },
      /* 31 */
      /***/ function(module, exports, __webpack_require__) {
        /**
 * Javascript implementation of basic RSA algorithms.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
 *
 * The only algorithm currently supported for PKI is RSA.
 *
 * An RSA key is often stored in ASN.1 DER format. The SubjectPublicKeyInfo
 * ASN.1 structure is composed of an algorithm of type AlgorithmIdentifier
 * and a subjectPublicKey of type bit string.
 *
 * The AlgorithmIdentifier contains an Object Identifier (OID) and parameters
 * for the algorithm, if any. In the case of RSA, there aren't any.
 *
 * SubjectPublicKeyInfo ::= SEQUENCE {
 *   algorithm AlgorithmIdentifier,
 *   subjectPublicKey BIT STRING
 * }
 *
 * AlgorithmIdentifer ::= SEQUENCE {
 *   algorithm OBJECT IDENTIFIER,
 *   parameters ANY DEFINED BY algorithm OPTIONAL
 * }
 *
 * For an RSA public key, the subjectPublicKey is:
 *
 * RSAPublicKey ::= SEQUENCE {
 *   modulus            INTEGER,    -- n
 *   publicExponent     INTEGER     -- e
 * }
 *
 * PrivateKeyInfo ::= SEQUENCE {
 *   version                   Version,
 *   privateKeyAlgorithm       PrivateKeyAlgorithmIdentifier,
 *   privateKey                PrivateKey,
 *   attributes           [0]  IMPLICIT Attributes OPTIONAL
 * }
 *
 * Version ::= INTEGER
 * PrivateKeyAlgorithmIdentifier ::= AlgorithmIdentifier
 * PrivateKey ::= OCTET STRING
 * Attributes ::= SET OF Attribute
 *
 * An RSA private key as the following structure:
 *
 * RSAPrivateKey ::= SEQUENCE {
 *   version Version,
 *   modulus INTEGER, -- n
 *   publicExponent INTEGER, -- e
 *   privateExponent INTEGER, -- d
 *   prime1 INTEGER, -- p
 *   prime2 INTEGER, -- q
 *   exponent1 INTEGER, -- d mod (p-1)
 *   exponent2 INTEGER, -- d mod (q-1)
 *   coefficient INTEGER -- (inverse of q) mod p
 * }
 *
 * Version ::= INTEGER
 *
 * The OID for the RSA key algorithm is: 1.2.840.113549.1.1.1
 */
        var forge = __webpack_require__(1);
        __webpack_require__(11);
        __webpack_require__(46);
        __webpack_require__(16);
        __webpack_require__(73);
        __webpack_require__(74);
        __webpack_require__(9);
        __webpack_require__(3);

        if (typeof BigInteger === "undefined") {
          var BigInteger = forge.jsbn.BigInteger;
        }

        // shortcut for asn.1 API
        var asn1 = forge.asn1;

        /*
 * RSA encryption and decryption, see RFC 2313.
 */
        forge.pki = forge.pki || {};
        module.exports = forge.pki.rsa = forge.rsa = forge.rsa || {};
        var pki = forge.pki;

        // for finding primes, which are 30k+i for i = 1, 7, 11, 13, 17, 19, 23, 29
        var GCD_30_DELTA = [6, 4, 2, 4, 2, 4, 6, 2];

        // validator for a PrivateKeyInfo structure
        var privateKeyValidator = {
          // PrivateKeyInfo
          name: "PrivateKeyInfo",
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.SEQUENCE,
          constructed: true,
          value: [
            {
              // Version (INTEGER)
              name: "PrivateKeyInfo.version",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.INTEGER,
              constructed: false,
              capture: "privateKeyVersion"
            },
            {
              // privateKeyAlgorithm
              name: "PrivateKeyInfo.privateKeyAlgorithm",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.SEQUENCE,
              constructed: true,
              value: [
                {
                  name: "AlgorithmIdentifier.algorithm",
                  tagClass: asn1.Class.UNIVERSAL,
                  type: asn1.Type.OID,
                  constructed: false,
                  capture: "privateKeyOid"
                }
              ]
            },
            {
              // PrivateKey
              name: "PrivateKeyInfo",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.OCTETSTRING,
              constructed: false,
              capture: "privateKey"
            }
          ]
        };

        // validator for an RSA private key
        var rsaPrivateKeyValidator = {
          // RSAPrivateKey
          name: "RSAPrivateKey",
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.SEQUENCE,
          constructed: true,
          value: [
            {
              // Version (INTEGER)
              name: "RSAPrivateKey.version",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.INTEGER,
              constructed: false,
              capture: "privateKeyVersion"
            },
            {
              // modulus (n)
              name: "RSAPrivateKey.modulus",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.INTEGER,
              constructed: false,
              capture: "privateKeyModulus"
            },
            {
              // publicExponent (e)
              name: "RSAPrivateKey.publicExponent",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.INTEGER,
              constructed: false,
              capture: "privateKeyPublicExponent"
            },
            {
              // privateExponent (d)
              name: "RSAPrivateKey.privateExponent",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.INTEGER,
              constructed: false,
              capture: "privateKeyPrivateExponent"
            },
            {
              // prime1 (p)
              name: "RSAPrivateKey.prime1",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.INTEGER,
              constructed: false,
              capture: "privateKeyPrime1"
            },
            {
              // prime2 (q)
              name: "RSAPrivateKey.prime2",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.INTEGER,
              constructed: false,
              capture: "privateKeyPrime2"
            },
            {
              // exponent1 (d mod (p-1))
              name: "RSAPrivateKey.exponent1",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.INTEGER,
              constructed: false,
              capture: "privateKeyExponent1"
            },
            {
              // exponent2 (d mod (q-1))
              name: "RSAPrivateKey.exponent2",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.INTEGER,
              constructed: false,
              capture: "privateKeyExponent2"
            },
            {
              // coefficient ((inverse of q) mod p)
              name: "RSAPrivateKey.coefficient",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.INTEGER,
              constructed: false,
              capture: "privateKeyCoefficient"
            }
          ]
        };

        // validator for an RSA public key
        var rsaPublicKeyValidator = {
          // RSAPublicKey
          name: "RSAPublicKey",
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.SEQUENCE,
          constructed: true,
          value: [
            {
              // modulus (n)
              name: "RSAPublicKey.modulus",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.INTEGER,
              constructed: false,
              capture: "publicKeyModulus"
            },
            {
              // publicExponent (e)
              name: "RSAPublicKey.exponent",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.INTEGER,
              constructed: false,
              capture: "publicKeyExponent"
            }
          ]
        };

        // validator for an SubjectPublicKeyInfo structure
        // Note: Currently only works with an RSA public key
        var publicKeyValidator = (forge.pki.rsa.publicKeyValidator = {
          name: "SubjectPublicKeyInfo",
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.SEQUENCE,
          constructed: true,
          captureAsn1: "subjectPublicKeyInfo",
          value: [
            {
              name: "SubjectPublicKeyInfo.AlgorithmIdentifier",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.SEQUENCE,
              constructed: true,
              value: [
                {
                  name: "AlgorithmIdentifier.algorithm",
                  tagClass: asn1.Class.UNIVERSAL,
                  type: asn1.Type.OID,
                  constructed: false,
                  capture: "publicKeyOid"
                }
              ]
            },
            {
              // subjectPublicKey
              name: "SubjectPublicKeyInfo.subjectPublicKey",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.BITSTRING,
              constructed: false,
              value: [
                {
                  // RSAPublicKey
                  name: "SubjectPublicKeyInfo.subjectPublicKey.RSAPublicKey",
                  tagClass: asn1.Class.UNIVERSAL,
                  type: asn1.Type.SEQUENCE,
                  constructed: true,
                  optional: true,
                  captureAsn1: "rsaPublicKey"
                }
              ]
            }
          ]
        });

        /**
 * Wrap digest in DigestInfo object.
 *
 * This function implements EMSA-PKCS1-v1_5-ENCODE as per RFC 3447.
 *
 * DigestInfo ::= SEQUENCE {
 *   digestAlgorithm DigestAlgorithmIdentifier,
 *   digest Digest
 * }
 *
 * DigestAlgorithmIdentifier ::= AlgorithmIdentifier
 * Digest ::= OCTET STRING
 *
 * @param md the message digest object with the hash to sign.
 *
 * @return the encoded message (ready for RSA encrytion)
 */
        var emsaPkcs1v15encode = function(md) {
          // get the oid for the algorithm
          var oid;
          if (md.algorithm in pki.oids) {
            oid = pki.oids[md.algorithm];
          } else {
            var error = new Error("Unknown message digest algorithm.");
            error.algorithm = md.algorithm;
            throw error;
          }
          var oidBytes = asn1.oidToDer(oid).getBytes();

          // create the digest info
          var digestInfo = asn1.create(
            asn1.Class.UNIVERSAL,
            asn1.Type.SEQUENCE,
            true,
            []
          );
          var digestAlgorithm = asn1.create(
            asn1.Class.UNIVERSAL,
            asn1.Type.SEQUENCE,
            true,
            []
          );
          digestAlgorithm.value.push(
            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, oidBytes)
          );
          digestAlgorithm.value.push(
            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, "")
          );
          var digest = asn1.create(
            asn1.Class.UNIVERSAL,
            asn1.Type.OCTETSTRING,
            false,
            md.digest().getBytes()
          );
          digestInfo.value.push(digestAlgorithm);
          digestInfo.value.push(digest);

          // encode digest info
          return asn1.toDer(digestInfo).getBytes();
        };

        /**
 * Performs x^c mod n (RSA encryption or decryption operation).
 *
 * @param x the number to raise and mod.
 * @param key the key to use.
 * @param pub true if the key is public, false if private.
 *
 * @return the result of x^c mod n.
 */
        var _modPow = function(x, key, pub) {
          if (pub) {
            return x.modPow(key.e, key.n);
          }

          if (!key.p || !key.q) {
            // allow calculation without CRT params (slow)
            return x.modPow(key.d, key.n);
          }

          // pre-compute dP, dQ, and qInv if necessary
          if (!key.dP) {
            key.dP = key.d.mod(key.p.subtract(BigInteger.ONE));
          }
          if (!key.dQ) {
            key.dQ = key.d.mod(key.q.subtract(BigInteger.ONE));
          }
          if (!key.qInv) {
            key.qInv = key.q.modInverse(key.p);
          }

          /* Chinese remainder theorem (CRT) states:

    Suppose n1, n2, ..., nk are positive integers which are pairwise
    coprime (n1 and n2 have no common factors other than 1). For any
    integers x1, x2, ..., xk there exists an integer x solving the
    system of simultaneous congruences (where ~= means modularly
    congruent so a ~= b mod n means a mod n = b mod n):

    x ~= x1 mod n1
    x ~= x2 mod n2
    ...
    x ~= xk mod nk

    This system of congruences has a single simultaneous solution x
    between 0 and n - 1. Furthermore, each xk solution and x itself
    is congruent modulo the product n = n1*n2*...*nk.
    So x1 mod n = x2 mod n = xk mod n = x mod n.

    The single simultaneous solution x can be solved with the following
    equation:

    x = sum(xi*ri*si) mod n where ri = n/ni and si = ri^-1 mod ni.

    Where x is less than n, xi = x mod ni.

    For RSA we are only concerned with k = 2. The modulus n = pq, where
    p and q are coprime. The RSA decryption algorithm is:

    y = x^d mod n

    Given the above:

    x1 = x^d mod p
    r1 = n/p = q
    s1 = q^-1 mod p
    x2 = x^d mod q
    r2 = n/q = p
    s2 = p^-1 mod q

    So y = (x1r1s1 + x2r2s2) mod n
         = ((x^d mod p)q(q^-1 mod p) + (x^d mod q)p(p^-1 mod q)) mod n

    According to Fermat's Little Theorem, if the modulus P is prime,
    for any integer A not evenly divisible by P, A^(P-1) ~= 1 mod P.
    Since A is not divisible by P it follows that if:
    N ~= M mod (P - 1), then A^N mod P = A^M mod P. Therefore:

    A^N mod P = A^(M mod (P - 1)) mod P. (The latter takes less effort
    to calculate). In order to calculate x^d mod p more quickly the
    exponent d mod (p - 1) is stored in the RSA private key (the same
    is done for x^d mod q). These values are referred to as dP and dQ
    respectively. Therefore we now have:

    y = ((x^dP mod p)q(q^-1 mod p) + (x^dQ mod q)p(p^-1 mod q)) mod n

    Since we'll be reducing x^dP by modulo p (same for q) we can also
    reduce x by p (and q respectively) before hand. Therefore, let

    xp = ((x mod p)^dP mod p), and
    xq = ((x mod q)^dQ mod q), yielding:

    y = (xp*q*(q^-1 mod p) + xq*p*(p^-1 mod q)) mod n

    This can be further reduced to a simple algorithm that only
    requires 1 inverse (the q inverse is used) to be used and stored.
    The algorithm is called Garner's algorithm. If qInv is the
    inverse of q, we simply calculate:

    y = (qInv*(xp - xq) mod p) * q + xq

    However, there are two further complications. First, we need to
    ensure that xp > xq to prevent signed BigIntegers from being used
    so we add p until this is true (since we will be mod'ing with
    p anyway). Then, there is a known timing attack on algorithms
    using the CRT. To mitigate this risk, "cryptographic blinding"
    should be used. This requires simply generating a random number r
    between 0 and n-1 and its inverse and multiplying x by r^e before
    calculating y and then multiplying y by r^-1 afterwards. Note that
    r must be coprime with n (gcd(r, n) === 1) in order to have an
    inverse.
  */

          // cryptographic blinding
          var r;
          do {
            r = new BigInteger(
              forge.util.bytesToHex(
                forge.random.getBytes(key.n.bitLength() / 8)
              ),
              16
            );
          } while (
            r.compareTo(key.n) >= 0 || !r.gcd(key.n).equals(BigInteger.ONE)
          );
          x = x.multiply(r.modPow(key.e, key.n)).mod(key.n);

          // calculate xp and xq
          var xp = x.mod(key.p).modPow(key.dP, key.p);
          var xq = x.mod(key.q).modPow(key.dQ, key.q);

          // xp must be larger than xq to avoid signed bit usage
          while (xp.compareTo(xq) < 0) {
            xp = xp.add(key.p);
          }

          // do last step
          var y = xp
            .subtract(xq)
            .multiply(key.qInv)
            .mod(key.p)
            .multiply(key.q)
            .add(xq);

          // remove effect of random for cryptographic blinding
          y = y.multiply(r.modInverse(key.n)).mod(key.n);

          return y;
        };

        /**
 * NOTE: THIS METHOD IS DEPRECATED, use 'sign' on a private key object or
 * 'encrypt' on a public key object instead.
 *
 * Performs RSA encryption.
 *
 * The parameter bt controls whether to put padding bytes before the
 * message passed in. Set bt to either true or false to disable padding
 * completely (in order to handle e.g. EMSA-PSS encoding seperately before),
 * signaling whether the encryption operation is a public key operation
 * (i.e. encrypting data) or not, i.e. private key operation (data signing).
 *
 * For PKCS#1 v1.5 padding pass in the block type to use, i.e. either 0x01
 * (for signing) or 0x02 (for encryption). The key operation mode (private
 * or public) is derived from this flag in that case).
 *
 * @param m the message to encrypt as a byte string.
 * @param key the RSA key to use.
 * @param bt for PKCS#1 v1.5 padding, the block type to use
 *   (0x01 for private key, 0x02 for public),
 *   to disable padding: true = public key, false = private key.
 *
 * @return the encrypted bytes as a string.
 */
        pki.rsa.encrypt = function(m, key, bt) {
          var pub = bt;
          var eb;

          // get the length of the modulus in bytes
          var k = Math.ceil(key.n.bitLength() / 8);

          if (bt !== false && bt !== true) {
            // legacy, default to PKCS#1 v1.5 padding
            pub = bt === 0x02;
            eb = _encodePkcs1_v1_5(m, key, bt);
          } else {
            eb = forge.util.createBuffer();
            eb.putBytes(m);
          }

          // load encryption block as big integer 'x'
          // FIXME: hex conversion inefficient, get BigInteger w/byte strings
          var x = new BigInteger(eb.toHex(), 16);

          // do RSA encryption
          var y = _modPow(x, key, pub);

          // convert y into the encrypted data byte string, if y is shorter in
          // bytes than k, then prepend zero bytes to fill up ed
          // FIXME: hex conversion inefficient, get BigInteger w/byte strings
          var yhex = y.toString(16);
          var ed = forge.util.createBuffer();
          var zeros = k - Math.ceil(yhex.length / 2);
          while (zeros > 0) {
            ed.putByte(0x00);
            --zeros;
          }
          ed.putBytes(forge.util.hexToBytes(yhex));
          return ed.getBytes();
        };

        /**
 * NOTE: THIS METHOD IS DEPRECATED, use 'decrypt' on a private key object or
 * 'verify' on a public key object instead.
 *
 * Performs RSA decryption.
 *
 * The parameter ml controls whether to apply PKCS#1 v1.5 padding
 * or not.  Set ml = false to disable padding removal completely
 * (in order to handle e.g. EMSA-PSS later on) and simply pass back
 * the RSA encryption block.
 *
 * @param ed the encrypted data to decrypt in as a byte string.
 * @param key the RSA key to use.
 * @param pub true for a public key operation, false for private.
 * @param ml the message length, if known, false to disable padding.
 *
 * @return the decrypted message as a byte string.
 */
        pki.rsa.decrypt = function(ed, key, pub, ml) {
          // get the length of the modulus in bytes
          var k = Math.ceil(key.n.bitLength() / 8);

          // error if the length of the encrypted data ED is not k
          if (ed.length !== k) {
            var error = new Error("Encrypted message length is invalid.");
            error.length = ed.length;
            error.expected = k;
            throw error;
          }

          // convert encrypted data into a big integer
          // FIXME: hex conversion inefficient, get BigInteger w/byte strings
          var y = new BigInteger(forge.util.createBuffer(ed).toHex(), 16);

          // y must be less than the modulus or it wasn't the result of
          // a previous mod operation (encryption) using that modulus
          if (y.compareTo(key.n) >= 0) {
            throw new Error("Encrypted message is invalid.");
          }

          // do RSA decryption
          var x = _modPow(y, key, pub);

          // create the encryption block, if x is shorter in bytes than k, then
          // prepend zero bytes to fill up eb
          // FIXME: hex conversion inefficient, get BigInteger w/byte strings
          var xhex = x.toString(16);
          var eb = forge.util.createBuffer();
          var zeros = k - Math.ceil(xhex.length / 2);
          while (zeros > 0) {
            eb.putByte(0x00);
            --zeros;
          }
          eb.putBytes(forge.util.hexToBytes(xhex));

          if (ml !== false) {
            // legacy, default to PKCS#1 v1.5 padding
            return _decodePkcs1_v1_5(eb.getBytes(), key, pub);
          }

          // return message
          return eb.getBytes();
        };

        /**
 * Creates an RSA key-pair generation state object. It is used to allow
 * key-generation to be performed in steps. It also allows for a UI to
 * display progress updates.
 *
 * @param bits the size for the private key in bits, defaults to 2048.
 * @param e the public exponent to use, defaults to 65537 (0x10001).
 * @param [options] the options to use.
 *          prng a custom crypto-secure pseudo-random number generator to use,
 *            that must define "getBytesSync".
 *          algorithm the algorithm to use (default: 'PRIMEINC').
 *
 * @return the state object to use to generate the key-pair.
 */
        pki.rsa.createKeyPairGenerationState = function(bits, e, options) {
          // TODO: migrate step-based prime generation code to forge.prime

          // set default bits
          if (typeof bits === "string") {
            bits = parseInt(bits, 10);
          }
          bits = bits || 2048;

          // create prng with api that matches BigInteger secure random
          options = options || {};
          var prng = options.prng || forge.random;
          var rng = {
            // x is an array to fill with bytes
            nextBytes: function(x) {
              var b = prng.getBytesSync(x.length);
              for (var i = 0; i < x.length; ++i) {
                x[i] = b.charCodeAt(i);
              }
            }
          };

          var algorithm = options.algorithm || "PRIMEINC";

          // create PRIMEINC algorithm state
          var rval;
          if (algorithm === "PRIMEINC") {
            rval = {
              algorithm: algorithm,
              state: 0,
              bits: bits,
              rng: rng,
              eInt: e || 65537,
              e: new BigInteger(null),
              p: null,
              q: null,
              qBits: bits >> 1,
              pBits: bits - (bits >> 1),
              pqState: 0,
              num: null,
              keys: null
            };
            rval.e.fromInt(rval.eInt);
          } else {
            throw new Error("Invalid key generation algorithm: " + algorithm);
          }

          return rval;
        };

        /**
 * Attempts to runs the key-generation algorithm for at most n seconds
 * (approximately) using the given state. When key-generation has completed,
 * the keys will be stored in state.keys.
 *
 * To use this function to update a UI while generating a key or to prevent
 * causing browser lockups/warnings, set "n" to a value other than 0. A
 * simple pattern for generating a key and showing a progress indicator is:
 *
 * var state = pki.rsa.createKeyPairGenerationState(2048);
 * var step = function() {
 *   // step key-generation, run algorithm for 100 ms, repeat
 *   if(!forge.pki.rsa.stepKeyPairGenerationState(state, 100)) {
 *     setTimeout(step, 1);
 *   } else {
 *     // key-generation complete
 *     // TODO: turn off progress indicator here
 *     // TODO: use the generated key-pair in "state.keys"
 *   }
 * };
 * // TODO: turn on progress indicator here
 * setTimeout(step, 0);
 *
 * @param state the state to use.
 * @param n the maximum number of milliseconds to run the algorithm for, 0
 *          to run the algorithm to completion.
 *
 * @return true if the key-generation completed, false if not.
 */
        pki.rsa.stepKeyPairGenerationState = function(state, n) {
          // set default algorithm if not set
          if (!("algorithm" in state)) {
            state.algorithm = "PRIMEINC";
          }

          // TODO: migrate step-based prime generation code to forge.prime
          // TODO: abstract as PRIMEINC algorithm

          // do key generation (based on Tom Wu's rsa.js, see jsbn.js license)
          // with some minor optimizations and designed to run in steps

          // local state vars
          var THIRTY = new BigInteger(null);
          THIRTY.fromInt(30);
          var deltaIdx = 0;
          var op_or = function(x, y) {
            return x | y;
          };

          // keep stepping until time limit is reached or done
          var t1 = +new Date();
          var t2;
          var total = 0;
          while (state.keys === null && (n <= 0 || total < n)) {
            // generate p or q
            if (state.state === 0) {
              /* Note: All primes are of the form:

        30k+i, for i < 30 and gcd(30, i)=1, where there are 8 values for i

        When we generate a random number, we always align it at 30k + 1. Each
        time the number is determined not to be prime we add to get to the
        next 'i', eg: if the number was at 30k + 1 we add 6. */
              var bits = state.p === null ? state.pBits : state.qBits;
              var bits1 = bits - 1;

              // get a random number
              if (state.pqState === 0) {
                state.num = new BigInteger(bits, state.rng);
                // force MSB set
                if (!state.num.testBit(bits1)) {
                  state.num.bitwiseTo(
                    BigInteger.ONE.shiftLeft(bits1),
                    op_or,
                    state.num
                  );
                }
                // align number on 30k+1 boundary
                state.num.dAddOffset(31 - state.num.mod(THIRTY).byteValue(), 0);
                deltaIdx = 0;

                ++state.pqState;
              } else if (state.pqState === 1) {
                // try to make the number a prime
                if (state.num.bitLength() > bits) {
                  // overflow, try again
                  state.pqState = 0;
                  // do primality test
                } else if (
                  state.num.isProbablePrime(
                    _getMillerRabinTests(state.num.bitLength())
                  )
                ) {
                  ++state.pqState;
                } else {
                  // get next potential prime
                  state.num.dAddOffset(GCD_30_DELTA[deltaIdx++ % 8], 0);
                }
              } else if (state.pqState === 2) {
                // ensure number is coprime with e
                state.pqState =
                  state.num
                    .subtract(BigInteger.ONE)
                    .gcd(state.e)
                    .compareTo(BigInteger.ONE) === 0
                    ? 3
                    : 0;
              } else if (state.pqState === 3) {
                // store p or q
                state.pqState = 0;
                if (state.p === null) {
                  state.p = state.num;
                } else {
                  state.q = state.num;
                }

                // advance state if both p and q are ready
                if (state.p !== null && state.q !== null) {
                  ++state.state;
                }
                state.num = null;
              }
            } else if (state.state === 1) {
              // ensure p is larger than q (swap them if not)
              if (state.p.compareTo(state.q) < 0) {
                state.num = state.p;
                state.p = state.q;
                state.q = state.num;
              }
              ++state.state;
            } else if (state.state === 2) {
              // compute phi: (p - 1)(q - 1) (Euler's totient function)
              state.p1 = state.p.subtract(BigInteger.ONE);
              state.q1 = state.q.subtract(BigInteger.ONE);
              state.phi = state.p1.multiply(state.q1);
              ++state.state;
            } else if (state.state === 3) {
              // ensure e and phi are coprime
              if (state.phi.gcd(state.e).compareTo(BigInteger.ONE) === 0) {
                // phi and e are coprime, advance
                ++state.state;
              } else {
                // phi and e aren't coprime, so generate a new p and q
                state.p = null;
                state.q = null;
                state.state = 0;
              }
            } else if (state.state === 4) {
              // create n, ensure n is has the right number of bits
              state.n = state.p.multiply(state.q);

              // ensure n is right number of bits
              if (state.n.bitLength() === state.bits) {
                // success, advance
                ++state.state;
              } else {
                // failed, get new q
                state.q = null;
                state.state = 0;
              }
            } else if (state.state === 5) {
              // set keys
              var d = state.e.modInverse(state.phi);
              state.keys = {
                privateKey: pki.rsa.setPrivateKey(
                  state.n,
                  state.e,
                  d,
                  state.p,
                  state.q,
                  d.mod(state.p1),
                  d.mod(state.q1),
                  state.q.modInverse(state.p)
                ),
                publicKey: pki.rsa.setPublicKey(state.n, state.e)
              };
            }

            // update timing
            t2 = +new Date();
            total += t2 - t1;
            t1 = t2;
          }

          return state.keys !== null;
        };

        /**
 * Generates an RSA public-private key pair in a single call.
 *
 * To generate a key-pair in steps (to allow for progress updates and to
 * prevent blocking or warnings in slow browsers) then use the key-pair
 * generation state functions.
 *
 * To generate a key-pair asynchronously (either through web-workers, if
 * available, or by breaking up the work on the main thread), pass a
 * callback function.
 *
 * @param [bits] the size for the private key in bits, defaults to 2048.
 * @param [e] the public exponent to use, defaults to 65537.
 * @param [options] options for key-pair generation, if given then 'bits'
 *          and 'e' must *not* be given:
 *          bits the size for the private key in bits, (default: 2048).
 *          e the public exponent to use, (default: 65537 (0x10001)).
 *          workerScript the worker script URL.
 *          workers the number of web workers (if supported) to use,
 *            (default: 2).
 *          workLoad the size of the work load, ie: number of possible prime
 *            numbers for each web worker to check per work assignment,
 *            (default: 100).
 *          prng a custom crypto-secure pseudo-random number generator to use,
 *            that must define "getBytesSync".
 *          algorithm the algorithm to use (default: 'PRIMEINC').
 * @param [callback(err, keypair)] called once the operation completes.
 *
 * @return an object with privateKey and publicKey properties.
 */
        pki.rsa.generateKeyPair = function(bits, e, options, callback) {
          // (bits), (options), (callback)
          if (arguments.length === 1) {
            if (typeof bits === "object") {
              options = bits;
              bits = undefined;
            } else if (typeof bits === "function") {
              callback = bits;
              bits = undefined;
            }
          } else if (arguments.length === 2) {
            // (bits, e), (bits, options), (bits, callback), (options, callback)
            if (typeof bits === "number") {
              if (typeof e === "function") {
                callback = e;
                e = undefined;
              } else if (typeof e !== "number") {
                options = e;
                e = undefined;
              }
            } else {
              options = bits;
              callback = e;
              bits = undefined;
              e = undefined;
            }
          } else if (arguments.length === 3) {
            // (bits, e, options), (bits, e, callback), (bits, options, callback)
            if (typeof e === "number") {
              if (typeof options === "function") {
                callback = options;
                options = undefined;
              }
            } else {
              callback = options;
              options = e;
              e = undefined;
            }
          }
          options = options || {};
          if (bits === undefined) {
            bits = options.bits || 2048;
          }
          if (e === undefined) {
            e = options.e || 0x10001;
          }

          // if native code is permitted and a callback is given, use native
          // key generation code if available and if parameters are acceptable
          if (
            !forge.options.usePureJavaScript &&
            callback &&
            bits >= 256 &&
            bits <= 16384 &&
            (e === 0x10001 || e === 3)
          ) {
            if (
              _detectSubtleCrypto("generateKey") &&
              _detectSubtleCrypto("exportKey")
            ) {
              // use standard native generateKey
              return window.crypto.subtle
                .generateKey(
                  {
                    name: "RSASSA-PKCS1-v1_5",
                    modulusLength: bits,
                    publicExponent: _intToUint8Array(e),
                    hash: { name: "SHA-256" }
                  },
                  true /* key can be exported*/,
                  ["sign", "verify"]
                )
                .then(function(pair) {
                  return window.crypto.subtle.exportKey(
                    "pkcs8",
                    pair.privateKey
                  );
                  // avoiding catch(function(err) {...}) to support IE <= 8
                })
                .then(undefined, function(err) {
                  callback(err);
                })
                .then(function(pkcs8) {
                  if (pkcs8) {
                    var privateKey = pki.privateKeyFromAsn1(
                      asn1.fromDer(forge.util.createBuffer(pkcs8))
                    );
                    callback(null, {
                      privateKey: privateKey,
                      publicKey: pki.setRsaPublicKey(privateKey.n, privateKey.e)
                    });
                  }
                });
            }
            if (
              _detectSubtleMsCrypto("generateKey") &&
              _detectSubtleMsCrypto("exportKey")
            ) {
              var genOp = window.msCrypto.subtle.generateKey(
                {
                  name: "RSASSA-PKCS1-v1_5",
                  modulusLength: bits,
                  publicExponent: _intToUint8Array(e),
                  hash: { name: "SHA-256" }
                },
                true /* key can be exported*/,
                ["sign", "verify"]
              );
              genOp.oncomplete = function(e) {
                var pair = e.target.result;
                var exportOp = window.msCrypto.subtle.exportKey(
                  "pkcs8",
                  pair.privateKey
                );
                exportOp.oncomplete = function(e) {
                  var pkcs8 = e.target.result;
                  var privateKey = pki.privateKeyFromAsn1(
                    asn1.fromDer(forge.util.createBuffer(pkcs8))
                  );
                  callback(null, {
                    privateKey: privateKey,
                    publicKey: pki.setRsaPublicKey(privateKey.n, privateKey.e)
                  });
                };
                exportOp.onerror = function(err) {
                  callback(err);
                };
              };
              genOp.onerror = function(err) {
                callback(err);
              };
              return;
            }
          }

          // use JavaScript implementation
          var state = pki.rsa.createKeyPairGenerationState(bits, e, options);
          if (!callback) {
            pki.rsa.stepKeyPairGenerationState(state, 0);
            return state.keys;
          }
          _generateKeyPair(state, options, callback);
        };

        /**
 * Sets an RSA public key from BigIntegers modulus and exponent.
 *
 * @param n the modulus.
 * @param e the exponent.
 *
 * @return the public key.
 */
        pki.setRsaPublicKey = pki.rsa.setPublicKey = function(n, e) {
          var key = {
            n: n,
            e: e
          };

          /**
   * Encrypts the given data with this public key. Newer applications
   * should use the 'RSA-OAEP' decryption scheme, 'RSAES-PKCS1-V1_5' is for
   * legacy applications.
   *
   * @param data the byte string to encrypt.
   * @param scheme the encryption scheme to use:
   *          'RSAES-PKCS1-V1_5' (default),
   *          'RSA-OAEP',
   *          'RAW', 'NONE', or null to perform raw RSA encryption,
   *          an object with an 'encode' property set to a function
   *          with the signature 'function(data, key)' that returns
   *          a binary-encoded string representing the encoded data.
   * @param schemeOptions any scheme-specific options.
   *
   * @return the encrypted byte string.
   */
          key.encrypt = function(data, scheme, schemeOptions) {
            if (typeof scheme === "string") {
              scheme = scheme.toUpperCase();
            } else if (scheme === undefined) {
              scheme = "RSAES-PKCS1-V1_5";
            }

            if (scheme === "RSAES-PKCS1-V1_5") {
              scheme = {
                encode: function(m, key, pub) {
                  return _encodePkcs1_v1_5(m, key, 0x02).getBytes();
                }
              };
            } else if (scheme === "RSA-OAEP" || scheme === "RSAES-OAEP") {
              scheme = {
                encode: function(m, key) {
                  return forge.pkcs1.encode_rsa_oaep(key, m, schemeOptions);
                }
              };
            } else if (["RAW", "NONE", "NULL", null].indexOf(scheme) !== -1) {
              scheme = {
                encode: function(e) {
                  return e;
                }
              };
            } else if (typeof scheme === "string") {
              throw new Error(
                'Unsupported encryption scheme: "' + scheme + '".'
              );
            }

            // do scheme-based encoding then rsa encryption
            var e = scheme.encode(data, key, true);
            return pki.rsa.encrypt(e, key, true);
          };

          /**
   * Verifies the given signature against the given digest.
   *
   * PKCS#1 supports multiple (currently two) signature schemes:
   * RSASSA-PKCS1-V1_5 and RSASSA-PSS.
   *
   * By default this implementation uses the "old scheme", i.e.
   * RSASSA-PKCS1-V1_5, in which case once RSA-decrypted, the
   * signature is an OCTET STRING that holds a DigestInfo.
   *
   * DigestInfo ::= SEQUENCE {
   *   digestAlgorithm DigestAlgorithmIdentifier,
   *   digest Digest
   * }
   * DigestAlgorithmIdentifier ::= AlgorithmIdentifier
   * Digest ::= OCTET STRING
   *
   * To perform PSS signature verification, provide an instance
   * of Forge PSS object as the scheme parameter.
   *
   * @param digest the message digest hash to compare against the signature,
   *          as a binary-encoded string.
   * @param signature the signature to verify, as a binary-encoded string.
   * @param scheme signature verification scheme to use:
   *          'RSASSA-PKCS1-V1_5' or undefined for RSASSA PKCS#1 v1.5,
   *          a Forge PSS object for RSASSA-PSS,
   *          'NONE' or null for none, DigestInfo will not be expected, but
   *            PKCS#1 v1.5 padding will still be used.
   *
   * @return true if the signature was verified, false if not.
   */
          key.verify = function(digest, signature, scheme) {
            if (typeof scheme === "string") {
              scheme = scheme.toUpperCase();
            } else if (scheme === undefined) {
              scheme = "RSASSA-PKCS1-V1_5";
            }

            if (scheme === "RSASSA-PKCS1-V1_5") {
              scheme = {
                verify: function(digest, d) {
                  // remove padding
                  d = _decodePkcs1_v1_5(d, key, true);
                  // d is ASN.1 BER-encoded DigestInfo
                  var obj = asn1.fromDer(d);
                  // compare the given digest to the decrypted one
                  return digest === obj.value[1].value;
                }
              };
            } else if (
              scheme === "NONE" ||
              scheme === "NULL" ||
              scheme === null
            ) {
              scheme = {
                verify: function(digest, d) {
                  // remove padding
                  d = _decodePkcs1_v1_5(d, key, true);
                  return digest === d;
                }
              };
            }

            // do rsa decryption w/o any decoding, then verify -- which does decoding
            var d = pki.rsa.decrypt(signature, key, true, false);
            return scheme.verify(digest, d, key.n.bitLength());
          };

          return key;
        };

        /**
 * Sets an RSA private key from BigIntegers modulus, exponent, primes,
 * prime exponents, and modular multiplicative inverse.
 *
 * @param n the modulus.
 * @param e the public exponent.
 * @param d the private exponent ((inverse of e) mod n).
 * @param p the first prime.
 * @param q the second prime.
 * @param dP exponent1 (d mod (p-1)).
 * @param dQ exponent2 (d mod (q-1)).
 * @param qInv ((inverse of q) mod p)
 *
 * @return the private key.
 */
        pki.setRsaPrivateKey = pki.rsa.setPrivateKey = function(
          n,
          e,
          d,
          p,
          q,
          dP,
          dQ,
          qInv
        ) {
          var key = {
            n: n,
            e: e,
            d: d,
            p: p,
            q: q,
            dP: dP,
            dQ: dQ,
            qInv: qInv
          };

          /**
   * Decrypts the given data with this private key. The decryption scheme
   * must match the one used to encrypt the data.
   *
   * @param data the byte string to decrypt.
   * @param scheme the decryption scheme to use:
   *          'RSAES-PKCS1-V1_5' (default),
   *          'RSA-OAEP',
   *          'RAW', 'NONE', or null to perform raw RSA decryption.
   * @param schemeOptions any scheme-specific options.
   *
   * @return the decrypted byte string.
   */
          key.decrypt = function(data, scheme, schemeOptions) {
            if (typeof scheme === "string") {
              scheme = scheme.toUpperCase();
            } else if (scheme === undefined) {
              scheme = "RSAES-PKCS1-V1_5";
            }

            // do rsa decryption w/o any decoding
            var d = pki.rsa.decrypt(data, key, false, false);

            if (scheme === "RSAES-PKCS1-V1_5") {
              scheme = { decode: _decodePkcs1_v1_5 };
            } else if (scheme === "RSA-OAEP" || scheme === "RSAES-OAEP") {
              scheme = {
                decode: function(d, key) {
                  return forge.pkcs1.decode_rsa_oaep(key, d, schemeOptions);
                }
              };
            } else if (["RAW", "NONE", "NULL", null].indexOf(scheme) !== -1) {
              scheme = {
                decode: function(d) {
                  return d;
                }
              };
            } else {
              throw new Error(
                'Unsupported encryption scheme: "' + scheme + '".'
              );
            }

            // decode according to scheme
            return scheme.decode(d, key, false);
          };

          /**
   * Signs the given digest, producing a signature.
   *
   * PKCS#1 supports multiple (currently two) signature schemes:
   * RSASSA-PKCS1-V1_5 and RSASSA-PSS.
   *
   * By default this implementation uses the "old scheme", i.e.
   * RSASSA-PKCS1-V1_5. In order to generate a PSS signature, provide
   * an instance of Forge PSS object as the scheme parameter.
   *
   * @param md the message digest object with the hash to sign.
   * @param scheme the signature scheme to use:
   *          'RSASSA-PKCS1-V1_5' or undefined for RSASSA PKCS#1 v1.5,
   *          a Forge PSS object for RSASSA-PSS,
   *          'NONE' or null for none, DigestInfo will not be used but
   *            PKCS#1 v1.5 padding will still be used.
   *
   * @return the signature as a byte string.
   */
          key.sign = function(md, scheme) {
            /* Note: The internal implementation of RSA operations is being
      transitioned away from a PKCS#1 v1.5 hard-coded scheme. Some legacy
      code like the use of an encoding block identifier 'bt' will eventually
      be removed. */

            // private key operation
            var bt = false;

            if (typeof scheme === "string") {
              scheme = scheme.toUpperCase();
            }

            if (scheme === undefined || scheme === "RSASSA-PKCS1-V1_5") {
              scheme = { encode: emsaPkcs1v15encode };
              bt = 0x01;
            } else if (
              scheme === "NONE" ||
              scheme === "NULL" ||
              scheme === null
            ) {
              scheme = {
                encode: function() {
                  return md;
                }
              };
              bt = 0x01;
            }

            // encode and then encrypt
            var d = scheme.encode(md, key.n.bitLength());
            return pki.rsa.encrypt(d, key, bt);
          };

          return key;
        };

        /**
 * Wraps an RSAPrivateKey ASN.1 object in an ASN.1 PrivateKeyInfo object.
 *
 * @param rsaKey the ASN.1 RSAPrivateKey.
 *
 * @return the ASN.1 PrivateKeyInfo.
 */
        pki.wrapRsaPrivateKey = function(rsaKey) {
          // PrivateKeyInfo
          return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
            // version (0)
            asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.INTEGER,
              false,
              asn1.integerToDer(0).getBytes()
            ),
            // privateKeyAlgorithm
            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
              asn1.create(
                asn1.Class.UNIVERSAL,
                asn1.Type.OID,
                false,
                asn1.oidToDer(pki.oids.rsaEncryption).getBytes()
              ),
              asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, "")
            ]),
            // PrivateKey
            asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.OCTETSTRING,
              false,
              asn1.toDer(rsaKey).getBytes()
            )
          ]);
        };

        /**
 * Converts a private key from an ASN.1 object.
 *
 * @param obj the ASN.1 representation of a PrivateKeyInfo containing an
 *          RSAPrivateKey or an RSAPrivateKey.
 *
 * @return the private key.
 */
        pki.privateKeyFromAsn1 = function(obj) {
          // get PrivateKeyInfo
          var capture = {};
          var errors = [];
          if (asn1.validate(obj, privateKeyValidator, capture, errors)) {
            obj = asn1.fromDer(forge.util.createBuffer(capture.privateKey));
          }

          // get RSAPrivateKey
          capture = {};
          errors = [];
          if (!asn1.validate(obj, rsaPrivateKeyValidator, capture, errors)) {
            var error = new Error(
              "Cannot read private key. " +
                "ASN.1 object does not contain an RSAPrivateKey."
            );
            error.errors = errors;
            throw error;
          }

          // Note: Version is currently ignored.
          // capture.privateKeyVersion
          // FIXME: inefficient, get a BigInteger that uses byte strings
          var n, e, d, p, q, dP, dQ, qInv;
          n = forge.util.createBuffer(capture.privateKeyModulus).toHex();
          e = forge.util.createBuffer(capture.privateKeyPublicExponent).toHex();
          d = forge.util
            .createBuffer(capture.privateKeyPrivateExponent)
            .toHex();
          p = forge.util.createBuffer(capture.privateKeyPrime1).toHex();
          q = forge.util.createBuffer(capture.privateKeyPrime2).toHex();
          dP = forge.util.createBuffer(capture.privateKeyExponent1).toHex();
          dQ = forge.util.createBuffer(capture.privateKeyExponent2).toHex();
          qInv = forge.util.createBuffer(capture.privateKeyCoefficient).toHex();

          // set private key
          return pki.setRsaPrivateKey(
            new BigInteger(n, 16),
            new BigInteger(e, 16),
            new BigInteger(d, 16),
            new BigInteger(p, 16),
            new BigInteger(q, 16),
            new BigInteger(dP, 16),
            new BigInteger(dQ, 16),
            new BigInteger(qInv, 16)
          );
        };

        /**
 * Converts a private key to an ASN.1 RSAPrivateKey.
 *
 * @param key the private key.
 *
 * @return the ASN.1 representation of an RSAPrivateKey.
 */
        pki.privateKeyToAsn1 = pki.privateKeyToRSAPrivateKey = function(key) {
          // RSAPrivateKey
          return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
            // version (0 = only 2 primes, 1 multiple primes)
            asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.INTEGER,
              false,
              asn1.integerToDer(0).getBytes()
            ),
            // modulus (n)
            asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.INTEGER,
              false,
              _bnToBytes(key.n)
            ),
            // publicExponent (e)
            asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.INTEGER,
              false,
              _bnToBytes(key.e)
            ),
            // privateExponent (d)
            asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.INTEGER,
              false,
              _bnToBytes(key.d)
            ),
            // privateKeyPrime1 (p)
            asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.INTEGER,
              false,
              _bnToBytes(key.p)
            ),
            // privateKeyPrime2 (q)
            asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.INTEGER,
              false,
              _bnToBytes(key.q)
            ),
            // privateKeyExponent1 (dP)
            asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.INTEGER,
              false,
              _bnToBytes(key.dP)
            ),
            // privateKeyExponent2 (dQ)
            asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.INTEGER,
              false,
              _bnToBytes(key.dQ)
            ),
            // coefficient (qInv)
            asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.INTEGER,
              false,
              _bnToBytes(key.qInv)
            )
          ]);
        };

        /**
 * Converts a public key from an ASN.1 SubjectPublicKeyInfo or RSAPublicKey.
 *
 * @param obj the asn1 representation of a SubjectPublicKeyInfo or RSAPublicKey.
 *
 * @return the public key.
 */
        pki.publicKeyFromAsn1 = function(obj) {
          // get SubjectPublicKeyInfo
          var capture = {};
          var errors = [];
          if (asn1.validate(obj, publicKeyValidator, capture, errors)) {
            // get oid
            var oid = asn1.derToOid(capture.publicKeyOid);
            if (oid !== pki.oids.rsaEncryption) {
              var error = new Error("Cannot read public key. Unknown OID.");
              error.oid = oid;
              throw error;
            }
            obj = capture.rsaPublicKey;
          }

          // get RSA params
          errors = [];
          if (!asn1.validate(obj, rsaPublicKeyValidator, capture, errors)) {
            var error = new Error(
              "Cannot read public key. " +
                "ASN.1 object does not contain an RSAPublicKey."
            );
            error.errors = errors;
            throw error;
          }

          // FIXME: inefficient, get a BigInteger that uses byte strings
          var n = forge.util.createBuffer(capture.publicKeyModulus).toHex();
          var e = forge.util.createBuffer(capture.publicKeyExponent).toHex();

          // set public key
          return pki.setRsaPublicKey(
            new BigInteger(n, 16),
            new BigInteger(e, 16)
          );
        };

        /**
 * Converts a public key to an ASN.1 SubjectPublicKeyInfo.
 *
 * @param key the public key.
 *
 * @return the asn1 representation of a SubjectPublicKeyInfo.
 */
        pki.publicKeyToAsn1 = pki.publicKeyToSubjectPublicKeyInfo = function(
          key
        ) {
          // SubjectPublicKeyInfo
          return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
            // AlgorithmIdentifier
            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
              // algorithm
              asn1.create(
                asn1.Class.UNIVERSAL,
                asn1.Type.OID,
                false,
                asn1.oidToDer(pki.oids.rsaEncryption).getBytes()
              ),
              // parameters (null)
              asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, "")
            ]),
            // subjectPublicKey
            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BITSTRING, false, [
              pki.publicKeyToRSAPublicKey(key)
            ])
          ]);
        };

        /**
 * Converts a public key to an ASN.1 RSAPublicKey.
 *
 * @param key the public key.
 *
 * @return the asn1 representation of a RSAPublicKey.
 */
        pki.publicKeyToRSAPublicKey = function(key) {
          // RSAPublicKey
          return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
            // modulus (n)
            asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.INTEGER,
              false,
              _bnToBytes(key.n)
            ),
            // publicExponent (e)
            asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.INTEGER,
              false,
              _bnToBytes(key.e)
            )
          ]);
        };

        /**
 * Encodes a message using PKCS#1 v1.5 padding.
 *
 * @param m the message to encode.
 * @param key the RSA key to use.
 * @param bt the block type to use, i.e. either 0x01 (for signing) or 0x02
 *          (for encryption).
 *
 * @return the padded byte buffer.
 */
        function _encodePkcs1_v1_5(m, key, bt) {
          var eb = forge.util.createBuffer();

          // get the length of the modulus in bytes
          var k = Math.ceil(key.n.bitLength() / 8);

          /* use PKCS#1 v1.5 padding */
          if (m.length > k - 11) {
            var error = new Error(
              "Message is too long for PKCS#1 v1.5 padding."
            );
            error.length = m.length;
            error.max = k - 11;
            throw error;
          }

          /* A block type BT, a padding string PS, and the data D shall be
    formatted into an octet string EB, the encryption block:

    EB = 00 || BT || PS || 00 || D

    The block type BT shall be a single octet indicating the structure of
    the encryption block. For this version of the document it shall have
    value 00, 01, or 02. For a private-key operation, the block type
    shall be 00 or 01. For a public-key operation, it shall be 02.

    The padding string PS shall consist of k-3-||D|| octets. For block
    type 00, the octets shall have value 00; for block type 01, they
    shall have value FF; and for block type 02, they shall be
    pseudorandomly generated and nonzero. This makes the length of the
    encryption block EB equal to k. */

          // build the encryption block
          eb.putByte(0x00);
          eb.putByte(bt);

          // create the padding
          var padNum = k - 3 - m.length;
          var padByte;
          // private key op
          if (bt === 0x00 || bt === 0x01) {
            padByte = bt === 0x00 ? 0x00 : 0xff;
            for (var i = 0; i < padNum; ++i) {
              eb.putByte(padByte);
            }
          } else {
            // public key op
            // pad with random non-zero values
            while (padNum > 0) {
              var numZeros = 0;
              var padBytes = forge.random.getBytes(padNum);
              for (var i = 0; i < padNum; ++i) {
                padByte = padBytes.charCodeAt(i);
                if (padByte === 0) {
                  ++numZeros;
                } else {
                  eb.putByte(padByte);
                }
              }
              padNum = numZeros;
            }
          }

          // zero followed by message
          eb.putByte(0x00);
          eb.putBytes(m);

          return eb;
        }

        /**
 * Decodes a message using PKCS#1 v1.5 padding.
 *
 * @param em the message to decode.
 * @param key the RSA key to use.
 * @param pub true if the key is a public key, false if it is private.
 * @param ml the message length, if specified.
 *
 * @return the decoded bytes.
 */
        function _decodePkcs1_v1_5(em, key, pub, ml) {
          // get the length of the modulus in bytes
          var k = Math.ceil(key.n.bitLength() / 8);

          /* It is an error if any of the following conditions occurs:

    1. The encryption block EB cannot be parsed unambiguously.
    2. The padding string PS consists of fewer than eight octets
      or is inconsisent with the block type BT.
    3. The decryption process is a public-key operation and the block
      type BT is not 00 or 01, or the decryption process is a
      private-key operation and the block type is not 02.
   */

          // parse the encryption block
          var eb = forge.util.createBuffer(em);
          var first = eb.getByte();
          var bt = eb.getByte();
          if (
            first !== 0x00 ||
            (pub && bt !== 0x00 && bt !== 0x01) ||
            (!pub && bt != 0x02) ||
            (pub && bt === 0x00 && typeof ml === "undefined")
          ) {
            throw new Error("Encryption block is invalid.");
          }

          var padNum = 0;
          if (bt === 0x00) {
            // check all padding bytes for 0x00
            padNum = k - 3 - ml;
            for (var i = 0; i < padNum; ++i) {
              if (eb.getByte() !== 0x00) {
                throw new Error("Encryption block is invalid.");
              }
            }
          } else if (bt === 0x01) {
            // find the first byte that isn't 0xFF, should be after all padding
            padNum = 0;
            while (eb.length() > 1) {
              if (eb.getByte() !== 0xff) {
                --eb.read;
                break;
              }
              ++padNum;
            }
          } else if (bt === 0x02) {
            // look for 0x00 byte
            padNum = 0;
            while (eb.length() > 1) {
              if (eb.getByte() === 0x00) {
                --eb.read;
                break;
              }
              ++padNum;
            }
          }

          // zero must be 0x00 and padNum must be (k - 3 - message length)
          var zero = eb.getByte();
          if (zero !== 0x00 || padNum !== k - 3 - eb.length()) {
            throw new Error("Encryption block is invalid.");
          }

          return eb.getBytes();
        }

        /**
 * Runs the key-generation algorithm asynchronously, either in the background
 * via Web Workers, or using the main thread and setImmediate.
 *
 * @param state the key-pair generation state.
 * @param [options] options for key-pair generation:
 *          workerScript the worker script URL.
 *          workers the number of web workers (if supported) to use,
 *            (default: 2, -1 to use estimated cores minus one).
 *          workLoad the size of the work load, ie: number of possible prime
 *            numbers for each web worker to check per work assignment,
 *            (default: 100).
 * @param callback(err, keypair) called once the operation completes.
 */
        function _generateKeyPair(state, options, callback) {
          if (typeof options === "function") {
            callback = options;
            options = {};
          }
          options = options || {};

          var opts = {
            algorithm: {
              name: options.algorithm || "PRIMEINC",
              options: {
                workers: options.workers || 2,
                workLoad: options.workLoad || 100,
                workerScript: options.workerScript
              }
            }
          };
          if ("prng" in options) {
            opts.prng = options.prng;
          }

          generate();

          function generate() {
            // find p and then q (done in series to simplify)
            getPrime(state.pBits, function(err, num) {
              if (err) {
                return callback(err);
              }
              state.p = num;
              if (state.q !== null) {
                return finish(err, state.q);
              }
              getPrime(state.qBits, finish);
            });
          }

          function getPrime(bits, callback) {
            forge.prime.generateProbablePrime(bits, opts, callback);
          }

          function finish(err, num) {
            if (err) {
              return callback(err);
            }

            // set q
            state.q = num;

            // ensure p is larger than q (swap them if not)
            if (state.p.compareTo(state.q) < 0) {
              var tmp = state.p;
              state.p = state.q;
              state.q = tmp;
            }

            // ensure p is coprime with e
            if (
              state.p
                .subtract(BigInteger.ONE)
                .gcd(state.e)
                .compareTo(BigInteger.ONE) !== 0
            ) {
              state.p = null;
              generate();
              return;
            }

            // ensure q is coprime with e
            if (
              state.q
                .subtract(BigInteger.ONE)
                .gcd(state.e)
                .compareTo(BigInteger.ONE) !== 0
            ) {
              state.q = null;
              getPrime(state.qBits, finish);
              return;
            }

            // compute phi: (p - 1)(q - 1) (Euler's totient function)
            state.p1 = state.p.subtract(BigInteger.ONE);
            state.q1 = state.q.subtract(BigInteger.ONE);
            state.phi = state.p1.multiply(state.q1);

            // ensure e and phi are coprime
            if (state.phi.gcd(state.e).compareTo(BigInteger.ONE) !== 0) {
              // phi and e aren't coprime, so generate a new p and q
              state.p = state.q = null;
              generate();
              return;
            }

            // create n, ensure n is has the right number of bits
            state.n = state.p.multiply(state.q);
            if (state.n.bitLength() !== state.bits) {
              // failed, get new q
              state.q = null;
              getPrime(state.qBits, finish);
              return;
            }

            // set keys
            var d = state.e.modInverse(state.phi);
            state.keys = {
              privateKey: pki.rsa.setPrivateKey(
                state.n,
                state.e,
                d,
                state.p,
                state.q,
                d.mod(state.p1),
                d.mod(state.q1),
                state.q.modInverse(state.p)
              ),
              publicKey: pki.rsa.setPublicKey(state.n, state.e)
            };

            callback(null, state.keys);
          }
        }

        /**
 * Converts a positive BigInteger into 2's-complement big-endian bytes.
 *
 * @param b the big integer to convert.
 *
 * @return the bytes.
 */
        function _bnToBytes(b) {
          // prepend 0x00 if first byte >= 0x80
          var hex = b.toString(16);
          if (hex[0] >= "8") {
            hex = "00" + hex;
          }
          var bytes = forge.util.hexToBytes(hex);

          // ensure integer is minimally-encoded
          if (
            bytes.length > 1 &&
            // leading 0x00 for positive integer
            ((bytes.charCodeAt(0) === 0 &&
              (bytes.charCodeAt(1) & 0x80) === 0) ||
              // leading 0xFF for negative integer
              (bytes.charCodeAt(0) === 0xff &&
                (bytes.charCodeAt(1) & 0x80) === 0x80))
          ) {
            return bytes.substr(1);
          }
          return bytes;
        }

        /**
 * Returns the required number of Miller-Rabin tests to generate a
 * prime with an error probability of (1/2)^80.
 *
 * See Handbook of Applied Cryptography Chapter 4, Table 4.4.
 *
 * @param bits the bit size.
 *
 * @return the required number of iterations.
 */
        function _getMillerRabinTests(bits) {
          if (bits <= 100) return 27;
          if (bits <= 150) return 18;
          if (bits <= 200) return 15;
          if (bits <= 250) return 12;
          if (bits <= 300) return 9;
          if (bits <= 350) return 8;
          if (bits <= 400) return 7;
          if (bits <= 500) return 6;
          if (bits <= 600) return 5;
          if (bits <= 800) return 4;
          if (bits <= 1250) return 3;
          return 2;
        }

        /**
 * Performs feature detection on the SubtleCrypto interface.
 *
 * @param fn the feature (function) to detect.
 *
 * @return true if detected, false if not.
 */
        function _detectSubtleCrypto(fn) {
          return (
            typeof window !== "undefined" &&
            typeof window.crypto === "object" &&
            typeof window.crypto.subtle === "object" &&
            typeof window.crypto.subtle[fn] === "function"
          );
        }

        /**
 * Performs feature detection on the deprecated Microsoft Internet Explorer
 * outdated SubtleCrypto interface. This function should only be used after
 * checking for the modern, standard SubtleCrypto interface.
 *
 * @param fn the feature (function) to detect.
 *
 * @return true if detected, false if not.
 */
        function _detectSubtleMsCrypto(fn) {
          return (
            typeof window !== "undefined" &&
            typeof window.msCrypto === "object" &&
            typeof window.msCrypto.subtle === "object" &&
            typeof window.msCrypto.subtle[fn] === "function"
          );
        }

        function _intToUint8Array(x) {
          var bytes = forge.util.hexToBytes(x.toString(16));
          var buffer = new Uint8Array(bytes.length);
          for (var i = 0; i < bytes.length; ++i) {
            buffer[i] = bytes.charCodeAt(i);
          }
          return buffer;
        }

        function _privateKeyFromJwk(jwk) {
          if (jwk.kty !== "RSA") {
            throw new Error(
              'Unsupported key algorithm "' +
                jwk.kty +
                '"; algorithm must be "RSA".'
            );
          }
          return pki.setRsaPrivateKey(
            _base64ToBigInt(jwk.n),
            _base64ToBigInt(jwk.e),
            _base64ToBigInt(jwk.d),
            _base64ToBigInt(jwk.p),
            _base64ToBigInt(jwk.q),
            _base64ToBigInt(jwk.dp),
            _base64ToBigInt(jwk.dq),
            _base64ToBigInt(jwk.qi)
          );
        }

        function _publicKeyFromJwk(jwk) {
          if (jwk.kty !== "RSA") {
            throw new Error('Key algorithm must be "RSA".');
          }
          return pki.setRsaPublicKey(
            _base64ToBigInt(jwk.n),
            _base64ToBigInt(jwk.e)
          );
        }

        function _base64ToBigInt(b64) {
          return new BigInteger(
            forge.util.bytesToHex(forge.util.decode64(b64)),
            16
          );
        }

        /***/
      },
      /* 32 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(140).default;
        module.exports.default = module.exports;

        /***/
      },
      /* 33 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";
        /* WEBPACK VAR INJECTION */ (function(process) {
          if (
            !process.version ||
            process.version.indexOf("v0.") === 0 ||
            (process.version.indexOf("v1.") === 0 &&
              process.version.indexOf("v1.8.") !== 0)
          ) {
            module.exports = nextTick;
          } else {
            module.exports = process.nextTick;
          }

          function nextTick(fn, arg1, arg2, arg3) {
            if (typeof fn !== "function") {
              throw new TypeError('"callback" argument must be a function');
            }
            var len = arguments.length;
            var args, i;
            switch (len) {
              case 0:
              case 1:
                return process.nextTick(fn);
              case 2:
                return process.nextTick(function afterTickOne() {
                  fn.call(null, arg1);
                });
              case 3:
                return process.nextTick(function afterTickTwo() {
                  fn.call(null, arg1, arg2);
                });
              case 4:
                return process.nextTick(function afterTickThree() {
                  fn.call(null, arg1, arg2, arg3);
                });
              default:
                args = new Array(len - 1);
                i = 0;
                while (i < args.length) {
                  args[i++] = arguments[i];
                }
                return process.nextTick(function afterTick() {
                  fn.apply(null, args);
                });
            }
          }

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(6)));

        /***/
      },
      /* 34 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(global, process) {
          // Copyright Joyent, Inc. and other Node contributors.
          //
          // Permission is hereby granted, free of charge, to any person obtaining a
          // copy of this software and associated documentation files (the
          // "Software"), to deal in the Software without restriction, including
          // without limitation the rights to use, copy, modify, merge, publish,
          // distribute, sublicense, and/or sell copies of the Software, and to permit
          // persons to whom the Software is furnished to do so, subject to the
          // following conditions:
          //
          // The above copyright notice and this permission notice shall be included
          // in all copies or substantial portions of the Software.
          //
          // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
          // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
          // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
          // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
          // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
          // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
          // USE OR OTHER DEALINGS IN THE SOFTWARE.

          var formatRegExp = /%[sdj%]/g;
          exports.format = function(f) {
            if (!isString(f)) {
              var objects = [];
              for (var i = 0; i < arguments.length; i++) {
                objects.push(inspect(arguments[i]));
              }
              return objects.join(" ");
            }

            var i = 1;
            var args = arguments;
            var len = args.length;
            var str = String(f).replace(formatRegExp, function(x) {
              if (x === "%%") return "%";
              if (i >= len) return x;
              switch (x) {
                case "%s":
                  return String(args[i++]);
                case "%d":
                  return Number(args[i++]);
                case "%j":
                  try {
                    return JSON.stringify(args[i++]);
                  } catch (_) {
                    return "[Circular]";
                  }
                default:
                  return x;
              }
            });
            for (var x = args[i]; i < len; x = args[++i]) {
              if (isNull(x) || !isObject(x)) {
                str += " " + x;
              } else {
                str += " " + inspect(x);
              }
            }
            return str;
          };

          // Mark that a method should not be used.
          // Returns a modified function which warns once by default.
          // If --no-deprecation is set, then it is a no-op.
          exports.deprecate = function(fn, msg) {
            // Allow for deprecating things in the process of starting up.
            if (isUndefined(global.process)) {
              return function() {
                return exports.deprecate(fn, msg).apply(this, arguments);
              };
            }

            if (process.noDeprecation === true) {
              return fn;
            }

            var warned = false;
            function deprecated() {
              if (!warned) {
                if (process.throwDeprecation) {
                  throw new Error(msg);
                } else if (process.traceDeprecation) {
                  console.trace(msg);
                } else {
                  console.error(msg);
                }
                warned = true;
              }
              return fn.apply(this, arguments);
            }

            return deprecated;
          };

          var debugs = {};
          var debugEnviron;
          exports.debuglog = function(set) {
            if (isUndefined(debugEnviron))
              debugEnviron = process.env.NODE_DEBUG || "";
            set = set.toUpperCase();
            if (!debugs[set]) {
              if (new RegExp("\\b" + set + "\\b", "i").test(debugEnviron)) {
                var pid = process.pid;
                debugs[set] = function() {
                  var msg = exports.format.apply(exports, arguments);
                  console.error("%s %d: %s", set, pid, msg);
                };
              } else {
                debugs[set] = function() {};
              }
            }
            return debugs[set];
          };

          /**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
          /* legacy: obj, showHidden, depth, colors*/
          function inspect(obj, opts) {
            // default options
            var ctx = {
              seen: [],
              stylize: stylizeNoColor
            };
            // legacy...
            if (arguments.length >= 3) ctx.depth = arguments[2];
            if (arguments.length >= 4) ctx.colors = arguments[3];
            if (isBoolean(opts)) {
              // legacy...
              ctx.showHidden = opts;
            } else if (opts) {
              // got an "options" object
              exports._extend(ctx, opts);
            }
            // set default options
            if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
            if (isUndefined(ctx.depth)) ctx.depth = 2;
            if (isUndefined(ctx.colors)) ctx.colors = false;
            if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
            if (ctx.colors) ctx.stylize = stylizeWithColor;
            return formatValue(ctx, obj, ctx.depth);
          }
          exports.inspect = inspect;

          // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
          inspect.colors = {
            bold: [1, 22],
            italic: [3, 23],
            underline: [4, 24],
            inverse: [7, 27],
            white: [37, 39],
            grey: [90, 39],
            black: [30, 39],
            blue: [34, 39],
            cyan: [36, 39],
            green: [32, 39],
            magenta: [35, 39],
            red: [31, 39],
            yellow: [33, 39]
          };

          // Don't use 'blue' not visible on cmd.exe
          inspect.styles = {
            special: "cyan",
            number: "yellow",
            boolean: "yellow",
            undefined: "grey",
            null: "bold",
            string: "green",
            date: "magenta",
            // "name": intentionally not styling
            regexp: "red"
          };

          function stylizeWithColor(str, styleType) {
            var style = inspect.styles[styleType];

            if (style) {
              return (
                "\u001b[" +
                inspect.colors[style][0] +
                "m" +
                str +
                "\u001b[" +
                inspect.colors[style][1] +
                "m"
              );
            } else {
              return str;
            }
          }

          function stylizeNoColor(str, styleType) {
            return str;
          }

          function arrayToHash(array) {
            var hash = {};

            array.forEach(function(val, idx) {
              hash[val] = true;
            });

            return hash;
          }

          function formatValue(ctx, value, recurseTimes) {
            // Provide a hook for user-specified inspect functions.
            // Check that value is an object with an inspect function on it
            if (
              ctx.customInspect &&
              value &&
              isFunction(value.inspect) &&
              // Filter out the util module, it's inspect function is special
              value.inspect !== exports.inspect &&
              // Also filter out any prototype objects using the circular check.
              !(value.constructor && value.constructor.prototype === value)
            ) {
              var ret = value.inspect(recurseTimes, ctx);
              if (!isString(ret)) {
                ret = formatValue(ctx, ret, recurseTimes);
              }
              return ret;
            }

            // Primitive types cannot have properties
            var primitive = formatPrimitive(ctx, value);
            if (primitive) {
              return primitive;
            }

            // Look up the keys of the object.
            var keys = Object.keys(value);
            var visibleKeys = arrayToHash(keys);

            if (ctx.showHidden) {
              keys = Object.getOwnPropertyNames(value);
            }

            // IE doesn't make error fields non-enumerable
            // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
            if (
              isError(value) &&
              (keys.indexOf("message") >= 0 || keys.indexOf("description") >= 0)
            ) {
              return formatError(value);
            }

            // Some type of object without properties can be shortcutted.
            if (keys.length === 0) {
              if (isFunction(value)) {
                var name = value.name ? ": " + value.name : "";
                return ctx.stylize("[Function" + name + "]", "special");
              }
              if (isRegExp(value)) {
                return ctx.stylize(
                  RegExp.prototype.toString.call(value),
                  "regexp"
                );
              }
              if (isDate(value)) {
                return ctx.stylize(Date.prototype.toString.call(value), "date");
              }
              if (isError(value)) {
                return formatError(value);
              }
            }

            var base = "",
              array = false,
              braces = ["{", "}"];

            // Make Array say that they are Array
            if (isArray(value)) {
              array = true;
              braces = ["[", "]"];
            }

            // Make functions say that they are functions
            if (isFunction(value)) {
              var n = value.name ? ": " + value.name : "";
              base = " [Function" + n + "]";
            }

            // Make RegExps say that they are RegExps
            if (isRegExp(value)) {
              base = " " + RegExp.prototype.toString.call(value);
            }

            // Make dates with properties first say the date
            if (isDate(value)) {
              base = " " + Date.prototype.toUTCString.call(value);
            }

            // Make error with message first say the error
            if (isError(value)) {
              base = " " + formatError(value);
            }

            if (keys.length === 0 && (!array || value.length == 0)) {
              return braces[0] + base + braces[1];
            }

            if (recurseTimes < 0) {
              if (isRegExp(value)) {
                return ctx.stylize(
                  RegExp.prototype.toString.call(value),
                  "regexp"
                );
              } else {
                return ctx.stylize("[Object]", "special");
              }
            }

            ctx.seen.push(value);

            var output;
            if (array) {
              output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
            } else {
              output = keys.map(function(key) {
                return formatProperty(
                  ctx,
                  value,
                  recurseTimes,
                  visibleKeys,
                  key,
                  array
                );
              });
            }

            ctx.seen.pop();

            return reduceToSingleString(output, base, braces);
          }

          function formatPrimitive(ctx, value) {
            if (isUndefined(value))
              return ctx.stylize("undefined", "undefined");
            if (isString(value)) {
              var simple =
                "'" +
                JSON.stringify(value)
                  .replace(/^"|"$/g, "")
                  .replace(/'/g, "\\'")
                  .replace(/\\"/g, '"') +
                "'";
              return ctx.stylize(simple, "string");
            }
            if (isNumber(value)) return ctx.stylize("" + value, "number");
            if (isBoolean(value)) return ctx.stylize("" + value, "boolean");
            // For some reason typeof null is "object", so special case here.
            if (isNull(value)) return ctx.stylize("null", "null");
          }

          function formatError(value) {
            return "[" + Error.prototype.toString.call(value) + "]";
          }

          function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
            var output = [];
            for (var i = 0, l = value.length; i < l; ++i) {
              if (hasOwnProperty(value, String(i))) {
                output.push(
                  formatProperty(
                    ctx,
                    value,
                    recurseTimes,
                    visibleKeys,
                    String(i),
                    true
                  )
                );
              } else {
                output.push("");
              }
            }
            keys.forEach(function(key) {
              if (!key.match(/^\d+$/)) {
                output.push(
                  formatProperty(
                    ctx,
                    value,
                    recurseTimes,
                    visibleKeys,
                    key,
                    true
                  )
                );
              }
            });
            return output;
          }

          function formatProperty(
            ctx,
            value,
            recurseTimes,
            visibleKeys,
            key,
            array
          ) {
            var name, str, desc;
            desc = Object.getOwnPropertyDescriptor(value, key) || {
              value: value[key]
            };
            if (desc.get) {
              if (desc.set) {
                str = ctx.stylize("[Getter/Setter]", "special");
              } else {
                str = ctx.stylize("[Getter]", "special");
              }
            } else {
              if (desc.set) {
                str = ctx.stylize("[Setter]", "special");
              }
            }
            if (!hasOwnProperty(visibleKeys, key)) {
              name = "[" + key + "]";
            }
            if (!str) {
              if (ctx.seen.indexOf(desc.value) < 0) {
                if (isNull(recurseTimes)) {
                  str = formatValue(ctx, desc.value, null);
                } else {
                  str = formatValue(ctx, desc.value, recurseTimes - 1);
                }
                if (str.indexOf("\n") > -1) {
                  if (array) {
                    str = str
                      .split("\n")
                      .map(function(line) {
                        return "  " + line;
                      })
                      .join("\n")
                      .substr(2);
                  } else {
                    str =
                      "\n" +
                      str
                        .split("\n")
                        .map(function(line) {
                          return "   " + line;
                        })
                        .join("\n");
                  }
                }
              } else {
                str = ctx.stylize("[Circular]", "special");
              }
            }
            if (isUndefined(name)) {
              if (array && key.match(/^\d+$/)) {
                return str;
              }
              name = JSON.stringify("" + key);
              if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
                name = name.substr(1, name.length - 2);
                name = ctx.stylize(name, "name");
              } else {
                name = name
                  .replace(/'/g, "\\'")
                  .replace(/\\"/g, '"')
                  .replace(/(^"|"$)/g, "'");
                name = ctx.stylize(name, "string");
              }
            }

            return name + ": " + str;
          }

          function reduceToSingleString(output, base, braces) {
            var numLinesEst = 0;
            var length = output.reduce(function(prev, cur) {
              numLinesEst++;
              if (cur.indexOf("\n") >= 0) numLinesEst++;
              return prev + cur.replace(/\u001b\[\d\d?m/g, "").length + 1;
            }, 0);

            if (length > 60) {
              return (
                braces[0] +
                (base === "" ? "" : base + "\n ") +
                " " +
                output.join(",\n  ") +
                " " +
                braces[1]
              );
            }

            return braces[0] + base + " " + output.join(", ") + " " + braces[1];
          }

          // NOTE: These type checking functions intentionally don't use `instanceof`
          // because it is fragile and can be easily faked with `Object.create()`.
          function isArray(ar) {
            return Array.isArray(ar);
          }
          exports.isArray = isArray;

          function isBoolean(arg) {
            return typeof arg === "boolean";
          }
          exports.isBoolean = isBoolean;

          function isNull(arg) {
            return arg === null;
          }
          exports.isNull = isNull;

          function isNullOrUndefined(arg) {
            return arg == null;
          }
          exports.isNullOrUndefined = isNullOrUndefined;

          function isNumber(arg) {
            return typeof arg === "number";
          }
          exports.isNumber = isNumber;

          function isString(arg) {
            return typeof arg === "string";
          }
          exports.isString = isString;

          function isSymbol(arg) {
            return typeof arg === "symbol";
          }
          exports.isSymbol = isSymbol;

          function isUndefined(arg) {
            return arg === void 0;
          }
          exports.isUndefined = isUndefined;

          function isRegExp(re) {
            return isObject(re) && objectToString(re) === "[object RegExp]";
          }
          exports.isRegExp = isRegExp;

          function isObject(arg) {
            return typeof arg === "object" && arg !== null;
          }
          exports.isObject = isObject;

          function isDate(d) {
            return isObject(d) && objectToString(d) === "[object Date]";
          }
          exports.isDate = isDate;

          function isError(e) {
            return (
              isObject(e) &&
              (objectToString(e) === "[object Error]" || e instanceof Error)
            );
          }
          exports.isError = isError;

          function isFunction(arg) {
            return typeof arg === "function";
          }
          exports.isFunction = isFunction;

          function isPrimitive(arg) {
            return (
              arg === null ||
              typeof arg === "boolean" ||
              typeof arg === "number" ||
              typeof arg === "string" ||
              typeof arg === "symbol" || // ES6 symbol
              typeof arg === "undefined"
            );
          }
          exports.isPrimitive = isPrimitive;

          exports.isBuffer = __webpack_require__(150);

          function objectToString(o) {
            return Object.prototype.toString.call(o);
          }

          function pad(n) {
            return n < 10 ? "0" + n.toString(10) : n.toString(10);
          }

          var months = [
            "Jan",
            "Feb",
            "Mar",
            "Apr",
            "May",
            "Jun",
            "Jul",
            "Aug",
            "Sep",
            "Oct",
            "Nov",
            "Dec"
          ];

          // 26 Feb 16:19:34
          function timestamp() {
            var d = new Date();
            var time = [
              pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())
            ].join(":");
            return [d.getDate(), months[d.getMonth()], time].join(" ");
          }

          // log is just a thin wrapper to console.log that prepends a timestamp
          exports.log = function() {
            console.log(
              "%s - %s",
              timestamp(),
              exports.format.apply(exports, arguments)
            );
          };

          /**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
          exports.inherits = __webpack_require__(151);

          exports._extend = function(origin, add) {
            // Don't do anything if add isn't an object
            if (!add || !isObject(add)) return origin;

            var keys = Object.keys(add);
            var i = keys.length;
            while (i--) {
              origin[keys[i]] = add[keys[i]];
            }
            return origin;
          };

          function hasOwnProperty(obj, prop) {
            return Object.prototype.hasOwnProperty.call(obj, prop);
          }

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(8), __webpack_require__(6)));

        /***/
      },
      /* 35 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        /*
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */

        var makeHash = __webpack_require__(154);

        /*
 * Calculate the MD5 of an array of little-endian words, and a bit length
 */
        function core_md5(x, len) {
          /* append padding */
          x[len >> 5] |= 0x80 << (len % 32);
          x[((len + 64) >>> 9 << 4) + 14] = len;

          var a = 1732584193;
          var b = -271733879;
          var c = -1732584194;
          var d = 271733878;

          for (var i = 0; i < x.length; i += 16) {
            var olda = a;
            var oldb = b;
            var oldc = c;
            var oldd = d;

            a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);
            d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);
            c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);
            b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);
            a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);
            d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);
            c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);
            b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);
            a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);
            d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);
            c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);
            b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);
            a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);
            d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);
            c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);
            b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);

            a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);
            d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);
            c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);
            b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);
            a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);
            d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);
            c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);
            b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);
            a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);
            d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);
            c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);
            b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);
            a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);
            d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);
            c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);
            b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);

            a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);
            d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);
            c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);
            b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);
            a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);
            d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);
            c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);
            b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);
            a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);
            d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);
            c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);
            b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);
            a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);
            d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);
            c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);
            b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);

            a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);
            d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);
            c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);
            b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);
            a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);
            d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);
            c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);
            b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);
            a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);
            d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);
            c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);
            b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);
            a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);
            d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);
            c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);
            b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);

            a = safe_add(a, olda);
            b = safe_add(b, oldb);
            c = safe_add(c, oldc);
            d = safe_add(d, oldd);
          }

          return [a, b, c, d];
        }

        /*
 * These functions implement the four basic operations the algorithm uses.
 */
        function md5_cmn(q, a, b, x, s, t) {
          return safe_add(
            bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),
            b
          );
        }

        function md5_ff(a, b, c, d, x, s, t) {
          return md5_cmn((b & c) | (~b & d), a, b, x, s, t);
        }

        function md5_gg(a, b, c, d, x, s, t) {
          return md5_cmn((b & d) | (c & ~d), a, b, x, s, t);
        }

        function md5_hh(a, b, c, d, x, s, t) {
          return md5_cmn(b ^ c ^ d, a, b, x, s, t);
        }

        function md5_ii(a, b, c, d, x, s, t) {
          return md5_cmn(c ^ (b | ~d), a, b, x, s, t);
        }

        /*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */
        function safe_add(x, y) {
          var lsw = (x & 0xffff) + (y & 0xffff);
          var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
          return (msw << 16) | (lsw & 0xffff);
        }

        /*
 * Bitwise rotate a 32-bit number to the left.
 */
        function bit_rol(num, cnt) {
          return (num << cnt) | (num >>> (32 - cnt));
        }

        module.exports = function md5(buf) {
          return makeHash(buf, core_md5);
        };

        /***/
      },
      /* 36 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(Buffer) {
          var md5 = __webpack_require__(35);
          module.exports = EVP_BytesToKey;
          function EVP_BytesToKey(password, salt, keyLen, ivLen) {
            if (!Buffer.isBuffer(password)) {
              password = new Buffer(password, "binary");
            }
            if (salt && !Buffer.isBuffer(salt)) {
              salt = new Buffer(salt, "binary");
            }
            keyLen = keyLen / 8;
            ivLen = ivLen || 0;
            var ki = 0;
            var ii = 0;
            var key = new Buffer(keyLen);
            var iv = new Buffer(ivLen);
            var addmd = 0;
            var md_buf;
            var i;
            var bufs = [];
            while (true) {
              if (addmd++ > 0) {
                bufs.push(md_buf);
              }
              bufs.push(password);
              if (salt) {
                bufs.push(salt);
              }
              md_buf = md5(Buffer.concat(bufs));
              bufs = [];
              i = 0;
              if (keyLen > 0) {
                while (true) {
                  if (keyLen === 0) {
                    break;
                  }
                  if (i === md_buf.length) {
                    break;
                  }
                  key[ki++] = md_buf[i];
                  keyLen--;
                  i++;
                }
              }
              if (ivLen > 0 && i !== md_buf.length) {
                while (true) {
                  if (ivLen === 0) {
                    break;
                  }
                  if (i === md_buf.length) {
                    break;
                  }
                  iv[ii++] = md_buf[i];
                  ivLen--;
                  i++;
                }
              }
              if (keyLen === 0 && ivLen === 0) {
                break;
              }
            }
            for (i = 0; i < md_buf.length; i++) {
              md_buf[i] = 0;
            }
            return {
              key: key,
              iv: iv
            };
          }

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(0).Buffer));

        /***/
      },
      /* 37 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(Buffer) {
          // based on the aes implimentation in triple sec
          // https://github.com/keybase/triplesec

          // which is in turn based on the one from crypto-js
          // https://code.google.com/p/crypto-js/

          var uint_max = Math.pow(2, 32);
          function fixup_uint32(x) {
            var ret, x_pos;
            ret =
              x > uint_max || x < 0
                ? (
                    (x_pos = Math.abs(x) % uint_max),
                    x < 0 ? uint_max - x_pos : x_pos
                  )
                : x;
            return ret;
          }
          function scrub_vec(v) {
            for (var i = 0; i < v.length; v++) {
              v[i] = 0;
            }
            return false;
          }

          function Global() {
            this.SBOX = [];
            this.INV_SBOX = [];
            this.SUB_MIX = [[], [], [], []];
            this.INV_SUB_MIX = [[], [], [], []];
            this.init();
            this.RCON = [
              0x00,
              0x01,
              0x02,
              0x04,
              0x08,
              0x10,
              0x20,
              0x40,
              0x80,
              0x1b,
              0x36
            ];
          }

          Global.prototype.init = function() {
            var d, i, sx, t, x, x2, x4, x8, xi, _i;
            d = (function() {
              var _i, _results;
              _results = [];
              for (i = _i = 0; _i < 256; i = ++_i) {
                if (i < 128) {
                  _results.push(i << 1);
                } else {
                  _results.push((i << 1) ^ 0x11b);
                }
              }
              return _results;
            })();
            x = 0;
            xi = 0;
            for (i = _i = 0; _i < 256; i = ++_i) {
              sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);
              sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;
              this.SBOX[x] = sx;
              this.INV_SBOX[sx] = x;
              x2 = d[x];
              x4 = d[x2];
              x8 = d[x4];
              t = (d[sx] * 0x101) ^ (sx * 0x1010100);
              this.SUB_MIX[0][x] = (t << 24) | (t >>> 8);
              this.SUB_MIX[1][x] = (t << 16) | (t >>> 16);
              this.SUB_MIX[2][x] = (t << 8) | (t >>> 24);
              this.SUB_MIX[3][x] = t;
              t =
                (x8 * 0x1010101) ^
                (x4 * 0x10001) ^
                (x2 * 0x101) ^
                (x * 0x1010100);
              this.INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8);
              this.INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16);
              this.INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24);
              this.INV_SUB_MIX[3][sx] = t;
              if (x === 0) {
                x = xi = 1;
              } else {
                x = x2 ^ d[d[d[x8 ^ x2]]];
                xi ^= d[d[xi]];
              }
            }
            return true;
          };

          var G = new Global();

          AES.blockSize = 4 * 4;

          AES.prototype.blockSize = AES.blockSize;

          AES.keySize = 256 / 8;

          AES.prototype.keySize = AES.keySize;

          function bufferToArray(buf) {
            var len = buf.length / 4;
            var out = new Array(len);
            var i = -1;
            while (++i < len) {
              out[i] = buf.readUInt32BE(i * 4);
            }
            return out;
          }
          function AES(key) {
            this._key = bufferToArray(key);
            this._doReset();
          }

          AES.prototype._doReset = function() {
            var invKsRow, keySize, keyWords, ksRow, ksRows, t;
            keyWords = this._key;
            keySize = keyWords.length;
            this._nRounds = keySize + 6;
            ksRows = (this._nRounds + 1) * 4;
            this._keySchedule = [];
            for (ksRow = 0; ksRow < ksRows; ksRow++) {
              this._keySchedule[ksRow] =
                ksRow < keySize
                  ? keyWords[ksRow]
                  : (
                      (t = this._keySchedule[ksRow - 1]),
                      ksRow % keySize === 0
                        ? (
                            (t = (t << 8) | (t >>> 24)),
                            (t =
                              (G.SBOX[t >>> 24] << 24) |
                              (G.SBOX[(t >>> 16) & 0xff] << 16) |
                              (G.SBOX[(t >>> 8) & 0xff] << 8) |
                              G.SBOX[t & 0xff]),
                            (t ^= G.RCON[(ksRow / keySize) | 0] << 24)
                          )
                        : keySize > 6 && ksRow % keySize === 4
                          ? (t =
                              (G.SBOX[t >>> 24] << 24) |
                              (G.SBOX[(t >>> 16) & 0xff] << 16) |
                              (G.SBOX[(t >>> 8) & 0xff] << 8) |
                              G.SBOX[t & 0xff])
                          : void 0,
                      this._keySchedule[ksRow - keySize] ^ t
                    );
            }
            this._invKeySchedule = [];
            for (invKsRow = 0; invKsRow < ksRows; invKsRow++) {
              ksRow = ksRows - invKsRow;
              t = this._keySchedule[ksRow - (invKsRow % 4 ? 0 : 4)];
              this._invKeySchedule[invKsRow] =
                invKsRow < 4 || ksRow <= 4
                  ? t
                  : G.INV_SUB_MIX[0][G.SBOX[t >>> 24]] ^
                    G.INV_SUB_MIX[1][G.SBOX[(t >>> 16) & 0xff]] ^
                    G.INV_SUB_MIX[2][G.SBOX[(t >>> 8) & 0xff]] ^
                    G.INV_SUB_MIX[3][G.SBOX[t & 0xff]];
            }
            return true;
          };

          AES.prototype.encryptBlock = function(M) {
            M = bufferToArray(new Buffer(M));
            var out = this._doCryptBlock(
              M,
              this._keySchedule,
              G.SUB_MIX,
              G.SBOX
            );
            var buf = new Buffer(16);
            buf.writeUInt32BE(out[0], 0);
            buf.writeUInt32BE(out[1], 4);
            buf.writeUInt32BE(out[2], 8);
            buf.writeUInt32BE(out[3], 12);
            return buf;
          };

          AES.prototype.decryptBlock = function(M) {
            M = bufferToArray(new Buffer(M));
            var temp = [M[3], M[1]];
            M[1] = temp[0];
            M[3] = temp[1];
            var out = this._doCryptBlock(
              M,
              this._invKeySchedule,
              G.INV_SUB_MIX,
              G.INV_SBOX
            );
            var buf = new Buffer(16);
            buf.writeUInt32BE(out[0], 0);
            buf.writeUInt32BE(out[3], 4);
            buf.writeUInt32BE(out[2], 8);
            buf.writeUInt32BE(out[1], 12);
            return buf;
          };

          AES.prototype.scrub = function() {
            scrub_vec(this._keySchedule);
            scrub_vec(this._invKeySchedule);
            scrub_vec(this._key);
          };

          AES.prototype._doCryptBlock = function(
            M,
            keySchedule,
            SUB_MIX,
            SBOX
          ) {
            var ksRow, s0, s1, s2, s3, t0, t1, t2, t3;

            s0 = M[0] ^ keySchedule[0];
            s1 = M[1] ^ keySchedule[1];
            s2 = M[2] ^ keySchedule[2];
            s3 = M[3] ^ keySchedule[3];
            ksRow = 4;
            for (var round = 1; round < this._nRounds; round++) {
              t0 =
                SUB_MIX[0][s0 >>> 24] ^
                SUB_MIX[1][(s1 >>> 16) & 0xff] ^
                SUB_MIX[2][(s2 >>> 8) & 0xff] ^
                SUB_MIX[3][s3 & 0xff] ^
                keySchedule[ksRow++];
              t1 =
                SUB_MIX[0][s1 >>> 24] ^
                SUB_MIX[1][(s2 >>> 16) & 0xff] ^
                SUB_MIX[2][(s3 >>> 8) & 0xff] ^
                SUB_MIX[3][s0 & 0xff] ^
                keySchedule[ksRow++];
              t2 =
                SUB_MIX[0][s2 >>> 24] ^
                SUB_MIX[1][(s3 >>> 16) & 0xff] ^
                SUB_MIX[2][(s0 >>> 8) & 0xff] ^
                SUB_MIX[3][s1 & 0xff] ^
                keySchedule[ksRow++];
              t3 =
                SUB_MIX[0][s3 >>> 24] ^
                SUB_MIX[1][(s0 >>> 16) & 0xff] ^
                SUB_MIX[2][(s1 >>> 8) & 0xff] ^
                SUB_MIX[3][s2 & 0xff] ^
                keySchedule[ksRow++];
              s0 = t0;
              s1 = t1;
              s2 = t2;
              s3 = t3;
            }
            t0 =
              ((SBOX[s0 >>> 24] << 24) |
                (SBOX[(s1 >>> 16) & 0xff] << 16) |
                (SBOX[(s2 >>> 8) & 0xff] << 8) |
                SBOX[s3 & 0xff]) ^
              keySchedule[ksRow++];
            t1 =
              ((SBOX[s1 >>> 24] << 24) |
                (SBOX[(s2 >>> 16) & 0xff] << 16) |
                (SBOX[(s3 >>> 8) & 0xff] << 8) |
                SBOX[s0 & 0xff]) ^
              keySchedule[ksRow++];
            t2 =
              ((SBOX[s2 >>> 24] << 24) |
                (SBOX[(s3 >>> 16) & 0xff] << 16) |
                (SBOX[(s0 >>> 8) & 0xff] << 8) |
                SBOX[s1 & 0xff]) ^
              keySchedule[ksRow++];
            t3 =
              ((SBOX[s3 >>> 24] << 24) |
                (SBOX[(s0 >>> 16) & 0xff] << 16) |
                (SBOX[(s1 >>> 8) & 0xff] << 8) |
                SBOX[s2 & 0xff]) ^
              keySchedule[ksRow++];
            return [
              fixup_uint32(t0),
              fixup_uint32(t1),
              fixup_uint32(t2),
              fixup_uint32(t3)
            ];
          };

          exports.AES = AES;

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(0).Buffer));

        /***/
      },
      /* 38 */
      /***/ function(module, exports) {
        exports["aes-128-ecb"] = {
          cipher: "AES",
          key: 128,
          iv: 0,
          mode: "ECB",
          type: "block"
        };
        exports["aes-192-ecb"] = {
          cipher: "AES",
          key: 192,
          iv: 0,
          mode: "ECB",
          type: "block"
        };
        exports["aes-256-ecb"] = {
          cipher: "AES",
          key: 256,
          iv: 0,
          mode: "ECB",
          type: "block"
        };
        exports["aes-128-cbc"] = {
          cipher: "AES",
          key: 128,
          iv: 16,
          mode: "CBC",
          type: "block"
        };
        exports["aes-192-cbc"] = {
          cipher: "AES",
          key: 192,
          iv: 16,
          mode: "CBC",
          type: "block"
        };
        exports["aes-256-cbc"] = {
          cipher: "AES",
          key: 256,
          iv: 16,
          mode: "CBC",
          type: "block"
        };
        exports["aes128"] = exports["aes-128-cbc"];
        exports["aes192"] = exports["aes-192-cbc"];
        exports["aes256"] = exports["aes-256-cbc"];
        exports["aes-128-cfb"] = {
          cipher: "AES",
          key: 128,
          iv: 16,
          mode: "CFB",
          type: "stream"
        };
        exports["aes-192-cfb"] = {
          cipher: "AES",
          key: 192,
          iv: 16,
          mode: "CFB",
          type: "stream"
        };
        exports["aes-256-cfb"] = {
          cipher: "AES",
          key: 256,
          iv: 16,
          mode: "CFB",
          type: "stream"
        };
        exports["aes-128-cfb8"] = {
          cipher: "AES",
          key: 128,
          iv: 16,
          mode: "CFB8",
          type: "stream"
        };
        exports["aes-192-cfb8"] = {
          cipher: "AES",
          key: 192,
          iv: 16,
          mode: "CFB8",
          type: "stream"
        };
        exports["aes-256-cfb8"] = {
          cipher: "AES",
          key: 256,
          iv: 16,
          mode: "CFB8",
          type: "stream"
        };
        exports["aes-128-cfb1"] = {
          cipher: "AES",
          key: 128,
          iv: 16,
          mode: "CFB1",
          type: "stream"
        };
        exports["aes-192-cfb1"] = {
          cipher: "AES",
          key: 192,
          iv: 16,
          mode: "CFB1",
          type: "stream"
        };
        exports["aes-256-cfb1"] = {
          cipher: "AES",
          key: 256,
          iv: 16,
          mode: "CFB1",
          type: "stream"
        };
        exports["aes-128-ofb"] = {
          cipher: "AES",
          key: 128,
          iv: 16,
          mode: "OFB",
          type: "stream"
        };
        exports["aes-192-ofb"] = {
          cipher: "AES",
          key: 192,
          iv: 16,
          mode: "OFB",
          type: "stream"
        };
        exports["aes-256-ofb"] = {
          cipher: "AES",
          key: 256,
          iv: 16,
          mode: "OFB",
          type: "stream"
        };
        exports["aes-128-ctr"] = {
          cipher: "AES",
          key: 128,
          iv: 16,
          mode: "CTR",
          type: "stream"
        };
        exports["aes-192-ctr"] = {
          cipher: "AES",
          key: 192,
          iv: 16,
          mode: "CTR",
          type: "stream"
        };
        exports["aes-256-ctr"] = {
          cipher: "AES",
          key: 256,
          iv: 16,
          mode: "CTR",
          type: "stream"
        };
        exports["aes-128-gcm"] = {
          cipher: "AES",
          key: 128,
          iv: 12,
          mode: "GCM",
          type: "auth"
        };
        exports["aes-192-gcm"] = {
          cipher: "AES",
          key: 192,
          iv: 12,
          mode: "GCM",
          type: "auth"
        };
        exports["aes-256-gcm"] = {
          cipher: "AES",
          key: 256,
          iv: 12,
          mode: "GCM",
          type: "auth"
        };

        /***/
      },
      /* 39 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(Buffer) {
          var xor = __webpack_require__(26);

          function incr32(iv) {
            var len = iv.length;
            var item;
            while (len--) {
              item = iv.readUInt8(len);
              if (item === 255) {
                iv.writeUInt8(0, len);
              } else {
                item++;
                iv.writeUInt8(item, len);
                break;
              }
            }
          }

          function getBlock(self) {
            var out = self._cipher.encryptBlock(self._prev);
            incr32(self._prev);
            return out;
          }

          exports.encrypt = function(self, chunk) {
            while (self._cache.length < chunk.length) {
              self._cache = Buffer.concat([self._cache, getBlock(self)]);
            }
            var pad = self._cache.slice(0, chunk.length);
            self._cache = self._cache.slice(chunk.length);
            return xor(chunk, pad);
          };

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(0).Buffer));

        /***/
      },
      /* 40 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var curve = exports;

        curve.base = __webpack_require__(182);
        curve.short = __webpack_require__(183);
        curve.mont = __webpack_require__(184);
        curve.edwards = __webpack_require__(185);

        /***/
      },
      /* 41 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(Buffer) {
          var asn1 = __webpack_require__(201);
          var aesid = __webpack_require__(213);
          var fixProc = __webpack_require__(214);
          var ciphers = __webpack_require__(58);
          var compat = __webpack_require__(91);
          module.exports = parseKeys;

          function parseKeys(buffer) {
            var password;
            if (typeof buffer === "object" && !Buffer.isBuffer(buffer)) {
              password = buffer.passphrase;
              buffer = buffer.key;
            }
            if (typeof buffer === "string") {
              buffer = new Buffer(buffer);
            }

            var stripped = fixProc(buffer, password);

            var type = stripped.tag;
            var data = stripped.data;
            var subtype, ndata;
            switch (type) {
              case "CERTIFICATE":
                ndata = asn1.certificate.decode(data, "der").tbsCertificate
                  .subjectPublicKeyInfo;
              // falls through
              case "PUBLIC KEY":
                if (!ndata) {
                  ndata = asn1.PublicKey.decode(data, "der");
                }
                subtype = ndata.algorithm.algorithm.join(".");
                switch (subtype) {
                  case "1.2.840.113549.1.1.1":
                    return asn1.RSAPublicKey.decode(
                      ndata.subjectPublicKey.data,
                      "der"
                    );
                  case "1.2.840.10045.2.1":
                    ndata.subjectPrivateKey = ndata.subjectPublicKey;
                    return {
                      type: "ec",
                      data: ndata
                    };
                  case "1.2.840.10040.4.1":
                    ndata.algorithm.params.pub_key = asn1.DSAparam.decode(
                      ndata.subjectPublicKey.data,
                      "der"
                    );
                    return {
                      type: "dsa",
                      data: ndata.algorithm.params
                    };
                  default:
                    throw new Error("unknown key id " + subtype);
                }
                throw new Error("unknown key type " + type);
              case "ENCRYPTED PRIVATE KEY":
                data = asn1.EncryptedPrivateKey.decode(data, "der");
                data = decrypt(data, password);
              // falls through
              case "PRIVATE KEY":
                ndata = asn1.PrivateKey.decode(data, "der");
                subtype = ndata.algorithm.algorithm.join(".");
                switch (subtype) {
                  case "1.2.840.113549.1.1.1":
                    return asn1.RSAPrivateKey.decode(
                      ndata.subjectPrivateKey,
                      "der"
                    );
                  case "1.2.840.10045.2.1":
                    return {
                      curve: ndata.algorithm.curve,
                      privateKey: asn1.ECPrivateKey.decode(
                        ndata.subjectPrivateKey,
                        "der"
                      ).privateKey
                    };
                  case "1.2.840.10040.4.1":
                    ndata.algorithm.params.priv_key = asn1.DSAparam.decode(
                      ndata.subjectPrivateKey,
                      "der"
                    );
                    return {
                      type: "dsa",
                      params: ndata.algorithm.params
                    };
                  default:
                    throw new Error("unknown key id " + subtype);
                }
                throw new Error("unknown key type " + type);
              case "RSA PUBLIC KEY":
                return asn1.RSAPublicKey.decode(data, "der");
              case "RSA PRIVATE KEY":
                return asn1.RSAPrivateKey.decode(data, "der");
              case "DSA PRIVATE KEY":
                return {
                  type: "dsa",
                  params: asn1.DSAPrivateKey.decode(data, "der")
                };
              case "EC PRIVATE KEY":
                data = asn1.ECPrivateKey.decode(data, "der");
                return {
                  curve: data.parameters.value,
                  privateKey: data.privateKey
                };
              default:
                throw new Error("unknown key type " + type);
            }
          }
          parseKeys.signature = asn1.signature;
          function decrypt(data, password) {
            var salt = data.algorithm.decrypt.kde.kdeparams.salt;
            var iters = parseInt(
              data.algorithm.decrypt.kde.kdeparams.iters.toString(),
              10
            );
            var algo = aesid[data.algorithm.decrypt.cipher.algo.join(".")];
            var iv = data.algorithm.decrypt.cipher.iv;
            var cipherText = data.subjectPrivateKey;
            var keylen = parseInt(algo.split("-")[1], 10) / 8;
            var key = compat.pbkdf2Sync(password, salt, iters, keylen);
            var cipher = ciphers.createDecipheriv(algo, key, iv);
            var out = [];
            out.push(cipher.update(cipherText));
            out.push(cipher.final());
            return Buffer.concat(out);
          }

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(0).Buffer));

        /***/
      },
      /* 42 */
      /***/ function(module, exports) {
        var JsonWebTokenError = function(message, error) {
          Error.call(this, message);
          Error.captureStackTrace(this, this.constructor);
          this.name = "JsonWebTokenError";
          this.message = message;
          if (error) this.inner = error;
        };

        JsonWebTokenError.prototype = Object.create(Error.prototype);
        JsonWebTokenError.prototype.constructor = JsonWebTokenError;

        module.exports = JsonWebTokenError;

        /***/
      },
      /* 43 */
      /***/ function(module, exports, __webpack_require__) {
        /**
 * Cipher base API.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
 */
        var forge = __webpack_require__(1);
        __webpack_require__(3);

        module.exports = forge.cipher = forge.cipher || {};

        // registered algorithms
        forge.cipher.algorithms = forge.cipher.algorithms || {};

        /**
 * Creates a cipher object that can be used to encrypt data using the given
 * algorithm and key. The algorithm may be provided as a string value for a
 * previously registered algorithm or it may be given as a cipher algorithm
 * API object.
 *
 * @param algorithm the algorithm to use, either a string or an algorithm API
 *          object.
 * @param key the key to use, as a binary-encoded string of bytes or a
 *          byte buffer.
 *
 * @return the cipher.
 */
        forge.cipher.createCipher = function(algorithm, key) {
          var api = algorithm;
          if (typeof api === "string") {
            api = forge.cipher.getAlgorithm(api);
            if (api) {
              api = api();
            }
          }
          if (!api) {
            throw new Error("Unsupported algorithm: " + algorithm);
          }

          // assume block cipher
          return new forge.cipher.BlockCipher({
            algorithm: api,
            key: key,
            decrypt: false
          });
        };

        /**
 * Creates a decipher object that can be used to decrypt data using the given
 * algorithm and key. The algorithm may be provided as a string value for a
 * previously registered algorithm or it may be given as a cipher algorithm
 * API object.
 *
 * @param algorithm the algorithm to use, either a string or an algorithm API
 *          object.
 * @param key the key to use, as a binary-encoded string of bytes or a
 *          byte buffer.
 *
 * @return the cipher.
 */
        forge.cipher.createDecipher = function(algorithm, key) {
          var api = algorithm;
          if (typeof api === "string") {
            api = forge.cipher.getAlgorithm(api);
            if (api) {
              api = api();
            }
          }
          if (!api) {
            throw new Error("Unsupported algorithm: " + algorithm);
          }

          // assume block cipher
          return new forge.cipher.BlockCipher({
            algorithm: api,
            key: key,
            decrypt: true
          });
        };

        /**
 * Registers an algorithm by name. If the name was already registered, the
 * algorithm API object will be overwritten.
 *
 * @param name the name of the algorithm.
 * @param algorithm the algorithm API object.
 */
        forge.cipher.registerAlgorithm = function(name, algorithm) {
          name = name.toUpperCase();
          forge.cipher.algorithms[name] = algorithm;
        };

        /**
 * Gets a registered algorithm by name.
 *
 * @param name the name of the algorithm.
 *
 * @return the algorithm, if found, null if not.
 */
        forge.cipher.getAlgorithm = function(name) {
          name = name.toUpperCase();
          if (name in forge.cipher.algorithms) {
            return forge.cipher.algorithms[name];
          }
          return null;
        };

        var BlockCipher = (forge.cipher.BlockCipher = function(options) {
          this.algorithm = options.algorithm;
          this.mode = this.algorithm.mode;
          this.blockSize = this.mode.blockSize;
          this._finish = false;
          this._input = null;
          this.output = null;
          this._op = options.decrypt ? this.mode.decrypt : this.mode.encrypt;
          this._decrypt = options.decrypt;
          this.algorithm.initialize(options);
        });

        /**
 * Starts or restarts the encryption or decryption process, whichever
 * was previously configured.
 *
 * For non-GCM mode, the IV may be a binary-encoded string of bytes, an array
 * of bytes, a byte buffer, or an array of 32-bit integers. If the IV is in
 * bytes, then it must be Nb (16) bytes in length. If the IV is given in as
 * 32-bit integers, then it must be 4 integers long.
 *
 * Note: an IV is not required or used in ECB mode.
 *
 * For GCM-mode, the IV must be given as a binary-encoded string of bytes or
 * a byte buffer. The number of bytes should be 12 (96 bits) as recommended
 * by NIST SP-800-38D but another length may be given.
 *
 * @param options the options to use:
 *          iv the initialization vector to use as a binary-encoded string of
 *            bytes, null to reuse the last ciphered block from a previous
 *            update() (this "residue" method is for legacy support only).
 *          additionalData additional authentication data as a binary-encoded
 *            string of bytes, for 'GCM' mode, (default: none).
 *          tagLength desired length of authentication tag, in bits, for
 *            'GCM' mode (0-128, default: 128).
 *          tag the authentication tag to check if decrypting, as a
 *             binary-encoded string of bytes.
 *          output the output the buffer to write to, null to create one.
 */
        BlockCipher.prototype.start = function(options) {
          options = options || {};
          var opts = {};
          for (var key in options) {
            opts[key] = options[key];
          }
          opts.decrypt = this._decrypt;
          this._finish = false;
          this._input = forge.util.createBuffer();
          this.output = options.output || forge.util.createBuffer();
          this.mode.start(opts);
        };

        /**
 * Updates the next block according to the cipher mode.
 *
 * @param input the buffer to read from.
 */
        BlockCipher.prototype.update = function(input) {
          if (input) {
            // input given, so empty it into the input buffer
            this._input.putBuffer(input);
          }

          // do cipher operation until it needs more input and not finished
          while (
            !this._op.call(this.mode, this._input, this.output, this._finish) &&
            !this._finish
          ) {}

          // free consumed memory from input buffer
          this._input.compact();
        };

        /**
 * Finishes encrypting or decrypting.
 *
 * @param pad a padding function to use in CBC mode, null for default,
 *          signature(blockSize, buffer, decrypt).
 *
 * @return true if successful, false on error.
 */
        BlockCipher.prototype.finish = function(pad) {
          // backwards-compatibility w/deprecated padding API
          // Note: will overwrite padding functions even after another start() call
          if (pad && (this.mode.name === "ECB" || this.mode.name === "CBC")) {
            this.mode.pad = function(input) {
              return pad(this.blockSize, input, false);
            };
            this.mode.unpad = function(output) {
              return pad(this.blockSize, output, true);
            };
          }

          // build options for padding and afterFinish functions
          var options = {};
          options.decrypt = this._decrypt;

          // get # of bytes that won't fill a block
          options.overflow = this._input.length() % this.blockSize;

          if (!this._decrypt && this.mode.pad) {
            if (!this.mode.pad(this._input, options)) {
              return false;
            }
          }

          // do final update
          this._finish = true;
          this.update();

          if (this._decrypt && this.mode.unpad) {
            if (!this.mode.unpad(this.output, options)) {
              return false;
            }
          }

          if (this.mode.afterFinish) {
            if (!this.mode.afterFinish(this.output, options)) {
              return false;
            }
          }

          return true;
        };

        /***/
      },
      /* 44 */
      /***/ function(module, exports, __webpack_require__) {
        /**
 * Message Digest Algorithm 5 with 128-bit digest (MD5) implementation.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
 */
        var forge = __webpack_require__(1);
        __webpack_require__(12);
        __webpack_require__(3);

        var md5 = (module.exports = forge.md5 = forge.md5 || {});
        forge.md.md5 = forge.md.algorithms.md5 = md5;

        /**
 * Creates an MD5 message digest object.
 *
 * @return a message digest object.
 */
        md5.create = function() {
          // do initialization as necessary
          if (!_initialized) {
            _init();
          }

          // MD5 state contains four 32-bit integers
          var _state = null;

          // input buffer
          var _input = forge.util.createBuffer();

          // used for word storage
          var _w = new Array(16);

          // message digest object
          var md = {
            algorithm: "md5",
            blockLength: 64,
            digestLength: 16,
            // 56-bit length of message so far (does not including padding)
            messageLength: 0,
            // true message length
            fullMessageLength: null,
            // size of message length in bytes
            messageLengthSize: 8
          };

          /**
   * Starts the digest.
   *
   * @return this digest object.
   */
          md.start = function() {
            // up to 56-bit message length for convenience
            md.messageLength = 0;

            // full message length (set md.messageLength64 for backwards-compatibility)
            md.fullMessageLength = md.messageLength64 = [];
            var int32s = md.messageLengthSize / 4;
            for (var i = 0; i < int32s; ++i) {
              md.fullMessageLength.push(0);
            }
            _input = forge.util.createBuffer();
            _state = {
              h0: 0x67452301,
              h1: 0xefcdab89,
              h2: 0x98badcfe,
              h3: 0x10325476
            };
            return md;
          };
          // start digest automatically for first time
          md.start();

          /**
   * Updates the digest with the given message input. The given input can
   * treated as raw input (no encoding will be applied) or an encoding of
   * 'utf8' maybe given to encode the input using UTF-8.
   *
   * @param msg the message input to update with.
   * @param encoding the encoding to use (default: 'raw', other: 'utf8').
   *
   * @return this digest object.
   */
          md.update = function(msg, encoding) {
            if (encoding === "utf8") {
              msg = forge.util.encodeUtf8(msg);
            }

            // update message length
            var len = msg.length;
            md.messageLength += len;
            len = [(len / 0x100000000) >>> 0, len >>> 0];
            for (var i = md.fullMessageLength.length - 1; i >= 0; --i) {
              md.fullMessageLength[i] += len[1];
              len[1] = len[0] + ((md.fullMessageLength[i] / 0x100000000) >>> 0);
              md.fullMessageLength[i] = md.fullMessageLength[i] >>> 0;
              len[0] = (len[1] / 0x100000000) >>> 0;
            }

            // add bytes to input buffer
            _input.putBytes(msg);

            // process bytes
            _update(_state, _w, _input);

            // compact input buffer every 2K or if empty
            if (_input.read > 2048 || _input.length() === 0) {
              _input.compact();
            }

            return md;
          };

          /**
   * Produces the digest.
   *
   * @return a byte buffer containing the digest value.
   */
          md.digest = function() {
            /* Note: Here we copy the remaining bytes in the input buffer and
    add the appropriate MD5 padding. Then we do the final update
    on a copy of the state so that if the user wants to get
    intermediate digests they can do so. */

            /* Determine the number of bytes that must be added to the message
    to ensure its length is congruent to 448 mod 512. In other words,
    the data to be digested must be a multiple of 512 bits (or 128 bytes).
    This data includes the message, some padding, and the length of the
    message. Since the length of the message will be encoded as 8 bytes (64
    bits), that means that the last segment of the data must have 56 bytes
    (448 bits) of message and padding. Therefore, the length of the message
    plus the padding must be congruent to 448 mod 512 because
    512 - 128 = 448.

    In order to fill up the message length it must be filled with
    padding that begins with 1 bit followed by all 0 bits. Padding
    must *always* be present, so if the message length is already
    congruent to 448 mod 512, then 512 padding bits must be added. */

            var finalBlock = forge.util.createBuffer();
            finalBlock.putBytes(_input.bytes());

            // compute remaining size to be digested (include message length size)
            var remaining =
              md.fullMessageLength[md.fullMessageLength.length - 1] +
              md.messageLengthSize;

            // add padding for overflow blockSize - overflow
            // _padding starts with 1 byte with first bit is set (byte value 128), then
            // there may be up to (blockSize - 1) other pad bytes
            var overflow = remaining & (md.blockLength - 1);
            finalBlock.putBytes(_padding.substr(0, md.blockLength - overflow));

            // serialize message length in bits in little-endian order; since length
            // is stored in bytes we multiply by 8 and add carry
            var bits,
              carry = 0;
            for (var i = md.fullMessageLength.length - 1; i >= 0; --i) {
              bits = md.fullMessageLength[i] * 8 + carry;
              carry = (bits / 0x100000000) >>> 0;
              finalBlock.putInt32Le(bits >>> 0);
            }

            var s2 = {
              h0: _state.h0,
              h1: _state.h1,
              h2: _state.h2,
              h3: _state.h3
            };
            _update(s2, _w, finalBlock);
            var rval = forge.util.createBuffer();
            rval.putInt32Le(s2.h0);
            rval.putInt32Le(s2.h1);
            rval.putInt32Le(s2.h2);
            rval.putInt32Le(s2.h3);
            return rval;
          };

          return md;
        };

        // padding, constant tables for calculating md5
        var _padding = null;
        var _g = null;
        var _r = null;
        var _k = null;
        var _initialized = false;

        /**
 * Initializes the constant tables.
 */
        function _init() {
          // create padding
          _padding = String.fromCharCode(128);
          _padding += forge.util.fillString(String.fromCharCode(0x00), 64);

          // g values
          _g = [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            1,
            6,
            11,
            0,
            5,
            10,
            15,
            4,
            9,
            14,
            3,
            8,
            13,
            2,
            7,
            12,
            5,
            8,
            11,
            14,
            1,
            4,
            7,
            10,
            13,
            0,
            3,
            6,
            9,
            12,
            15,
            2,
            0,
            7,
            14,
            5,
            12,
            3,
            10,
            1,
            8,
            15,
            6,
            13,
            4,
            11,
            2,
            9
          ];

          // rounds table
          _r = [
            7,
            12,
            17,
            22,
            7,
            12,
            17,
            22,
            7,
            12,
            17,
            22,
            7,
            12,
            17,
            22,
            5,
            9,
            14,
            20,
            5,
            9,
            14,
            20,
            5,
            9,
            14,
            20,
            5,
            9,
            14,
            20,
            4,
            11,
            16,
            23,
            4,
            11,
            16,
            23,
            4,
            11,
            16,
            23,
            4,
            11,
            16,
            23,
            6,
            10,
            15,
            21,
            6,
            10,
            15,
            21,
            6,
            10,
            15,
            21,
            6,
            10,
            15,
            21
          ];

          // get the result of abs(sin(i + 1)) as a 32-bit integer
          _k = new Array(64);
          for (var i = 0; i < 64; ++i) {
            _k[i] = Math.floor(Math.abs(Math.sin(i + 1)) * 0x100000000);
          }

          // now initialized
          _initialized = true;
        }

        /**
 * Updates an MD5 state with the given byte buffer.
 *
 * @param s the MD5 state to update.
 * @param w the array to use to store words.
 * @param bytes the byte buffer to update with.
 */
        function _update(s, w, bytes) {
          // consume 512 bit (64 byte) chunks
          var t, a, b, c, d, f, r, i;
          var len = bytes.length();
          while (len >= 64) {
            // initialize hash value for this chunk
            a = s.h0;
            b = s.h1;
            c = s.h2;
            d = s.h3;

            // round 1
            for (i = 0; i < 16; ++i) {
              w[i] = bytes.getInt32Le();
              f = d ^ (b & (c ^ d));
              t = a + f + _k[i] + w[i];
              r = _r[i];
              a = d;
              d = c;
              c = b;
              b += (t << r) | (t >>> (32 - r));
            }
            // round 2
            for (; i < 32; ++i) {
              f = c ^ (d & (b ^ c));
              t = a + f + _k[i] + w[_g[i]];
              r = _r[i];
              a = d;
              d = c;
              c = b;
              b += (t << r) | (t >>> (32 - r));
            }
            // round 3
            for (; i < 48; ++i) {
              f = b ^ c ^ d;
              t = a + f + _k[i] + w[_g[i]];
              r = _r[i];
              a = d;
              d = c;
              c = b;
              b += (t << r) | (t >>> (32 - r));
            }
            // round 4
            for (; i < 64; ++i) {
              f = c ^ (b | ~d);
              t = a + f + _k[i] + w[_g[i]];
              r = _r[i];
              a = d;
              d = c;
              c = b;
              b += (t << r) | (t >>> (32 - r));
            }

            // update hash state
            s.h0 = (s.h0 + a) | 0;
            s.h1 = (s.h1 + b) | 0;
            s.h2 = (s.h2 + c) | 0;
            s.h3 = (s.h3 + d) | 0;

            len -= 64;
          }
        }

        /***/
      },
      /* 45 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(Buffer) {
          /**
 * Password-Based Key-Derivation Function #2 implementation.
 *
 * See RFC 2898 for details.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2013 Digital Bazaar, Inc.
 */
          var forge = __webpack_require__(1);
          __webpack_require__(21);
          __webpack_require__(12);
          __webpack_require__(3);

          var pkcs5 = (forge.pkcs5 = forge.pkcs5 || {});

          var crypto;
          if (forge.util.isNodejs && !forge.options.usePureJavaScript) {
            crypto = __webpack_require__(69);
          }

          /**
 * Derives a key from a password.
 *
 * @param p the password as a binary-encoded string of bytes.
 * @param s the salt as a binary-encoded string of bytes.
 * @param c the iteration count, a positive integer.
 * @param dkLen the intended length, in bytes, of the derived key,
 *          (max: 2^32 - 1) * hash length of the PRF.
 * @param [md] the message digest (or algorithm identifier as a string) to use
 *          in the PRF, defaults to SHA-1.
 * @param [callback(err, key)] presence triggers asynchronous version, called
 *          once the operation completes.
 *
 * @return the derived key, as a binary-encoded string of bytes, for the
 *           synchronous version (if no callback is specified).
 */
          module.exports = forge.pbkdf2 = pkcs5.pbkdf2 = function(
            p,
            s,
            c,
            dkLen,
            md,
            callback
          ) {
            if (typeof md === "function") {
              callback = md;
              md = null;
            }

            // use native implementation if possible and not disabled, note that
            // some node versions only support SHA-1, others allow digest to be changed
            if (
              forge.util.isNodejs &&
              !forge.options.usePureJavaScript &&
              crypto.pbkdf2 &&
              (md === null || typeof md !== "object") &&
              (crypto.pbkdf2Sync.length > 4 || (!md || md === "sha1"))
            ) {
              if (typeof md !== "string") {
                // default prf to SHA-1
                md = "sha1";
              }
              p = new Buffer(p, "binary");
              s = new Buffer(s, "binary");
              if (!callback) {
                if (crypto.pbkdf2Sync.length === 4) {
                  return crypto.pbkdf2Sync(p, s, c, dkLen).toString("binary");
                }
                return crypto.pbkdf2Sync(p, s, c, dkLen, md).toString("binary");
              }
              if (crypto.pbkdf2Sync.length === 4) {
                return crypto.pbkdf2(p, s, c, dkLen, function(err, key) {
                  if (err) {
                    return callback(err);
                  }
                  callback(null, key.toString("binary"));
                });
              }
              return crypto.pbkdf2(p, s, c, dkLen, md, function(err, key) {
                if (err) {
                  return callback(err);
                }
                callback(null, key.toString("binary"));
              });
            }

            if (typeof md === "undefined" || md === null) {
              // default prf to SHA-1
              md = "sha1";
            }
            if (typeof md === "string") {
              if (!(md in forge.md.algorithms)) {
                throw new Error("Unknown hash algorithm: " + md);
              }
              md = forge.md[md].create();
            }

            var hLen = md.digestLength;

            /* 1. If dkLen > (2^32 - 1) * hLen, output "derived key too long" and
    stop. */
            if (dkLen > 0xffffffff * hLen) {
              var err = new Error("Derived key is too long.");
              if (callback) {
                return callback(err);
              }
              throw err;
            }

            /* 2. Let len be the number of hLen-octet blocks in the derived key,
    rounding up, and let r be the number of octets in the last
    block:

    len = CEIL(dkLen / hLen),
    r = dkLen - (len - 1) * hLen. */
            var len = Math.ceil(dkLen / hLen);
            var r = dkLen - (len - 1) * hLen;

            /* 3. For each block of the derived key apply the function F defined
    below to the password P, the salt S, the iteration count c, and
    the block index to compute the block:

    T_1 = F(P, S, c, 1),
    T_2 = F(P, S, c, 2),
    ...
    T_len = F(P, S, c, len),

    where the function F is defined as the exclusive-or sum of the
    first c iterates of the underlying pseudorandom function PRF
    applied to the password P and the concatenation of the salt S
    and the block index i:

    F(P, S, c, i) = u_1 XOR u_2 XOR ... XOR u_c

    where

    u_1 = PRF(P, S || INT(i)),
    u_2 = PRF(P, u_1),
    ...
    u_c = PRF(P, u_{c-1}).

    Here, INT(i) is a four-octet encoding of the integer i, most
    significant octet first. */
            var prf = forge.hmac.create();
            prf.start(md, p);
            var dk = "";
            var xor, u_c, u_c1;

            // sync version
            if (!callback) {
              for (var i = 1; i <= len; ++i) {
                // PRF(P, S || INT(i)) (first iteration)
                prf.start(null, null);
                prf.update(s);
                prf.update(forge.util.int32ToBytes(i));
                xor = u_c1 = prf.digest().getBytes();

                // PRF(P, u_{c-1}) (other iterations)
                for (var j = 2; j <= c; ++j) {
                  prf.start(null, null);
                  prf.update(u_c1);
                  u_c = prf.digest().getBytes();
                  // F(p, s, c, i)
                  xor = forge.util.xorBytes(xor, u_c, hLen);
                  u_c1 = u_c;
                }

                /* 4. Concatenate the blocks and extract the first dkLen octets to
        produce a derived key DK:

        DK = T_1 || T_2 ||  ...  || T_len<0..r-1> */
                dk += i < len ? xor : xor.substr(0, r);
              }
              /* 5. Output the derived key DK. */
              return dk;
            }

            // async version
            var i = 1,
              j;
            function outer() {
              if (i > len) {
                // done
                return callback(null, dk);
              }

              // PRF(P, S || INT(i)) (first iteration)
              prf.start(null, null);
              prf.update(s);
              prf.update(forge.util.int32ToBytes(i));
              xor = u_c1 = prf.digest().getBytes();

              // PRF(P, u_{c-1}) (other iterations)
              j = 2;
              inner();
            }

            function inner() {
              if (j <= c) {
                prf.start(null, null);
                prf.update(u_c1);
                u_c = prf.digest().getBytes();
                // F(p, s, c, i)
                xor = forge.util.xorBytes(xor, u_c, hLen);
                u_c1 = u_c;
                ++j;
                return forge.util.setImmediate(inner);
              }

              /* 4. Concatenate the blocks and extract the first dkLen octets to
      produce a derived key DK:

      DK = T_1 || T_2 ||  ...  || T_len<0..r-1> */
              dk += i < len ? xor : xor.substr(0, r);

              ++i;
              outer();
            }

            outer();
          };

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(0).Buffer));

        /***/
      },
      /* 46 */
      /***/ function(module, exports, __webpack_require__) {
        // Copyright (c) 2005  Tom Wu
        // All Rights Reserved.
        // See "LICENSE" for details.

        // Basic JavaScript BN library - subset useful for RSA encryption.

        /*
Licensing (LICENSE)
-------------------

This software is covered under the following copyright:
*/
        /*
 * Copyright (c) 2003-2005  Tom Wu
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY
 * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
 *
 * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
 * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
 * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
 * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
 * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * In addition, the following condition applies:
 *
 * All redistributions must retain an intact copy of this copyright notice
 * and disclaimer.
 */
        /*
Address all questions regarding this license to:

  Tom Wu
  tjw@cs.Stanford.EDU
*/
        var forge = __webpack_require__(1);

        module.exports = forge.jsbn = forge.jsbn || {};

        // Bits per digit
        var dbits;

        // JavaScript engine analysis
        var canary = 0xdeadbeefcafe;
        var j_lm = (canary & 0xffffff) == 0xefcafe;

        // (public) Constructor
        function BigInteger(a, b, c) {
          this.data = [];
          if (a != null)
            if ("number" == typeof a) this.fromNumber(a, b, c);
            else if (b == null && "string" != typeof a) this.fromString(a, 256);
            else this.fromString(a, b);
        }
        forge.jsbn.BigInteger = BigInteger;

        // return new, unset BigInteger
        function nbi() {
          return new BigInteger(null);
        }

        // am: Compute w_j += (x*this_i), propagate carries,
        // c is initial carry, returns final carry.
        // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
        // We need to select the fastest one that works in this environment.

        // am1: use a single mult and divide to get the high bits,
        // max digit bits should be 26 because
        // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
        function am1(i, x, w, j, c, n) {
          while (--n >= 0) {
            var v = x * this.data[i++] + w.data[j] + c;
            c = Math.floor(v / 0x4000000);
            w.data[j++] = v & 0x3ffffff;
          }
          return c;
        }
        // am2 avoids a big mult-and-extract completely.
        // Max digit bits should be <= 30 because we do bitwise ops
        // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
        function am2(i, x, w, j, c, n) {
          var xl = x & 0x7fff,
            xh = x >> 15;
          while (--n >= 0) {
            var l = this.data[i] & 0x7fff;
            var h = this.data[i++] >> 15;
            var m = xh * l + h * xl;
            l = xl * l + ((m & 0x7fff) << 15) + w.data[j] + (c & 0x3fffffff);
            c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);
            w.data[j++] = l & 0x3fffffff;
          }
          return c;
        }
        // Alternately, set max digit bits to 28 since some
        // browsers slow down when dealing with 32-bit numbers.
        function am3(i, x, w, j, c, n) {
          var xl = x & 0x3fff,
            xh = x >> 14;
          while (--n >= 0) {
            var l = this.data[i] & 0x3fff;
            var h = this.data[i++] >> 14;
            var m = xh * l + h * xl;
            l = xl * l + ((m & 0x3fff) << 14) + w.data[j] + c;
            c = (l >> 28) + (m >> 14) + xh * h;
            w.data[j++] = l & 0xfffffff;
          }
          return c;
        }

        // node.js (no browser)
        if (typeof navigator === "undefined") {
          BigInteger.prototype.am = am3;
          dbits = 28;
        } else if (j_lm && navigator.appName == "Microsoft Internet Explorer") {
          BigInteger.prototype.am = am2;
          dbits = 30;
        } else if (j_lm && navigator.appName != "Netscape") {
          BigInteger.prototype.am = am1;
          dbits = 26;
        } else {
          // Mozilla/Netscape seems to prefer am3
          BigInteger.prototype.am = am3;
          dbits = 28;
        }

        BigInteger.prototype.DB = dbits;
        BigInteger.prototype.DM = (1 << dbits) - 1;
        BigInteger.prototype.DV = 1 << dbits;

        var BI_FP = 52;
        BigInteger.prototype.FV = Math.pow(2, BI_FP);
        BigInteger.prototype.F1 = BI_FP - dbits;
        BigInteger.prototype.F2 = 2 * dbits - BI_FP;

        // Digit conversions
        var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
        var BI_RC = new Array();
        var rr, vv;
        rr = "0".charCodeAt(0);
        for (vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
        rr = "a".charCodeAt(0);
        for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
        rr = "A".charCodeAt(0);
        for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

        function int2char(n) {
          return BI_RM.charAt(n);
        }
        function intAt(s, i) {
          var c = BI_RC[s.charCodeAt(i)];
          return c == null ? -1 : c;
        }

        // (protected) copy this to r
        function bnpCopyTo(r) {
          for (var i = this.t - 1; i >= 0; --i) r.data[i] = this.data[i];
          r.t = this.t;
          r.s = this.s;
        }

        // (protected) set from integer value x, -DV <= x < DV
        function bnpFromInt(x) {
          this.t = 1;
          this.s = x < 0 ? -1 : 0;
          if (x > 0) this.data[0] = x;
          else if (x < -1) this.data[0] = x + this.DV;
          else this.t = 0;
        }

        // return bigint initialized to value
        function nbv(i) {
          var r = nbi();
          r.fromInt(i);
          return r;
        }

        // (protected) set from string and radix
        function bnpFromString(s, b) {
          var k;
          if (b == 16) k = 4;
          else if (b == 8) k = 3;
          else if (b == 256) k = 8;
          else if (b == 2)
            // byte array
            k = 1;
          else if (b == 32) k = 5;
          else if (b == 4) k = 2;
          else {
            this.fromRadix(s, b);
            return;
          }
          this.t = 0;
          this.s = 0;
          var i = s.length,
            mi = false,
            sh = 0;
          while (--i >= 0) {
            var x = k == 8 ? s[i] & 0xff : intAt(s, i);
            if (x < 0) {
              if (s.charAt(i) == "-") mi = true;
              continue;
            }
            mi = false;
            if (sh == 0) this.data[this.t++] = x;
            else if (sh + k > this.DB) {
              this.data[this.t - 1] |= (x & ((1 << (this.DB - sh)) - 1)) << sh;
              this.data[this.t++] = x >> (this.DB - sh);
            } else this.data[this.t - 1] |= x << sh;
            sh += k;
            if (sh >= this.DB) sh -= this.DB;
          }
          if (k == 8 && (s[0] & 0x80) != 0) {
            this.s = -1;
            if (sh > 0)
              this.data[this.t - 1] |= ((1 << (this.DB - sh)) - 1) << sh;
          }
          this.clamp();
          if (mi) BigInteger.ZERO.subTo(this, this);
        }

        // (protected) clamp off excess high words
        function bnpClamp() {
          var c = this.s & this.DM;
          while (this.t > 0 && this.data[this.t - 1] == c) --this.t;
        }

        // (public) return string representation in given radix
        function bnToString(b) {
          if (this.s < 0) return "-" + this.negate().toString(b);
          var k;
          if (b == 16) k = 4;
          else if (b == 8) k = 3;
          else if (b == 2) k = 1;
          else if (b == 32) k = 5;
          else if (b == 4) k = 2;
          else return this.toRadix(b);
          var km = (1 << k) - 1,
            d,
            m = false,
            r = "",
            i = this.t;
          var p = this.DB - i * this.DB % k;
          if (i-- > 0) {
            if (p < this.DB && (d = this.data[i] >> p) > 0) {
              m = true;
              r = int2char(d);
            }
            while (i >= 0) {
              if (p < k) {
                d = (this.data[i] & ((1 << p) - 1)) << (k - p);
                d |= this.data[--i] >> (p += this.DB - k);
              } else {
                d = (this.data[i] >> (p -= k)) & km;
                if (p <= 0) {
                  p += this.DB;
                  --i;
                }
              }
              if (d > 0) m = true;
              if (m) r += int2char(d);
            }
          }
          return m ? r : "0";
        }

        // (public) -this
        function bnNegate() {
          var r = nbi();
          BigInteger.ZERO.subTo(this, r);
          return r;
        }

        // (public) |this|
        function bnAbs() {
          return this.s < 0 ? this.negate() : this;
        }

        // (public) return + if this > a, - if this < a, 0 if equal
        function bnCompareTo(a) {
          var r = this.s - a.s;
          if (r != 0) return r;
          var i = this.t;
          r = i - a.t;
          if (r != 0) return this.s < 0 ? -r : r;
          while (--i >= 0) if ((r = this.data[i] - a.data[i]) != 0) return r;
          return 0;
        }

        // returns bit length of the integer x
        function nbits(x) {
          var r = 1,
            t;
          if ((t = x >>> 16) != 0) {
            x = t;
            r += 16;
          }
          if ((t = x >> 8) != 0) {
            x = t;
            r += 8;
          }
          if ((t = x >> 4) != 0) {
            x = t;
            r += 4;
          }
          if ((t = x >> 2) != 0) {
            x = t;
            r += 2;
          }
          if ((t = x >> 1) != 0) {
            x = t;
            r += 1;
          }
          return r;
        }

        // (public) return the number of bits in "this"
        function bnBitLength() {
          if (this.t <= 0) return 0;
          return (
            this.DB * (this.t - 1) +
            nbits(this.data[this.t - 1] ^ (this.s & this.DM))
          );
        }

        // (protected) r = this << n*DB
        function bnpDLShiftTo(n, r) {
          var i;
          for (i = this.t - 1; i >= 0; --i) r.data[i + n] = this.data[i];
          for (i = n - 1; i >= 0; --i) r.data[i] = 0;
          r.t = this.t + n;
          r.s = this.s;
        }

        // (protected) r = this >> n*DB
        function bnpDRShiftTo(n, r) {
          for (var i = n; i < this.t; ++i) r.data[i - n] = this.data[i];
          r.t = Math.max(this.t - n, 0);
          r.s = this.s;
        }

        // (protected) r = this << n
        function bnpLShiftTo(n, r) {
          var bs = n % this.DB;
          var cbs = this.DB - bs;
          var bm = (1 << cbs) - 1;
          var ds = Math.floor(n / this.DB),
            c = (this.s << bs) & this.DM,
            i;
          for (i = this.t - 1; i >= 0; --i) {
            r.data[i + ds + 1] = (this.data[i] >> cbs) | c;
            c = (this.data[i] & bm) << bs;
          }
          for (i = ds - 1; i >= 0; --i) r.data[i] = 0;
          r.data[ds] = c;
          r.t = this.t + ds + 1;
          r.s = this.s;
          r.clamp();
        }

        // (protected) r = this >> n
        function bnpRShiftTo(n, r) {
          r.s = this.s;
          var ds = Math.floor(n / this.DB);
          if (ds >= this.t) {
            r.t = 0;
            return;
          }
          var bs = n % this.DB;
          var cbs = this.DB - bs;
          var bm = (1 << bs) - 1;
          r.data[0] = this.data[ds] >> bs;
          for (var i = ds + 1; i < this.t; ++i) {
            r.data[i - ds - 1] |= (this.data[i] & bm) << cbs;
            r.data[i - ds] = this.data[i] >> bs;
          }
          if (bs > 0) r.data[this.t - ds - 1] |= (this.s & bm) << cbs;
          r.t = this.t - ds;
          r.clamp();
        }

        // (protected) r = this - a
        function bnpSubTo(a, r) {
          var i = 0,
            c = 0,
            m = Math.min(a.t, this.t);
          while (i < m) {
            c += this.data[i] - a.data[i];
            r.data[i++] = c & this.DM;
            c >>= this.DB;
          }
          if (a.t < this.t) {
            c -= a.s;
            while (i < this.t) {
              c += this.data[i];
              r.data[i++] = c & this.DM;
              c >>= this.DB;
            }
            c += this.s;
          } else {
            c += this.s;
            while (i < a.t) {
              c -= a.data[i];
              r.data[i++] = c & this.DM;
              c >>= this.DB;
            }
            c -= a.s;
          }
          r.s = c < 0 ? -1 : 0;
          if (c < -1) r.data[i++] = this.DV + c;
          else if (c > 0) r.data[i++] = c;
          r.t = i;
          r.clamp();
        }

        // (protected) r = this * a, r != this,a (HAC 14.12)
        // "this" should be the larger one if appropriate.
        function bnpMultiplyTo(a, r) {
          var x = this.abs(),
            y = a.abs();
          var i = x.t;
          r.t = i + y.t;
          while (--i >= 0) r.data[i] = 0;
          for (i = 0; i < y.t; ++i)
            r.data[i + x.t] = x.am(0, y.data[i], r, i, 0, x.t);
          r.s = 0;
          r.clamp();
          if (this.s != a.s) BigInteger.ZERO.subTo(r, r);
        }

        // (protected) r = this^2, r != this (HAC 14.16)
        function bnpSquareTo(r) {
          var x = this.abs();
          var i = (r.t = 2 * x.t);
          while (--i >= 0) r.data[i] = 0;
          for (i = 0; i < x.t - 1; ++i) {
            var c = x.am(i, x.data[i], r, 2 * i, 0, 1);
            if (
              (r.data[i + x.t] += x.am(
                i + 1,
                2 * x.data[i],
                r,
                2 * i + 1,
                c,
                x.t - i - 1
              )) >= x.DV
            ) {
              r.data[i + x.t] -= x.DV;
              r.data[i + x.t + 1] = 1;
            }
          }
          if (r.t > 0) r.data[r.t - 1] += x.am(i, x.data[i], r, 2 * i, 0, 1);
          r.s = 0;
          r.clamp();
        }

        // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
        // r != q, this != m.  q or r may be null.
        function bnpDivRemTo(m, q, r) {
          var pm = m.abs();
          if (pm.t <= 0) return;
          var pt = this.abs();
          if (pt.t < pm.t) {
            if (q != null) q.fromInt(0);
            if (r != null) this.copyTo(r);
            return;
          }
          if (r == null) r = nbi();
          var y = nbi(),
            ts = this.s,
            ms = m.s;
          var nsh = this.DB - nbits(pm.data[pm.t - 1]); // normalize modulus
          if (nsh > 0) {
            pm.lShiftTo(nsh, y);
            pt.lShiftTo(nsh, r);
          } else {
            pm.copyTo(y);
            pt.copyTo(r);
          }
          var ys = y.t;
          var y0 = y.data[ys - 1];
          if (y0 == 0) return;
          var yt =
            y0 * (1 << this.F1) + (ys > 1 ? y.data[ys - 2] >> this.F2 : 0);
          var d1 = this.FV / yt,
            d2 = (1 << this.F1) / yt,
            e = 1 << this.F2;
          var i = r.t,
            j = i - ys,
            t = q == null ? nbi() : q;
          y.dlShiftTo(j, t);
          if (r.compareTo(t) >= 0) {
            r.data[r.t++] = 1;
            r.subTo(t, r);
          }
          BigInteger.ONE.dlShiftTo(ys, t);
          t.subTo(y, y); // "negative" y so we can replace sub with am later
          while (y.t < ys) y.data[y.t++] = 0;
          while (--j >= 0) {
            // Estimate quotient digit
            var qd =
              r.data[--i] == y0
                ? this.DM
                : Math.floor(r.data[i] * d1 + (r.data[i - 1] + e) * d2);
            if ((r.data[i] += y.am(0, qd, r, j, 0, ys)) < qd) {
              // Try it out
              y.dlShiftTo(j, t);
              r.subTo(t, r);
              while (r.data[i] < --qd) r.subTo(t, r);
            }
          }
          if (q != null) {
            r.drShiftTo(ys, q);
            if (ts != ms) BigInteger.ZERO.subTo(q, q);
          }
          r.t = ys;
          r.clamp();
          if (nsh > 0) r.rShiftTo(nsh, r); // Denormalize remainder
          if (ts < 0) BigInteger.ZERO.subTo(r, r);
        }

        // (public) this mod a
        function bnMod(a) {
          var r = nbi();
          this.abs().divRemTo(a, null, r);
          if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r);
          return r;
        }

        // Modular reduction using "classic" algorithm
        function Classic(m) {
          this.m = m;
        }
        function cConvert(x) {
          if (x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
          else return x;
        }
        function cRevert(x) {
          return x;
        }
        function cReduce(x) {
          x.divRemTo(this.m, null, x);
        }
        function cMulTo(x, y, r) {
          x.multiplyTo(y, r);
          this.reduce(r);
        }
        function cSqrTo(x, r) {
          x.squareTo(r);
          this.reduce(r);
        }

        Classic.prototype.convert = cConvert;
        Classic.prototype.revert = cRevert;
        Classic.prototype.reduce = cReduce;
        Classic.prototype.mulTo = cMulTo;
        Classic.prototype.sqrTo = cSqrTo;

        // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
        // justification:
        //         xy == 1 (mod m)
        //         xy =  1+km
        //   xy(2-xy) = (1+km)(1-km)
        // x[y(2-xy)] = 1-k^2m^2
        // x[y(2-xy)] == 1 (mod m^2)
        // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
        // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
        // JS multiply "overflows" differently from C/C++, so care is needed here.
        function bnpInvDigit() {
          if (this.t < 1) return 0;
          var x = this.data[0];
          if ((x & 1) == 0) return 0;
          var y = x & 3; // y == 1/x mod 2^2
          y = (y * (2 - (x & 0xf) * y)) & 0xf; // y == 1/x mod 2^4
          y = (y * (2 - (x & 0xff) * y)) & 0xff; // y == 1/x mod 2^8
          y = (y * (2 - (((x & 0xffff) * y) & 0xffff))) & 0xffff; // y == 1/x mod 2^16
          // last step - calculate inverse mod DV directly;
          // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
          y = y * (2 - x * y % this.DV) % this.DV; // y == 1/x mod 2^dbits
          // we really want the negative inverse, and -DV < y < DV
          return y > 0 ? this.DV - y : -y;
        }

        // Montgomery reduction
        function Montgomery(m) {
          this.m = m;
          this.mp = m.invDigit();
          this.mpl = this.mp & 0x7fff;
          this.mph = this.mp >> 15;
          this.um = (1 << (m.DB - 15)) - 1;
          this.mt2 = 2 * m.t;
        }

        // xR mod m
        function montConvert(x) {
          var r = nbi();
          x.abs().dlShiftTo(this.m.t, r);
          r.divRemTo(this.m, null, r);
          if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r);
          return r;
        }

        // x/R mod m
        function montRevert(x) {
          var r = nbi();
          x.copyTo(r);
          this.reduce(r);
          return r;
        }

        // x = x/R mod m (HAC 14.32)
        function montReduce(x) {
          while (
            x.t <= this.mt2 // pad x so am has enough room later
          )
            x.data[x.t++] = 0;
          for (var i = 0; i < this.m.t; ++i) {
            // faster way of calculating u0 = x.data[i]*mp mod DV
            var j = x.data[i] & 0x7fff;
            var u0 =
              (j * this.mpl +
                (((j * this.mph + (x.data[i] >> 15) * this.mpl) & this.um) <<
                  15)) &
              x.DM;
            // use am to combine the multiply-shift-add into one call
            j = i + this.m.t;
            x.data[j] += this.m.am(0, u0, x, i, 0, this.m.t);
            // propagate carry
            while (x.data[j] >= x.DV) {
              x.data[j] -= x.DV;
              x.data[++j]++;
            }
          }
          x.clamp();
          x.drShiftTo(this.m.t, x);
          if (x.compareTo(this.m) >= 0) x.subTo(this.m, x);
        }

        // r = "x^2/R mod m"; x != r
        function montSqrTo(x, r) {
          x.squareTo(r);
          this.reduce(r);
        }

        // r = "xy/R mod m"; x,y != r
        function montMulTo(x, y, r) {
          x.multiplyTo(y, r);
          this.reduce(r);
        }

        Montgomery.prototype.convert = montConvert;
        Montgomery.prototype.revert = montRevert;
        Montgomery.prototype.reduce = montReduce;
        Montgomery.prototype.mulTo = montMulTo;
        Montgomery.prototype.sqrTo = montSqrTo;

        // (protected) true iff this is even
        function bnpIsEven() {
          return (this.t > 0 ? this.data[0] & 1 : this.s) == 0;
        }

        // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
        function bnpExp(e, z) {
          if (e > 0xffffffff || e < 1) return BigInteger.ONE;
          var r = nbi(),
            r2 = nbi(),
            g = z.convert(this),
            i = nbits(e) - 1;
          g.copyTo(r);
          while (--i >= 0) {
            z.sqrTo(r, r2);
            if ((e & (1 << i)) > 0) z.mulTo(r2, g, r);
            else {
              var t = r;
              r = r2;
              r2 = t;
            }
          }
          return z.revert(r);
        }

        // (public) this^e % m, 0 <= e < 2^32
        function bnModPowInt(e, m) {
          var z;
          if (e < 256 || m.isEven()) z = new Classic(m);
          else z = new Montgomery(m);
          return this.exp(e, z);
        }

        // protected
        BigInteger.prototype.copyTo = bnpCopyTo;
        BigInteger.prototype.fromInt = bnpFromInt;
        BigInteger.prototype.fromString = bnpFromString;
        BigInteger.prototype.clamp = bnpClamp;
        BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
        BigInteger.prototype.drShiftTo = bnpDRShiftTo;
        BigInteger.prototype.lShiftTo = bnpLShiftTo;
        BigInteger.prototype.rShiftTo = bnpRShiftTo;
        BigInteger.prototype.subTo = bnpSubTo;
        BigInteger.prototype.multiplyTo = bnpMultiplyTo;
        BigInteger.prototype.squareTo = bnpSquareTo;
        BigInteger.prototype.divRemTo = bnpDivRemTo;
        BigInteger.prototype.invDigit = bnpInvDigit;
        BigInteger.prototype.isEven = bnpIsEven;
        BigInteger.prototype.exp = bnpExp;

        // public
        BigInteger.prototype.toString = bnToString;
        BigInteger.prototype.negate = bnNegate;
        BigInteger.prototype.abs = bnAbs;
        BigInteger.prototype.compareTo = bnCompareTo;
        BigInteger.prototype.bitLength = bnBitLength;
        BigInteger.prototype.mod = bnMod;
        BigInteger.prototype.modPowInt = bnModPowInt;

        // "constants"
        BigInteger.ZERO = nbv(0);
        BigInteger.ONE = nbv(1);

        // jsbn2 lib

        //Copyright (c) 2005-2009  Tom Wu
        //All Rights Reserved.
        //See "LICENSE" for details (See jsbn.js for LICENSE).

        //Extended JavaScript BN functions, required for RSA private ops.

        //Version 1.1: new BigInteger("0", 10) returns "proper" zero

        //(public)
        function bnClone() {
          var r = nbi();
          this.copyTo(r);
          return r;
        }

        //(public) return value as integer
        function bnIntValue() {
          if (this.s < 0) {
            if (this.t == 1) return this.data[0] - this.DV;
            else if (this.t == 0) return -1;
          } else if (this.t == 1) return this.data[0];
          else if (this.t == 0) return 0;
          // assumes 16 < DB < 32
          return (
            ((this.data[1] & ((1 << (32 - this.DB)) - 1)) << this.DB) |
            this.data[0]
          );
        }

        //(public) return value as byte
        function bnByteValue() {
          return this.t == 0 ? this.s : this.data[0] << 24 >> 24;
        }

        //(public) return value as short (assumes DB>=16)
        function bnShortValue() {
          return this.t == 0 ? this.s : this.data[0] << 16 >> 16;
        }

        //(protected) return x s.t. r^x < DV
        function bnpChunkSize(r) {
          return Math.floor(Math.LN2 * this.DB / Math.log(r));
        }

        //(public) 0 if this == 0, 1 if this > 0
        function bnSigNum() {
          if (this.s < 0) return -1;
          else if (this.t <= 0 || (this.t == 1 && this.data[0] <= 0)) return 0;
          else return 1;
        }

        //(protected) convert to radix string
        function bnpToRadix(b) {
          if (b == null) b = 10;
          if (this.signum() == 0 || b < 2 || b > 36) return "0";
          var cs = this.chunkSize(b);
          var a = Math.pow(b, cs);
          var d = nbv(a),
            y = nbi(),
            z = nbi(),
            r = "";
          this.divRemTo(d, y, z);
          while (y.signum() > 0) {
            r = (a + z.intValue()).toString(b).substr(1) + r;
            y.divRemTo(d, y, z);
          }
          return z.intValue().toString(b) + r;
        }

        //(protected) convert from radix string
        function bnpFromRadix(s, b) {
          this.fromInt(0);
          if (b == null) b = 10;
          var cs = this.chunkSize(b);
          var d = Math.pow(b, cs),
            mi = false,
            j = 0,
            w = 0;
          for (var i = 0; i < s.length; ++i) {
            var x = intAt(s, i);
            if (x < 0) {
              if (s.charAt(i) == "-" && this.signum() == 0) mi = true;
              continue;
            }
            w = b * w + x;
            if (++j >= cs) {
              this.dMultiply(d);
              this.dAddOffset(w, 0);
              j = 0;
              w = 0;
            }
          }
          if (j > 0) {
            this.dMultiply(Math.pow(b, j));
            this.dAddOffset(w, 0);
          }
          if (mi) BigInteger.ZERO.subTo(this, this);
        }

        //(protected) alternate constructor
        function bnpFromNumber(a, b, c) {
          if ("number" == typeof b) {
            // new BigInteger(int,int,RNG)
            if (a < 2) this.fromInt(1);
            else {
              this.fromNumber(a, c);
              if (
                !this.testBit(a - 1) // force MSB set
              )
                this.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, this);
              if (this.isEven()) this.dAddOffset(1, 0); // force odd
              while (!this.isProbablePrime(b)) {
                this.dAddOffset(2, 0);
                if (this.bitLength() > a)
                  this.subTo(BigInteger.ONE.shiftLeft(a - 1), this);
              }
            }
          } else {
            // new BigInteger(int,RNG)
            var x = new Array(),
              t = a & 7;
            x.length = (a >> 3) + 1;
            b.nextBytes(x);
            if (t > 0) x[0] &= (1 << t) - 1;
            else x[0] = 0;
            this.fromString(x, 256);
          }
        }

        //(public) convert to bigendian byte array
        function bnToByteArray() {
          var i = this.t,
            r = new Array();
          r[0] = this.s;
          var p = this.DB - i * this.DB % 8,
            d,
            k = 0;
          if (i-- > 0) {
            if (
              p < this.DB &&
              (d = this.data[i] >> p) != (this.s & this.DM) >> p
            )
              r[k++] = d | (this.s << (this.DB - p));
            while (i >= 0) {
              if (p < 8) {
                d = (this.data[i] & ((1 << p) - 1)) << (8 - p);
                d |= this.data[--i] >> (p += this.DB - 8);
              } else {
                d = (this.data[i] >> (p -= 8)) & 0xff;
                if (p <= 0) {
                  p += this.DB;
                  --i;
                }
              }
              if ((d & 0x80) != 0) d |= -256;
              if (k == 0 && (this.s & 0x80) != (d & 0x80)) ++k;
              if (k > 0 || d != this.s) r[k++] = d;
            }
          }
          return r;
        }

        function bnEquals(a) {
          return this.compareTo(a) == 0;
        }
        function bnMin(a) {
          return this.compareTo(a) < 0 ? this : a;
        }
        function bnMax(a) {
          return this.compareTo(a) > 0 ? this : a;
        }

        //(protected) r = this op a (bitwise)
        function bnpBitwiseTo(a, op, r) {
          var i,
            f,
            m = Math.min(a.t, this.t);
          for (i = 0; i < m; ++i) r.data[i] = op(this.data[i], a.data[i]);
          if (a.t < this.t) {
            f = a.s & this.DM;
            for (i = m; i < this.t; ++i) r.data[i] = op(this.data[i], f);
            r.t = this.t;
          } else {
            f = this.s & this.DM;
            for (i = m; i < a.t; ++i) r.data[i] = op(f, a.data[i]);
            r.t = a.t;
          }
          r.s = op(this.s, a.s);
          r.clamp();
        }

        //(public) this & a
        function op_and(x, y) {
          return x & y;
        }
        function bnAnd(a) {
          var r = nbi();
          this.bitwiseTo(a, op_and, r);
          return r;
        }

        //(public) this | a
        function op_or(x, y) {
          return x | y;
        }
        function bnOr(a) {
          var r = nbi();
          this.bitwiseTo(a, op_or, r);
          return r;
        }

        //(public) this ^ a
        function op_xor(x, y) {
          return x ^ y;
        }
        function bnXor(a) {
          var r = nbi();
          this.bitwiseTo(a, op_xor, r);
          return r;
        }

        //(public) this & ~a
        function op_andnot(x, y) {
          return x & ~y;
        }
        function bnAndNot(a) {
          var r = nbi();
          this.bitwiseTo(a, op_andnot, r);
          return r;
        }

        //(public) ~this
        function bnNot() {
          var r = nbi();
          for (var i = 0; i < this.t; ++i) r.data[i] = this.DM & ~this.data[i];
          r.t = this.t;
          r.s = ~this.s;
          return r;
        }

        //(public) this << n
        function bnShiftLeft(n) {
          var r = nbi();
          if (n < 0) this.rShiftTo(-n, r);
          else this.lShiftTo(n, r);
          return r;
        }

        //(public) this >> n
        function bnShiftRight(n) {
          var r = nbi();
          if (n < 0) this.lShiftTo(-n, r);
          else this.rShiftTo(n, r);
          return r;
        }

        //return index of lowest 1-bit in x, x < 2^31
        function lbit(x) {
          if (x == 0) return -1;
          var r = 0;
          if ((x & 0xffff) == 0) {
            x >>= 16;
            r += 16;
          }
          if ((x & 0xff) == 0) {
            x >>= 8;
            r += 8;
          }
          if ((x & 0xf) == 0) {
            x >>= 4;
            r += 4;
          }
          if ((x & 3) == 0) {
            x >>= 2;
            r += 2;
          }
          if ((x & 1) == 0) ++r;
          return r;
        }

        //(public) returns index of lowest 1-bit (or -1 if none)
        function bnGetLowestSetBit() {
          for (var i = 0; i < this.t; ++i)
            if (this.data[i] != 0) return i * this.DB + lbit(this.data[i]);
          if (this.s < 0) return this.t * this.DB;
          return -1;
        }

        //return number of 1 bits in x
        function cbit(x) {
          var r = 0;
          while (x != 0) {
            x &= x - 1;
            ++r;
          }
          return r;
        }

        //(public) return number of set bits
        function bnBitCount() {
          var r = 0,
            x = this.s & this.DM;
          for (var i = 0; i < this.t; ++i) r += cbit(this.data[i] ^ x);
          return r;
        }

        //(public) true iff nth bit is set
        function bnTestBit(n) {
          var j = Math.floor(n / this.DB);
          if (j >= this.t) return this.s != 0;
          return (this.data[j] & (1 << (n % this.DB))) != 0;
        }

        //(protected) this op (1<<n)
        function bnpChangeBit(n, op) {
          var r = BigInteger.ONE.shiftLeft(n);
          this.bitwiseTo(r, op, r);
          return r;
        }

        //(public) this | (1<<n)
        function bnSetBit(n) {
          return this.changeBit(n, op_or);
        }

        //(public) this & ~(1<<n)
        function bnClearBit(n) {
          return this.changeBit(n, op_andnot);
        }

        //(public) this ^ (1<<n)
        function bnFlipBit(n) {
          return this.changeBit(n, op_xor);
        }

        //(protected) r = this + a
        function bnpAddTo(a, r) {
          var i = 0,
            c = 0,
            m = Math.min(a.t, this.t);
          while (i < m) {
            c += this.data[i] + a.data[i];
            r.data[i++] = c & this.DM;
            c >>= this.DB;
          }
          if (a.t < this.t) {
            c += a.s;
            while (i < this.t) {
              c += this.data[i];
              r.data[i++] = c & this.DM;
              c >>= this.DB;
            }
            c += this.s;
          } else {
            c += this.s;
            while (i < a.t) {
              c += a.data[i];
              r.data[i++] = c & this.DM;
              c >>= this.DB;
            }
            c += a.s;
          }
          r.s = c < 0 ? -1 : 0;
          if (c > 0) r.data[i++] = c;
          else if (c < -1) r.data[i++] = this.DV + c;
          r.t = i;
          r.clamp();
        }

        //(public) this + a
        function bnAdd(a) {
          var r = nbi();
          this.addTo(a, r);
          return r;
        }

        //(public) this - a
        function bnSubtract(a) {
          var r = nbi();
          this.subTo(a, r);
          return r;
        }

        //(public) this * a
        function bnMultiply(a) {
          var r = nbi();
          this.multiplyTo(a, r);
          return r;
        }

        //(public) this / a
        function bnDivide(a) {
          var r = nbi();
          this.divRemTo(a, r, null);
          return r;
        }

        //(public) this % a
        function bnRemainder(a) {
          var r = nbi();
          this.divRemTo(a, null, r);
          return r;
        }

        //(public) [this/a,this%a]
        function bnDivideAndRemainder(a) {
          var q = nbi(),
            r = nbi();
          this.divRemTo(a, q, r);
          return new Array(q, r);
        }

        //(protected) this *= n, this >= 0, 1 < n < DV
        function bnpDMultiply(n) {
          this.data[this.t] = this.am(0, n - 1, this, 0, 0, this.t);
          ++this.t;
          this.clamp();
        }

        //(protected) this += n << w words, this >= 0
        function bnpDAddOffset(n, w) {
          if (n == 0) return;
          while (this.t <= w) this.data[this.t++] = 0;
          this.data[w] += n;
          while (this.data[w] >= this.DV) {
            this.data[w] -= this.DV;
            if (++w >= this.t) this.data[this.t++] = 0;
            ++this.data[w];
          }
        }

        //A "null" reducer
        function NullExp() {}
        function nNop(x) {
          return x;
        }
        function nMulTo(x, y, r) {
          x.multiplyTo(y, r);
        }
        function nSqrTo(x, r) {
          x.squareTo(r);
        }

        NullExp.prototype.convert = nNop;
        NullExp.prototype.revert = nNop;
        NullExp.prototype.mulTo = nMulTo;
        NullExp.prototype.sqrTo = nSqrTo;

        //(public) this^e
        function bnPow(e) {
          return this.exp(e, new NullExp());
        }

        //(protected) r = lower n words of "this * a", a.t <= n
        //"this" should be the larger one if appropriate.
        function bnpMultiplyLowerTo(a, n, r) {
          var i = Math.min(this.t + a.t, n);
          r.s = 0; // assumes a,this >= 0
          r.t = i;
          while (i > 0) r.data[--i] = 0;
          var j;
          for (j = r.t - this.t; i < j; ++i)
            r.data[i + this.t] = this.am(0, a.data[i], r, i, 0, this.t);
          for (j = Math.min(a.t, n); i < j; ++i)
            this.am(0, a.data[i], r, i, 0, n - i);
          r.clamp();
        }

        //(protected) r = "this * a" without lower n words, n > 0
        //"this" should be the larger one if appropriate.
        function bnpMultiplyUpperTo(a, n, r) {
          --n;
          var i = (r.t = this.t + a.t - n);
          r.s = 0; // assumes a,this >= 0
          while (--i >= 0) r.data[i] = 0;
          for (i = Math.max(n - this.t, 0); i < a.t; ++i)
            r.data[this.t + i - n] = this.am(
              n - i,
              a.data[i],
              r,
              0,
              0,
              this.t + i - n
            );
          r.clamp();
          r.drShiftTo(1, r);
        }

        //Barrett modular reduction
        function Barrett(m) {
          // setup Barrett
          this.r2 = nbi();
          this.q3 = nbi();
          BigInteger.ONE.dlShiftTo(2 * m.t, this.r2);
          this.mu = this.r2.divide(m);
          this.m = m;
        }

        function barrettConvert(x) {
          if (x.s < 0 || x.t > 2 * this.m.t) return x.mod(this.m);
          else if (x.compareTo(this.m) < 0) return x;
          else {
            var r = nbi();
            x.copyTo(r);
            this.reduce(r);
            return r;
          }
        }

        function barrettRevert(x) {
          return x;
        }

        //x = x mod m (HAC 14.42)
        function barrettReduce(x) {
          x.drShiftTo(this.m.t - 1, this.r2);
          if (x.t > this.m.t + 1) {
            x.t = this.m.t + 1;
            x.clamp();
          }
          this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3);
          this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);
          while (x.compareTo(this.r2) < 0) x.dAddOffset(1, this.m.t + 1);
          x.subTo(this.r2, x);
          while (x.compareTo(this.m) >= 0) x.subTo(this.m, x);
        }

        //r = x^2 mod m; x != r
        function barrettSqrTo(x, r) {
          x.squareTo(r);
          this.reduce(r);
        }

        //r = x*y mod m; x,y != r
        function barrettMulTo(x, y, r) {
          x.multiplyTo(y, r);
          this.reduce(r);
        }

        Barrett.prototype.convert = barrettConvert;
        Barrett.prototype.revert = barrettRevert;
        Barrett.prototype.reduce = barrettReduce;
        Barrett.prototype.mulTo = barrettMulTo;
        Barrett.prototype.sqrTo = barrettSqrTo;

        //(public) this^e % m (HAC 14.85)
        function bnModPow(e, m) {
          var i = e.bitLength(),
            k,
            r = nbv(1),
            z;
          if (i <= 0) return r;
          else if (i < 18) k = 1;
          else if (i < 48) k = 3;
          else if (i < 144) k = 4;
          else if (i < 768) k = 5;
          else k = 6;
          if (i < 8) z = new Classic(m);
          else if (m.isEven()) z = new Barrett(m);
          else z = new Montgomery(m);

          // precomputation
          var g = new Array(),
            n = 3,
            k1 = k - 1,
            km = (1 << k) - 1;
          g[1] = z.convert(this);
          if (k > 1) {
            var g2 = nbi();
            z.sqrTo(g[1], g2);
            while (n <= km) {
              g[n] = nbi();
              z.mulTo(g2, g[n - 2], g[n]);
              n += 2;
            }
          }

          var j = e.t - 1,
            w,
            is1 = true,
            r2 = nbi(),
            t;
          i = nbits(e.data[j]) - 1;
          while (j >= 0) {
            if (i >= k1) w = (e.data[j] >> (i - k1)) & km;
            else {
              w = (e.data[j] & ((1 << (i + 1)) - 1)) << (k1 - i);
              if (j > 0) w |= e.data[j - 1] >> (this.DB + i - k1);
            }

            n = k;
            while ((w & 1) == 0) {
              w >>= 1;
              --n;
            }
            if ((i -= n) < 0) {
              i += this.DB;
              --j;
            }
            if (is1) {
              // ret == 1, don't bother squaring or multiplying it
              g[w].copyTo(r);
              is1 = false;
            } else {
              while (n > 1) {
                z.sqrTo(r, r2);
                z.sqrTo(r2, r);
                n -= 2;
              }
              if (n > 0) z.sqrTo(r, r2);
              else {
                t = r;
                r = r2;
                r2 = t;
              }
              z.mulTo(r2, g[w], r);
            }

            while (j >= 0 && (e.data[j] & (1 << i)) == 0) {
              z.sqrTo(r, r2);
              t = r;
              r = r2;
              r2 = t;
              if (--i < 0) {
                i = this.DB - 1;
                --j;
              }
            }
          }
          return z.revert(r);
        }

        //(public) gcd(this,a) (HAC 14.54)
        function bnGCD(a) {
          var x = this.s < 0 ? this.negate() : this.clone();
          var y = a.s < 0 ? a.negate() : a.clone();
          if (x.compareTo(y) < 0) {
            var t = x;
            x = y;
            y = t;
          }
          var i = x.getLowestSetBit(),
            g = y.getLowestSetBit();
          if (g < 0) return x;
          if (i < g) g = i;
          if (g > 0) {
            x.rShiftTo(g, x);
            y.rShiftTo(g, y);
          }
          while (x.signum() > 0) {
            if ((i = x.getLowestSetBit()) > 0) x.rShiftTo(i, x);
            if ((i = y.getLowestSetBit()) > 0) y.rShiftTo(i, y);
            if (x.compareTo(y) >= 0) {
              x.subTo(y, x);
              x.rShiftTo(1, x);
            } else {
              y.subTo(x, y);
              y.rShiftTo(1, y);
            }
          }
          if (g > 0) y.lShiftTo(g, y);
          return y;
        }

        //(protected) this % n, n < 2^26
        function bnpModInt(n) {
          if (n <= 0) return 0;
          var d = this.DV % n,
            r = this.s < 0 ? n - 1 : 0;
          if (this.t > 0)
            if (d == 0) r = this.data[0] % n;
            else
              for (var i = this.t - 1; i >= 0; --i)
                r = (d * r + this.data[i]) % n;
          return r;
        }

        //(public) 1/this % m (HAC 14.61)
        function bnModInverse(m) {
          var ac = m.isEven();
          if ((this.isEven() && ac) || m.signum() == 0) return BigInteger.ZERO;
          var u = m.clone(),
            v = this.clone();
          var a = nbv(1),
            b = nbv(0),
            c = nbv(0),
            d = nbv(1);
          while (u.signum() != 0) {
            while (u.isEven()) {
              u.rShiftTo(1, u);
              if (ac) {
                if (!a.isEven() || !b.isEven()) {
                  a.addTo(this, a);
                  b.subTo(m, b);
                }
                a.rShiftTo(1, a);
              } else if (!b.isEven()) b.subTo(m, b);
              b.rShiftTo(1, b);
            }
            while (v.isEven()) {
              v.rShiftTo(1, v);
              if (ac) {
                if (!c.isEven() || !d.isEven()) {
                  c.addTo(this, c);
                  d.subTo(m, d);
                }
                c.rShiftTo(1, c);
              } else if (!d.isEven()) d.subTo(m, d);
              d.rShiftTo(1, d);
            }
            if (u.compareTo(v) >= 0) {
              u.subTo(v, u);
              if (ac) a.subTo(c, a);
              b.subTo(d, b);
            } else {
              v.subTo(u, v);
              if (ac) c.subTo(a, c);
              d.subTo(b, d);
            }
          }
          if (v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;
          if (d.compareTo(m) >= 0) return d.subtract(m);
          if (d.signum() < 0) d.addTo(m, d);
          else return d;
          if (d.signum() < 0) return d.add(m);
          else return d;
        }

        var lowprimes = [
          2,
          3,
          5,
          7,
          11,
          13,
          17,
          19,
          23,
          29,
          31,
          37,
          41,
          43,
          47,
          53,
          59,
          61,
          67,
          71,
          73,
          79,
          83,
          89,
          97,
          101,
          103,
          107,
          109,
          113,
          127,
          131,
          137,
          139,
          149,
          151,
          157,
          163,
          167,
          173,
          179,
          181,
          191,
          193,
          197,
          199,
          211,
          223,
          227,
          229,
          233,
          239,
          241,
          251,
          257,
          263,
          269,
          271,
          277,
          281,
          283,
          293,
          307,
          311,
          313,
          317,
          331,
          337,
          347,
          349,
          353,
          359,
          367,
          373,
          379,
          383,
          389,
          397,
          401,
          409,
          419,
          421,
          431,
          433,
          439,
          443,
          449,
          457,
          461,
          463,
          467,
          479,
          487,
          491,
          499,
          503,
          509
        ];
        var lplim = (1 << 26) / lowprimes[lowprimes.length - 1];

        //(public) test primality with certainty >= 1-.5^t
        function bnIsProbablePrime(t) {
          var i,
            x = this.abs();
          if (x.t == 1 && x.data[0] <= lowprimes[lowprimes.length - 1]) {
            for (i = 0; i < lowprimes.length; ++i)
              if (x.data[0] == lowprimes[i]) return true;
            return false;
          }
          if (x.isEven()) return false;
          i = 1;
          while (i < lowprimes.length) {
            var m = lowprimes[i],
              j = i + 1;
            while (j < lowprimes.length && m < lplim) m *= lowprimes[j++];
            m = x.modInt(m);
            while (i < j) if (m % lowprimes[i++] == 0) return false;
          }
          return x.millerRabin(t);
        }

        //(protected) true if probably prime (HAC 4.24, Miller-Rabin)
        function bnpMillerRabin(t) {
          var n1 = this.subtract(BigInteger.ONE);
          var k = n1.getLowestSetBit();
          if (k <= 0) return false;
          var r = n1.shiftRight(k);
          var prng = bnGetPrng();
          var a;
          for (var i = 0; i < t; ++i) {
            // select witness 'a' at random from between 1 and n1
            do {
              a = new BigInteger(this.bitLength(), prng);
            } while (a.compareTo(BigInteger.ONE) <= 0 || a.compareTo(n1) >= 0);
            var y = a.modPow(r, this);
            if (y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {
              var j = 1;
              while (j++ < k && y.compareTo(n1) != 0) {
                y = y.modPowInt(2, this);
                if (y.compareTo(BigInteger.ONE) == 0) return false;
              }
              if (y.compareTo(n1) != 0) return false;
            }
          }
          return true;
        }

        // get pseudo random number generator
        function bnGetPrng() {
          // create prng with api that matches BigInteger secure random
          return {
            // x is an array to fill with bytes
            nextBytes: function(x) {
              for (var i = 0; i < x.length; ++i) {
                x[i] = Math.floor(Math.random() * 0x0100);
              }
            }
          };
        }

        //protected
        BigInteger.prototype.chunkSize = bnpChunkSize;
        BigInteger.prototype.toRadix = bnpToRadix;
        BigInteger.prototype.fromRadix = bnpFromRadix;
        BigInteger.prototype.fromNumber = bnpFromNumber;
        BigInteger.prototype.bitwiseTo = bnpBitwiseTo;
        BigInteger.prototype.changeBit = bnpChangeBit;
        BigInteger.prototype.addTo = bnpAddTo;
        BigInteger.prototype.dMultiply = bnpDMultiply;
        BigInteger.prototype.dAddOffset = bnpDAddOffset;
        BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;
        BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;
        BigInteger.prototype.modInt = bnpModInt;
        BigInteger.prototype.millerRabin = bnpMillerRabin;

        //public
        BigInteger.prototype.clone = bnClone;
        BigInteger.prototype.intValue = bnIntValue;
        BigInteger.prototype.byteValue = bnByteValue;
        BigInteger.prototype.shortValue = bnShortValue;
        BigInteger.prototype.signum = bnSigNum;
        BigInteger.prototype.toByteArray = bnToByteArray;
        BigInteger.prototype.equals = bnEquals;
        BigInteger.prototype.min = bnMin;
        BigInteger.prototype.max = bnMax;
        BigInteger.prototype.and = bnAnd;
        BigInteger.prototype.or = bnOr;
        BigInteger.prototype.xor = bnXor;
        BigInteger.prototype.andNot = bnAndNot;
        BigInteger.prototype.not = bnNot;
        BigInteger.prototype.shiftLeft = bnShiftLeft;
        BigInteger.prototype.shiftRight = bnShiftRight;
        BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;
        BigInteger.prototype.bitCount = bnBitCount;
        BigInteger.prototype.testBit = bnTestBit;
        BigInteger.prototype.setBit = bnSetBit;
        BigInteger.prototype.clearBit = bnClearBit;
        BigInteger.prototype.flipBit = bnFlipBit;
        BigInteger.prototype.add = bnAdd;
        BigInteger.prototype.subtract = bnSubtract;
        BigInteger.prototype.multiply = bnMultiply;
        BigInteger.prototype.divide = bnDivide;
        BigInteger.prototype.remainder = bnRemainder;
        BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;
        BigInteger.prototype.modPow = bnModPow;
        BigInteger.prototype.modInverse = bnModInverse;
        BigInteger.prototype.pow = bnPow;
        BigInteger.prototype.gcd = bnGCD;
        BigInteger.prototype.isProbablePrime = bnIsProbablePrime;

        //BigInteger interfaces not implemented in jsbn:

        //BigInteger(int signum, byte[] magnitude)
        //double doubleValue()
        //float floatValue()
        //int hashCode()
        //long longValue()
        //static BigInteger valueOf(long val)

        /***/
      },
      /* 47 */
      /***/ function(module, exports, __webpack_require__) {
        /**
 * Javascript implementation of X.509 and related components (such as
 * Certification Signing Requests) of a Public Key Infrastructure.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
 *
 * The ASN.1 representation of an X.509v3 certificate is as follows
 * (see RFC 2459):
 *
 * Certificate ::= SEQUENCE {
 *   tbsCertificate       TBSCertificate,
 *   signatureAlgorithm   AlgorithmIdentifier,
 *   signatureValue       BIT STRING
 * }
 *
 * TBSCertificate ::= SEQUENCE {
 *   version         [0]  EXPLICIT Version DEFAULT v1,
 *   serialNumber         CertificateSerialNumber,
 *   signature            AlgorithmIdentifier,
 *   issuer               Name,
 *   validity             Validity,
 *   subject              Name,
 *   subjectPublicKeyInfo SubjectPublicKeyInfo,
 *   issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL,
 *                        -- If present, version shall be v2 or v3
 *   subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,
 *                        -- If present, version shall be v2 or v3
 *   extensions      [3]  EXPLICIT Extensions OPTIONAL
 *                        -- If present, version shall be v3
 * }
 *
 * Version ::= INTEGER  { v1(0), v2(1), v3(2) }
 *
 * CertificateSerialNumber ::= INTEGER
 *
 * Name ::= CHOICE {
 *   // only one possible choice for now
 *   RDNSequence
 * }
 *
 * RDNSequence ::= SEQUENCE OF RelativeDistinguishedName
 *
 * RelativeDistinguishedName ::= SET OF AttributeTypeAndValue
 *
 * AttributeTypeAndValue ::= SEQUENCE {
 *   type     AttributeType,
 *   value    AttributeValue
 * }
 * AttributeType ::= OBJECT IDENTIFIER
 * AttributeValue ::= ANY DEFINED BY AttributeType
 *
 * Validity ::= SEQUENCE {
 *   notBefore      Time,
 *   notAfter       Time
 * }
 *
 * Time ::= CHOICE {
 *   utcTime        UTCTime,
 *   generalTime    GeneralizedTime
 * }
 *
 * UniqueIdentifier ::= BIT STRING
 *
 * SubjectPublicKeyInfo ::= SEQUENCE {
 *   algorithm            AlgorithmIdentifier,
 *   subjectPublicKey     BIT STRING
 * }
 *
 * Extensions ::= SEQUENCE SIZE (1..MAX) OF Extension
 *
 * Extension ::= SEQUENCE {
 *   extnID      OBJECT IDENTIFIER,
 *   critical    BOOLEAN DEFAULT FALSE,
 *   extnValue   OCTET STRING
 * }
 *
 * The only key algorithm currently supported for PKI is RSA.
 *
 * RSASSA-PSS signatures are described in RFC 3447 and RFC 4055.
 *
 * PKCS#10 v1.7 describes certificate signing requests:
 *
 * CertificationRequestInfo:
 *
 * CertificationRequestInfo ::= SEQUENCE {
 *   version       INTEGER { v1(0) } (v1,...),
 *   subject       Name,
 *   subjectPKInfo SubjectPublicKeyInfo{{ PKInfoAlgorithms }},
 *   attributes    [0] Attributes{{ CRIAttributes }}
 * }
 *
 * Attributes { ATTRIBUTE:IOSet } ::= SET OF Attribute{{ IOSet }}
 *
 * CRIAttributes  ATTRIBUTE  ::= {
 *   ... -- add any locally defined attributes here -- }
 *
 * Attribute { ATTRIBUTE:IOSet } ::= SEQUENCE {
 *   type   ATTRIBUTE.&id({IOSet}),
 *   values SET SIZE(1..MAX) OF ATTRIBUTE.&Type({IOSet}{@type})
 * }
 *
 * CertificationRequest ::= SEQUENCE {
 *   certificationRequestInfo CertificationRequestInfo,
 *   signatureAlgorithm AlgorithmIdentifier{{ SignatureAlgorithms }},
 *   signature          BIT STRING
 * }
 */
        var forge = __webpack_require__(1);
        __webpack_require__(15);
        __webpack_require__(11);
        __webpack_require__(30);
        __webpack_require__(12);
        __webpack_require__(129);
        __webpack_require__(16);
        __webpack_require__(18);
        __webpack_require__(48);
        __webpack_require__(31);
        __webpack_require__(3);

        // shortcut for asn.1 API
        var asn1 = forge.asn1;

        /* Public Key Infrastructure (PKI) implementation. */
        var pki = (module.exports = forge.pki = forge.pki || {});
        var oids = pki.oids;

        // short name OID mappings
        var _shortNames = {};
        _shortNames["CN"] = oids["commonName"];
        _shortNames["commonName"] = "CN";
        _shortNames["C"] = oids["countryName"];
        _shortNames["countryName"] = "C";
        _shortNames["L"] = oids["localityName"];
        _shortNames["localityName"] = "L";
        _shortNames["ST"] = oids["stateOrProvinceName"];
        _shortNames["stateOrProvinceName"] = "ST";
        _shortNames["O"] = oids["organizationName"];
        _shortNames["organizationName"] = "O";
        _shortNames["OU"] = oids["organizationalUnitName"];
        _shortNames["organizationalUnitName"] = "OU";
        _shortNames["E"] = oids["emailAddress"];
        _shortNames["emailAddress"] = "E";

        // validator for an SubjectPublicKeyInfo structure
        // Note: Currently only works with an RSA public key
        var publicKeyValidator = forge.pki.rsa.publicKeyValidator;

        // validator for an X.509v3 certificate
        var x509CertificateValidator = {
          name: "Certificate",
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.SEQUENCE,
          constructed: true,
          value: [
            {
              name: "Certificate.TBSCertificate",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.SEQUENCE,
              constructed: true,
              captureAsn1: "tbsCertificate",
              value: [
                {
                  name: "Certificate.TBSCertificate.version",
                  tagClass: asn1.Class.CONTEXT_SPECIFIC,
                  type: 0,
                  constructed: true,
                  optional: true,
                  value: [
                    {
                      name: "Certificate.TBSCertificate.version.integer",
                      tagClass: asn1.Class.UNIVERSAL,
                      type: asn1.Type.INTEGER,
                      constructed: false,
                      capture: "certVersion"
                    }
                  ]
                },
                {
                  name: "Certificate.TBSCertificate.serialNumber",
                  tagClass: asn1.Class.UNIVERSAL,
                  type: asn1.Type.INTEGER,
                  constructed: false,
                  capture: "certSerialNumber"
                },
                {
                  name: "Certificate.TBSCertificate.signature",
                  tagClass: asn1.Class.UNIVERSAL,
                  type: asn1.Type.SEQUENCE,
                  constructed: true,
                  value: [
                    {
                      name: "Certificate.TBSCertificate.signature.algorithm",
                      tagClass: asn1.Class.UNIVERSAL,
                      type: asn1.Type.OID,
                      constructed: false,
                      capture: "certinfoSignatureOid"
                    },
                    {
                      name: "Certificate.TBSCertificate.signature.parameters",
                      tagClass: asn1.Class.UNIVERSAL,
                      optional: true,
                      captureAsn1: "certinfoSignatureParams"
                    }
                  ]
                },
                {
                  name: "Certificate.TBSCertificate.issuer",
                  tagClass: asn1.Class.UNIVERSAL,
                  type: asn1.Type.SEQUENCE,
                  constructed: true,
                  captureAsn1: "certIssuer"
                },
                {
                  name: "Certificate.TBSCertificate.validity",
                  tagClass: asn1.Class.UNIVERSAL,
                  type: asn1.Type.SEQUENCE,
                  constructed: true,
                  // Note: UTC and generalized times may both appear so the capture
                  // names are based on their detected order, the names used below
                  // are only for the common case, which validity time really means
                  // "notBefore" and which means "notAfter" will be determined by order
                  value: [
                    {
                      // notBefore (Time) (UTC time case)
                      name:
                        "Certificate.TBSCertificate.validity.notBefore (utc)",
                      tagClass: asn1.Class.UNIVERSAL,
                      type: asn1.Type.UTCTIME,
                      constructed: false,
                      optional: true,
                      capture: "certValidity1UTCTime"
                    },
                    {
                      // notBefore (Time) (generalized time case)
                      name:
                        "Certificate.TBSCertificate.validity.notBefore (generalized)",
                      tagClass: asn1.Class.UNIVERSAL,
                      type: asn1.Type.GENERALIZEDTIME,
                      constructed: false,
                      optional: true,
                      capture: "certValidity2GeneralizedTime"
                    },
                    {
                      // notAfter (Time) (only UTC time is supported)
                      name:
                        "Certificate.TBSCertificate.validity.notAfter (utc)",
                      tagClass: asn1.Class.UNIVERSAL,
                      type: asn1.Type.UTCTIME,
                      constructed: false,
                      optional: true,
                      capture: "certValidity3UTCTime"
                    },
                    {
                      // notAfter (Time) (only UTC time is supported)
                      name:
                        "Certificate.TBSCertificate.validity.notAfter (generalized)",
                      tagClass: asn1.Class.UNIVERSAL,
                      type: asn1.Type.GENERALIZEDTIME,
                      constructed: false,
                      optional: true,
                      capture: "certValidity4GeneralizedTime"
                    }
                  ]
                },
                {
                  // Name (subject) (RDNSequence)
                  name: "Certificate.TBSCertificate.subject",
                  tagClass: asn1.Class.UNIVERSAL,
                  type: asn1.Type.SEQUENCE,
                  constructed: true,
                  captureAsn1: "certSubject"
                },
                // SubjectPublicKeyInfo
                publicKeyValidator,
                {
                  // issuerUniqueID (optional)
                  name: "Certificate.TBSCertificate.issuerUniqueID",
                  tagClass: asn1.Class.CONTEXT_SPECIFIC,
                  type: 1,
                  constructed: true,
                  optional: true,
                  value: [
                    {
                      name: "Certificate.TBSCertificate.issuerUniqueID.id",
                      tagClass: asn1.Class.UNIVERSAL,
                      type: asn1.Type.BITSTRING,
                      constructed: false,
                      // TODO: support arbitrary bit length ids
                      captureBitStringValue: "certIssuerUniqueId"
                    }
                  ]
                },
                {
                  // subjectUniqueID (optional)
                  name: "Certificate.TBSCertificate.subjectUniqueID",
                  tagClass: asn1.Class.CONTEXT_SPECIFIC,
                  type: 2,
                  constructed: true,
                  optional: true,
                  value: [
                    {
                      name: "Certificate.TBSCertificate.subjectUniqueID.id",
                      tagClass: asn1.Class.UNIVERSAL,
                      type: asn1.Type.BITSTRING,
                      constructed: false,
                      // TODO: support arbitrary bit length ids
                      captureBitStringValue: "certSubjectUniqueId"
                    }
                  ]
                },
                {
                  // Extensions (optional)
                  name: "Certificate.TBSCertificate.extensions",
                  tagClass: asn1.Class.CONTEXT_SPECIFIC,
                  type: 3,
                  constructed: true,
                  captureAsn1: "certExtensions",
                  optional: true
                }
              ]
            },
            {
              // AlgorithmIdentifier (signature algorithm)
              name: "Certificate.signatureAlgorithm",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.SEQUENCE,
              constructed: true,
              value: [
                {
                  // algorithm
                  name: "Certificate.signatureAlgorithm.algorithm",
                  tagClass: asn1.Class.UNIVERSAL,
                  type: asn1.Type.OID,
                  constructed: false,
                  capture: "certSignatureOid"
                },
                {
                  name: "Certificate.TBSCertificate.signature.parameters",
                  tagClass: asn1.Class.UNIVERSAL,
                  optional: true,
                  captureAsn1: "certSignatureParams"
                }
              ]
            },
            {
              // SignatureValue
              name: "Certificate.signatureValue",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.BITSTRING,
              constructed: false,
              captureBitStringValue: "certSignature"
            }
          ]
        };

        var rsassaPssParameterValidator = {
          name: "rsapss",
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.SEQUENCE,
          constructed: true,
          value: [
            {
              name: "rsapss.hashAlgorithm",
              tagClass: asn1.Class.CONTEXT_SPECIFIC,
              type: 0,
              constructed: true,
              value: [
                {
                  name: "rsapss.hashAlgorithm.AlgorithmIdentifier",
                  tagClass: asn1.Class.UNIVERSAL,
                  type: asn1.Class.SEQUENCE,
                  constructed: true,
                  optional: true,
                  value: [
                    {
                      name:
                        "rsapss.hashAlgorithm.AlgorithmIdentifier.algorithm",
                      tagClass: asn1.Class.UNIVERSAL,
                      type: asn1.Type.OID,
                      constructed: false,
                      capture: "hashOid"
                      /* parameter block omitted, for SHA1 NULL anyhow. */
                    }
                  ]
                }
              ]
            },
            {
              name: "rsapss.maskGenAlgorithm",
              tagClass: asn1.Class.CONTEXT_SPECIFIC,
              type: 1,
              constructed: true,
              value: [
                {
                  name: "rsapss.maskGenAlgorithm.AlgorithmIdentifier",
                  tagClass: asn1.Class.UNIVERSAL,
                  type: asn1.Class.SEQUENCE,
                  constructed: true,
                  optional: true,
                  value: [
                    {
                      name:
                        "rsapss.maskGenAlgorithm.AlgorithmIdentifier.algorithm",
                      tagClass: asn1.Class.UNIVERSAL,
                      type: asn1.Type.OID,
                      constructed: false,
                      capture: "maskGenOid"
                    },
                    {
                      name:
                        "rsapss.maskGenAlgorithm.AlgorithmIdentifier.params",
                      tagClass: asn1.Class.UNIVERSAL,
                      type: asn1.Type.SEQUENCE,
                      constructed: true,
                      value: [
                        {
                          name:
                            "rsapss.maskGenAlgorithm.AlgorithmIdentifier.params.algorithm",
                          tagClass: asn1.Class.UNIVERSAL,
                          type: asn1.Type.OID,
                          constructed: false,
                          capture: "maskGenHashOid"
                          /* parameter block omitted, for SHA1 NULL anyhow. */
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              name: "rsapss.saltLength",
              tagClass: asn1.Class.CONTEXT_SPECIFIC,
              type: 2,
              optional: true,
              value: [
                {
                  name: "rsapss.saltLength.saltLength",
                  tagClass: asn1.Class.UNIVERSAL,
                  type: asn1.Class.INTEGER,
                  constructed: false,
                  capture: "saltLength"
                }
              ]
            },
            {
              name: "rsapss.trailerField",
              tagClass: asn1.Class.CONTEXT_SPECIFIC,
              type: 3,
              optional: true,
              value: [
                {
                  name: "rsapss.trailer.trailer",
                  tagClass: asn1.Class.UNIVERSAL,
                  type: asn1.Class.INTEGER,
                  constructed: false,
                  capture: "trailer"
                }
              ]
            }
          ]
        };

        // validator for a CertificationRequestInfo structure
        var certificationRequestInfoValidator = {
          name: "CertificationRequestInfo",
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.SEQUENCE,
          constructed: true,
          captureAsn1: "certificationRequestInfo",
          value: [
            {
              name: "CertificationRequestInfo.integer",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.INTEGER,
              constructed: false,
              capture: "certificationRequestInfoVersion"
            },
            {
              // Name (subject) (RDNSequence)
              name: "CertificationRequestInfo.subject",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.SEQUENCE,
              constructed: true,
              captureAsn1: "certificationRequestInfoSubject"
            },
            // SubjectPublicKeyInfo
            publicKeyValidator,
            {
              name: "CertificationRequestInfo.attributes",
              tagClass: asn1.Class.CONTEXT_SPECIFIC,
              type: 0,
              constructed: true,
              optional: true,
              capture: "certificationRequestInfoAttributes",
              value: [
                {
                  name: "CertificationRequestInfo.attributes",
                  tagClass: asn1.Class.UNIVERSAL,
                  type: asn1.Type.SEQUENCE,
                  constructed: true,
                  value: [
                    {
                      name: "CertificationRequestInfo.attributes.type",
                      tagClass: asn1.Class.UNIVERSAL,
                      type: asn1.Type.OID,
                      constructed: false
                    },
                    {
                      name: "CertificationRequestInfo.attributes.value",
                      tagClass: asn1.Class.UNIVERSAL,
                      type: asn1.Type.SET,
                      constructed: true
                    }
                  ]
                }
              ]
            }
          ]
        };

        // validator for a CertificationRequest structure
        var certificationRequestValidator = {
          name: "CertificationRequest",
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.SEQUENCE,
          constructed: true,
          captureAsn1: "csr",
          value: [
            certificationRequestInfoValidator,
            {
              // AlgorithmIdentifier (signature algorithm)
              name: "CertificationRequest.signatureAlgorithm",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.SEQUENCE,
              constructed: true,
              value: [
                {
                  // algorithm
                  name: "CertificationRequest.signatureAlgorithm.algorithm",
                  tagClass: asn1.Class.UNIVERSAL,
                  type: asn1.Type.OID,
                  constructed: false,
                  capture: "csrSignatureOid"
                },
                {
                  name: "CertificationRequest.signatureAlgorithm.parameters",
                  tagClass: asn1.Class.UNIVERSAL,
                  optional: true,
                  captureAsn1: "csrSignatureParams"
                }
              ]
            },
            {
              // signature
              name: "CertificationRequest.signature",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.BITSTRING,
              constructed: false,
              captureBitStringValue: "csrSignature"
            }
          ]
        };

        /**
 * Converts an RDNSequence of ASN.1 DER-encoded RelativeDistinguishedName
 * sets into an array with objects that have type and value properties.
 *
 * @param rdn the RDNSequence to convert.
 * @param md a message digest to append type and value to if provided.
 */
        pki.RDNAttributesAsArray = function(rdn, md) {
          var rval = [];

          // each value in 'rdn' in is a SET of RelativeDistinguishedName
          var set, attr, obj;
          for (var si = 0; si < rdn.value.length; ++si) {
            // get the RelativeDistinguishedName set
            set = rdn.value[si];

            // each value in the SET is an AttributeTypeAndValue sequence
            // containing first a type (an OID) and second a value (defined by
            // the OID)
            for (var i = 0; i < set.value.length; ++i) {
              obj = {};
              attr = set.value[i];
              obj.type = asn1.derToOid(attr.value[0].value);
              obj.value = attr.value[1].value;
              obj.valueTagClass = attr.value[1].type;
              // if the OID is known, get its name and short name
              if (obj.type in oids) {
                obj.name = oids[obj.type];
                if (obj.name in _shortNames) {
                  obj.shortName = _shortNames[obj.name];
                }
              }
              if (md) {
                md.update(obj.type);
                md.update(obj.value);
              }
              rval.push(obj);
            }
          }

          return rval;
        };

        /**
 * Converts ASN.1 CRIAttributes into an array with objects that have type and
 * value properties.
 *
 * @param attributes the CRIAttributes to convert.
 */
        pki.CRIAttributesAsArray = function(attributes) {
          var rval = [];

          // each value in 'attributes' in is a SEQUENCE with an OID and a SET
          for (var si = 0; si < attributes.length; ++si) {
            // get the attribute sequence
            var seq = attributes[si];

            // each value in the SEQUENCE containing first a type (an OID) and
            // second a set of values (defined by the OID)
            var type = asn1.derToOid(seq.value[0].value);
            var values = seq.value[1].value;
            for (var vi = 0; vi < values.length; ++vi) {
              var obj = {};
              obj.type = type;
              obj.value = values[vi].value;
              obj.valueTagClass = values[vi].type;
              // if the OID is known, get its name and short name
              if (obj.type in oids) {
                obj.name = oids[obj.type];
                if (obj.name in _shortNames) {
                  obj.shortName = _shortNames[obj.name];
                }
              }
              // parse extensions
              if (obj.type === oids.extensionRequest) {
                obj.extensions = [];
                for (var ei = 0; ei < obj.value.length; ++ei) {
                  obj.extensions.push(
                    pki.certificateExtensionFromAsn1(obj.value[ei])
                  );
                }
              }
              rval.push(obj);
            }
          }

          return rval;
        };

        /**
 * Gets an issuer or subject attribute from its name, type, or short name.
 *
 * @param obj the issuer or subject object.
 * @param options a short name string or an object with:
 *          shortName the short name for the attribute.
 *          name the name for the attribute.
 *          type the type for the attribute.
 *
 * @return the attribute.
 */
        function _getAttribute(obj, options) {
          if (typeof options === "string") {
            options = { shortName: options };
          }

          var rval = null;
          var attr;
          for (var i = 0; rval === null && i < obj.attributes.length; ++i) {
            attr = obj.attributes[i];
            if (options.type && options.type === attr.type) {
              rval = attr;
            } else if (options.name && options.name === attr.name) {
              rval = attr;
            } else if (
              options.shortName &&
              options.shortName === attr.shortName
            ) {
              rval = attr;
            }
          }
          return rval;
        }

        /**
 * Converts signature parameters from ASN.1 structure.
 *
 * Currently only RSASSA-PSS supported.  The PKCS#1 v1.5 signature scheme had
 * no parameters.
 *
 * RSASSA-PSS-params  ::=  SEQUENCE  {
 *   hashAlgorithm      [0] HashAlgorithm DEFAULT
 *                             sha1Identifier,
 *   maskGenAlgorithm   [1] MaskGenAlgorithm DEFAULT
 *                             mgf1SHA1Identifier,
 *   saltLength         [2] INTEGER DEFAULT 20,
 *   trailerField       [3] INTEGER DEFAULT 1
 * }
 *
 * HashAlgorithm  ::=  AlgorithmIdentifier
 *
 * MaskGenAlgorithm  ::=  AlgorithmIdentifier
 *
 * AlgorithmIdentifer ::= SEQUENCE {
 *   algorithm OBJECT IDENTIFIER,
 *   parameters ANY DEFINED BY algorithm OPTIONAL
 * }
 *
 * @param oid The OID specifying the signature algorithm
 * @param obj The ASN.1 structure holding the parameters
 * @param fillDefaults Whether to use return default values where omitted
 * @return signature parameter object
 */
        var _readSignatureParameters = function(oid, obj, fillDefaults) {
          var params = {};

          if (oid !== oids["RSASSA-PSS"]) {
            return params;
          }

          if (fillDefaults) {
            params = {
              hash: {
                algorithmOid: oids["sha1"]
              },
              mgf: {
                algorithmOid: oids["mgf1"],
                hash: {
                  algorithmOid: oids["sha1"]
                }
              },
              saltLength: 20
            };
          }

          var capture = {};
          var errors = [];
          if (
            !asn1.validate(obj, rsassaPssParameterValidator, capture, errors)
          ) {
            var error = new Error("Cannot read RSASSA-PSS parameter block.");
            error.errors = errors;
            throw error;
          }

          if (capture.hashOid !== undefined) {
            params.hash = params.hash || {};
            params.hash.algorithmOid = asn1.derToOid(capture.hashOid);
          }

          if (capture.maskGenOid !== undefined) {
            params.mgf = params.mgf || {};
            params.mgf.algorithmOid = asn1.derToOid(capture.maskGenOid);
            params.mgf.hash = params.mgf.hash || {};
            params.mgf.hash.algorithmOid = asn1.derToOid(
              capture.maskGenHashOid
            );
          }

          if (capture.saltLength !== undefined) {
            params.saltLength = capture.saltLength.charCodeAt(0);
          }

          return params;
        };

        /**
 * Converts an X.509 certificate from PEM format.
 *
 * Note: If the certificate is to be verified then compute hash should
 * be set to true. This will scan the TBSCertificate part of the ASN.1
 * object while it is converted so it doesn't need to be converted back
 * to ASN.1-DER-encoding later.
 *
 * @param pem the PEM-formatted certificate.
 * @param computeHash true to compute the hash for verification.
 * @param strict true to be strict when checking ASN.1 value lengths, false to
 *          allow truncated values (default: true).
 *
 * @return the certificate.
 */
        pki.certificateFromPem = function(pem, computeHash, strict) {
          var msg = forge.pem.decode(pem)[0];

          if (
            msg.type !== "CERTIFICATE" &&
            msg.type !== "X509 CERTIFICATE" &&
            msg.type !== "TRUSTED CERTIFICATE"
          ) {
            var error = new Error(
              "Could not convert certificate from PEM; PEM header type " +
                'is not "CERTIFICATE", "X509 CERTIFICATE", or "TRUSTED CERTIFICATE".'
            );
            error.headerType = msg.type;
            throw error;
          }
          if (msg.procType && msg.procType.type === "ENCRYPTED") {
            throw new Error(
              "Could not convert certificate from PEM; PEM is encrypted."
            );
          }

          // convert DER to ASN.1 object
          var obj = asn1.fromDer(msg.body, strict);

          return pki.certificateFromAsn1(obj, computeHash);
        };

        /**
 * Converts an X.509 certificate to PEM format.
 *
 * @param cert the certificate.
 * @param maxline the maximum characters per line, defaults to 64.
 *
 * @return the PEM-formatted certificate.
 */
        pki.certificateToPem = function(cert, maxline) {
          // convert to ASN.1, then DER, then PEM-encode
          var msg = {
            type: "CERTIFICATE",
            body: asn1.toDer(pki.certificateToAsn1(cert)).getBytes()
          };
          return forge.pem.encode(msg, { maxline: maxline });
        };

        /**
 * Converts an RSA public key from PEM format.
 *
 * @param pem the PEM-formatted public key.
 *
 * @return the public key.
 */
        pki.publicKeyFromPem = function(pem) {
          var msg = forge.pem.decode(pem)[0];

          if (msg.type !== "PUBLIC KEY" && msg.type !== "RSA PUBLIC KEY") {
            var error = new Error(
              "Could not convert public key from PEM; PEM header " +
                'type is not "PUBLIC KEY" or "RSA PUBLIC KEY".'
            );
            error.headerType = msg.type;
            throw error;
          }
          if (msg.procType && msg.procType.type === "ENCRYPTED") {
            throw new Error(
              "Could not convert public key from PEM; PEM is encrypted."
            );
          }

          // convert DER to ASN.1 object
          var obj = asn1.fromDer(msg.body);

          return pki.publicKeyFromAsn1(obj);
        };

        /**
 * Converts an RSA public key to PEM format (using a SubjectPublicKeyInfo).
 *
 * @param key the public key.
 * @param maxline the maximum characters per line, defaults to 64.
 *
 * @return the PEM-formatted public key.
 */
        pki.publicKeyToPem = function(key, maxline) {
          // convert to ASN.1, then DER, then PEM-encode
          var msg = {
            type: "PUBLIC KEY",
            body: asn1.toDer(pki.publicKeyToAsn1(key)).getBytes()
          };
          return forge.pem.encode(msg, { maxline: maxline });
        };

        /**
 * Converts an RSA public key to PEM format (using an RSAPublicKey).
 *
 * @param key the public key.
 * @param maxline the maximum characters per line, defaults to 64.
 *
 * @return the PEM-formatted public key.
 */
        pki.publicKeyToRSAPublicKeyPem = function(key, maxline) {
          // convert to ASN.1, then DER, then PEM-encode
          var msg = {
            type: "RSA PUBLIC KEY",
            body: asn1.toDer(pki.publicKeyToRSAPublicKey(key)).getBytes()
          };
          return forge.pem.encode(msg, { maxline: maxline });
        };

        /**
 * Gets a fingerprint for the given public key.
 *
 * @param options the options to use.
 *          [md] the message digest object to use (defaults to forge.md.sha1).
 *          [type] the type of fingerprint, such as 'RSAPublicKey',
 *            'SubjectPublicKeyInfo' (defaults to 'RSAPublicKey').
 *          [encoding] an alternative output encoding, such as 'hex'
 *            (defaults to none, outputs a byte buffer).
 *          [delimiter] the delimiter to use between bytes for 'hex' encoded
 *            output, eg: ':' (defaults to none).
 *
 * @return the fingerprint as a byte buffer or other encoding based on options.
 */
        pki.getPublicKeyFingerprint = function(key, options) {
          options = options || {};
          var md = options.md || forge.md.sha1.create();
          var type = options.type || "RSAPublicKey";

          var bytes;
          switch (type) {
            case "RSAPublicKey":
              bytes = asn1.toDer(pki.publicKeyToRSAPublicKey(key)).getBytes();
              break;
            case "SubjectPublicKeyInfo":
              bytes = asn1.toDer(pki.publicKeyToAsn1(key)).getBytes();
              break;
            default:
              throw new Error(
                'Unknown fingerprint type "' + options.type + '".'
              );
          }

          // hash public key bytes
          md.start();
          md.update(bytes);
          var digest = md.digest();
          if (options.encoding === "hex") {
            var hex = digest.toHex();
            if (options.delimiter) {
              return hex.match(/.{2}/g).join(options.delimiter);
            }
            return hex;
          } else if (options.encoding === "binary") {
            return digest.getBytes();
          } else if (options.encoding) {
            throw new Error('Unknown encoding "' + options.encoding + '".');
          }
          return digest;
        };

        /**
 * Converts a PKCS#10 certification request (CSR) from PEM format.
 *
 * Note: If the certification request is to be verified then compute hash
 * should be set to true. This will scan the CertificationRequestInfo part of
 * the ASN.1 object while it is converted so it doesn't need to be converted
 * back to ASN.1-DER-encoding later.
 *
 * @param pem the PEM-formatted certificate.
 * @param computeHash true to compute the hash for verification.
 * @param strict true to be strict when checking ASN.1 value lengths, false to
 *          allow truncated values (default: true).
 *
 * @return the certification request (CSR).
 */
        pki.certificationRequestFromPem = function(pem, computeHash, strict) {
          var msg = forge.pem.decode(pem)[0];

          if (msg.type !== "CERTIFICATE REQUEST") {
            var error = new Error(
              "Could not convert certification request from PEM; " +
                'PEM header type is not "CERTIFICATE REQUEST".'
            );
            error.headerType = msg.type;
            throw error;
          }
          if (msg.procType && msg.procType.type === "ENCRYPTED") {
            throw new Error(
              "Could not convert certification request from PEM; " +
                "PEM is encrypted."
            );
          }

          // convert DER to ASN.1 object
          var obj = asn1.fromDer(msg.body, strict);

          return pki.certificationRequestFromAsn1(obj, computeHash);
        };

        /**
 * Converts a PKCS#10 certification request (CSR) to PEM format.
 *
 * @param csr the certification request.
 * @param maxline the maximum characters per line, defaults to 64.
 *
 * @return the PEM-formatted certification request.
 */
        pki.certificationRequestToPem = function(csr, maxline) {
          // convert to ASN.1, then DER, then PEM-encode
          var msg = {
            type: "CERTIFICATE REQUEST",
            body: asn1.toDer(pki.certificationRequestToAsn1(csr)).getBytes()
          };
          return forge.pem.encode(msg, { maxline: maxline });
        };

        /**
 * Creates an empty X.509v3 RSA certificate.
 *
 * @return the certificate.
 */
        pki.createCertificate = function() {
          var cert = {};
          cert.version = 0x02;
          cert.serialNumber = "00";
          cert.signatureOid = null;
          cert.signature = null;
          cert.siginfo = {};
          cert.siginfo.algorithmOid = null;
          cert.validity = {};
          cert.validity.notBefore = new Date();
          cert.validity.notAfter = new Date();

          cert.issuer = {};
          cert.issuer.getField = function(sn) {
            return _getAttribute(cert.issuer, sn);
          };
          cert.issuer.addField = function(attr) {
            _fillMissingFields([attr]);
            cert.issuer.attributes.push(attr);
          };
          cert.issuer.attributes = [];
          cert.issuer.hash = null;

          cert.subject = {};
          cert.subject.getField = function(sn) {
            return _getAttribute(cert.subject, sn);
          };
          cert.subject.addField = function(attr) {
            _fillMissingFields([attr]);
            cert.subject.attributes.push(attr);
          };
          cert.subject.attributes = [];
          cert.subject.hash = null;

          cert.extensions = [];
          cert.publicKey = null;
          cert.md = null;

          /**
   * Sets the subject of this certificate.
   *
   * @param attrs the array of subject attributes to use.
   * @param uniqueId an optional a unique ID to use.
   */
          cert.setSubject = function(attrs, uniqueId) {
            // set new attributes, clear hash
            _fillMissingFields(attrs);
            cert.subject.attributes = attrs;
            delete cert.subject.uniqueId;
            if (uniqueId) {
              // TODO: support arbitrary bit length ids
              cert.subject.uniqueId = uniqueId;
            }
            cert.subject.hash = null;
          };

          /**
   * Sets the issuer of this certificate.
   *
   * @param attrs the array of issuer attributes to use.
   * @param uniqueId an optional a unique ID to use.
   */
          cert.setIssuer = function(attrs, uniqueId) {
            // set new attributes, clear hash
            _fillMissingFields(attrs);
            cert.issuer.attributes = attrs;
            delete cert.issuer.uniqueId;
            if (uniqueId) {
              // TODO: support arbitrary bit length ids
              cert.issuer.uniqueId = uniqueId;
            }
            cert.issuer.hash = null;
          };

          /**
   * Sets the extensions of this certificate.
   *
   * @param exts the array of extensions to use.
   */
          cert.setExtensions = function(exts) {
            for (var i = 0; i < exts.length; ++i) {
              _fillMissingExtensionFields(exts[i], { cert: cert });
            }
            // set new extensions
            cert.extensions = exts;
          };

          /**
   * Gets an extension by its name or id.
   *
   * @param options the name to use or an object with:
   *          name the name to use.
   *          id the id to use.
   *
   * @return the extension or null if not found.
   */
          cert.getExtension = function(options) {
            if (typeof options === "string") {
              options = { name: options };
            }

            var rval = null;
            var ext;
            for (var i = 0; rval === null && i < cert.extensions.length; ++i) {
              ext = cert.extensions[i];
              if (options.id && ext.id === options.id) {
                rval = ext;
              } else if (options.name && ext.name === options.name) {
                rval = ext;
              }
            }
            return rval;
          };

          /**
   * Signs this certificate using the given private key.
   *
   * @param key the private key to sign with.
   * @param md the message digest object to use (defaults to forge.md.sha1).
   */
          cert.sign = function(key, md) {
            // TODO: get signature OID from private key
            cert.md = md || forge.md.sha1.create();
            var algorithmOid = oids[cert.md.algorithm + "WithRSAEncryption"];
            if (!algorithmOid) {
              var error = new Error(
                "Could not compute certificate digest. " +
                  "Unknown message digest algorithm OID."
              );
              error.algorithm = cert.md.algorithm;
              throw error;
            }
            cert.signatureOid = cert.siginfo.algorithmOid = algorithmOid;

            // get TBSCertificate, convert to DER
            cert.tbsCertificate = pki.getTBSCertificate(cert);
            var bytes = asn1.toDer(cert.tbsCertificate);

            // digest and sign
            cert.md.update(bytes.getBytes());
            cert.signature = key.sign(cert.md);
          };

          /**
   * Attempts verify the signature on the passed certificate using this
   * certificate's public key.
   *
   * @param child the certificate to verify.
   *
   * @return true if verified, false if not.
   */
          cert.verify = function(child) {
            var rval = false;

            if (!cert.issued(child)) {
              var issuer = child.issuer;
              var subject = cert.subject;
              var error = new Error(
                "The parent certificate did not issue the given child " +
                  "certificate; the child certificate's issuer does not match the " +
                  "parent's subject."
              );
              error.expectedIssuer = issuer.attributes;
              error.actualIssuer = subject.attributes;
              throw error;
            }

            var md = child.md;
            if (md === null) {
              // check signature OID for supported signature types
              if (child.signatureOid in oids) {
                var oid = oids[child.signatureOid];
                switch (oid) {
                  case "sha1WithRSAEncryption":
                    md = forge.md.sha1.create();
                    break;
                  case "md5WithRSAEncryption":
                    md = forge.md.md5.create();
                    break;
                  case "sha256WithRSAEncryption":
                    md = forge.md.sha256.create();
                    break;
                  case "sha512WithRSAEncryption":
                    md = forge.md.sha512.create();
                    break;
                  case "RSASSA-PSS":
                    md = forge.md.sha256.create();
                    break;
                }
              }
              if (md === null) {
                var error = new Error(
                  "Could not compute certificate digest. " +
                    "Unknown signature OID."
                );
                error.signatureOid = child.signatureOid;
                throw error;
              }

              // produce DER formatted TBSCertificate and digest it
              var tbsCertificate =
                child.tbsCertificate || pki.getTBSCertificate(child);
              var bytes = asn1.toDer(tbsCertificate);
              md.update(bytes.getBytes());
            }

            if (md !== null) {
              var scheme;

              switch (child.signatureOid) {
                case oids.sha1WithRSAEncryption:
                  scheme = undefined; /* use PKCS#1 v1.5 padding scheme */
                  break;
                case oids["RSASSA-PSS"]:
                  var hash, mgf;

                  /* initialize mgf */
                  hash = oids[child.signatureParameters.mgf.hash.algorithmOid];
                  if (hash === undefined || forge.md[hash] === undefined) {
                    var error = new Error("Unsupported MGF hash function.");
                    error.oid = child.signatureParameters.mgf.hash.algorithmOid;
                    error.name = hash;
                    throw error;
                  }

                  mgf = oids[child.signatureParameters.mgf.algorithmOid];
                  if (mgf === undefined || forge.mgf[mgf] === undefined) {
                    var error = new Error("Unsupported MGF function.");
                    error.oid = child.signatureParameters.mgf.algorithmOid;
                    error.name = mgf;
                    throw error;
                  }

                  mgf = forge.mgf[mgf].create(forge.md[hash].create());

                  /* initialize hash function */
                  hash = oids[child.signatureParameters.hash.algorithmOid];
                  if (hash === undefined || forge.md[hash] === undefined) {
                    throw {
                      message: "Unsupported RSASSA-PSS hash function.",
                      oid: child.signatureParameters.hash.algorithmOid,
                      name: hash
                    };
                  }

                  scheme = forge.pss.create(
                    forge.md[hash].create(),
                    mgf,
                    child.signatureParameters.saltLength
                  );
                  break;
              }

              // verify signature on cert using public key
              rval = cert.publicKey.verify(
                md.digest().getBytes(),
                child.signature,
                scheme
              );
            }

            return rval;
          };

          /**
   * Returns true if this certificate's issuer matches the passed
   * certificate's subject. Note that no signature check is performed.
   *
   * @param parent the certificate to check.
   *
   * @return true if this certificate's issuer matches the passed certificate's
   *         subject.
   */
          cert.isIssuer = function(parent) {
            var rval = false;

            var i = cert.issuer;
            var s = parent.subject;

            // compare hashes if present
            if (i.hash && s.hash) {
              rval = i.hash === s.hash;
            } else if (i.attributes.length === s.attributes.length) {
              // all attributes are the same so issuer matches subject
              rval = true;
              var iattr, sattr;
              for (var n = 0; rval && n < i.attributes.length; ++n) {
                iattr = i.attributes[n];
                sattr = s.attributes[n];
                if (iattr.type !== sattr.type || iattr.value !== sattr.value) {
                  // attribute mismatch
                  rval = false;
                }
              }
            }

            return rval;
          };

          /**
   * Returns true if this certificate's subject matches the issuer of the
   * given certificate). Note that not signature check is performed.
   *
   * @param child the certificate to check.
   *
   * @return true if this certificate's subject matches the passed
   *         certificate's issuer.
   */
          cert.issued = function(child) {
            return child.isIssuer(cert);
          };

          /**
   * Generates the subjectKeyIdentifier for this certificate as byte buffer.
   *
   * @return the subjectKeyIdentifier for this certificate as byte buffer.
   */
          cert.generateSubjectKeyIdentifier = function() {
            /* See: 4.2.1.2 section of the the RFC3280, keyIdentifier is either:

      (1) The keyIdentifier is composed of the 160-bit SHA-1 hash of the
        value of the BIT STRING subjectPublicKey (excluding the tag,
        length, and number of unused bits).

      (2) The keyIdentifier is composed of a four bit type field with
        the value 0100 followed by the least significant 60 bits of the
        SHA-1 hash of the value of the BIT STRING subjectPublicKey
        (excluding the tag, length, and number of unused bit string bits).
    */

            // skipping the tag, length, and number of unused bits is the same
            // as just using the RSAPublicKey (for RSA keys, which are the
            // only ones supported)
            return pki.getPublicKeyFingerprint(cert.publicKey, {
              type: "RSAPublicKey"
            });
          };

          /**
   * Verifies the subjectKeyIdentifier extension value for this certificate
   * against its public key. If no extension is found, false will be
   * returned.
   *
   * @return true if verified, false if not.
   */
          cert.verifySubjectKeyIdentifier = function() {
            var oid = oids["subjectKeyIdentifier"];
            for (var i = 0; i < cert.extensions.length; ++i) {
              var ext = cert.extensions[i];
              if (ext.id === oid) {
                var ski = cert.generateSubjectKeyIdentifier().getBytes();
                return forge.util.hexToBytes(ext.subjectKeyIdentifier) === ski;
              }
            }
            return false;
          };

          return cert;
        };

        /**
 * Converts an X.509v3 RSA certificate from an ASN.1 object.
 *
 * Note: If the certificate is to be verified then compute hash should
 * be set to true. There is currently no implementation for converting
 * a certificate back to ASN.1 so the TBSCertificate part of the ASN.1
 * object needs to be scanned before the cert object is created.
 *
 * @param obj the asn1 representation of an X.509v3 RSA certificate.
 * @param computeHash true to compute the hash for verification.
 *
 * @return the certificate.
 */
        pki.certificateFromAsn1 = function(obj, computeHash) {
          // validate certificate and capture data
          var capture = {};
          var errors = [];
          if (!asn1.validate(obj, x509CertificateValidator, capture, errors)) {
            var error = new Error(
              "Cannot read X.509 certificate. " +
                "ASN.1 object is not an X509v3 Certificate."
            );
            error.errors = errors;
            throw error;
          }

          // get oid
          var oid = asn1.derToOid(capture.publicKeyOid);
          if (oid !== pki.oids.rsaEncryption) {
            throw new Error("Cannot read public key. OID is not RSA.");
          }

          // create certificate
          var cert = pki.createCertificate();
          cert.version = capture.certVersion
            ? capture.certVersion.charCodeAt(0)
            : 0;
          var serial = forge.util.createBuffer(capture.certSerialNumber);
          cert.serialNumber = serial.toHex();
          cert.signatureOid = forge.asn1.derToOid(capture.certSignatureOid);
          cert.signatureParameters = _readSignatureParameters(
            cert.signatureOid,
            capture.certSignatureParams,
            true
          );
          cert.siginfo.algorithmOid = forge.asn1.derToOid(
            capture.certinfoSignatureOid
          );
          cert.siginfo.parameters = _readSignatureParameters(
            cert.siginfo.algorithmOid,
            capture.certinfoSignatureParams,
            false
          );
          cert.signature = capture.certSignature;

          var validity = [];
          if (capture.certValidity1UTCTime !== undefined) {
            validity.push(asn1.utcTimeToDate(capture.certValidity1UTCTime));
          }
          if (capture.certValidity2GeneralizedTime !== undefined) {
            validity.push(
              asn1.generalizedTimeToDate(capture.certValidity2GeneralizedTime)
            );
          }
          if (capture.certValidity3UTCTime !== undefined) {
            validity.push(asn1.utcTimeToDate(capture.certValidity3UTCTime));
          }
          if (capture.certValidity4GeneralizedTime !== undefined) {
            validity.push(
              asn1.generalizedTimeToDate(capture.certValidity4GeneralizedTime)
            );
          }
          if (validity.length > 2) {
            throw new Error(
              "Cannot read notBefore/notAfter validity times; more " +
                "than two times were provided in the certificate."
            );
          }
          if (validity.length < 2) {
            throw new Error(
              "Cannot read notBefore/notAfter validity times; they " +
                "were not provided as either UTCTime or GeneralizedTime."
            );
          }
          cert.validity.notBefore = validity[0];
          cert.validity.notAfter = validity[1];

          // keep TBSCertificate to preserve signature when exporting
          cert.tbsCertificate = capture.tbsCertificate;

          if (computeHash) {
            // check signature OID for supported signature types
            cert.md = null;
            if (cert.signatureOid in oids) {
              var oid = oids[cert.signatureOid];
              switch (oid) {
                case "sha1WithRSAEncryption":
                  cert.md = forge.md.sha1.create();
                  break;
                case "md5WithRSAEncryption":
                  cert.md = forge.md.md5.create();
                  break;
                case "sha256WithRSAEncryption":
                  cert.md = forge.md.sha256.create();
                  break;
                case "sha512WithRSAEncryption":
                  cert.md = forge.md.sha512.create();
                  break;
                case "RSASSA-PSS":
                  cert.md = forge.md.sha256.create();
                  break;
              }
            }
            if (cert.md === null) {
              var error = new Error(
                "Could not compute certificate digest. " +
                  "Unknown signature OID."
              );
              error.signatureOid = cert.signatureOid;
              throw error;
            }

            // produce DER formatted TBSCertificate and digest it
            var bytes = asn1.toDer(cert.tbsCertificate);
            cert.md.update(bytes.getBytes());
          }

          // handle issuer, build issuer message digest
          var imd = forge.md.sha1.create();
          cert.issuer.getField = function(sn) {
            return _getAttribute(cert.issuer, sn);
          };
          cert.issuer.addField = function(attr) {
            _fillMissingFields([attr]);
            cert.issuer.attributes.push(attr);
          };
          cert.issuer.attributes = pki.RDNAttributesAsArray(
            capture.certIssuer,
            imd
          );
          if (capture.certIssuerUniqueId) {
            cert.issuer.uniqueId = capture.certIssuerUniqueId;
          }
          cert.issuer.hash = imd.digest().toHex();

          // handle subject, build subject message digest
          var smd = forge.md.sha1.create();
          cert.subject.getField = function(sn) {
            return _getAttribute(cert.subject, sn);
          };
          cert.subject.addField = function(attr) {
            _fillMissingFields([attr]);
            cert.subject.attributes.push(attr);
          };
          cert.subject.attributes = pki.RDNAttributesAsArray(
            capture.certSubject,
            smd
          );
          if (capture.certSubjectUniqueId) {
            cert.subject.uniqueId = capture.certSubjectUniqueId;
          }
          cert.subject.hash = smd.digest().toHex();

          // handle extensions
          if (capture.certExtensions) {
            cert.extensions = pki.certificateExtensionsFromAsn1(
              capture.certExtensions
            );
          } else {
            cert.extensions = [];
          }

          // convert RSA public key from ASN.1
          cert.publicKey = pki.publicKeyFromAsn1(capture.subjectPublicKeyInfo);

          return cert;
        };

        /**
 * Converts an ASN.1 extensions object (with extension sequences as its
 * values) into an array of extension objects with types and values.
 *
 * Supported extensions:
 *
 * id-ce-keyUsage OBJECT IDENTIFIER ::=  { id-ce 15 }
 * KeyUsage ::= BIT STRING {
 *   digitalSignature        (0),
 *   nonRepudiation          (1),
 *   keyEncipherment         (2),
 *   dataEncipherment        (3),
 *   keyAgreement            (4),
 *   keyCertSign             (5),
 *   cRLSign                 (6),
 *   encipherOnly            (7),
 *   decipherOnly            (8)
 * }
 *
 * id-ce-basicConstraints OBJECT IDENTIFIER ::=  { id-ce 19 }
 * BasicConstraints ::= SEQUENCE {
 *   cA                      BOOLEAN DEFAULT FALSE,
 *   pathLenConstraint       INTEGER (0..MAX) OPTIONAL
 * }
 *
 * subjectAltName EXTENSION ::= {
 *   SYNTAX GeneralNames
 *   IDENTIFIED BY id-ce-subjectAltName
 * }
 *
 * GeneralNames ::= SEQUENCE SIZE (1..MAX) OF GeneralName
 *
 * GeneralName ::= CHOICE {
 *   otherName      [0] INSTANCE OF OTHER-NAME,
 *   rfc822Name     [1] IA5String,
 *   dNSName        [2] IA5String,
 *   x400Address    [3] ORAddress,
 *   directoryName  [4] Name,
 *   ediPartyName   [5] EDIPartyName,
 *   uniformResourceIdentifier [6] IA5String,
 *   IPAddress      [7] OCTET STRING,
 *   registeredID   [8] OBJECT IDENTIFIER
 * }
 *
 * OTHER-NAME ::= TYPE-IDENTIFIER
 *
 * EDIPartyName ::= SEQUENCE {
 *   nameAssigner [0] DirectoryString {ub-name} OPTIONAL,
 *   partyName    [1] DirectoryString {ub-name}
 * }
 *
 * @param exts the extensions ASN.1 with extension sequences to parse.
 *
 * @return the array.
 */
        pki.certificateExtensionsFromAsn1 = function(exts) {
          var rval = [];
          for (var i = 0; i < exts.value.length; ++i) {
            // get extension sequence
            var extseq = exts.value[i];
            for (var ei = 0; ei < extseq.value.length; ++ei) {
              rval.push(pki.certificateExtensionFromAsn1(extseq.value[ei]));
            }
          }

          return rval;
        };

        /**
 * Parses a single certificate extension from ASN.1.
 *
 * @param ext the extension in ASN.1 format.
 *
 * @return the parsed extension as an object.
 */
        pki.certificateExtensionFromAsn1 = function(ext) {
          // an extension has:
          // [0] extnID      OBJECT IDENTIFIER
          // [1] critical    BOOLEAN DEFAULT FALSE
          // [2] extnValue   OCTET STRING
          var e = {};
          e.id = asn1.derToOid(ext.value[0].value);
          e.critical = false;
          if (ext.value[1].type === asn1.Type.BOOLEAN) {
            e.critical = ext.value[1].value.charCodeAt(0) !== 0x00;
            e.value = ext.value[2].value;
          } else {
            e.value = ext.value[1].value;
          }
          // if the oid is known, get its name
          if (e.id in oids) {
            e.name = oids[e.id];

            // handle key usage
            if (e.name === "keyUsage") {
              // get value as BIT STRING
              var ev = asn1.fromDer(e.value);
              var b2 = 0x00;
              var b3 = 0x00;
              if (ev.value.length > 1) {
                // skip first byte, just indicates unused bits which
                // will be padded with 0s anyway
                // get bytes with flag bits
                b2 = ev.value.charCodeAt(1);
                b3 = ev.value.length > 2 ? ev.value.charCodeAt(2) : 0;
              }
              // set flags
              e.digitalSignature = (b2 & 0x80) === 0x80;
              e.nonRepudiation = (b2 & 0x40) === 0x40;
              e.keyEncipherment = (b2 & 0x20) === 0x20;
              e.dataEncipherment = (b2 & 0x10) === 0x10;
              e.keyAgreement = (b2 & 0x08) === 0x08;
              e.keyCertSign = (b2 & 0x04) === 0x04;
              e.cRLSign = (b2 & 0x02) === 0x02;
              e.encipherOnly = (b2 & 0x01) === 0x01;
              e.decipherOnly = (b3 & 0x80) === 0x80;
            } else if (e.name === "basicConstraints") {
              // handle basic constraints
              // get value as SEQUENCE
              var ev = asn1.fromDer(e.value);
              // get cA BOOLEAN flag (defaults to false)
              if (
                ev.value.length > 0 &&
                ev.value[0].type === asn1.Type.BOOLEAN
              ) {
                e.cA = ev.value[0].value.charCodeAt(0) !== 0x00;
              } else {
                e.cA = false;
              }
              // get path length constraint
              var value = null;
              if (
                ev.value.length > 0 &&
                ev.value[0].type === asn1.Type.INTEGER
              ) {
                value = ev.value[0].value;
              } else if (ev.value.length > 1) {
                value = ev.value[1].value;
              }
              if (value !== null) {
                e.pathLenConstraint = asn1.derToInteger(value);
              }
            } else if (e.name === "extKeyUsage") {
              // handle extKeyUsage
              // value is a SEQUENCE of OIDs
              var ev = asn1.fromDer(e.value);
              for (var vi = 0; vi < ev.value.length; ++vi) {
                var oid = asn1.derToOid(ev.value[vi].value);
                if (oid in oids) {
                  e[oids[oid]] = true;
                } else {
                  e[oid] = true;
                }
              }
            } else if (e.name === "nsCertType") {
              // handle nsCertType
              // get value as BIT STRING
              var ev = asn1.fromDer(e.value);
              var b2 = 0x00;
              if (ev.value.length > 1) {
                // skip first byte, just indicates unused bits which
                // will be padded with 0s anyway
                // get bytes with flag bits
                b2 = ev.value.charCodeAt(1);
              }
              // set flags
              e.client = (b2 & 0x80) === 0x80;
              e.server = (b2 & 0x40) === 0x40;
              e.email = (b2 & 0x20) === 0x20;
              e.objsign = (b2 & 0x10) === 0x10;
              e.reserved = (b2 & 0x08) === 0x08;
              e.sslCA = (b2 & 0x04) === 0x04;
              e.emailCA = (b2 & 0x02) === 0x02;
              e.objCA = (b2 & 0x01) === 0x01;
            } else if (
              e.name === "subjectAltName" ||
              e.name === "issuerAltName"
            ) {
              // handle subjectAltName/issuerAltName
              e.altNames = [];

              // ev is a SYNTAX SEQUENCE
              var gn;
              var ev = asn1.fromDer(e.value);
              for (var n = 0; n < ev.value.length; ++n) {
                // get GeneralName
                gn = ev.value[n];

                var altName = {
                  type: gn.type,
                  value: gn.value
                };
                e.altNames.push(altName);

                // Note: Support for types 1,2,6,7,8
                switch (gn.type) {
                  // rfc822Name
                  case 1:
                  // dNSName
                  case 2:
                  // uniformResourceIdentifier (URI)
                  case 6:
                    break;
                  // IPAddress
                  case 7:
                    // convert to IPv4/IPv6 string representation
                    altName.ip = forge.util.bytesToIP(gn.value);
                    break;
                  // registeredID
                  case 8:
                    altName.oid = asn1.derToOid(gn.value);
                    break;
                  default:
                  // unsupported
                }
              }
            } else if (e.name === "subjectKeyIdentifier") {
              // value is an OCTETSTRING w/the hash of the key-type specific
              // public key structure (eg: RSAPublicKey)
              var ev = asn1.fromDer(e.value);
              e.subjectKeyIdentifier = forge.util.bytesToHex(ev.value);
            }
          }
          return e;
        };

        /**
 * Converts a PKCS#10 certification request (CSR) from an ASN.1 object.
 *
 * Note: If the certification request is to be verified then compute hash
 * should be set to true. There is currently no implementation for converting
 * a certificate back to ASN.1 so the CertificationRequestInfo part of the
 * ASN.1 object needs to be scanned before the csr object is created.
 *
 * @param obj the asn1 representation of a PKCS#10 certification request (CSR).
 * @param computeHash true to compute the hash for verification.
 *
 * @return the certification request (CSR).
 */
        pki.certificationRequestFromAsn1 = function(obj, computeHash) {
          // validate certification request and capture data
          var capture = {};
          var errors = [];
          if (
            !asn1.validate(obj, certificationRequestValidator, capture, errors)
          ) {
            var error = new Error(
              "Cannot read PKCS#10 certificate request. " +
                "ASN.1 object is not a PKCS#10 CertificationRequest."
            );
            error.errors = errors;
            throw error;
          }

          // get oid
          var oid = asn1.derToOid(capture.publicKeyOid);
          if (oid !== pki.oids.rsaEncryption) {
            throw new Error("Cannot read public key. OID is not RSA.");
          }

          // create certification request
          var csr = pki.createCertificationRequest();
          csr.version = capture.csrVersion
            ? capture.csrVersion.charCodeAt(0)
            : 0;
          csr.signatureOid = forge.asn1.derToOid(capture.csrSignatureOid);
          csr.signatureParameters = _readSignatureParameters(
            csr.signatureOid,
            capture.csrSignatureParams,
            true
          );
          csr.siginfo.algorithmOid = forge.asn1.derToOid(
            capture.csrSignatureOid
          );
          csr.siginfo.parameters = _readSignatureParameters(
            csr.siginfo.algorithmOid,
            capture.csrSignatureParams,
            false
          );
          csr.signature = capture.csrSignature;

          // keep CertificationRequestInfo to preserve signature when exporting
          csr.certificationRequestInfo = capture.certificationRequestInfo;

          if (computeHash) {
            // check signature OID for supported signature types
            csr.md = null;
            if (csr.signatureOid in oids) {
              var oid = oids[csr.signatureOid];
              switch (oid) {
                case "sha1WithRSAEncryption":
                  csr.md = forge.md.sha1.create();
                  break;
                case "md5WithRSAEncryption":
                  csr.md = forge.md.md5.create();
                  break;
                case "sha256WithRSAEncryption":
                  csr.md = forge.md.sha256.create();
                  break;
                case "sha512WithRSAEncryption":
                  csr.md = forge.md.sha512.create();
                  break;
                case "RSASSA-PSS":
                  csr.md = forge.md.sha256.create();
                  break;
              }
            }
            if (csr.md === null) {
              var error = new Error(
                "Could not compute certification request digest. " +
                  "Unknown signature OID."
              );
              error.signatureOid = csr.signatureOid;
              throw error;
            }

            // produce DER formatted CertificationRequestInfo and digest it
            var bytes = asn1.toDer(csr.certificationRequestInfo);
            csr.md.update(bytes.getBytes());
          }

          // handle subject, build subject message digest
          var smd = forge.md.sha1.create();
          csr.subject.getField = function(sn) {
            return _getAttribute(csr.subject, sn);
          };
          csr.subject.addField = function(attr) {
            _fillMissingFields([attr]);
            csr.subject.attributes.push(attr);
          };
          csr.subject.attributes = pki.RDNAttributesAsArray(
            capture.certificationRequestInfoSubject,
            smd
          );
          csr.subject.hash = smd.digest().toHex();

          // convert RSA public key from ASN.1
          csr.publicKey = pki.publicKeyFromAsn1(capture.subjectPublicKeyInfo);

          // convert attributes from ASN.1
          csr.getAttribute = function(sn) {
            return _getAttribute(csr, sn);
          };
          csr.addAttribute = function(attr) {
            _fillMissingFields([attr]);
            csr.attributes.push(attr);
          };
          csr.attributes = pki.CRIAttributesAsArray(
            capture.certificationRequestInfoAttributes || []
          );

          return csr;
        };

        /**
 * Creates an empty certification request (a CSR or certificate signing
 * request). Once created, its public key and attributes can be set and then
 * it can be signed.
 *
 * @return the empty certification request.
 */
        pki.createCertificationRequest = function() {
          var csr = {};
          csr.version = 0x00;
          csr.signatureOid = null;
          csr.signature = null;
          csr.siginfo = {};
          csr.siginfo.algorithmOid = null;

          csr.subject = {};
          csr.subject.getField = function(sn) {
            return _getAttribute(csr.subject, sn);
          };
          csr.subject.addField = function(attr) {
            _fillMissingFields([attr]);
            csr.subject.attributes.push(attr);
          };
          csr.subject.attributes = [];
          csr.subject.hash = null;

          csr.publicKey = null;
          csr.attributes = [];
          csr.getAttribute = function(sn) {
            return _getAttribute(csr, sn);
          };
          csr.addAttribute = function(attr) {
            _fillMissingFields([attr]);
            csr.attributes.push(attr);
          };
          csr.md = null;

          /**
   * Sets the subject of this certification request.
   *
   * @param attrs the array of subject attributes to use.
   */
          csr.setSubject = function(attrs) {
            // set new attributes
            _fillMissingFields(attrs);
            csr.subject.attributes = attrs;
            csr.subject.hash = null;
          };

          /**
   * Sets the attributes of this certification request.
   *
   * @param attrs the array of attributes to use.
   */
          csr.setAttributes = function(attrs) {
            // set new attributes
            _fillMissingFields(attrs);
            csr.attributes = attrs;
          };

          /**
   * Signs this certification request using the given private key.
   *
   * @param key the private key to sign with.
   * @param md the message digest object to use (defaults to forge.md.sha1).
   */
          csr.sign = function(key, md) {
            // TODO: get signature OID from private key
            csr.md = md || forge.md.sha1.create();
            var algorithmOid = oids[csr.md.algorithm + "WithRSAEncryption"];
            if (!algorithmOid) {
              var error = new Error(
                "Could not compute certification request digest. " +
                  "Unknown message digest algorithm OID."
              );
              error.algorithm = csr.md.algorithm;
              throw error;
            }
            csr.signatureOid = csr.siginfo.algorithmOid = algorithmOid;

            // get CertificationRequestInfo, convert to DER
            csr.certificationRequestInfo = pki.getCertificationRequestInfo(csr);
            var bytes = asn1.toDer(csr.certificationRequestInfo);

            // digest and sign
            csr.md.update(bytes.getBytes());
            csr.signature = key.sign(csr.md);
          };

          /**
   * Attempts verify the signature on the passed certification request using
   * its public key.
   *
   * A CSR that has been exported to a file in PEM format can be verified using
   * OpenSSL using this command:
   *
   * openssl req -in <the-csr-pem-file> -verify -noout -text
   *
   * @return true if verified, false if not.
   */
          csr.verify = function() {
            var rval = false;

            var md = csr.md;
            if (md === null) {
              // check signature OID for supported signature types
              if (csr.signatureOid in oids) {
                // TODO: create DRY `OID to md` function
                var oid = oids[csr.signatureOid];
                switch (oid) {
                  case "sha1WithRSAEncryption":
                    md = forge.md.sha1.create();
                    break;
                  case "md5WithRSAEncryption":
                    md = forge.md.md5.create();
                    break;
                  case "sha256WithRSAEncryption":
                    md = forge.md.sha256.create();
                    break;
                  case "sha512WithRSAEncryption":
                    md = forge.md.sha512.create();
                    break;
                  case "RSASSA-PSS":
                    md = forge.md.sha256.create();
                    break;
                }
              }
              if (md === null) {
                var error = new Error(
                  "Could not compute certification request digest. " +
                    "Unknown signature OID."
                );
                error.signatureOid = csr.signatureOid;
                throw error;
              }

              // produce DER formatted CertificationRequestInfo and digest it
              var cri =
                csr.certificationRequestInfo ||
                pki.getCertificationRequestInfo(csr);
              var bytes = asn1.toDer(cri);
              md.update(bytes.getBytes());
            }

            if (md !== null) {
              var scheme;

              switch (csr.signatureOid) {
                case oids.sha1WithRSAEncryption:
                  /* use PKCS#1 v1.5 padding scheme */
                  break;
                case oids["RSASSA-PSS"]:
                  var hash, mgf;

                  /* initialize mgf */
                  hash = oids[csr.signatureParameters.mgf.hash.algorithmOid];
                  if (hash === undefined || forge.md[hash] === undefined) {
                    var error = new Error("Unsupported MGF hash function.");
                    error.oid = csr.signatureParameters.mgf.hash.algorithmOid;
                    error.name = hash;
                    throw error;
                  }

                  mgf = oids[csr.signatureParameters.mgf.algorithmOid];
                  if (mgf === undefined || forge.mgf[mgf] === undefined) {
                    var error = new Error("Unsupported MGF function.");
                    error.oid = csr.signatureParameters.mgf.algorithmOid;
                    error.name = mgf;
                    throw error;
                  }

                  mgf = forge.mgf[mgf].create(forge.md[hash].create());

                  /* initialize hash function */
                  hash = oids[csr.signatureParameters.hash.algorithmOid];
                  if (hash === undefined || forge.md[hash] === undefined) {
                    var error = new Error(
                      "Unsupported RSASSA-PSS hash function."
                    );
                    error.oid = csr.signatureParameters.hash.algorithmOid;
                    error.name = hash;
                    throw error;
                  }

                  scheme = forge.pss.create(
                    forge.md[hash].create(),
                    mgf,
                    csr.signatureParameters.saltLength
                  );
                  break;
              }

              // verify signature on csr using its public key
              rval = csr.publicKey.verify(
                md.digest().getBytes(),
                csr.signature,
                scheme
              );
            }

            return rval;
          };

          return csr;
        };

        /**
 * Converts an X.509 subject or issuer to an ASN.1 RDNSequence.
 *
 * @param obj the subject or issuer (distinguished name).
 *
 * @return the ASN.1 RDNSequence.
 */
        function _dnToAsn1(obj) {
          // create an empty RDNSequence
          var rval = asn1.create(
            asn1.Class.UNIVERSAL,
            asn1.Type.SEQUENCE,
            true,
            []
          );

          // iterate over attributes
          var attr, set;
          var attrs = obj.attributes;
          for (var i = 0; i < attrs.length; ++i) {
            attr = attrs[i];
            var value = attr.value;

            // reuse tag class for attribute value if available
            var valueTagClass = asn1.Type.PRINTABLESTRING;
            if ("valueTagClass" in attr) {
              valueTagClass = attr.valueTagClass;

              if (valueTagClass === asn1.Type.UTF8) {
                value = forge.util.encodeUtf8(value);
              }
              // FIXME: handle more encodings
            }

            // create a RelativeDistinguishedName set
            // each value in the set is an AttributeTypeAndValue first
            // containing the type (an OID) and second the value
            set = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, [
              asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
                // AttributeType
                asn1.create(
                  asn1.Class.UNIVERSAL,
                  asn1.Type.OID,
                  false,
                  asn1.oidToDer(attr.type).getBytes()
                ),
                // AttributeValue
                asn1.create(asn1.Class.UNIVERSAL, valueTagClass, false, value)
              ])
            ]);
            rval.value.push(set);
          }

          return rval;
        }

        /**
 * Gets all printable attributes (typically of an issuer or subject) in a
 * simplified JSON format for display.
 *
 * @param attrs the attributes.
 *
 * @return the JSON for display.
 */
        function _getAttributesAsJson(attrs) {
          var rval = {};
          for (var i = 0; i < attrs.length; ++i) {
            var attr = attrs[i];
            if (
              attr.shortName &&
              (attr.valueTagClass === asn1.Type.UTF8 ||
                attr.valueTagClass === asn1.Type.PRINTABLESTRING ||
                attr.valueTagClass === asn1.Type.IA5STRING)
            ) {
              var value = attr.value;
              if (attr.valueTagClass === asn1.Type.UTF8) {
                value = forge.util.encodeUtf8(attr.value);
              }
              if (!(attr.shortName in rval)) {
                rval[attr.shortName] = value;
              } else if (forge.util.isArray(rval[attr.shortName])) {
                rval[attr.shortName].push(value);
              } else {
                rval[attr.shortName] = [rval[attr.shortName], value];
              }
            }
          }
          return rval;
        }

        /**
 * Fills in missing fields in attributes.
 *
 * @param attrs the attributes to fill missing fields in.
 */
        function _fillMissingFields(attrs) {
          var attr;
          for (var i = 0; i < attrs.length; ++i) {
            attr = attrs[i];

            // populate missing name
            if (typeof attr.name === "undefined") {
              if (attr.type && attr.type in pki.oids) {
                attr.name = pki.oids[attr.type];
              } else if (attr.shortName && attr.shortName in _shortNames) {
                attr.name = pki.oids[_shortNames[attr.shortName]];
              }
            }

            // populate missing type (OID)
            if (typeof attr.type === "undefined") {
              if (attr.name && attr.name in pki.oids) {
                attr.type = pki.oids[attr.name];
              } else {
                var error = new Error("Attribute type not specified.");
                error.attribute = attr;
                throw error;
              }
            }

            // populate missing shortname
            if (typeof attr.shortName === "undefined") {
              if (attr.name && attr.name in _shortNames) {
                attr.shortName = _shortNames[attr.name];
              }
            }

            // convert extensions to value
            if (attr.type === oids.extensionRequest) {
              attr.valueConstructed = true;
              attr.valueTagClass = asn1.Type.SEQUENCE;
              if (!attr.value && attr.extensions) {
                attr.value = [];
                for (var ei = 0; ei < attr.extensions.length; ++ei) {
                  attr.value.push(
                    pki.certificateExtensionToAsn1(
                      _fillMissingExtensionFields(attr.extensions[ei])
                    )
                  );
                }
              }
            }

            if (typeof attr.value === "undefined") {
              var error = new Error("Attribute value not specified.");
              error.attribute = attr;
              throw error;
            }
          }
        }

        /**
 * Fills in missing fields in certificate extensions.
 *
 * @param e the extension.
 * @param [options] the options to use.
 *          [cert] the certificate the extensions are for.
 *
 * @return the extension.
 */
        function _fillMissingExtensionFields(e, options) {
          options = options || {};

          // populate missing name
          if (typeof e.name === "undefined") {
            if (e.id && e.id in pki.oids) {
              e.name = pki.oids[e.id];
            }
          }

          // populate missing id
          if (typeof e.id === "undefined") {
            if (e.name && e.name in pki.oids) {
              e.id = pki.oids[e.name];
            } else {
              var error = new Error("Extension ID not specified.");
              error.extension = e;
              throw error;
            }
          }

          if (typeof e.value !== "undefined") {
            return e;
          }

          // handle missing value:

          // value is a BIT STRING
          if (e.name === "keyUsage") {
            // build flags
            var unused = 0;
            var b2 = 0x00;
            var b3 = 0x00;
            if (e.digitalSignature) {
              b2 |= 0x80;
              unused = 7;
            }
            if (e.nonRepudiation) {
              b2 |= 0x40;
              unused = 6;
            }
            if (e.keyEncipherment) {
              b2 |= 0x20;
              unused = 5;
            }
            if (e.dataEncipherment) {
              b2 |= 0x10;
              unused = 4;
            }
            if (e.keyAgreement) {
              b2 |= 0x08;
              unused = 3;
            }
            if (e.keyCertSign) {
              b2 |= 0x04;
              unused = 2;
            }
            if (e.cRLSign) {
              b2 |= 0x02;
              unused = 1;
            }
            if (e.encipherOnly) {
              b2 |= 0x01;
              unused = 0;
            }
            if (e.decipherOnly) {
              b3 |= 0x80;
              unused = 7;
            }

            // create bit string
            var value = String.fromCharCode(unused);
            if (b3 !== 0) {
              value += String.fromCharCode(b2) + String.fromCharCode(b3);
            } else if (b2 !== 0) {
              value += String.fromCharCode(b2);
            }
            e.value = asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.BITSTRING,
              false,
              value
            );
          } else if (e.name === "basicConstraints") {
            // basicConstraints is a SEQUENCE
            e.value = asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.SEQUENCE,
              true,
              []
            );
            // cA BOOLEAN flag defaults to false
            if (e.cA) {
              e.value.value.push(
                asn1.create(
                  asn1.Class.UNIVERSAL,
                  asn1.Type.BOOLEAN,
                  false,
                  String.fromCharCode(0xff)
                )
              );
            }
            if ("pathLenConstraint" in e) {
              e.value.value.push(
                asn1.create(
                  asn1.Class.UNIVERSAL,
                  asn1.Type.INTEGER,
                  false,
                  asn1.integerToDer(e.pathLenConstraint).getBytes()
                )
              );
            }
          } else if (e.name === "extKeyUsage") {
            // extKeyUsage is a SEQUENCE of OIDs
            e.value = asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.SEQUENCE,
              true,
              []
            );
            var seq = e.value.value;
            for (var key in e) {
              if (e[key] !== true) {
                continue;
              }
              // key is name in OID map
              if (key in oids) {
                seq.push(
                  asn1.create(
                    asn1.Class.UNIVERSAL,
                    asn1.Type.OID,
                    false,
                    asn1.oidToDer(oids[key]).getBytes()
                  )
                );
              } else if (key.indexOf(".") !== -1) {
                // assume key is an OID
                seq.push(
                  asn1.create(
                    asn1.Class.UNIVERSAL,
                    asn1.Type.OID,
                    false,
                    asn1.oidToDer(key).getBytes()
                  )
                );
              }
            }
          } else if (e.name === "nsCertType") {
            // nsCertType is a BIT STRING
            // build flags
            var unused = 0;
            var b2 = 0x00;

            if (e.client) {
              b2 |= 0x80;
              unused = 7;
            }
            if (e.server) {
              b2 |= 0x40;
              unused = 6;
            }
            if (e.email) {
              b2 |= 0x20;
              unused = 5;
            }
            if (e.objsign) {
              b2 |= 0x10;
              unused = 4;
            }
            if (e.reserved) {
              b2 |= 0x08;
              unused = 3;
            }
            if (e.sslCA) {
              b2 |= 0x04;
              unused = 2;
            }
            if (e.emailCA) {
              b2 |= 0x02;
              unused = 1;
            }
            if (e.objCA) {
              b2 |= 0x01;
              unused = 0;
            }

            // create bit string
            var value = String.fromCharCode(unused);
            if (b2 !== 0) {
              value += String.fromCharCode(b2);
            }
            e.value = asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.BITSTRING,
              false,
              value
            );
          } else if (
            e.name === "subjectAltName" ||
            e.name === "issuerAltName"
          ) {
            // SYNTAX SEQUENCE
            e.value = asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.SEQUENCE,
              true,
              []
            );

            var altName;
            for (var n = 0; n < e.altNames.length; ++n) {
              altName = e.altNames[n];
              var value = altName.value;
              // handle IP
              if (altName.type === 7 && altName.ip) {
                value = forge.util.bytesFromIP(altName.ip);
                if (value === null) {
                  var error = new Error(
                    'Extension "ip" value is not a valid IPv4 or IPv6 address.'
                  );
                  error.extension = e;
                  throw error;
                }
              } else if (altName.type === 8) {
                // handle OID
                if (altName.oid) {
                  value = asn1.oidToDer(asn1.oidToDer(altName.oid));
                } else {
                  // deprecated ... convert value to OID
                  value = asn1.oidToDer(value);
                }
              }
              e.value.value.push(
                asn1.create(
                  asn1.Class.CONTEXT_SPECIFIC,
                  altName.type,
                  false,
                  value
                )
              );
            }
          } else if (e.name === "subjectKeyIdentifier" && options.cert) {
            var ski = options.cert.generateSubjectKeyIdentifier();
            e.subjectKeyIdentifier = ski.toHex();
            // OCTETSTRING w/digest
            e.value = asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.OCTETSTRING,
              false,
              ski.getBytes()
            );
          } else if (e.name === "authorityKeyIdentifier" && options.cert) {
            // SYNTAX SEQUENCE
            e.value = asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.SEQUENCE,
              true,
              []
            );
            var seq = e.value.value;

            if (e.keyIdentifier) {
              var keyIdentifier =
                e.keyIdentifier === true
                  ? options.cert.generateSubjectKeyIdentifier().getBytes()
                  : e.keyIdentifier;
              seq.push(
                asn1.create(
                  asn1.Class.CONTEXT_SPECIFIC,
                  0,
                  false,
                  keyIdentifier
                )
              );
            }

            if (e.authorityCertIssuer) {
              var authorityCertIssuer = [
                asn1.create(asn1.Class.CONTEXT_SPECIFIC, 4, true, [
                  _dnToAsn1(
                    e.authorityCertIssuer === true
                      ? options.cert.issuer
                      : e.authorityCertIssuer
                  )
                ])
              ];
              seq.push(
                asn1.create(
                  asn1.Class.CONTEXT_SPECIFIC,
                  1,
                  true,
                  authorityCertIssuer
                )
              );
            }

            if (e.serialNumber) {
              var serialNumber = forge.util.hexToBytes(
                e.serialNumber === true
                  ? options.cert.serialNumber
                  : e.serialNumber
              );
              seq.push(
                asn1.create(asn1.Class.CONTEXT_SPECIFIC, 2, false, serialNumber)
              );
            }
          } else if (e.name === "cRLDistributionPoints") {
            e.value = asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.SEQUENCE,
              true,
              []
            );
            var seq = e.value.value;

            // Create sub SEQUENCE of DistributionPointName
            var subSeq = asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.SEQUENCE,
              true,
              []
            );

            // Create fullName CHOICE
            var fullNameGeneralNames = asn1.create(
              asn1.Class.CONTEXT_SPECIFIC,
              0,
              true,
              []
            );
            var altName;
            for (var n = 0; n < e.altNames.length; ++n) {
              altName = e.altNames[n];
              var value = altName.value;
              // handle IP
              if (altName.type === 7 && altName.ip) {
                value = forge.util.bytesFromIP(altName.ip);
                if (value === null) {
                  var error = new Error(
                    'Extension "ip" value is not a valid IPv4 or IPv6 address.'
                  );
                  error.extension = e;
                  throw error;
                }
              } else if (altName.type === 8) {
                // handle OID
                if (altName.oid) {
                  value = asn1.oidToDer(asn1.oidToDer(altName.oid));
                } else {
                  // deprecated ... convert value to OID
                  value = asn1.oidToDer(value);
                }
              }
              fullNameGeneralNames.value.push(
                asn1.create(
                  asn1.Class.CONTEXT_SPECIFIC,
                  altName.type,
                  false,
                  value
                )
              );
            }

            // Add to the parent SEQUENCE
            subSeq.value.push(
              asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
                fullNameGeneralNames
              ])
            );
            seq.push(subSeq);
          }

          // ensure value has been defined by now
          if (typeof e.value === "undefined") {
            var error = new Error("Extension value not specified.");
            error.extension = e;
            throw error;
          }

          return e;
        }

        /**
 * Convert signature parameters object to ASN.1
 *
 * @param {String} oid Signature algorithm OID
 * @param params The signature parametrs object
 * @return ASN.1 object representing signature parameters
 */
        function _signatureParametersToAsn1(oid, params) {
          switch (oid) {
            case oids["RSASSA-PSS"]:
              var parts = [];

              if (params.hash.algorithmOid !== undefined) {
                parts.push(
                  asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
                    asn1.create(
                      asn1.Class.UNIVERSAL,
                      asn1.Type.SEQUENCE,
                      true,
                      [
                        asn1.create(
                          asn1.Class.UNIVERSAL,
                          asn1.Type.OID,
                          false,
                          asn1.oidToDer(params.hash.algorithmOid).getBytes()
                        ),
                        asn1.create(
                          asn1.Class.UNIVERSAL,
                          asn1.Type.NULL,
                          false,
                          ""
                        )
                      ]
                    )
                  ])
                );
              }

              if (params.mgf.algorithmOid !== undefined) {
                parts.push(
                  asn1.create(asn1.Class.CONTEXT_SPECIFIC, 1, true, [
                    asn1.create(
                      asn1.Class.UNIVERSAL,
                      asn1.Type.SEQUENCE,
                      true,
                      [
                        asn1.create(
                          asn1.Class.UNIVERSAL,
                          asn1.Type.OID,
                          false,
                          asn1.oidToDer(params.mgf.algorithmOid).getBytes()
                        ),
                        asn1.create(
                          asn1.Class.UNIVERSAL,
                          asn1.Type.SEQUENCE,
                          true,
                          [
                            asn1.create(
                              asn1.Class.UNIVERSAL,
                              asn1.Type.OID,
                              false,
                              asn1
                                .oidToDer(params.mgf.hash.algorithmOid)
                                .getBytes()
                            ),
                            asn1.create(
                              asn1.Class.UNIVERSAL,
                              asn1.Type.NULL,
                              false,
                              ""
                            )
                          ]
                        )
                      ]
                    )
                  ])
                );
              }

              if (params.saltLength !== undefined) {
                parts.push(
                  asn1.create(asn1.Class.CONTEXT_SPECIFIC, 2, true, [
                    asn1.create(
                      asn1.Class.UNIVERSAL,
                      asn1.Type.INTEGER,
                      false,
                      asn1.integerToDer(params.saltLength).getBytes()
                    )
                  ])
                );
              }

              return asn1.create(
                asn1.Class.UNIVERSAL,
                asn1.Type.SEQUENCE,
                true,
                parts
              );

            default:
              return asn1.create(
                asn1.Class.UNIVERSAL,
                asn1.Type.NULL,
                false,
                ""
              );
          }
        }

        /**
 * Converts a certification request's attributes to an ASN.1 set of
 * CRIAttributes.
 *
 * @param csr certification request.
 *
 * @return the ASN.1 set of CRIAttributes.
 */
        function _CRIAttributesToAsn1(csr) {
          // create an empty context-specific container
          var rval = asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, []);

          // no attributes, return empty container
          if (csr.attributes.length === 0) {
            return rval;
          }

          // each attribute has a sequence with a type and a set of values
          var attrs = csr.attributes;
          for (var i = 0; i < attrs.length; ++i) {
            var attr = attrs[i];
            var value = attr.value;

            // reuse tag class for attribute value if available
            var valueTagClass = asn1.Type.UTF8;
            if ("valueTagClass" in attr) {
              valueTagClass = attr.valueTagClass;
            }
            if (valueTagClass === asn1.Type.UTF8) {
              value = forge.util.encodeUtf8(value);
            }
            var valueConstructed = false;
            if ("valueConstructed" in attr) {
              valueConstructed = attr.valueConstructed;
            }
            // FIXME: handle more encodings

            // create a RelativeDistinguishedName set
            // each value in the set is an AttributeTypeAndValue first
            // containing the type (an OID) and second the value
            var seq = asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.SEQUENCE,
              true,
              [
                // AttributeType
                asn1.create(
                  asn1.Class.UNIVERSAL,
                  asn1.Type.OID,
                  false,
                  asn1.oidToDer(attr.type).getBytes()
                ),
                asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, [
                  // AttributeValue
                  asn1.create(
                    asn1.Class.UNIVERSAL,
                    valueTagClass,
                    valueConstructed,
                    value
                  )
                ])
              ]
            );
            rval.value.push(seq);
          }

          return rval;
        }

        /**
 * Gets the ASN.1 TBSCertificate part of an X.509v3 certificate.
 *
 * @param cert the certificate.
 *
 * @return the asn1 TBSCertificate.
 */
        pki.getTBSCertificate = function(cert) {
          // TBSCertificate
          var tbs = asn1.create(
            asn1.Class.UNIVERSAL,
            asn1.Type.SEQUENCE,
            true,
            [
              // version
              asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
                // integer
                asn1.create(
                  asn1.Class.UNIVERSAL,
                  asn1.Type.INTEGER,
                  false,
                  asn1.integerToDer(cert.version).getBytes()
                )
              ]),
              // serialNumber
              asn1.create(
                asn1.Class.UNIVERSAL,
                asn1.Type.INTEGER,
                false,
                forge.util.hexToBytes(cert.serialNumber)
              ),
              // signature
              asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
                // algorithm
                asn1.create(
                  asn1.Class.UNIVERSAL,
                  asn1.Type.OID,
                  false,
                  asn1.oidToDer(cert.siginfo.algorithmOid).getBytes()
                ),
                // parameters
                _signatureParametersToAsn1(
                  cert.siginfo.algorithmOid,
                  cert.siginfo.parameters
                )
              ]),
              // issuer
              _dnToAsn1(cert.issuer),
              // validity
              asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
                // notBefore
                asn1.create(
                  asn1.Class.UNIVERSAL,
                  asn1.Type.UTCTIME,
                  false,
                  asn1.dateToUtcTime(cert.validity.notBefore)
                ),
                // notAfter
                asn1.create(
                  asn1.Class.UNIVERSAL,
                  asn1.Type.UTCTIME,
                  false,
                  asn1.dateToUtcTime(cert.validity.notAfter)
                )
              ]),
              // subject
              _dnToAsn1(cert.subject),
              // SubjectPublicKeyInfo
              pki.publicKeyToAsn1(cert.publicKey)
            ]
          );

          if (cert.issuer.uniqueId) {
            // issuerUniqueID (optional)
            tbs.value.push(
              asn1.create(asn1.Class.CONTEXT_SPECIFIC, 1, true, [
                asn1.create(
                  asn1.Class.UNIVERSAL,
                  asn1.Type.BITSTRING,
                  false,
                  // TODO: support arbitrary bit length ids
                  String.fromCharCode(0x00) + cert.issuer.uniqueId
                )
              ])
            );
          }
          if (cert.subject.uniqueId) {
            // subjectUniqueID (optional)
            tbs.value.push(
              asn1.create(asn1.Class.CONTEXT_SPECIFIC, 2, true, [
                asn1.create(
                  asn1.Class.UNIVERSAL,
                  asn1.Type.BITSTRING,
                  false,
                  // TODO: support arbitrary bit length ids
                  String.fromCharCode(0x00) + cert.subject.uniqueId
                )
              ])
            );
          }

          if (cert.extensions.length > 0) {
            // extensions (optional)
            tbs.value.push(pki.certificateExtensionsToAsn1(cert.extensions));
          }

          return tbs;
        };

        /**
 * Gets the ASN.1 CertificationRequestInfo part of a
 * PKCS#10 CertificationRequest.
 *
 * @param csr the certification request.
 *
 * @return the asn1 CertificationRequestInfo.
 */
        pki.getCertificationRequestInfo = function(csr) {
          // CertificationRequestInfo
          var cri = asn1.create(
            asn1.Class.UNIVERSAL,
            asn1.Type.SEQUENCE,
            true,
            [
              // version
              asn1.create(
                asn1.Class.UNIVERSAL,
                asn1.Type.INTEGER,
                false,
                asn1.integerToDer(csr.version).getBytes()
              ),
              // subject
              _dnToAsn1(csr.subject),
              // SubjectPublicKeyInfo
              pki.publicKeyToAsn1(csr.publicKey),
              // attributes
              _CRIAttributesToAsn1(csr)
            ]
          );

          return cri;
        };

        /**
 * Converts a DistinguishedName (subject or issuer) to an ASN.1 object.
 *
 * @param dn the DistinguishedName.
 *
 * @return the asn1 representation of a DistinguishedName.
 */
        pki.distinguishedNameToAsn1 = function(dn) {
          return _dnToAsn1(dn);
        };

        /**
 * Converts an X.509v3 RSA certificate to an ASN.1 object.
 *
 * @param cert the certificate.
 *
 * @return the asn1 representation of an X.509v3 RSA certificate.
 */
        pki.certificateToAsn1 = function(cert) {
          // prefer cached TBSCertificate over generating one
          var tbsCertificate =
            cert.tbsCertificate || pki.getTBSCertificate(cert);

          // Certificate
          return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
            // TBSCertificate
            tbsCertificate,
            // AlgorithmIdentifier (signature algorithm)
            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
              // algorithm
              asn1.create(
                asn1.Class.UNIVERSAL,
                asn1.Type.OID,
                false,
                asn1.oidToDer(cert.signatureOid).getBytes()
              ),
              // parameters
              _signatureParametersToAsn1(
                cert.signatureOid,
                cert.signatureParameters
              )
            ]),
            // SignatureValue
            asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.BITSTRING,
              false,
              String.fromCharCode(0x00) + cert.signature
            )
          ]);
        };

        /**
 * Converts X.509v3 certificate extensions to ASN.1.
 *
 * @param exts the extensions to convert.
 *
 * @return the extensions in ASN.1 format.
 */
        pki.certificateExtensionsToAsn1 = function(exts) {
          // create top-level extension container
          var rval = asn1.create(asn1.Class.CONTEXT_SPECIFIC, 3, true, []);

          // create extension sequence (stores a sequence for each extension)
          var seq = asn1.create(
            asn1.Class.UNIVERSAL,
            asn1.Type.SEQUENCE,
            true,
            []
          );
          rval.value.push(seq);

          for (var i = 0; i < exts.length; ++i) {
            seq.value.push(pki.certificateExtensionToAsn1(exts[i]));
          }

          return rval;
        };

        /**
 * Converts a single certificate extension to ASN.1.
 *
 * @param ext the extension to convert.
 *
 * @return the extension in ASN.1 format.
 */
        pki.certificateExtensionToAsn1 = function(ext) {
          // create a sequence for each extension
          var extseq = asn1.create(
            asn1.Class.UNIVERSAL,
            asn1.Type.SEQUENCE,
            true,
            []
          );

          // extnID (OID)
          extseq.value.push(
            asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.OID,
              false,
              asn1.oidToDer(ext.id).getBytes()
            )
          );

          // critical defaults to false
          if (ext.critical) {
            // critical BOOLEAN DEFAULT FALSE
            extseq.value.push(
              asn1.create(
                asn1.Class.UNIVERSAL,
                asn1.Type.BOOLEAN,
                false,
                String.fromCharCode(0xff)
              )
            );
          }

          var value = ext.value;
          if (typeof ext.value !== "string") {
            // value is asn.1
            value = asn1.toDer(value).getBytes();
          }

          // extnValue (OCTET STRING)
          extseq.value.push(
            asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.OCTETSTRING,
              false,
              value
            )
          );

          return extseq;
        };

        /**
 * Converts a PKCS#10 certification request to an ASN.1 object.
 *
 * @param csr the certification request.
 *
 * @return the asn1 representation of a certification request.
 */
        pki.certificationRequestToAsn1 = function(csr) {
          // prefer cached CertificationRequestInfo over generating one
          var cri =
            csr.certificationRequestInfo ||
            pki.getCertificationRequestInfo(csr);

          // Certificate
          return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
            // CertificationRequestInfo
            cri,
            // AlgorithmIdentifier (signature algorithm)
            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
              // algorithm
              asn1.create(
                asn1.Class.UNIVERSAL,
                asn1.Type.OID,
                false,
                asn1.oidToDer(csr.signatureOid).getBytes()
              ),
              // parameters
              _signatureParametersToAsn1(
                csr.signatureOid,
                csr.signatureParameters
              )
            ]),
            // signature
            asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.BITSTRING,
              false,
              String.fromCharCode(0x00) + csr.signature
            )
          ]);
        };

        /**
 * Creates a CA store.
 *
 * @param certs an optional array of certificate objects or PEM-formatted
 *          certificate strings to add to the CA store.
 *
 * @return the CA store.
 */
        pki.createCaStore = function(certs) {
          // create CA store
          var caStore = {
            // stored certificates
            certs: {}
          };

          /**
   * Gets the certificate that issued the passed certificate or its
   * 'parent'.
   *
   * @param cert the certificate to get the parent for.
   *
   * @return the parent certificate or null if none was found.
   */
          caStore.getIssuer = function(cert) {
            var rval = getBySubject(cert.issuer);

            // see if there are multiple matches
            /*if(forge.util.isArray(rval)) {
      // TODO: resolve multiple matches by checking
      // authorityKey/subjectKey/issuerUniqueID/other identifiers, etc.
      // FIXME: or alternatively do authority key mapping
      // if possible (X.509v1 certs can't work?)
      throw new Error('Resolving multiple issuer matches not implemented yet.');
    }*/

            return rval;
          };

          /**
   * Adds a trusted certificate to the store.
   *
   * @param cert the certificate to add as a trusted certificate (either a
   *          pki.certificate object or a PEM-formatted certificate).
   */
          caStore.addCertificate = function(cert) {
            // convert from pem if necessary
            if (typeof cert === "string") {
              cert = forge.pki.certificateFromPem(cert);
            }

            ensureSubjectHasHash(cert.subject);

            if (!caStore.hasCertificate(cert)) {
              // avoid duplicate certificates in store
              if (cert.subject.hash in caStore.certs) {
                // subject hash already exists, append to array
                var tmp = caStore.certs[cert.subject.hash];
                if (!forge.util.isArray(tmp)) {
                  tmp = [tmp];
                }
                tmp.push(cert);
                caStore.certs[cert.subject.hash] = tmp;
              } else {
                caStore.certs[cert.subject.hash] = cert;
              }
            }
          };

          /**
   * Checks to see if the given certificate is in the store.
   *
   * @param cert the certificate to check (either a pki.certificate or a
   *          PEM-formatted certificate).
   *
   * @return true if the certificate is in the store, false if not.
   */
          caStore.hasCertificate = function(cert) {
            // convert from pem if necessary
            if (typeof cert === "string") {
              cert = forge.pki.certificateFromPem(cert);
            }

            var match = getBySubject(cert.subject);
            if (!match) {
              return false;
            }
            if (!forge.util.isArray(match)) {
              match = [match];
            }
            // compare DER-encoding of certificates
            var der1 = asn1.toDer(pki.certificateToAsn1(cert)).getBytes();
            for (var i = 0; i < match.length; ++i) {
              var der2 = asn1.toDer(pki.certificateToAsn1(match[i])).getBytes();
              if (der1 === der2) {
                return true;
              }
            }
            return false;
          };

          /**
   * Lists all of the certificates kept in the store.
   *
   * @return an array of all of the pki.certificate objects in the store.
   */
          caStore.listAllCertificates = function() {
            var certList = [];

            for (var hash in caStore.certs) {
              if (caStore.certs.hasOwnProperty(hash)) {
                var value = caStore.certs[hash];
                if (!forge.util.isArray(value)) {
                  certList.push(value);
                } else {
                  for (var i = 0; i < value.length; ++i) {
                    certList.push(value[i]);
                  }
                }
              }
            }

            return certList;
          };

          /**
   * Removes a certificate from the store.
   *
   * @param cert the certificate to remove (either a pki.certificate or a
   *          PEM-formatted certificate).
   *
   * @return the certificate that was removed or null if the certificate
   *           wasn't in store.
   */
          caStore.removeCertificate = function(cert) {
            var result;

            // convert from pem if necessary
            if (typeof cert === "string") {
              cert = forge.pki.certificateFromPem(cert);
            }
            ensureSubjectHasHash(cert.subject);
            if (!caStore.hasCertificate(cert)) {
              return null;
            }

            var match = getBySubject(cert.subject);

            if (!forge.util.isArray(match)) {
              result = caStore.certs[cert.subject.hash];
              delete caStore.certs[cert.subject.hash];
              return result;
            }

            // compare DER-encoding of certificates
            var der1 = asn1.toDer(pki.certificateToAsn1(cert)).getBytes();
            for (var i = 0; i < match.length; ++i) {
              var der2 = asn1.toDer(pki.certificateToAsn1(match[i])).getBytes();
              if (der1 === der2) {
                result = match[i];
                match.splice(i, 1);
              }
            }
            if (match.length === 0) {
              delete caStore.certs[cert.subject.hash];
            }

            return result;
          };

          function getBySubject(subject) {
            ensureSubjectHasHash(subject);
            return caStore.certs[subject.hash] || null;
          }

          function ensureSubjectHasHash(subject) {
            // produce subject hash if it doesn't exist
            if (!subject.hash) {
              var md = forge.md.sha1.create();
              subject.attributes = pki.RDNAttributesAsArray(
                _dnToAsn1(subject),
                md
              );
              subject.hash = md.digest().toHex();
            }
          }

          // auto-add passed in certs
          if (certs) {
            // parse PEM-formatted certificates as necessary
            for (var i = 0; i < certs.length; ++i) {
              var cert = certs[i];
              caStore.addCertificate(cert);
            }
          }

          return caStore;
        };

        /**
 * Certificate verification errors, based on TLS.
 */
        pki.certificateError = {
          bad_certificate: "forge.pki.BadCertificate",
          unsupported_certificate: "forge.pki.UnsupportedCertificate",
          certificate_revoked: "forge.pki.CertificateRevoked",
          certificate_expired: "forge.pki.CertificateExpired",
          certificate_unknown: "forge.pki.CertificateUnknown",
          unknown_ca: "forge.pki.UnknownCertificateAuthority"
        };

        /**
 * Verifies a certificate chain against the given Certificate Authority store
 * with an optional custom verify callback.
 *
 * @param caStore a certificate store to verify against.
 * @param chain the certificate chain to verify, with the root or highest
 *          authority at the end (an array of certificates).
 * @param verify called for every certificate in the chain.
 *
 * The verify callback has the following signature:
 *
 * verified - Set to true if certificate was verified, otherwise the
 *   pki.certificateError for why the certificate failed.
 * depth - The current index in the chain, where 0 is the end point's cert.
 * certs - The certificate chain, *NOTE* an empty chain indicates an anonymous
 *   end point.
 *
 * The function returns true on success and on failure either the appropriate
 * pki.certificateError or an object with 'error' set to the appropriate
 * pki.certificateError and 'message' set to a custom error message.
 *
 * @return true if successful, error thrown if not.
 */
        pki.verifyCertificateChain = function(caStore, chain, verify) {
          /* From: RFC3280 - Internet X.509 Public Key Infrastructure Certificate
    Section 6: Certification Path Validation
    See inline parentheticals related to this particular implementation.

    The primary goal of path validation is to verify the binding between
    a subject distinguished name or a subject alternative name and subject
    public key, as represented in the end entity certificate, based on the
    public key of the trust anchor. This requires obtaining a sequence of
    certificates that support that binding. That sequence should be provided
    in the passed 'chain'. The trust anchor should be in the given CA
    store. The 'end entity' certificate is the certificate provided by the
    end point (typically a server) and is the first in the chain.

    To meet this goal, the path validation process verifies, among other
    things, that a prospective certification path (a sequence of n
    certificates or a 'chain') satisfies the following conditions:

    (a) for all x in {1, ..., n-1}, the subject of certificate x is
          the issuer of certificate x+1;

    (b) certificate 1 is issued by the trust anchor;

    (c) certificate n is the certificate to be validated; and

    (d) for all x in {1, ..., n}, the certificate was valid at the
          time in question.

    Note that here 'n' is index 0 in the chain and 1 is the last certificate
    in the chain and it must be signed by a certificate in the connection's
    CA store.

    The path validation process also determines the set of certificate
    policies that are valid for this path, based on the certificate policies
    extension, policy mapping extension, policy constraints extension, and
    inhibit any-policy extension.

    Note: Policy mapping extension not supported (Not Required).

    Note: If the certificate has an unsupported critical extension, then it
    must be rejected.

    Note: A certificate is self-issued if the DNs that appear in the subject
    and issuer fields are identical and are not empty.

    The path validation algorithm assumes the following seven inputs are
    provided to the path processing logic. What this specific implementation
    will use is provided parenthetically:

    (a) a prospective certification path of length n (the 'chain')
    (b) the current date/time: ('now').
    (c) user-initial-policy-set: A set of certificate policy identifiers
          naming the policies that are acceptable to the certificate user.
          The user-initial-policy-set contains the special value any-policy
          if the user is not concerned about certificate policy
          (Not implemented. Any policy is accepted).
    (d) trust anchor information, describing a CA that serves as a trust
          anchor for the certification path. The trust anchor information
          includes:

      (1)  the trusted issuer name,
      (2)  the trusted public key algorithm,
      (3)  the trusted public key, and
      (4)  optionally, the trusted public key parameters associated
             with the public key.

      (Trust anchors are provided via certificates in the CA store).

      The trust anchor information may be provided to the path processing
      procedure in the form of a self-signed certificate. The trusted anchor
      information is trusted because it was delivered to the path processing
      procedure by some trustworthy out-of-band procedure. If the trusted
      public key algorithm requires parameters, then the parameters are
      provided along with the trusted public key (No parameters used in this
      implementation).

    (e) initial-policy-mapping-inhibit, which indicates if policy mapping is
          allowed in the certification path.
          (Not implemented, no policy checking)

    (f) initial-explicit-policy, which indicates if the path must be valid
          for at least one of the certificate policies in the user-initial-
          policy-set.
          (Not implemented, no policy checking)

    (g) initial-any-policy-inhibit, which indicates whether the
          anyPolicy OID should be processed if it is included in a
          certificate.
          (Not implemented, so any policy is valid provided that it is
          not marked as critical) */

          /* Basic Path Processing:

    For each certificate in the 'chain', the following is checked:

    1. The certificate validity period includes the current time.
    2. The certificate was signed by its parent (where the parent is either
       the next in the chain or from the CA store). Allow processing to
       continue to the next step if no parent is found but the certificate is
       in the CA store.
    3. TODO: The certificate has not been revoked.
    4. The certificate issuer name matches the parent's subject name.
    5. TODO: If the certificate is self-issued and not the final certificate
       in the chain, skip this step, otherwise verify that the subject name
       is within one of the permitted subtrees of X.500 distinguished names
       and that each of the alternative names in the subjectAltName extension
       (critical or non-critical) is within one of the permitted subtrees for
       that name type.
    6. TODO: If the certificate is self-issued and not the final certificate
       in the chain, skip this step, otherwise verify that the subject name
       is not within one of the excluded subtrees for X.500 distinguished
       names and none of the subjectAltName extension names are excluded for
       that name type.
    7. The other steps in the algorithm for basic path processing involve
       handling the policy extension which is not presently supported in this
       implementation. Instead, if a critical policy extension is found, the
       certificate is rejected as not supported.
    8. If the certificate is not the first or if its the only certificate in
       the chain (having no parent from the CA store or is self-signed) and it
       has a critical key usage extension, verify that the keyCertSign bit is
       set. If the key usage extension exists, verify that the basic
       constraints extension exists. If the basic constraints extension exists,
       verify that the cA flag is set. If pathLenConstraint is set, ensure that
       the number of certificates that precede in the chain (come earlier
       in the chain as implemented below), excluding the very first in the
       chain (typically the end-entity one), isn't greater than the
       pathLenConstraint. This constraint limits the number of intermediate
       CAs that may appear below a CA before only end-entity certificates
       may be issued. */

          // copy cert chain references to another array to protect against changes
          // in verify callback
          chain = chain.slice(0);
          var certs = chain.slice(0);

          // get current date
          var now = new Date();

          // verify each cert in the chain using its parent, where the parent
          // is either the next in the chain or from the CA store
          var first = true;
          var error = null;
          var depth = 0;
          do {
            var cert = chain.shift();
            var parent = null;
            var selfSigned = false;

            // 1. check valid time
            if (now < cert.validity.notBefore || now > cert.validity.notAfter) {
              error = {
                message: "Certificate is not valid yet or has expired.",
                error: pki.certificateError.certificate_expired,
                notBefore: cert.validity.notBefore,
                notAfter: cert.validity.notAfter,
                now: now
              };
            }

            // 2. verify with parent from chain or CA store
            if (error === null) {
              parent = chain[0] || caStore.getIssuer(cert);
              if (parent === null) {
                // check for self-signed cert
                if (cert.isIssuer(cert)) {
                  selfSigned = true;
                  parent = cert;
                }
              }

              if (parent) {
                // FIXME: current CA store implementation might have multiple
                // certificates where the issuer can't be determined from the
                // certificate (happens rarely with, eg: old certificates) so normalize
                // by always putting parents into an array
                // TODO: there's may be an extreme degenerate case currently uncovered
                // where an old intermediate certificate seems to have a matching parent
                // but none of the parents actually verify ... but the intermediate
                // is in the CA and it should pass this check; needs investigation
                var parents = parent;
                if (!forge.util.isArray(parents)) {
                  parents = [parents];
                }

                // try to verify with each possible parent (typically only one)
                var verified = false;
                while (!verified && parents.length > 0) {
                  parent = parents.shift();
                  try {
                    verified = parent.verify(cert);
                  } catch (ex) {
                    // failure to verify, don't care why, try next one
                  }
                }

                if (!verified) {
                  error = {
                    message: "Certificate signature is invalid.",
                    error: pki.certificateError.bad_certificate
                  };
                }
              }

              if (
                error === null &&
                (!parent || selfSigned) &&
                !caStore.hasCertificate(cert)
              ) {
                // no parent issuer and certificate itself is not trusted
                error = {
                  message: "Certificate is not trusted.",
                  error: pki.certificateError.unknown_ca
                };
              }
            }

            // TODO: 3. check revoked

            // 4. check for matching issuer/subject
            if (error === null && parent && !cert.isIssuer(parent)) {
              // parent is not issuer
              error = {
                message: "Certificate issuer is invalid.",
                error: pki.certificateError.bad_certificate
              };
            }

            // 5. TODO: check names with permitted names tree

            // 6. TODO: check names against excluded names tree

            // 7. check for unsupported critical extensions
            if (error === null) {
              // supported extensions
              var se = {
                keyUsage: true,
                basicConstraints: true
              };
              for (
                var i = 0;
                error === null && i < cert.extensions.length;
                ++i
              ) {
                var ext = cert.extensions[i];
                if (ext.critical && !(ext.name in se)) {
                  error = {
                    message:
                      "Certificate has an unsupported critical extension.",
                    error: pki.certificateError.unsupported_certificate
                  };
                }
              }
            }

            // 8. check for CA if cert is not first or is the only certificate
            // remaining in chain with no parent or is self-signed
            if (
              error === null &&
              (!first || (chain.length === 0 && (!parent || selfSigned)))
            ) {
              // first check keyUsage extension and then basic constraints
              var bcExt = cert.getExtension("basicConstraints");
              var keyUsageExt = cert.getExtension("keyUsage");
              if (keyUsageExt !== null) {
                // keyCertSign must be true and there must be a basic
                // constraints extension
                if (!keyUsageExt.keyCertSign || bcExt === null) {
                  // bad certificate
                  error = {
                    message:
                      "Certificate keyUsage or basicConstraints conflict " +
                      "or indicate that the certificate is not a CA. " +
                      "If the certificate is the only one in the chain or " +
                      "isn't the first then the certificate must be a " +
                      "valid CA.",
                    error: pki.certificateError.bad_certificate
                  };
                }
              }
              // basic constraints cA flag must be set
              if (error === null && bcExt !== null && !bcExt.cA) {
                // bad certificate
                error = {
                  message:
                    "Certificate basicConstraints indicates the certificate " +
                    "is not a CA.",
                  error: pki.certificateError.bad_certificate
                };
              }
              // if error is not null and keyUsage is available, then we know it
              // has keyCertSign and there is a basic constraints extension too,
              // which means we can check pathLenConstraint (if it exists)
              if (
                error === null &&
                keyUsageExt !== null &&
                "pathLenConstraint" in bcExt
              ) {
                // pathLen is the maximum # of intermediate CA certs that can be
                // found between the current certificate and the end-entity (depth 0)
                // certificate; this number does not include the end-entity (depth 0,
                // last in the chain) even if it happens to be a CA certificate itself
                var pathLen = depth - 1;
                if (pathLen > bcExt.pathLenConstraint) {
                  // pathLenConstraint violated, bad certificate
                  error = {
                    message:
                      "Certificate basicConstraints pathLenConstraint violated.",
                    error: pki.certificateError.bad_certificate
                  };
                }
              }
            }

            // call application callback
            var vfd = error === null ? true : error.error;
            var ret = verify ? verify(vfd, depth, certs) : vfd;
            if (ret === true) {
              // clear any set error
              error = null;
            } else {
              // if passed basic tests, set default message and alert
              if (vfd === true) {
                error = {
                  message: "The application rejected the certificate.",
                  error: pki.certificateError.bad_certificate
                };
              }

              // check for custom error info
              if (ret || ret === 0) {
                // set custom message and error
                if (typeof ret === "object" && !forge.util.isArray(ret)) {
                  if (ret.message) {
                    error.message = ret.message;
                  }
                  if (ret.error) {
                    error.error = ret.error;
                  }
                } else if (typeof ret === "string") {
                  // set custom error
                  error.error = ret;
                }
              }

              // throw error
              throw error;
            }

            // no longer first cert in chain
            first = false;
            ++depth;
          } while (chain.length > 0);

          return true;
        };

        /***/
      },
      /* 48 */
      /***/ function(module, exports, __webpack_require__) {
        /**
 * Javascript implementation of PKCS#1 PSS signature padding.
 *
 * @author Stefan Siegl
 *
 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
 */
        var forge = __webpack_require__(1);
        __webpack_require__(9);
        __webpack_require__(3);

        // shortcut for PSS API
        var pss = (module.exports = forge.pss = forge.pss || {});

        /**
 * Creates a PSS signature scheme object.
 *
 * There are several ways to provide a salt for encoding:
 *
 * 1. Specify the saltLength only and the built-in PRNG will generate it.
 * 2. Specify the saltLength and a custom PRNG with 'getBytesSync' defined that
 *   will be used.
 * 3. Specify the salt itself as a forge.util.ByteBuffer.
 *
 * @param options the options to use:
 *          md the message digest object to use, a forge md instance.
 *          mgf the mask generation function to use, a forge mgf instance.
 *          [saltLength] the length of the salt in octets.
 *          [prng] the pseudo-random number generator to use to produce a salt.
 *          [salt] the salt to use when encoding.
 *
 * @return a signature scheme object.
 */
        pss.create = function(options) {
          // backwards compatibility w/legacy args: hash, mgf, sLen
          if (arguments.length === 3) {
            options = {
              md: arguments[0],
              mgf: arguments[1],
              saltLength: arguments[2]
            };
          }

          var hash = options.md;
          var mgf = options.mgf;
          var hLen = hash.digestLength;

          var salt_ = options.salt || null;
          if (typeof salt_ === "string") {
            // assume binary-encoded string
            salt_ = forge.util.createBuffer(salt_);
          }

          var sLen;
          if ("saltLength" in options) {
            sLen = options.saltLength;
          } else if (salt_ !== null) {
            sLen = salt_.length();
          } else {
            throw new Error(
              "Salt length not specified or specific salt not given."
            );
          }

          if (salt_ !== null && salt_.length() !== sLen) {
            throw new Error(
              "Given salt length does not match length of given salt."
            );
          }

          var prng = options.prng || forge.random;

          var pssobj = {};

          /**
   * Encodes a PSS signature.
   *
   * This function implements EMSA-PSS-ENCODE as per RFC 3447, section 9.1.1.
   *
   * @param md the message digest object with the hash to sign.
   * @param modsBits the length of the RSA modulus in bits.
   *
   * @return the encoded message as a binary-encoded string of length
   *           ceil((modBits - 1) / 8).
   */
          pssobj.encode = function(md, modBits) {
            var i;
            var emBits = modBits - 1;
            var emLen = Math.ceil(emBits / 8);

            /* 2. Let mHash = Hash(M), an octet string of length hLen. */
            var mHash = md.digest().getBytes();

            /* 3. If emLen < hLen + sLen + 2, output "encoding error" and stop. */
            if (emLen < hLen + sLen + 2) {
              throw new Error("Message is too long to encrypt.");
            }

            /* 4. Generate a random octet string salt of length sLen; if sLen = 0,
     *    then salt is the empty string. */
            var salt;
            if (salt_ === null) {
              salt = prng.getBytesSync(sLen);
            } else {
              salt = salt_.bytes();
            }

            /* 5. Let M' = (0x)00 00 00 00 00 00 00 00 || mHash || salt; */
            var m_ = new forge.util.ByteBuffer();
            m_.fillWithByte(0, 8);
            m_.putBytes(mHash);
            m_.putBytes(salt);

            /* 6. Let H = Hash(M'), an octet string of length hLen. */
            hash.start();
            hash.update(m_.getBytes());
            var h = hash.digest().getBytes();

            /* 7. Generate an octet string PS consisting of emLen - sLen - hLen - 2
     *    zero octets.  The length of PS may be 0. */
            var ps = new forge.util.ByteBuffer();
            ps.fillWithByte(0, emLen - sLen - hLen - 2);

            /* 8. Let DB = PS || 0x01 || salt; DB is an octet string of length
     *    emLen - hLen - 1. */
            ps.putByte(0x01);
            ps.putBytes(salt);
            var db = ps.getBytes();

            /* 9. Let dbMask = MGF(H, emLen - hLen - 1). */
            var maskLen = emLen - hLen - 1;
            var dbMask = mgf.generate(h, maskLen);

            /* 10. Let maskedDB = DB \xor dbMask. */
            var maskedDB = "";
            for (i = 0; i < maskLen; i++) {
              maskedDB += String.fromCharCode(
                db.charCodeAt(i) ^ dbMask.charCodeAt(i)
              );
            }

            /* 11. Set the leftmost 8emLen - emBits bits of the leftmost octet in
     *     maskedDB to zero. */
            var mask = (0xff00 >> (8 * emLen - emBits)) & 0xff;
            maskedDB =
              String.fromCharCode(maskedDB.charCodeAt(0) & ~mask) +
              maskedDB.substr(1);

            /* 12. Let EM = maskedDB || H || 0xbc.
     * 13. Output EM. */
            return maskedDB + h + String.fromCharCode(0xbc);
          };

          /**
   * Verifies a PSS signature.
   *
   * This function implements EMSA-PSS-VERIFY as per RFC 3447, section 9.1.2.
   *
   * @param mHash the message digest hash, as a binary-encoded string, to
   *         compare against the signature.
   * @param em the encoded message, as a binary-encoded string
   *          (RSA decryption result).
   * @param modsBits the length of the RSA modulus in bits.
   *
   * @return true if the signature was verified, false if not.
   */
          pssobj.verify = function(mHash, em, modBits) {
            var i;
            var emBits = modBits - 1;
            var emLen = Math.ceil(emBits / 8);

            /* c. Convert the message representative m to an encoded message EM
     *    of length emLen = ceil((modBits - 1) / 8) octets, where modBits
     *    is the length in bits of the RSA modulus n */
            em = em.substr(-emLen);

            /* 3. If emLen < hLen + sLen + 2, output "inconsistent" and stop. */
            if (emLen < hLen + sLen + 2) {
              throw new Error(
                "Inconsistent parameters to PSS signature verification."
              );
            }

            /* 4. If the rightmost octet of EM does not have hexadecimal value
     *    0xbc, output "inconsistent" and stop. */
            if (em.charCodeAt(emLen - 1) !== 0xbc) {
              throw new Error("Encoded message does not end in 0xBC.");
            }

            /* 5. Let maskedDB be the leftmost emLen - hLen - 1 octets of EM, and
     *    let H be the next hLen octets. */
            var maskLen = emLen - hLen - 1;
            var maskedDB = em.substr(0, maskLen);
            var h = em.substr(maskLen, hLen);

            /* 6. If the leftmost 8emLen - emBits bits of the leftmost octet in
     *    maskedDB are not all equal to zero, output "inconsistent" and stop. */
            var mask = (0xff00 >> (8 * emLen - emBits)) & 0xff;
            if ((maskedDB.charCodeAt(0) & mask) !== 0) {
              throw new Error("Bits beyond keysize not zero as expected.");
            }

            /* 7. Let dbMask = MGF(H, emLen - hLen - 1). */
            var dbMask = mgf.generate(h, maskLen);

            /* 8. Let DB = maskedDB \xor dbMask. */
            var db = "";
            for (i = 0; i < maskLen; i++) {
              db += String.fromCharCode(
                maskedDB.charCodeAt(i) ^ dbMask.charCodeAt(i)
              );
            }

            /* 9. Set the leftmost 8emLen - emBits bits of the leftmost octet
     * in DB to zero. */
            db = String.fromCharCode(db.charCodeAt(0) & ~mask) + db.substr(1);

            /* 10. If the emLen - hLen - sLen - 2 leftmost octets of DB are not zero
     * or if the octet at position emLen - hLen - sLen - 1 (the leftmost
     * position is "position 1") does not have hexadecimal value 0x01,
     * output "inconsistent" and stop. */
            var checkLen = emLen - hLen - sLen - 2;
            for (i = 0; i < checkLen; i++) {
              if (db.charCodeAt(i) !== 0x00) {
                throw new Error("Leftmost octets not zero as expected");
              }
            }

            if (db.charCodeAt(checkLen) !== 0x01) {
              throw new Error(
                "Inconsistent PSS signature, 0x01 marker not found"
              );
            }

            /* 11. Let salt be the last sLen octets of DB. */
            var salt = db.substr(-sLen);

            /* 12.  Let M' = (0x)00 00 00 00 00 00 00 00 || mHash || salt */
            var m_ = new forge.util.ByteBuffer();
            m_.fillWithByte(0, 8);
            m_.putBytes(mHash);
            m_.putBytes(salt);

            /* 13. Let H' = Hash(M'), an octet string of length hLen. */
            hash.start();
            hash.update(m_.getBytes());
            var h_ = hash.digest().getBytes();

            /* 14. If H = H', output "consistent." Otherwise, output "inconsistent." */
            return h === h_;
          };

          return pssobj;
        };

        /***/
      },
      /* 49 */
      /***/ function(module, exports) {
        /**
 * Helpers.
 */

        var s = 1000;
        var m = s * 60;
        var h = m * 60;
        var d = h * 24;
        var y = d * 365.25;

        /**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

        module.exports = function(val, options) {
          options = options || {};
          var type = typeof val;
          if (type === "string" && val.length > 0) {
            return parse(val);
          } else if (type === "number" && isNaN(val) === false) {
            return options.long ? fmtLong(val) : fmtShort(val);
          }
          throw new Error(
            "val is not a non-empty string or a valid number. val=" +
              JSON.stringify(val)
          );
        };

        /**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

        function parse(str) {
          str = String(str);
          if (str.length > 100) {
            return;
          }
          var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(
            str
          );
          if (!match) {
            return;
          }
          var n = parseFloat(match[1]);
          var type = (match[2] || "ms").toLowerCase();
          switch (type) {
            case "years":
            case "year":
            case "yrs":
            case "yr":
            case "y":
              return n * y;
            case "days":
            case "day":
            case "d":
              return n * d;
            case "hours":
            case "hour":
            case "hrs":
            case "hr":
            case "h":
              return n * h;
            case "minutes":
            case "minute":
            case "mins":
            case "min":
            case "m":
              return n * m;
            case "seconds":
            case "second":
            case "secs":
            case "sec":
            case "s":
              return n * s;
            case "milliseconds":
            case "millisecond":
            case "msecs":
            case "msec":
            case "ms":
              return n;
            default:
              return undefined;
          }
        }

        /**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

        function fmtShort(ms) {
          if (ms >= d) {
            return Math.round(ms / d) + "d";
          }
          if (ms >= h) {
            return Math.round(ms / h) + "h";
          }
          if (ms >= m) {
            return Math.round(ms / m) + "m";
          }
          if (ms >= s) {
            return Math.round(ms / s) + "s";
          }
          return ms + "ms";
        }

        /**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

        function fmtLong(ms) {
          return (
            plural(ms, d, "day") ||
            plural(ms, h, "hour") ||
            plural(ms, m, "minute") ||
            plural(ms, s, "second") ||
            ms + " ms"
          );
        }

        /**
 * Pluralization helper.
 */

        function plural(ms, n, name) {
          if (ms < n) {
            return;
          }
          if (ms < n * 1.5) {
            return Math.floor(ms / n) + " " + name;
          }
          return Math.ceil(ms / n) + " " + name + "s";
        }

        /***/
      },
      /* 50 */
      /***/ function(module, exports, __webpack_require__) {
        /*global exports*/
        var SignStream = __webpack_require__(139);
        var VerifyStream = __webpack_require__(222);

        var ALGORITHMS = [
          "HS256",
          "HS384",
          "HS512",
          "RS256",
          "RS384",
          "RS512",
          "ES256",
          "ES384",
          "ES512"
        ];

        exports.ALGORITHMS = ALGORITHMS;
        exports.sign = SignStream.sign;
        exports.verify = VerifyStream.verify;
        exports.decode = VerifyStream.decode;
        exports.isValid = VerifyStream.isValid;
        exports.createSign = function createSign(opts) {
          return new SignStream(opts);
        };
        exports.createVerify = function createVerify(opts) {
          return new VerifyStream(opts);
        };

        /***/
      },
      /* 51 */
      /***/ function(module, exports, __webpack_require__) {
        /* eslint-disable node/no-deprecated-api */
        var buffer = __webpack_require__(0);
        var Buffer = buffer.Buffer;

        // alternative to using Object.keys for old browsers
        function copyProps(src, dst) {
          for (var key in src) {
            dst[key] = src[key];
          }
        }
        if (
          Buffer.from &&
          Buffer.alloc &&
          Buffer.allocUnsafe &&
          Buffer.allocUnsafeSlow
        ) {
          module.exports = buffer;
        } else {
          // Copy properties from require('buffer')
          copyProps(buffer, exports);
          exports.Buffer = SafeBuffer;
        }

        function SafeBuffer(arg, encodingOrOffset, length) {
          return Buffer(arg, encodingOrOffset, length);
        }

        // Copy static methods from Buffer
        copyProps(Buffer, SafeBuffer);

        SafeBuffer.from = function(arg, encodingOrOffset, length) {
          if (typeof arg === "number") {
            throw new TypeError("Argument must not be a number");
          }
          return Buffer(arg, encodingOrOffset, length);
        };

        SafeBuffer.alloc = function(size, fill, encoding) {
          if (typeof size !== "number") {
            throw new TypeError("Argument must be a number");
          }
          var buf = Buffer(size);
          if (fill !== undefined) {
            if (typeof encoding === "string") {
              buf.fill(fill, encoding);
            } else {
              buf.fill(fill);
            }
          } else {
            buf.fill(0);
          }
          return buf;
        };

        SafeBuffer.allocUnsafe = function(size) {
          if (typeof size !== "number") {
            throw new TypeError("Argument must be a number");
          }
          return Buffer(size);
        };

        SafeBuffer.allocUnsafeSlow = function(size) {
          if (typeof size !== "number") {
            throw new TypeError("Argument must be a number");
          }
          return buffer.SlowBuffer(size);
        };

        /***/
      },
      /* 52 */
      /***/ function(module, exports) {
        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.

        function EventEmitter() {
          this._events = this._events || {};
          this._maxListeners = this._maxListeners || undefined;
        }
        module.exports = EventEmitter;

        // Backwards-compat with node 0.10.x
        EventEmitter.EventEmitter = EventEmitter;

        EventEmitter.prototype._events = undefined;
        EventEmitter.prototype._maxListeners = undefined;

        // By default EventEmitters will print a warning if more than 10 listeners are
        // added to it. This is a useful default which helps finding memory leaks.
        EventEmitter.defaultMaxListeners = 10;

        // Obviously not all Emitters should be limited to 10. This function allows
        // that to be increased. Set to zero for unlimited.
        EventEmitter.prototype.setMaxListeners = function(n) {
          if (!isNumber(n) || n < 0 || isNaN(n))
            throw TypeError("n must be a positive number");
          this._maxListeners = n;
          return this;
        };

        EventEmitter.prototype.emit = function(type) {
          var er, handler, len, args, i, listeners;

          if (!this._events) this._events = {};

          // If there is no 'error' event listener then throw.
          if (type === "error") {
            if (
              !this._events.error ||
              (isObject(this._events.error) && !this._events.error.length)
            ) {
              er = arguments[1];
              if (er instanceof Error) {
                throw er; // Unhandled 'error' event
              } else {
                // At least give some kind of context to the user
                var err = new Error(
                  'Uncaught, unspecified "error" event. (' + er + ")"
                );
                err.context = er;
                throw err;
              }
            }
          }

          handler = this._events[type];

          if (isUndefined(handler)) return false;

          if (isFunction(handler)) {
            switch (arguments.length) {
              // fast cases
              case 1:
                handler.call(this);
                break;
              case 2:
                handler.call(this, arguments[1]);
                break;
              case 3:
                handler.call(this, arguments[1], arguments[2]);
                break;
              // slower
              default:
                args = Array.prototype.slice.call(arguments, 1);
                handler.apply(this, args);
            }
          } else if (isObject(handler)) {
            args = Array.prototype.slice.call(arguments, 1);
            listeners = handler.slice();
            len = listeners.length;
            for (i = 0; i < len; i++) listeners[i].apply(this, args);
          }

          return true;
        };

        EventEmitter.prototype.addListener = function(type, listener) {
          var m;

          if (!isFunction(listener))
            throw TypeError("listener must be a function");

          if (!this._events) this._events = {};

          // To avoid recursion in the case that type === "newListener"! Before
          // adding it to the listeners, first emit "newListener".
          if (this._events.newListener)
            this.emit(
              "newListener",
              type,
              isFunction(listener.listener) ? listener.listener : listener
            );

          if (!this._events[type])
            // Optimize the case of one listener. Don't need the extra array object.
            this._events[type] = listener;
          else if (isObject(this._events[type]))
            // If we've already got an array, just append.
            this._events[type].push(listener);
          else
            // Adding the second element, need to change to array.
            this._events[type] = [this._events[type], listener];

          // Check for listener leak
          if (isObject(this._events[type]) && !this._events[type].warned) {
            if (!isUndefined(this._maxListeners)) {
              m = this._maxListeners;
            } else {
              m = EventEmitter.defaultMaxListeners;
            }

            if (m && m > 0 && this._events[type].length > m) {
              this._events[type].warned = true;
              console.error(
                "(node) warning: possible EventEmitter memory " +
                  "leak detected. %d listeners added. " +
                  "Use emitter.setMaxListeners() to increase limit.",
                this._events[type].length
              );
              if (typeof console.trace === "function") {
                // not supported in IE 10
                console.trace();
              }
            }
          }

          return this;
        };

        EventEmitter.prototype.on = EventEmitter.prototype.addListener;

        EventEmitter.prototype.once = function(type, listener) {
          if (!isFunction(listener))
            throw TypeError("listener must be a function");

          var fired = false;

          function g() {
            this.removeListener(type, g);

            if (!fired) {
              fired = true;
              listener.apply(this, arguments);
            }
          }

          g.listener = listener;
          this.on(type, g);

          return this;
        };

        // emits a 'removeListener' event iff the listener was removed
        EventEmitter.prototype.removeListener = function(type, listener) {
          var list, position, length, i;

          if (!isFunction(listener))
            throw TypeError("listener must be a function");

          if (!this._events || !this._events[type]) return this;

          list = this._events[type];
          length = list.length;
          position = -1;

          if (
            list === listener ||
            (isFunction(list.listener) && list.listener === listener)
          ) {
            delete this._events[type];
            if (this._events.removeListener)
              this.emit("removeListener", type, listener);
          } else if (isObject(list)) {
            for (i = length; i-- > 0; ) {
              if (
                list[i] === listener ||
                (list[i].listener && list[i].listener === listener)
              ) {
                position = i;
                break;
              }
            }

            if (position < 0) return this;

            if (list.length === 1) {
              list.length = 0;
              delete this._events[type];
            } else {
              list.splice(position, 1);
            }

            if (this._events.removeListener)
              this.emit("removeListener", type, listener);
          }

          return this;
        };

        EventEmitter.prototype.removeAllListeners = function(type) {
          var key, listeners;

          if (!this._events) return this;

          // not listening for removeListener, no need to emit
          if (!this._events.removeListener) {
            if (arguments.length === 0) this._events = {};
            else if (this._events[type]) delete this._events[type];
            return this;
          }

          // emit removeListener for all listeners on all events
          if (arguments.length === 0) {
            for (key in this._events) {
              if (key === "removeListener") continue;
              this.removeAllListeners(key);
            }
            this.removeAllListeners("removeListener");
            this._events = {};
            return this;
          }

          listeners = this._events[type];

          if (isFunction(listeners)) {
            this.removeListener(type, listeners);
          } else if (listeners) {
            // LIFO order
            while (listeners.length)
              this.removeListener(type, listeners[listeners.length - 1]);
          }
          delete this._events[type];

          return this;
        };

        EventEmitter.prototype.listeners = function(type) {
          var ret;
          if (!this._events || !this._events[type]) ret = [];
          else if (isFunction(this._events[type])) ret = [this._events[type]];
          else ret = this._events[type].slice();
          return ret;
        };

        EventEmitter.prototype.listenerCount = function(type) {
          if (this._events) {
            var evlistener = this._events[type];

            if (isFunction(evlistener)) return 1;
            else if (evlistener) return evlistener.length;
          }
          return 0;
        };

        EventEmitter.listenerCount = function(emitter, type) {
          return emitter.listenerCount(type);
        };

        function isFunction(arg) {
          return typeof arg === "function";
        }

        function isNumber(arg) {
          return typeof arg === "number";
        }

        function isObject(arg) {
          return typeof arg === "object" && arg !== null;
        }

        function isUndefined(arg) {
          return arg === void 0;
        }

        /***/
      },
      /* 53 */
      /***/ function(module, exports, __webpack_require__) {
        exports = module.exports = __webpack_require__(82);
        exports.Stream = exports;
        exports.Readable = exports;
        exports.Writable = __webpack_require__(54);
        exports.Duplex = __webpack_require__(17);
        exports.Transform = __webpack_require__(85);
        exports.PassThrough = __webpack_require__(145);

        /***/
      },
      /* 54 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";
        /* WEBPACK VAR INJECTION */ (function(process, setImmediate, global) {
          // Copyright Joyent, Inc. and other Node contributors.
          //
          // Permission is hereby granted, free of charge, to any person obtaining a
          // copy of this software and associated documentation files (the
          // "Software"), to deal in the Software without restriction, including
          // without limitation the rights to use, copy, modify, merge, publish,
          // distribute, sublicense, and/or sell copies of the Software, and to permit
          // persons to whom the Software is furnished to do so, subject to the
          // following conditions:
          //
          // The above copyright notice and this permission notice shall be included
          // in all copies or substantial portions of the Software.
          //
          // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
          // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
          // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
          // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
          // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
          // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
          // USE OR OTHER DEALINGS IN THE SOFTWARE.

          // A bit simpler than readable streams.
          // Implement an async ._write(chunk, encoding, cb), and it'll handle all
          // the drain event emission and buffering.

          /*<replacement>*/

          var processNextTick = __webpack_require__(33);
          /*</replacement>*/

          module.exports = Writable;

          /* <replacement> */
          function WriteReq(chunk, encoding, cb) {
            this.chunk = chunk;
            this.encoding = encoding;
            this.callback = cb;
            this.next = null;
          }

          // It seems a linked list but it is not
          // there will be only 2 of these for each stream
          function CorkedRequest(state) {
            var _this = this;

            this.next = null;
            this.entry = null;
            this.finish = function() {
              onCorkedFinish(_this, state);
            };
          }
          /* </replacement> */

          /*<replacement>*/
          var asyncWrite =
            !process.browser &&
            ["v0.10", "v0.9."].indexOf(process.version.slice(0, 5)) > -1
              ? setImmediate
              : processNextTick;
          /*</replacement>*/

          /*<replacement>*/
          var Duplex;
          /*</replacement>*/

          Writable.WritableState = WritableState;

          /*<replacement>*/
          var util = __webpack_require__(23);
          util.inherits = __webpack_require__(2);
          /*</replacement>*/

          /*<replacement>*/
          var internalUtil = {
            deprecate: __webpack_require__(144)
          };
          /*</replacement>*/

          /*<replacement>*/
          var Stream = __webpack_require__(83);
          /*</replacement>*/

          /*<replacement>*/
          var Buffer = __webpack_require__(13).Buffer;
          var OurUint8Array = global.Uint8Array || function() {};
          function _uint8ArrayToBuffer(chunk) {
            return Buffer.from(chunk);
          }
          function _isUint8Array(obj) {
            return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
          }
          /*</replacement>*/

          var destroyImpl = __webpack_require__(84);

          util.inherits(Writable, Stream);

          function nop() {}

          function WritableState(options, stream) {
            Duplex = Duplex || __webpack_require__(17);

            options = options || {};

            // object stream flag to indicate whether or not this stream
            // contains buffers or objects.
            this.objectMode = !!options.objectMode;

            if (stream instanceof Duplex)
              this.objectMode = this.objectMode || !!options.writableObjectMode;

            // the point at which write() starts returning false
            // Note: 0 is a valid value, means that we always return false if
            // the entire buffer is not flushed immediately on write()
            var hwm = options.highWaterMark;
            var defaultHwm = this.objectMode ? 16 : 16 * 1024;
            this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

            // cast to ints.
            this.highWaterMark = Math.floor(this.highWaterMark);

            // if _final has been called
            this.finalCalled = false;

            // drain event flag.
            this.needDrain = false;
            // at the start of calling end()
            this.ending = false;
            // when end() has been called, and returned
            this.ended = false;
            // when 'finish' is emitted
            this.finished = false;

            // has it been destroyed
            this.destroyed = false;

            // should we decode strings into buffers before passing to _write?
            // this is here so that some node-core streams can optimize string
            // handling at a lower level.
            var noDecode = options.decodeStrings === false;
            this.decodeStrings = !noDecode;

            // Crypto is kind of old and crusty.  Historically, its default string
            // encoding is 'binary' so we have to make this configurable.
            // Everything else in the universe uses 'utf8', though.
            this.defaultEncoding = options.defaultEncoding || "utf8";

            // not an actual buffer we keep track of, but a measurement
            // of how much we're waiting to get pushed to some underlying
            // socket or file.
            this.length = 0;

            // a flag to see when we're in the middle of a write.
            this.writing = false;

            // when true all writes will be buffered until .uncork() call
            this.corked = 0;

            // a flag to be able to tell if the onwrite cb is called immediately,
            // or on a later tick.  We set this to true at first, because any
            // actions that shouldn't happen until "later" should generally also
            // not happen before the first write call.
            this.sync = true;

            // a flag to know if we're processing previously buffered items, which
            // may call the _write() callback in the same tick, so that we don't
            // end up in an overlapped onwrite situation.
            this.bufferProcessing = false;

            // the callback that's passed to _write(chunk,cb)
            this.onwrite = function(er) {
              onwrite(stream, er);
            };

            // the callback that the user supplies to write(chunk,encoding,cb)
            this.writecb = null;

            // the amount that is being written when _write is called.
            this.writelen = 0;

            this.bufferedRequest = null;
            this.lastBufferedRequest = null;

            // number of pending user-supplied write callbacks
            // this must be 0 before 'finish' can be emitted
            this.pendingcb = 0;

            // emit prefinish if the only thing we're waiting for is _write cbs
            // This is relevant for synchronous Transform streams
            this.prefinished = false;

            // True if the error was already emitted and should not be thrown again
            this.errorEmitted = false;

            // count buffered requests
            this.bufferedRequestCount = 0;

            // allocate the first CorkedRequest, there is always
            // one allocated and free to use, and we maintain at most two
            this.corkedRequestsFree = new CorkedRequest(this);
          }

          WritableState.prototype.getBuffer = function getBuffer() {
            var current = this.bufferedRequest;
            var out = [];
            while (current) {
              out.push(current);
              current = current.next;
            }
            return out;
          };

          (function() {
            try {
              Object.defineProperty(WritableState.prototype, "buffer", {
                get: internalUtil.deprecate(
                  function() {
                    return this.getBuffer();
                  },
                  "_writableState.buffer is deprecated. Use _writableState.getBuffer " +
                    "instead.",
                  "DEP0003"
                )
              });
            } catch (_) {}
          })();

          // Test _writableState for inheritance to account for Duplex streams,
          // whose prototype chain only points to Readable.
          var realHasInstance;
          if (
            typeof Symbol === "function" &&
            Symbol.hasInstance &&
            typeof Function.prototype[Symbol.hasInstance] === "function"
          ) {
            realHasInstance = Function.prototype[Symbol.hasInstance];
            Object.defineProperty(Writable, Symbol.hasInstance, {
              value: function(object) {
                if (realHasInstance.call(this, object)) return true;

                return object && object._writableState instanceof WritableState;
              }
            });
          } else {
            realHasInstance = function(object) {
              return object instanceof this;
            };
          }

          function Writable(options) {
            Duplex = Duplex || __webpack_require__(17);

            // Writable ctor is applied to Duplexes, too.
            // `realHasInstance` is necessary because using plain `instanceof`
            // would return false, as no `_writableState` property is attached.

            // Trying to use the custom `instanceof` for Writable here will also break the
            // Node.js LazyTransform implementation, which has a non-trivial getter for
            // `_writableState` that would lead to infinite recursion.
            if (
              !realHasInstance.call(Writable, this) &&
              !(this instanceof Duplex)
            ) {
              return new Writable(options);
            }

            this._writableState = new WritableState(options, this);

            // legacy.
            this.writable = true;

            if (options) {
              if (typeof options.write === "function")
                this._write = options.write;

              if (typeof options.writev === "function")
                this._writev = options.writev;

              if (typeof options.destroy === "function")
                this._destroy = options.destroy;

              if (typeof options.final === "function")
                this._final = options.final;
            }

            Stream.call(this);
          }

          // Otherwise people can pipe Writable streams, which is just wrong.
          Writable.prototype.pipe = function() {
            this.emit("error", new Error("Cannot pipe, not readable"));
          };

          function writeAfterEnd(stream, cb) {
            var er = new Error("write after end");
            // TODO: defer error events consistently everywhere, not just the cb
            stream.emit("error", er);
            processNextTick(cb, er);
          }

          // Checks that a user-supplied chunk is valid, especially for the particular
          // mode the stream is in. Currently this means that `null` is never accepted
          // and undefined/non-string values are only allowed in object mode.
          function validChunk(stream, state, chunk, cb) {
            var valid = true;
            var er = false;

            if (chunk === null) {
              er = new TypeError("May not write null values to stream");
            } else if (
              typeof chunk !== "string" &&
              chunk !== undefined &&
              !state.objectMode
            ) {
              er = new TypeError("Invalid non-string/buffer chunk");
            }
            if (er) {
              stream.emit("error", er);
              processNextTick(cb, er);
              valid = false;
            }
            return valid;
          }

          Writable.prototype.write = function(chunk, encoding, cb) {
            var state = this._writableState;
            var ret = false;
            var isBuf = _isUint8Array(chunk) && !state.objectMode;

            if (isBuf && !Buffer.isBuffer(chunk)) {
              chunk = _uint8ArrayToBuffer(chunk);
            }

            if (typeof encoding === "function") {
              cb = encoding;
              encoding = null;
            }

            if (isBuf) encoding = "buffer";
            else if (!encoding) encoding = state.defaultEncoding;

            if (typeof cb !== "function") cb = nop;

            if (state.ended) writeAfterEnd(this, cb);
            else if (isBuf || validChunk(this, state, chunk, cb)) {
              state.pendingcb++;
              ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
            }

            return ret;
          };

          Writable.prototype.cork = function() {
            var state = this._writableState;

            state.corked++;
          };

          Writable.prototype.uncork = function() {
            var state = this._writableState;

            if (state.corked) {
              state.corked--;

              if (
                !state.writing &&
                !state.corked &&
                !state.finished &&
                !state.bufferProcessing &&
                state.bufferedRequest
              )
                clearBuffer(this, state);
            }
          };

          Writable.prototype.setDefaultEncoding = function setDefaultEncoding(
            encoding
          ) {
            // node::ParseEncoding() requires lower case.
            if (typeof encoding === "string") encoding = encoding.toLowerCase();
            if (
              !(
                [
                  "hex",
                  "utf8",
                  "utf-8",
                  "ascii",
                  "binary",
                  "base64",
                  "ucs2",
                  "ucs-2",
                  "utf16le",
                  "utf-16le",
                  "raw"
                ].indexOf((encoding + "").toLowerCase()) > -1
              )
            )
              throw new TypeError("Unknown encoding: " + encoding);
            this._writableState.defaultEncoding = encoding;
            return this;
          };

          function decodeChunk(state, chunk, encoding) {
            if (
              !state.objectMode &&
              state.decodeStrings !== false &&
              typeof chunk === "string"
            ) {
              chunk = Buffer.from(chunk, encoding);
            }
            return chunk;
          }

          // if we're already writing something, then just put this
          // in the queue, and wait our turn.  Otherwise, call _write
          // If we return false, then we need a drain event, so set that flag.
          function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
            if (!isBuf) {
              var newChunk = decodeChunk(state, chunk, encoding);
              if (chunk !== newChunk) {
                isBuf = true;
                encoding = "buffer";
                chunk = newChunk;
              }
            }
            var len = state.objectMode ? 1 : chunk.length;

            state.length += len;

            var ret = state.length < state.highWaterMark;
            // we must ensure that previous needDrain will not be reset to false.
            if (!ret) state.needDrain = true;

            if (state.writing || state.corked) {
              var last = state.lastBufferedRequest;
              state.lastBufferedRequest = {
                chunk: chunk,
                encoding: encoding,
                isBuf: isBuf,
                callback: cb,
                next: null
              };
              if (last) {
                last.next = state.lastBufferedRequest;
              } else {
                state.bufferedRequest = state.lastBufferedRequest;
              }
              state.bufferedRequestCount += 1;
            } else {
              doWrite(stream, state, false, len, chunk, encoding, cb);
            }

            return ret;
          }

          function doWrite(stream, state, writev, len, chunk, encoding, cb) {
            state.writelen = len;
            state.writecb = cb;
            state.writing = true;
            state.sync = true;
            if (writev) stream._writev(chunk, state.onwrite);
            else stream._write(chunk, encoding, state.onwrite);
            state.sync = false;
          }

          function onwriteError(stream, state, sync, er, cb) {
            --state.pendingcb;

            if (sync) {
              // defer the callback if we are being called synchronously
              // to avoid piling up things on the stack
              processNextTick(cb, er);
              // this can emit finish, and it will always happen
              // after error
              processNextTick(finishMaybe, stream, state);
              stream._writableState.errorEmitted = true;
              stream.emit("error", er);
            } else {
              // the caller expect this to happen before if
              // it is async
              cb(er);
              stream._writableState.errorEmitted = true;
              stream.emit("error", er);
              // this can emit finish, but finish must
              // always follow error
              finishMaybe(stream, state);
            }
          }

          function onwriteStateUpdate(state) {
            state.writing = false;
            state.writecb = null;
            state.length -= state.writelen;
            state.writelen = 0;
          }

          function onwrite(stream, er) {
            var state = stream._writableState;
            var sync = state.sync;
            var cb = state.writecb;

            onwriteStateUpdate(state);

            if (er) onwriteError(stream, state, sync, er, cb);
            else {
              // Check if we're actually ready to finish, but don't emit yet
              var finished = needFinish(state);

              if (
                !finished &&
                !state.corked &&
                !state.bufferProcessing &&
                state.bufferedRequest
              ) {
                clearBuffer(stream, state);
              }

              if (sync) {
                /*<replacement>*/
                asyncWrite(afterWrite, stream, state, finished, cb);
                /*</replacement>*/
              } else {
                afterWrite(stream, state, finished, cb);
              }
            }
          }

          function afterWrite(stream, state, finished, cb) {
            if (!finished) onwriteDrain(stream, state);
            state.pendingcb--;
            cb();
            finishMaybe(stream, state);
          }

          // Must force callback to be called on nextTick, so that we don't
          // emit 'drain' before the write() consumer gets the 'false' return
          // value, and has a chance to attach a 'drain' listener.
          function onwriteDrain(stream, state) {
            if (state.length === 0 && state.needDrain) {
              state.needDrain = false;
              stream.emit("drain");
            }
          }

          // if there's something in the buffer waiting, then process it
          function clearBuffer(stream, state) {
            state.bufferProcessing = true;
            var entry = state.bufferedRequest;

            if (stream._writev && entry && entry.next) {
              // Fast case, write everything using _writev()
              var l = state.bufferedRequestCount;
              var buffer = new Array(l);
              var holder = state.corkedRequestsFree;
              holder.entry = entry;

              var count = 0;
              var allBuffers = true;
              while (entry) {
                buffer[count] = entry;
                if (!entry.isBuf) allBuffers = false;
                entry = entry.next;
                count += 1;
              }
              buffer.allBuffers = allBuffers;

              doWrite(
                stream,
                state,
                true,
                state.length,
                buffer,
                "",
                holder.finish
              );

              // doWrite is almost always async, defer these to save a bit of time
              // as the hot path ends with doWrite
              state.pendingcb++;
              state.lastBufferedRequest = null;
              if (holder.next) {
                state.corkedRequestsFree = holder.next;
                holder.next = null;
              } else {
                state.corkedRequestsFree = new CorkedRequest(state);
              }
            } else {
              // Slow case, write chunks one-by-one
              while (entry) {
                var chunk = entry.chunk;
                var encoding = entry.encoding;
                var cb = entry.callback;
                var len = state.objectMode ? 1 : chunk.length;

                doWrite(stream, state, false, len, chunk, encoding, cb);
                entry = entry.next;
                // if we didn't call the onwrite immediately, then
                // it means that we need to wait until it does.
                // also, that means that the chunk and cb are currently
                // being processed, so move the buffer counter past them.
                if (state.writing) {
                  break;
                }
              }

              if (entry === null) state.lastBufferedRequest = null;
            }

            state.bufferedRequestCount = 0;
            state.bufferedRequest = entry;
            state.bufferProcessing = false;
          }

          Writable.prototype._write = function(chunk, encoding, cb) {
            cb(new Error("_write() is not implemented"));
          };

          Writable.prototype._writev = null;

          Writable.prototype.end = function(chunk, encoding, cb) {
            var state = this._writableState;

            if (typeof chunk === "function") {
              cb = chunk;
              chunk = null;
              encoding = null;
            } else if (typeof encoding === "function") {
              cb = encoding;
              encoding = null;
            }

            if (chunk !== null && chunk !== undefined)
              this.write(chunk, encoding);

            // .end() fully uncorks
            if (state.corked) {
              state.corked = 1;
              this.uncork();
            }

            // ignore unnecessary end() calls.
            if (!state.ending && !state.finished) endWritable(this, state, cb);
          };

          function needFinish(state) {
            return (
              state.ending &&
              state.length === 0 &&
              state.bufferedRequest === null &&
              !state.finished &&
              !state.writing
            );
          }
          function callFinal(stream, state) {
            stream._final(function(err) {
              state.pendingcb--;
              if (err) {
                stream.emit("error", err);
              }
              state.prefinished = true;
              stream.emit("prefinish");
              finishMaybe(stream, state);
            });
          }
          function prefinish(stream, state) {
            if (!state.prefinished && !state.finalCalled) {
              if (typeof stream._final === "function") {
                state.pendingcb++;
                state.finalCalled = true;
                processNextTick(callFinal, stream, state);
              } else {
                state.prefinished = true;
                stream.emit("prefinish");
              }
            }
          }

          function finishMaybe(stream, state) {
            var need = needFinish(state);
            if (need) {
              prefinish(stream, state);
              if (state.pendingcb === 0) {
                state.finished = true;
                stream.emit("finish");
              }
            }
            return need;
          }

          function endWritable(stream, state, cb) {
            state.ending = true;
            finishMaybe(stream, state);
            if (cb) {
              if (state.finished) processNextTick(cb);
              else stream.once("finish", cb);
            }
            state.ended = true;
            stream.writable = false;
          }

          function onCorkedFinish(corkReq, state, err) {
            var entry = corkReq.entry;
            corkReq.entry = null;
            while (entry) {
              var cb = entry.callback;
              state.pendingcb--;
              cb(err);
              entry = entry.next;
            }
            if (state.corkedRequestsFree) {
              state.corkedRequestsFree.next = corkReq;
            } else {
              state.corkedRequestsFree = corkReq;
            }
          }

          Object.defineProperty(Writable.prototype, "destroyed", {
            get: function() {
              if (this._writableState === undefined) {
                return false;
              }
              return this._writableState.destroyed;
            },
            set: function(value) {
              // we ignore the value if the stream
              // has not been initialized yet
              if (!this._writableState) {
                return;
              }

              // backward compatibility, the user is explicitly
              // managing destroyed
              this._writableState.destroyed = value;
            }
          });

          Writable.prototype.destroy = destroyImpl.destroy;
          Writable.prototype._undestroy = destroyImpl.undestroy;
          Writable.prototype._destroy = function(err, cb) {
            this.end();
            cb(err);
          };
          /* WEBPACK VAR INJECTION */
        }.call(
          exports,
          __webpack_require__(6),
          __webpack_require__(63).setImmediate,
          __webpack_require__(8)
        ));

        /***/
      },
      /* 55 */
      /***/ function(module, exports, __webpack_require__) {
        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.

        var Buffer = __webpack_require__(0).Buffer;

        var isBufferEncoding =
          Buffer.isEncoding ||
          function(encoding) {
            switch (encoding && encoding.toLowerCase()) {
              case "hex":
              case "utf8":
              case "utf-8":
              case "ascii":
              case "binary":
              case "base64":
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
              case "raw":
                return true;
              default:
                return false;
            }
          };

        function assertEncoding(encoding) {
          if (encoding && !isBufferEncoding(encoding)) {
            throw new Error("Unknown encoding: " + encoding);
          }
        }

        // StringDecoder provides an interface for efficiently splitting a series of
        // buffers into a series of JS strings without breaking apart multi-byte
        // characters. CESU-8 is handled as part of the UTF-8 encoding.
        //
        // @TODO Handling all encodings inside a single object makes it very difficult
        // to reason about this code, so it should be split up in the future.
        // @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
        // points as used by CESU-8.
        var StringDecoder = (exports.StringDecoder = function(encoding) {
          this.encoding = (encoding || "utf8")
            .toLowerCase()
            .replace(/[-_]/, "");
          assertEncoding(encoding);
          switch (this.encoding) {
            case "utf8":
              // CESU-8 represents each of Surrogate Pair by 3-bytes
              this.surrogateSize = 3;
              break;
            case "ucs2":
            case "utf16le":
              // UTF-16 represents each of Surrogate Pair by 2-bytes
              this.surrogateSize = 2;
              this.detectIncompleteChar = utf16DetectIncompleteChar;
              break;
            case "base64":
              // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
              this.surrogateSize = 3;
              this.detectIncompleteChar = base64DetectIncompleteChar;
              break;
            default:
              this.write = passThroughWrite;
              return;
          }

          // Enough space to store all bytes of a single character. UTF-8 needs 4
          // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
          this.charBuffer = new Buffer(6);
          // Number of bytes received for the current incomplete multi-byte character.
          this.charReceived = 0;
          // Number of bytes expected for the current incomplete multi-byte character.
          this.charLength = 0;
        });

        // write decodes the given buffer and returns it as JS string that is
        // guaranteed to not contain any partial multi-byte characters. Any partial
        // character found at the end of the buffer is buffered up, and will be
        // returned when calling write again with the remaining bytes.
        //
        // Note: Converting a Buffer containing an orphan surrogate to a String
        // currently works, but converting a String to a Buffer (via `new Buffer`, or
        // Buffer#write) will replace incomplete surrogates with the unicode
        // replacement character. See https://codereview.chromium.org/121173009/ .
        StringDecoder.prototype.write = function(buffer) {
          var charStr = "";
          // if our last write ended with an incomplete multibyte character
          while (this.charLength) {
            // determine how many remaining bytes this buffer has to offer for this char
            var available =
              buffer.length >= this.charLength - this.charReceived
                ? this.charLength - this.charReceived
                : buffer.length;

            // add the new bytes to the char buffer
            buffer.copy(this.charBuffer, this.charReceived, 0, available);
            this.charReceived += available;

            if (this.charReceived < this.charLength) {
              // still not enough chars in this buffer? wait for more ...
              return "";
            }

            // remove bytes belonging to the current character from the buffer
            buffer = buffer.slice(available, buffer.length);

            // get the character that was split
            charStr = this.charBuffer
              .slice(0, this.charLength)
              .toString(this.encoding);

            // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
            var charCode = charStr.charCodeAt(charStr.length - 1);
            if (charCode >= 0xd800 && charCode <= 0xdbff) {
              this.charLength += this.surrogateSize;
              charStr = "";
              continue;
            }
            this.charReceived = this.charLength = 0;

            // if there are no more bytes in this buffer, just emit our char
            if (buffer.length === 0) {
              return charStr;
            }
            break;
          }

          // determine and set charLength / charReceived
          this.detectIncompleteChar(buffer);

          var end = buffer.length;
          if (this.charLength) {
            // buffer the incomplete character bytes we got
            buffer.copy(
              this.charBuffer,
              0,
              buffer.length - this.charReceived,
              end
            );
            end -= this.charReceived;
          }

          charStr += buffer.toString(this.encoding, 0, end);

          var end = charStr.length - 1;
          var charCode = charStr.charCodeAt(end);
          // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
          if (charCode >= 0xd800 && charCode <= 0xdbff) {
            var size = this.surrogateSize;
            this.charLength += size;
            this.charReceived += size;
            this.charBuffer.copy(this.charBuffer, size, 0, size);
            buffer.copy(this.charBuffer, 0, 0, size);
            return charStr.substring(0, end);
          }

          // or just emit the charStr
          return charStr;
        };

        // detectIncompleteChar determines if there is an incomplete UTF-8 character at
        // the end of the given buffer. If so, it sets this.charLength to the byte
        // length that character, and sets this.charReceived to the number of bytes
        // that are available for this character.
        StringDecoder.prototype.detectIncompleteChar = function(buffer) {
          // determine how many bytes we have to check at the end of this buffer
          var i = buffer.length >= 3 ? 3 : buffer.length;

          // Figure out if one of the last i bytes of our buffer announces an
          // incomplete char.
          for (; i > 0; i--) {
            var c = buffer[buffer.length - i];

            // See http://en.wikipedia.org/wiki/UTF-8#Description

            // 110XXXXX
            if (i == 1 && c >> 5 == 0x06) {
              this.charLength = 2;
              break;
            }

            // 1110XXXX
            if (i <= 2 && c >> 4 == 0x0e) {
              this.charLength = 3;
              break;
            }

            // 11110XXX
            if (i <= 3 && c >> 3 == 0x1e) {
              this.charLength = 4;
              break;
            }
          }
          this.charReceived = i;
        };

        StringDecoder.prototype.end = function(buffer) {
          var res = "";
          if (buffer && buffer.length) res = this.write(buffer);

          if (this.charReceived) {
            var cr = this.charReceived;
            var buf = this.charBuffer;
            var enc = this.encoding;
            res += buf.slice(0, cr).toString(enc);
          }

          return res;
        };

        function passThroughWrite(buffer) {
          return buffer.toString(this.encoding);
        }

        function utf16DetectIncompleteChar(buffer) {
          this.charReceived = buffer.length % 2;
          this.charLength = this.charReceived ? 2 : 0;
        }

        function base64DetectIncompleteChar(buffer) {
          this.charReceived = buffer.length % 3;
          this.charLength = this.charReceived ? 3 : 0;
        }

        /***/
      },
      /* 56 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";
        /* WEBPACK VAR INJECTION */ (function(Buffer) {
          var inherits = __webpack_require__(2);
          var HashBase = __webpack_require__(155);

          function RIPEMD160() {
            HashBase.call(this, 64);

            // state
            this._a = 0x67452301;
            this._b = 0xefcdab89;
            this._c = 0x98badcfe;
            this._d = 0x10325476;
            this._e = 0xc3d2e1f0;
          }

          inherits(RIPEMD160, HashBase);

          RIPEMD160.prototype._update = function() {
            var m = new Array(16);
            for (var i = 0; i < 16; ++i) m[i] = this._block.readInt32LE(i * 4);

            var al = this._a;
            var bl = this._b;
            var cl = this._c;
            var dl = this._d;
            var el = this._e;

            // Mj = 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
            // K = 0x00000000
            // Sj = 11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8
            al = fn1(al, bl, cl, dl, el, m[0], 0x00000000, 11);
            cl = rotl(cl, 10);
            el = fn1(el, al, bl, cl, dl, m[1], 0x00000000, 14);
            bl = rotl(bl, 10);
            dl = fn1(dl, el, al, bl, cl, m[2], 0x00000000, 15);
            al = rotl(al, 10);
            cl = fn1(cl, dl, el, al, bl, m[3], 0x00000000, 12);
            el = rotl(el, 10);
            bl = fn1(bl, cl, dl, el, al, m[4], 0x00000000, 5);
            dl = rotl(dl, 10);
            al = fn1(al, bl, cl, dl, el, m[5], 0x00000000, 8);
            cl = rotl(cl, 10);
            el = fn1(el, al, bl, cl, dl, m[6], 0x00000000, 7);
            bl = rotl(bl, 10);
            dl = fn1(dl, el, al, bl, cl, m[7], 0x00000000, 9);
            al = rotl(al, 10);
            cl = fn1(cl, dl, el, al, bl, m[8], 0x00000000, 11);
            el = rotl(el, 10);
            bl = fn1(bl, cl, dl, el, al, m[9], 0x00000000, 13);
            dl = rotl(dl, 10);
            al = fn1(al, bl, cl, dl, el, m[10], 0x00000000, 14);
            cl = rotl(cl, 10);
            el = fn1(el, al, bl, cl, dl, m[11], 0x00000000, 15);
            bl = rotl(bl, 10);
            dl = fn1(dl, el, al, bl, cl, m[12], 0x00000000, 6);
            al = rotl(al, 10);
            cl = fn1(cl, dl, el, al, bl, m[13], 0x00000000, 7);
            el = rotl(el, 10);
            bl = fn1(bl, cl, dl, el, al, m[14], 0x00000000, 9);
            dl = rotl(dl, 10);
            al = fn1(al, bl, cl, dl, el, m[15], 0x00000000, 8);
            cl = rotl(cl, 10);

            // Mj = 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8
            // K = 0x5a827999
            // Sj = 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12
            el = fn2(el, al, bl, cl, dl, m[7], 0x5a827999, 7);
            bl = rotl(bl, 10);
            dl = fn2(dl, el, al, bl, cl, m[4], 0x5a827999, 6);
            al = rotl(al, 10);
            cl = fn2(cl, dl, el, al, bl, m[13], 0x5a827999, 8);
            el = rotl(el, 10);
            bl = fn2(bl, cl, dl, el, al, m[1], 0x5a827999, 13);
            dl = rotl(dl, 10);
            al = fn2(al, bl, cl, dl, el, m[10], 0x5a827999, 11);
            cl = rotl(cl, 10);
            el = fn2(el, al, bl, cl, dl, m[6], 0x5a827999, 9);
            bl = rotl(bl, 10);
            dl = fn2(dl, el, al, bl, cl, m[15], 0x5a827999, 7);
            al = rotl(al, 10);
            cl = fn2(cl, dl, el, al, bl, m[3], 0x5a827999, 15);
            el = rotl(el, 10);
            bl = fn2(bl, cl, dl, el, al, m[12], 0x5a827999, 7);
            dl = rotl(dl, 10);
            al = fn2(al, bl, cl, dl, el, m[0], 0x5a827999, 12);
            cl = rotl(cl, 10);
            el = fn2(el, al, bl, cl, dl, m[9], 0x5a827999, 15);
            bl = rotl(bl, 10);
            dl = fn2(dl, el, al, bl, cl, m[5], 0x5a827999, 9);
            al = rotl(al, 10);
            cl = fn2(cl, dl, el, al, bl, m[2], 0x5a827999, 11);
            el = rotl(el, 10);
            bl = fn2(bl, cl, dl, el, al, m[14], 0x5a827999, 7);
            dl = rotl(dl, 10);
            al = fn2(al, bl, cl, dl, el, m[11], 0x5a827999, 13);
            cl = rotl(cl, 10);
            el = fn2(el, al, bl, cl, dl, m[8], 0x5a827999, 12);
            bl = rotl(bl, 10);

            // Mj = 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12
            // K = 0x6ed9eba1
            // Sj = 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5
            dl = fn3(dl, el, al, bl, cl, m[3], 0x6ed9eba1, 11);
            al = rotl(al, 10);
            cl = fn3(cl, dl, el, al, bl, m[10], 0x6ed9eba1, 13);
            el = rotl(el, 10);
            bl = fn3(bl, cl, dl, el, al, m[14], 0x6ed9eba1, 6);
            dl = rotl(dl, 10);
            al = fn3(al, bl, cl, dl, el, m[4], 0x6ed9eba1, 7);
            cl = rotl(cl, 10);
            el = fn3(el, al, bl, cl, dl, m[9], 0x6ed9eba1, 14);
            bl = rotl(bl, 10);
            dl = fn3(dl, el, al, bl, cl, m[15], 0x6ed9eba1, 9);
            al = rotl(al, 10);
            cl = fn3(cl, dl, el, al, bl, m[8], 0x6ed9eba1, 13);
            el = rotl(el, 10);
            bl = fn3(bl, cl, dl, el, al, m[1], 0x6ed9eba1, 15);
            dl = rotl(dl, 10);
            al = fn3(al, bl, cl, dl, el, m[2], 0x6ed9eba1, 14);
            cl = rotl(cl, 10);
            el = fn3(el, al, bl, cl, dl, m[7], 0x6ed9eba1, 8);
            bl = rotl(bl, 10);
            dl = fn3(dl, el, al, bl, cl, m[0], 0x6ed9eba1, 13);
            al = rotl(al, 10);
            cl = fn3(cl, dl, el, al, bl, m[6], 0x6ed9eba1, 6);
            el = rotl(el, 10);
            bl = fn3(bl, cl, dl, el, al, m[13], 0x6ed9eba1, 5);
            dl = rotl(dl, 10);
            al = fn3(al, bl, cl, dl, el, m[11], 0x6ed9eba1, 12);
            cl = rotl(cl, 10);
            el = fn3(el, al, bl, cl, dl, m[5], 0x6ed9eba1, 7);
            bl = rotl(bl, 10);
            dl = fn3(dl, el, al, bl, cl, m[12], 0x6ed9eba1, 5);
            al = rotl(al, 10);

            // Mj = 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2
            // K = 0x8f1bbcdc
            // Sj = 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12
            cl = fn4(cl, dl, el, al, bl, m[1], 0x8f1bbcdc, 11);
            el = rotl(el, 10);
            bl = fn4(bl, cl, dl, el, al, m[9], 0x8f1bbcdc, 12);
            dl = rotl(dl, 10);
            al = fn4(al, bl, cl, dl, el, m[11], 0x8f1bbcdc, 14);
            cl = rotl(cl, 10);
            el = fn4(el, al, bl, cl, dl, m[10], 0x8f1bbcdc, 15);
            bl = rotl(bl, 10);
            dl = fn4(dl, el, al, bl, cl, m[0], 0x8f1bbcdc, 14);
            al = rotl(al, 10);
            cl = fn4(cl, dl, el, al, bl, m[8], 0x8f1bbcdc, 15);
            el = rotl(el, 10);
            bl = fn4(bl, cl, dl, el, al, m[12], 0x8f1bbcdc, 9);
            dl = rotl(dl, 10);
            al = fn4(al, bl, cl, dl, el, m[4], 0x8f1bbcdc, 8);
            cl = rotl(cl, 10);
            el = fn4(el, al, bl, cl, dl, m[13], 0x8f1bbcdc, 9);
            bl = rotl(bl, 10);
            dl = fn4(dl, el, al, bl, cl, m[3], 0x8f1bbcdc, 14);
            al = rotl(al, 10);
            cl = fn4(cl, dl, el, al, bl, m[7], 0x8f1bbcdc, 5);
            el = rotl(el, 10);
            bl = fn4(bl, cl, dl, el, al, m[15], 0x8f1bbcdc, 6);
            dl = rotl(dl, 10);
            al = fn4(al, bl, cl, dl, el, m[14], 0x8f1bbcdc, 8);
            cl = rotl(cl, 10);
            el = fn4(el, al, bl, cl, dl, m[5], 0x8f1bbcdc, 6);
            bl = rotl(bl, 10);
            dl = fn4(dl, el, al, bl, cl, m[6], 0x8f1bbcdc, 5);
            al = rotl(al, 10);
            cl = fn4(cl, dl, el, al, bl, m[2], 0x8f1bbcdc, 12);
            el = rotl(el, 10);

            // Mj = 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
            // K = 0xa953fd4e
            // Sj = 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
            bl = fn5(bl, cl, dl, el, al, m[4], 0xa953fd4e, 9);
            dl = rotl(dl, 10);
            al = fn5(al, bl, cl, dl, el, m[0], 0xa953fd4e, 15);
            cl = rotl(cl, 10);
            el = fn5(el, al, bl, cl, dl, m[5], 0xa953fd4e, 5);
            bl = rotl(bl, 10);
            dl = fn5(dl, el, al, bl, cl, m[9], 0xa953fd4e, 11);
            al = rotl(al, 10);
            cl = fn5(cl, dl, el, al, bl, m[7], 0xa953fd4e, 6);
            el = rotl(el, 10);
            bl = fn5(bl, cl, dl, el, al, m[12], 0xa953fd4e, 8);
            dl = rotl(dl, 10);
            al = fn5(al, bl, cl, dl, el, m[2], 0xa953fd4e, 13);
            cl = rotl(cl, 10);
            el = fn5(el, al, bl, cl, dl, m[10], 0xa953fd4e, 12);
            bl = rotl(bl, 10);
            dl = fn5(dl, el, al, bl, cl, m[14], 0xa953fd4e, 5);
            al = rotl(al, 10);
            cl = fn5(cl, dl, el, al, bl, m[1], 0xa953fd4e, 12);
            el = rotl(el, 10);
            bl = fn5(bl, cl, dl, el, al, m[3], 0xa953fd4e, 13);
            dl = rotl(dl, 10);
            al = fn5(al, bl, cl, dl, el, m[8], 0xa953fd4e, 14);
            cl = rotl(cl, 10);
            el = fn5(el, al, bl, cl, dl, m[11], 0xa953fd4e, 11);
            bl = rotl(bl, 10);
            dl = fn5(dl, el, al, bl, cl, m[6], 0xa953fd4e, 8);
            al = rotl(al, 10);
            cl = fn5(cl, dl, el, al, bl, m[15], 0xa953fd4e, 5);
            el = rotl(el, 10);
            bl = fn5(bl, cl, dl, el, al, m[13], 0xa953fd4e, 6);
            dl = rotl(dl, 10);

            var ar = this._a;
            var br = this._b;
            var cr = this._c;
            var dr = this._d;
            var er = this._e;

            // M'j = 5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12
            // K' = 0x50a28be6
            // S'j = 8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6
            ar = fn5(ar, br, cr, dr, er, m[5], 0x50a28be6, 8);
            cr = rotl(cr, 10);
            er = fn5(er, ar, br, cr, dr, m[14], 0x50a28be6, 9);
            br = rotl(br, 10);
            dr = fn5(dr, er, ar, br, cr, m[7], 0x50a28be6, 9);
            ar = rotl(ar, 10);
            cr = fn5(cr, dr, er, ar, br, m[0], 0x50a28be6, 11);
            er = rotl(er, 10);
            br = fn5(br, cr, dr, er, ar, m[9], 0x50a28be6, 13);
            dr = rotl(dr, 10);
            ar = fn5(ar, br, cr, dr, er, m[2], 0x50a28be6, 15);
            cr = rotl(cr, 10);
            er = fn5(er, ar, br, cr, dr, m[11], 0x50a28be6, 15);
            br = rotl(br, 10);
            dr = fn5(dr, er, ar, br, cr, m[4], 0x50a28be6, 5);
            ar = rotl(ar, 10);
            cr = fn5(cr, dr, er, ar, br, m[13], 0x50a28be6, 7);
            er = rotl(er, 10);
            br = fn5(br, cr, dr, er, ar, m[6], 0x50a28be6, 7);
            dr = rotl(dr, 10);
            ar = fn5(ar, br, cr, dr, er, m[15], 0x50a28be6, 8);
            cr = rotl(cr, 10);
            er = fn5(er, ar, br, cr, dr, m[8], 0x50a28be6, 11);
            br = rotl(br, 10);
            dr = fn5(dr, er, ar, br, cr, m[1], 0x50a28be6, 14);
            ar = rotl(ar, 10);
            cr = fn5(cr, dr, er, ar, br, m[10], 0x50a28be6, 14);
            er = rotl(er, 10);
            br = fn5(br, cr, dr, er, ar, m[3], 0x50a28be6, 12);
            dr = rotl(dr, 10);
            ar = fn5(ar, br, cr, dr, er, m[12], 0x50a28be6, 6);
            cr = rotl(cr, 10);

            // M'j = 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2
            // K' = 0x5c4dd124
            // S'j = 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11
            er = fn4(er, ar, br, cr, dr, m[6], 0x5c4dd124, 9);
            br = rotl(br, 10);
            dr = fn4(dr, er, ar, br, cr, m[11], 0x5c4dd124, 13);
            ar = rotl(ar, 10);
            cr = fn4(cr, dr, er, ar, br, m[3], 0x5c4dd124, 15);
            er = rotl(er, 10);
            br = fn4(br, cr, dr, er, ar, m[7], 0x5c4dd124, 7);
            dr = rotl(dr, 10);
            ar = fn4(ar, br, cr, dr, er, m[0], 0x5c4dd124, 12);
            cr = rotl(cr, 10);
            er = fn4(er, ar, br, cr, dr, m[13], 0x5c4dd124, 8);
            br = rotl(br, 10);
            dr = fn4(dr, er, ar, br, cr, m[5], 0x5c4dd124, 9);
            ar = rotl(ar, 10);
            cr = fn4(cr, dr, er, ar, br, m[10], 0x5c4dd124, 11);
            er = rotl(er, 10);
            br = fn4(br, cr, dr, er, ar, m[14], 0x5c4dd124, 7);
            dr = rotl(dr, 10);
            ar = fn4(ar, br, cr, dr, er, m[15], 0x5c4dd124, 7);
            cr = rotl(cr, 10);
            er = fn4(er, ar, br, cr, dr, m[8], 0x5c4dd124, 12);
            br = rotl(br, 10);
            dr = fn4(dr, er, ar, br, cr, m[12], 0x5c4dd124, 7);
            ar = rotl(ar, 10);
            cr = fn4(cr, dr, er, ar, br, m[4], 0x5c4dd124, 6);
            er = rotl(er, 10);
            br = fn4(br, cr, dr, er, ar, m[9], 0x5c4dd124, 15);
            dr = rotl(dr, 10);
            ar = fn4(ar, br, cr, dr, er, m[1], 0x5c4dd124, 13);
            cr = rotl(cr, 10);
            er = fn4(er, ar, br, cr, dr, m[2], 0x5c4dd124, 11);
            br = rotl(br, 10);

            // M'j = 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13
            // K' = 0x6d703ef3
            // S'j = 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5
            dr = fn3(dr, er, ar, br, cr, m[15], 0x6d703ef3, 9);
            ar = rotl(ar, 10);
            cr = fn3(cr, dr, er, ar, br, m[5], 0x6d703ef3, 7);
            er = rotl(er, 10);
            br = fn3(br, cr, dr, er, ar, m[1], 0x6d703ef3, 15);
            dr = rotl(dr, 10);
            ar = fn3(ar, br, cr, dr, er, m[3], 0x6d703ef3, 11);
            cr = rotl(cr, 10);
            er = fn3(er, ar, br, cr, dr, m[7], 0x6d703ef3, 8);
            br = rotl(br, 10);
            dr = fn3(dr, er, ar, br, cr, m[14], 0x6d703ef3, 6);
            ar = rotl(ar, 10);
            cr = fn3(cr, dr, er, ar, br, m[6], 0x6d703ef3, 6);
            er = rotl(er, 10);
            br = fn3(br, cr, dr, er, ar, m[9], 0x6d703ef3, 14);
            dr = rotl(dr, 10);
            ar = fn3(ar, br, cr, dr, er, m[11], 0x6d703ef3, 12);
            cr = rotl(cr, 10);
            er = fn3(er, ar, br, cr, dr, m[8], 0x6d703ef3, 13);
            br = rotl(br, 10);
            dr = fn3(dr, er, ar, br, cr, m[12], 0x6d703ef3, 5);
            ar = rotl(ar, 10);
            cr = fn3(cr, dr, er, ar, br, m[2], 0x6d703ef3, 14);
            er = rotl(er, 10);
            br = fn3(br, cr, dr, er, ar, m[10], 0x6d703ef3, 13);
            dr = rotl(dr, 10);
            ar = fn3(ar, br, cr, dr, er, m[0], 0x6d703ef3, 13);
            cr = rotl(cr, 10);
            er = fn3(er, ar, br, cr, dr, m[4], 0x6d703ef3, 7);
            br = rotl(br, 10);
            dr = fn3(dr, er, ar, br, cr, m[13], 0x6d703ef3, 5);
            ar = rotl(ar, 10);

            // M'j = 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14
            // K' = 0x7a6d76e9
            // S'j = 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8
            cr = fn2(cr, dr, er, ar, br, m[8], 0x7a6d76e9, 15);
            er = rotl(er, 10);
            br = fn2(br, cr, dr, er, ar, m[6], 0x7a6d76e9, 5);
            dr = rotl(dr, 10);
            ar = fn2(ar, br, cr, dr, er, m[4], 0x7a6d76e9, 8);
            cr = rotl(cr, 10);
            er = fn2(er, ar, br, cr, dr, m[1], 0x7a6d76e9, 11);
            br = rotl(br, 10);
            dr = fn2(dr, er, ar, br, cr, m[3], 0x7a6d76e9, 14);
            ar = rotl(ar, 10);
            cr = fn2(cr, dr, er, ar, br, m[11], 0x7a6d76e9, 14);
            er = rotl(er, 10);
            br = fn2(br, cr, dr, er, ar, m[15], 0x7a6d76e9, 6);
            dr = rotl(dr, 10);
            ar = fn2(ar, br, cr, dr, er, m[0], 0x7a6d76e9, 14);
            cr = rotl(cr, 10);
            er = fn2(er, ar, br, cr, dr, m[5], 0x7a6d76e9, 6);
            br = rotl(br, 10);
            dr = fn2(dr, er, ar, br, cr, m[12], 0x7a6d76e9, 9);
            ar = rotl(ar, 10);
            cr = fn2(cr, dr, er, ar, br, m[2], 0x7a6d76e9, 12);
            er = rotl(er, 10);
            br = fn2(br, cr, dr, er, ar, m[13], 0x7a6d76e9, 9);
            dr = rotl(dr, 10);
            ar = fn2(ar, br, cr, dr, er, m[9], 0x7a6d76e9, 12);
            cr = rotl(cr, 10);
            er = fn2(er, ar, br, cr, dr, m[7], 0x7a6d76e9, 5);
            br = rotl(br, 10);
            dr = fn2(dr, er, ar, br, cr, m[10], 0x7a6d76e9, 15);
            ar = rotl(ar, 10);
            cr = fn2(cr, dr, er, ar, br, m[14], 0x7a6d76e9, 8);
            er = rotl(er, 10);

            // M'j = 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
            // K' = 0x00000000
            // S'j = 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
            br = fn1(br, cr, dr, er, ar, m[12], 0x00000000, 8);
            dr = rotl(dr, 10);
            ar = fn1(ar, br, cr, dr, er, m[15], 0x00000000, 5);
            cr = rotl(cr, 10);
            er = fn1(er, ar, br, cr, dr, m[10], 0x00000000, 12);
            br = rotl(br, 10);
            dr = fn1(dr, er, ar, br, cr, m[4], 0x00000000, 9);
            ar = rotl(ar, 10);
            cr = fn1(cr, dr, er, ar, br, m[1], 0x00000000, 12);
            er = rotl(er, 10);
            br = fn1(br, cr, dr, er, ar, m[5], 0x00000000, 5);
            dr = rotl(dr, 10);
            ar = fn1(ar, br, cr, dr, er, m[8], 0x00000000, 14);
            cr = rotl(cr, 10);
            er = fn1(er, ar, br, cr, dr, m[7], 0x00000000, 6);
            br = rotl(br, 10);
            dr = fn1(dr, er, ar, br, cr, m[6], 0x00000000, 8);
            ar = rotl(ar, 10);
            cr = fn1(cr, dr, er, ar, br, m[2], 0x00000000, 13);
            er = rotl(er, 10);
            br = fn1(br, cr, dr, er, ar, m[13], 0x00000000, 6);
            dr = rotl(dr, 10);
            ar = fn1(ar, br, cr, dr, er, m[14], 0x00000000, 5);
            cr = rotl(cr, 10);
            er = fn1(er, ar, br, cr, dr, m[0], 0x00000000, 15);
            br = rotl(br, 10);
            dr = fn1(dr, er, ar, br, cr, m[3], 0x00000000, 13);
            ar = rotl(ar, 10);
            cr = fn1(cr, dr, er, ar, br, m[9], 0x00000000, 11);
            er = rotl(er, 10);
            br = fn1(br, cr, dr, er, ar, m[11], 0x00000000, 11);
            dr = rotl(dr, 10);

            // change state
            var t = (this._b + cl + dr) | 0;
            this._b = (this._c + dl + er) | 0;
            this._c = (this._d + el + ar) | 0;
            this._d = (this._e + al + br) | 0;
            this._e = (this._a + bl + cr) | 0;
            this._a = t;
          };

          RIPEMD160.prototype._digest = function() {
            // create padding and handle blocks
            this._block[this._blockOffset++] = 0x80;
            if (this._blockOffset > 56) {
              this._block.fill(0, this._blockOffset, 64);
              this._update();
              this._blockOffset = 0;
            }

            this._block.fill(0, this._blockOffset, 56);
            this._block.writeUInt32LE(this._length[0], 56);
            this._block.writeUInt32LE(this._length[1], 60);
            this._update();

            // produce result
            var buffer = new Buffer(20);
            buffer.writeInt32LE(this._a, 0);
            buffer.writeInt32LE(this._b, 4);
            buffer.writeInt32LE(this._c, 8);
            buffer.writeInt32LE(this._d, 12);
            buffer.writeInt32LE(this._e, 16);
            return buffer;
          };

          function rotl(x, n) {
            return (x << n) | (x >>> (32 - n));
          }

          function fn1(a, b, c, d, e, m, k, s) {
            return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0;
          }

          function fn2(a, b, c, d, e, m, k, s) {
            return (rotl((a + ((b & c) | (~b & d)) + m + k) | 0, s) + e) | 0;
          }

          function fn3(a, b, c, d, e, m, k, s) {
            return (rotl((a + ((b | ~c) ^ d) + m + k) | 0, s) + e) | 0;
          }

          function fn4(a, b, c, d, e, m, k, s) {
            return (rotl((a + ((b & d) | (c & ~d)) + m + k) | 0, s) + e) | 0;
          }

          function fn5(a, b, c, d, e, m, k, s) {
            return (rotl((a + (b ^ (c | ~d)) + m + k) | 0, s) + e) | 0;
          }

          module.exports = RIPEMD160;

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(0).Buffer));

        /***/
      },
      /* 57 */
      /***/ function(module, exports, __webpack_require__) {
        var exports = (module.exports = function SHA(algorithm) {
          algorithm = algorithm.toLowerCase();

          var Algorithm = exports[algorithm];
          if (!Algorithm)
            throw new Error(
              algorithm + " is not supported (we accept pull requests)"
            );

          return new Algorithm();
        });

        exports.sha = __webpack_require__(156);
        exports.sha1 = __webpack_require__(157);
        exports.sha224 = __webpack_require__(158);
        exports.sha256 = __webpack_require__(87);
        exports.sha384 = __webpack_require__(159);
        exports.sha512 = __webpack_require__(88);

        /***/
      },
      /* 58 */
      /***/ function(module, exports, __webpack_require__) {
        var ciphers = __webpack_require__(164);
        exports.createCipher = exports.Cipher = ciphers.createCipher;
        exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv;
        var deciphers = __webpack_require__(166);
        exports.createDecipher = exports.Decipher = deciphers.createDecipher;
        exports.createDecipheriv = exports.Decipheriv =
          deciphers.createDecipheriv;
        var modes = __webpack_require__(38);
        function getCiphers() {
          return Object.keys(modes);
        }
        exports.listCiphers = exports.getCiphers = getCiphers;

        /***/
      },
      /* 59 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        exports.utils = __webpack_require__(168);
        exports.Cipher = __webpack_require__(169);
        exports.DES = __webpack_require__(170);
        exports.CBC = __webpack_require__(171);
        exports.EDE = __webpack_require__(172);

        /***/
      },
      /* 60 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(Buffer) {
          var bn = __webpack_require__(4);
          var randomBytes = __webpack_require__(24);
          module.exports = crt;
          function blind(priv) {
            var r = getr(priv);
            var blinder = r
              .toRed(bn.mont(priv.modulus))
              .redPow(new bn(priv.publicExponent))
              .fromRed();
            return {
              blinder: blinder,
              unblinder: r.invm(priv.modulus)
            };
          }
          function crt(msg, priv) {
            var blinds = blind(priv);
            var len = priv.modulus.byteLength();
            var mod = bn.mont(priv.modulus);
            var blinded = new bn(msg).mul(blinds.blinder).umod(priv.modulus);
            var c1 = blinded.toRed(bn.mont(priv.prime1));
            var c2 = blinded.toRed(bn.mont(priv.prime2));
            var qinv = priv.coefficient;
            var p = priv.prime1;
            var q = priv.prime2;
            var m1 = c1.redPow(priv.exponent1);
            var m2 = c2.redPow(priv.exponent2);
            m1 = m1.fromRed();
            m2 = m2.fromRed();
            var h = m1.isub(m2).imul(qinv).umod(p);
            h.imul(q);
            m2.iadd(h);
            return new Buffer(
              m2.imul(blinds.unblinder).umod(priv.modulus).toArray(false, len)
            );
          }
          crt.getr = getr;
          function getr(priv) {
            var len = priv.modulus.byteLength();
            var r = new bn(randomBytes(len));
            while (
              r.cmp(priv.modulus) >= 0 ||
              !r.umod(priv.prime1) ||
              !r.umod(priv.prime2)
            ) {
              r = new bn(randomBytes(len));
            }
            return r;
          }

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(0).Buffer));

        /***/
      },
      /* 61 */
      /***/ function(module, exports, __webpack_require__) {
        var hash = exports;

        hash.utils = __webpack_require__(10);
        hash.common = __webpack_require__(27);
        hash.sha = __webpack_require__(187);
        hash.ripemd = __webpack_require__(191);
        hash.hmac = __webpack_require__(192);

        // Proxy hash functions to the main object
        hash.sha1 = hash.sha.sha1;
        hash.sha256 = hash.sha.sha256;
        hash.sha224 = hash.sha.sha224;
        hash.sha384 = hash.sha.sha384;
        hash.sha512 = hash.sha.sha512;
        hash.ripemd160 = hash.ripemd.ripemd160;

        /***/
      },
      /* 62 */
      /***/ function(module, exports, __webpack_require__) {
        /**
 * Node.js module for Forge.
 *
 * @author Dave Longley
 *
 * Copyright 2011-2016 Digital Bazaar, Inc.
 */
        module.exports = __webpack_require__(1);
        __webpack_require__(15);
        __webpack_require__(126);
        __webpack_require__(11);
        __webpack_require__(43);
        __webpack_require__(78);
        __webpack_require__(30);
        __webpack_require__(21);
        __webpack_require__(130);
        __webpack_require__(79);
        __webpack_require__(131);
        __webpack_require__(77);
        __webpack_require__(45);
        __webpack_require__(18);
        __webpack_require__(73);
        __webpack_require__(75);
        __webpack_require__(133);
        __webpack_require__(66);
        __webpack_require__(74);
        __webpack_require__(71);
        __webpack_require__(48);
        __webpack_require__(9);
        __webpack_require__(72);
        __webpack_require__(134);
        __webpack_require__(135);
        __webpack_require__(65);
        __webpack_require__(3);

        /***/
      },
      /* 63 */
      /***/ function(module, exports, __webpack_require__) {
        var apply = Function.prototype.apply;

        // DOM APIs, for completeness

        exports.setTimeout = function() {
          return new Timeout(
            apply.call(setTimeout, window, arguments),
            clearTimeout
          );
        };
        exports.setInterval = function() {
          return new Timeout(
            apply.call(setInterval, window, arguments),
            clearInterval
          );
        };
        exports.clearTimeout = exports.clearInterval = function(timeout) {
          if (timeout) {
            timeout.close();
          }
        };

        function Timeout(id, clearFn) {
          this._id = id;
          this._clearFn = clearFn;
        }
        Timeout.prototype.unref = Timeout.prototype.ref = function() {};
        Timeout.prototype.close = function() {
          this._clearFn.call(window, this._id);
        };

        // Does not start the time, just sets up the members needed.
        exports.enroll = function(item, msecs) {
          clearTimeout(item._idleTimeoutId);
          item._idleTimeout = msecs;
        };

        exports.unenroll = function(item) {
          clearTimeout(item._idleTimeoutId);
          item._idleTimeout = -1;
        };

        exports._unrefActive = exports.active = function(item) {
          clearTimeout(item._idleTimeoutId);

          var msecs = item._idleTimeout;
          if (msecs >= 0) {
            item._idleTimeoutId = setTimeout(function onTimeout() {
              if (item._onTimeout) item._onTimeout();
            }, msecs);
          }
        };

        // setimmediate attaches itself to the global object
        __webpack_require__(124);
        var global = __webpack_require__(125);
        exports.setImmediate = global.setImmediate;
        exports.clearImmediate = global.clearImmediate;

        /***/
      },
      /* 64 */
      /***/ function(module, exports, __webpack_require__) {
        /**
 * Supported cipher modes.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
 */
        var forge = __webpack_require__(1);
        __webpack_require__(3);

        forge.cipher = forge.cipher || {};

        // supported cipher modes
        var modes = (module.exports = forge.cipher.modes =
          forge.cipher.modes || {});

        /** Electronic codebook (ECB) (Don't use this; it's not secure) **/

        modes.ecb = function(options) {
          options = options || {};
          this.name = "ECB";
          this.cipher = options.cipher;
          this.blockSize = options.blockSize || 16;
          this._ints = this.blockSize / 4;
          this._inBlock = new Array(this._ints);
          this._outBlock = new Array(this._ints);
        };

        modes.ecb.prototype.start = function(options) {};

        modes.ecb.prototype.encrypt = function(input, output, finish) {
          // not enough input to encrypt
          if (
            input.length() < this.blockSize &&
            !(finish && input.length() > 0)
          ) {
            return true;
          }

          // get next block
          for (var i = 0; i < this._ints; ++i) {
            this._inBlock[i] = input.getInt32();
          }

          // encrypt block
          this.cipher.encrypt(this._inBlock, this._outBlock);

          // write output
          for (var i = 0; i < this._ints; ++i) {
            output.putInt32(this._outBlock[i]);
          }
        };

        modes.ecb.prototype.decrypt = function(input, output, finish) {
          // not enough input to decrypt
          if (
            input.length() < this.blockSize &&
            !(finish && input.length() > 0)
          ) {
            return true;
          }

          // get next block
          for (var i = 0; i < this._ints; ++i) {
            this._inBlock[i] = input.getInt32();
          }

          // decrypt block
          this.cipher.decrypt(this._inBlock, this._outBlock);

          // write output
          for (var i = 0; i < this._ints; ++i) {
            output.putInt32(this._outBlock[i]);
          }
        };

        modes.ecb.prototype.pad = function(input, options) {
          // add PKCS#7 padding to block (each pad byte is the
          // value of the number of pad bytes)
          var padding =
            input.length() === this.blockSize
              ? this.blockSize
              : this.blockSize - input.length();
          input.fillWithByte(padding, padding);
          return true;
        };

        modes.ecb.prototype.unpad = function(output, options) {
          // check for error: input data not a multiple of blockSize
          if (options.overflow > 0) {
            return false;
          }

          // ensure padding byte count is valid
          var len = output.length();
          var count = output.at(len - 1);
          if (count > this.blockSize << 2) {
            return false;
          }

          // trim off padding bytes
          output.truncate(count);
          return true;
        };

        /** Cipher-block Chaining (CBC) **/

        modes.cbc = function(options) {
          options = options || {};
          this.name = "CBC";
          this.cipher = options.cipher;
          this.blockSize = options.blockSize || 16;
          this._ints = this.blockSize / 4;
          this._inBlock = new Array(this._ints);
          this._outBlock = new Array(this._ints);
        };

        modes.cbc.prototype.start = function(options) {
          // Note: legacy support for using IV residue (has security flaws)
          // if IV is null, reuse block from previous processing
          if (options.iv === null) {
            // must have a previous block
            if (!this._prev) {
              throw new Error("Invalid IV parameter.");
            }
            this._iv = this._prev.slice(0);
          } else if (!("iv" in options)) {
            throw new Error("Invalid IV parameter.");
          } else {
            // save IV as "previous" block
            this._iv = transformIV(options.iv);
            this._prev = this._iv.slice(0);
          }
        };

        modes.cbc.prototype.encrypt = function(input, output, finish) {
          // not enough input to encrypt
          if (
            input.length() < this.blockSize &&
            !(finish && input.length() > 0)
          ) {
            return true;
          }

          // get next block
          // CBC XOR's IV (or previous block) with plaintext
          for (var i = 0; i < this._ints; ++i) {
            this._inBlock[i] = this._prev[i] ^ input.getInt32();
          }

          // encrypt block
          this.cipher.encrypt(this._inBlock, this._outBlock);

          // write output, save previous block
          for (var i = 0; i < this._ints; ++i) {
            output.putInt32(this._outBlock[i]);
          }
          this._prev = this._outBlock;
        };

        modes.cbc.prototype.decrypt = function(input, output, finish) {
          // not enough input to decrypt
          if (
            input.length() < this.blockSize &&
            !(finish && input.length() > 0)
          ) {
            return true;
          }

          // get next block
          for (var i = 0; i < this._ints; ++i) {
            this._inBlock[i] = input.getInt32();
          }

          // decrypt block
          this.cipher.decrypt(this._inBlock, this._outBlock);

          // write output, save previous ciphered block
          // CBC XOR's IV (or previous block) with ciphertext
          for (var i = 0; i < this._ints; ++i) {
            output.putInt32(this._prev[i] ^ this._outBlock[i]);
          }
          this._prev = this._inBlock.slice(0);
        };

        modes.cbc.prototype.pad = function(input, options) {
          // add PKCS#7 padding to block (each pad byte is the
          // value of the number of pad bytes)
          var padding =
            input.length() === this.blockSize
              ? this.blockSize
              : this.blockSize - input.length();
          input.fillWithByte(padding, padding);
          return true;
        };

        modes.cbc.prototype.unpad = function(output, options) {
          // check for error: input data not a multiple of blockSize
          if (options.overflow > 0) {
            return false;
          }

          // ensure padding byte count is valid
          var len = output.length();
          var count = output.at(len - 1);
          if (count > this.blockSize << 2) {
            return false;
          }

          // trim off padding bytes
          output.truncate(count);
          return true;
        };

        /** Cipher feedback (CFB) **/

        modes.cfb = function(options) {
          options = options || {};
          this.name = "CFB";
          this.cipher = options.cipher;
          this.blockSize = options.blockSize || 16;
          this._ints = this.blockSize / 4;
          this._inBlock = null;
          this._outBlock = new Array(this._ints);
          this._partialBlock = new Array(this._ints);
          this._partialOutput = forge.util.createBuffer();
          this._partialBytes = 0;
        };

        modes.cfb.prototype.start = function(options) {
          if (!("iv" in options)) {
            throw new Error("Invalid IV parameter.");
          }
          // use IV as first input
          this._iv = transformIV(options.iv);
          this._inBlock = this._iv.slice(0);
          this._partialBytes = 0;
        };

        modes.cfb.prototype.encrypt = function(input, output, finish) {
          // not enough input to encrypt
          var inputLength = input.length();
          if (inputLength === 0) {
            return true;
          }

          // encrypt block
          this.cipher.encrypt(this._inBlock, this._outBlock);

          // handle full block
          if (this._partialBytes === 0 && inputLength >= this.blockSize) {
            // XOR input with output, write input as output
            for (var i = 0; i < this._ints; ++i) {
              this._inBlock[i] = input.getInt32() ^ this._outBlock[i];
              output.putInt32(this._inBlock[i]);
            }
            return;
          }

          // handle partial block
          var partialBytes = (this.blockSize - inputLength) % this.blockSize;
          if (partialBytes > 0) {
            partialBytes = this.blockSize - partialBytes;
          }

          // XOR input with output, write input as partial output
          this._partialOutput.clear();
          for (var i = 0; i < this._ints; ++i) {
            this._partialBlock[i] = input.getInt32() ^ this._outBlock[i];
            this._partialOutput.putInt32(this._partialBlock[i]);
          }

          if (partialBytes > 0) {
            // block still incomplete, restore input buffer
            input.read -= this.blockSize;
          } else {
            // block complete, update input block
            for (var i = 0; i < this._ints; ++i) {
              this._inBlock[i] = this._partialBlock[i];
            }
          }

          // skip any previous partial bytes
          if (this._partialBytes > 0) {
            this._partialOutput.getBytes(this._partialBytes);
          }

          if (partialBytes > 0 && !finish) {
            output.putBytes(
              this._partialOutput.getBytes(partialBytes - this._partialBytes)
            );
            this._partialBytes = partialBytes;
            return true;
          }

          output.putBytes(
            this._partialOutput.getBytes(inputLength - this._partialBytes)
          );
          this._partialBytes = 0;
        };

        modes.cfb.prototype.decrypt = function(input, output, finish) {
          // not enough input to decrypt
          var inputLength = input.length();
          if (inputLength === 0) {
            return true;
          }

          // encrypt block (CFB always uses encryption mode)
          this.cipher.encrypt(this._inBlock, this._outBlock);

          // handle full block
          if (this._partialBytes === 0 && inputLength >= this.blockSize) {
            // XOR input with output, write input as output
            for (var i = 0; i < this._ints; ++i) {
              this._inBlock[i] = input.getInt32();
              output.putInt32(this._inBlock[i] ^ this._outBlock[i]);
            }
            return;
          }

          // handle partial block
          var partialBytes = (this.blockSize - inputLength) % this.blockSize;
          if (partialBytes > 0) {
            partialBytes = this.blockSize - partialBytes;
          }

          // XOR input with output, write input as partial output
          this._partialOutput.clear();
          for (var i = 0; i < this._ints; ++i) {
            this._partialBlock[i] = input.getInt32();
            this._partialOutput.putInt32(
              this._partialBlock[i] ^ this._outBlock[i]
            );
          }

          if (partialBytes > 0) {
            // block still incomplete, restore input buffer
            input.read -= this.blockSize;
          } else {
            // block complete, update input block
            for (var i = 0; i < this._ints; ++i) {
              this._inBlock[i] = this._partialBlock[i];
            }
          }

          // skip any previous partial bytes
          if (this._partialBytes > 0) {
            this._partialOutput.getBytes(this._partialBytes);
          }

          if (partialBytes > 0 && !finish) {
            output.putBytes(
              this._partialOutput.getBytes(partialBytes - this._partialBytes)
            );
            this._partialBytes = partialBytes;
            return true;
          }

          output.putBytes(
            this._partialOutput.getBytes(inputLength - this._partialBytes)
          );
          this._partialBytes = 0;
        };

        /** Output feedback (OFB) **/

        modes.ofb = function(options) {
          options = options || {};
          this.name = "OFB";
          this.cipher = options.cipher;
          this.blockSize = options.blockSize || 16;
          this._ints = this.blockSize / 4;
          this._inBlock = null;
          this._outBlock = new Array(this._ints);
          this._partialOutput = forge.util.createBuffer();
          this._partialBytes = 0;
        };

        modes.ofb.prototype.start = function(options) {
          if (!("iv" in options)) {
            throw new Error("Invalid IV parameter.");
          }
          // use IV as first input
          this._iv = transformIV(options.iv);
          this._inBlock = this._iv.slice(0);
          this._partialBytes = 0;
        };

        modes.ofb.prototype.encrypt = function(input, output, finish) {
          // not enough input to encrypt
          var inputLength = input.length();
          if (input.length() === 0) {
            return true;
          }

          // encrypt block (OFB always uses encryption mode)
          this.cipher.encrypt(this._inBlock, this._outBlock);

          // handle full block
          if (this._partialBytes === 0 && inputLength >= this.blockSize) {
            // XOR input with output and update next input
            for (var i = 0; i < this._ints; ++i) {
              output.putInt32(input.getInt32() ^ this._outBlock[i]);
              this._inBlock[i] = this._outBlock[i];
            }
            return;
          }

          // handle partial block
          var partialBytes = (this.blockSize - inputLength) % this.blockSize;
          if (partialBytes > 0) {
            partialBytes = this.blockSize - partialBytes;
          }

          // XOR input with output
          this._partialOutput.clear();
          for (var i = 0; i < this._ints; ++i) {
            this._partialOutput.putInt32(input.getInt32() ^ this._outBlock[i]);
          }

          if (partialBytes > 0) {
            // block still incomplete, restore input buffer
            input.read -= this.blockSize;
          } else {
            // block complete, update input block
            for (var i = 0; i < this._ints; ++i) {
              this._inBlock[i] = this._outBlock[i];
            }
          }

          // skip any previous partial bytes
          if (this._partialBytes > 0) {
            this._partialOutput.getBytes(this._partialBytes);
          }

          if (partialBytes > 0 && !finish) {
            output.putBytes(
              this._partialOutput.getBytes(partialBytes - this._partialBytes)
            );
            this._partialBytes = partialBytes;
            return true;
          }

          output.putBytes(
            this._partialOutput.getBytes(inputLength - this._partialBytes)
          );
          this._partialBytes = 0;
        };

        modes.ofb.prototype.decrypt = modes.ofb.prototype.encrypt;

        /** Counter (CTR) **/

        modes.ctr = function(options) {
          options = options || {};
          this.name = "CTR";
          this.cipher = options.cipher;
          this.blockSize = options.blockSize || 16;
          this._ints = this.blockSize / 4;
          this._inBlock = null;
          this._outBlock = new Array(this._ints);
          this._partialOutput = forge.util.createBuffer();
          this._partialBytes = 0;
        };

        modes.ctr.prototype.start = function(options) {
          if (!("iv" in options)) {
            throw new Error("Invalid IV parameter.");
          }
          // use IV as first input
          this._iv = transformIV(options.iv);
          this._inBlock = this._iv.slice(0);
          this._partialBytes = 0;
        };

        modes.ctr.prototype.encrypt = function(input, output, finish) {
          // not enough input to encrypt
          var inputLength = input.length();
          if (inputLength === 0) {
            return true;
          }

          // encrypt block (CTR always uses encryption mode)
          this.cipher.encrypt(this._inBlock, this._outBlock);

          // handle full block
          if (this._partialBytes === 0 && inputLength >= this.blockSize) {
            // XOR input with output
            for (var i = 0; i < this._ints; ++i) {
              output.putInt32(input.getInt32() ^ this._outBlock[i]);
            }
          } else {
            // handle partial block
            var partialBytes = (this.blockSize - inputLength) % this.blockSize;
            if (partialBytes > 0) {
              partialBytes = this.blockSize - partialBytes;
            }

            // XOR input with output
            this._partialOutput.clear();
            for (var i = 0; i < this._ints; ++i) {
              this._partialOutput.putInt32(
                input.getInt32() ^ this._outBlock[i]
              );
            }

            if (partialBytes > 0) {
              // block still incomplete, restore input buffer
              input.read -= this.blockSize;
            }

            // skip any previous partial bytes
            if (this._partialBytes > 0) {
              this._partialOutput.getBytes(this._partialBytes);
            }

            if (partialBytes > 0 && !finish) {
              output.putBytes(
                this._partialOutput.getBytes(partialBytes - this._partialBytes)
              );
              this._partialBytes = partialBytes;
              return true;
            }

            output.putBytes(
              this._partialOutput.getBytes(inputLength - this._partialBytes)
            );
            this._partialBytes = 0;
          }

          // block complete, increment counter (input block)
          inc32(this._inBlock);
        };

        modes.ctr.prototype.decrypt = modes.ctr.prototype.encrypt;

        /** Galois/Counter Mode (GCM) **/

        modes.gcm = function(options) {
          options = options || {};
          this.name = "GCM";
          this.cipher = options.cipher;
          this.blockSize = options.blockSize || 16;
          this._ints = this.blockSize / 4;
          this._inBlock = new Array(this._ints);
          this._outBlock = new Array(this._ints);
          this._partialOutput = forge.util.createBuffer();
          this._partialBytes = 0;

          // R is actually this value concatenated with 120 more zero bits, but
          // we only XOR against R so the other zeros have no effect -- we just
          // apply this value to the first integer in a block
          this._R = 0xe1000000;
        };

        modes.gcm.prototype.start = function(options) {
          if (!("iv" in options)) {
            throw new Error("Invalid IV parameter.");
          }
          // ensure IV is a byte buffer
          var iv = forge.util.createBuffer(options.iv);

          // no ciphered data processed yet
          this._cipherLength = 0;

          // default additional data is none
          var additionalData;
          if ("additionalData" in options) {
            additionalData = forge.util.createBuffer(options.additionalData);
          } else {
            additionalData = forge.util.createBuffer();
          }

          // default tag length is 128 bits
          if ("tagLength" in options) {
            this._tagLength = options.tagLength;
          } else {
            this._tagLength = 128;
          }

          // if tag is given, ensure tag matches tag length
          this._tag = null;
          if (options.decrypt) {
            // save tag to check later
            this._tag = forge.util.createBuffer(options.tag).getBytes();
            if (this._tag.length !== this._tagLength / 8) {
              throw new Error("Authentication tag does not match tag length.");
            }
          }

          // create tmp storage for hash calculation
          this._hashBlock = new Array(this._ints);

          // no tag generated yet
          this.tag = null;

          // generate hash subkey
          // (apply block cipher to "zero" block)
          this._hashSubkey = new Array(this._ints);
          this.cipher.encrypt([0, 0, 0, 0], this._hashSubkey);

          // generate table M
          // use 4-bit tables (32 component decomposition of a 16 byte value)
          // 8-bit tables take more space and are known to have security
          // vulnerabilities (in native implementations)
          this.componentBits = 4;
          this._m = this.generateHashTable(
            this._hashSubkey,
            this.componentBits
          );

          // Note: support IV length different from 96 bits? (only supporting
          // 96 bits is recommended by NIST SP-800-38D)
          // generate J_0
          var ivLength = iv.length();
          if (ivLength === 12) {
            // 96-bit IV
            this._j0 = [iv.getInt32(), iv.getInt32(), iv.getInt32(), 1];
          } else {
            // IV is NOT 96-bits
            this._j0 = [0, 0, 0, 0];
            while (iv.length() > 0) {
              this._j0 = this.ghash(this._hashSubkey, this._j0, [
                iv.getInt32(),
                iv.getInt32(),
                iv.getInt32(),
                iv.getInt32()
              ]);
            }
            this._j0 = this.ghash(
              this._hashSubkey,
              this._j0,
              [0, 0].concat(from64To32(ivLength * 8))
            );
          }

          // generate ICB (initial counter block)
          this._inBlock = this._j0.slice(0);
          inc32(this._inBlock);
          this._partialBytes = 0;

          // consume authentication data
          additionalData = forge.util.createBuffer(additionalData);
          // save additional data length as a BE 64-bit number
          this._aDataLength = from64To32(additionalData.length() * 8);
          // pad additional data to 128 bit (16 byte) block size
          var overflow = additionalData.length() % this.blockSize;
          if (overflow) {
            additionalData.fillWithByte(0, this.blockSize - overflow);
          }
          this._s = [0, 0, 0, 0];
          while (additionalData.length() > 0) {
            this._s = this.ghash(this._hashSubkey, this._s, [
              additionalData.getInt32(),
              additionalData.getInt32(),
              additionalData.getInt32(),
              additionalData.getInt32()
            ]);
          }
        };

        modes.gcm.prototype.encrypt = function(input, output, finish) {
          // not enough input to encrypt
          var inputLength = input.length();
          if (inputLength === 0) {
            return true;
          }

          // encrypt block
          this.cipher.encrypt(this._inBlock, this._outBlock);

          // handle full block
          if (this._partialBytes === 0 && inputLength >= this.blockSize) {
            // XOR input with output
            for (var i = 0; i < this._ints; ++i) {
              output.putInt32((this._outBlock[i] ^= input.getInt32()));
            }
            this._cipherLength += this.blockSize;
          } else {
            // handle partial block
            var partialBytes = (this.blockSize - inputLength) % this.blockSize;
            if (partialBytes > 0) {
              partialBytes = this.blockSize - partialBytes;
            }

            // XOR input with output
            this._partialOutput.clear();
            for (var i = 0; i < this._ints; ++i) {
              this._partialOutput.putInt32(
                input.getInt32() ^ this._outBlock[i]
              );
            }

            if (partialBytes === 0 || finish) {
              // handle overflow prior to hashing
              if (finish) {
                // get block overflow
                var overflow = inputLength % this.blockSize;
                this._cipherLength += overflow;
                // truncate for hash function
                this._partialOutput.truncate(this.blockSize - overflow);
              } else {
                this._cipherLength += this.blockSize;
              }

              // get output block for hashing
              for (var i = 0; i < this._ints; ++i) {
                this._outBlock[i] = this._partialOutput.getInt32();
              }
              this._partialOutput.read -= this.blockSize;
            }

            // skip any previous partial bytes
            if (this._partialBytes > 0) {
              this._partialOutput.getBytes(this._partialBytes);
            }

            if (partialBytes > 0 && !finish) {
              // block still incomplete, restore input buffer, get partial output,
              // and return early
              input.read -= this.blockSize;
              output.putBytes(
                this._partialOutput.getBytes(partialBytes - this._partialBytes)
              );
              this._partialBytes = partialBytes;
              return true;
            }

            output.putBytes(
              this._partialOutput.getBytes(inputLength - this._partialBytes)
            );
            this._partialBytes = 0;
          }

          // update hash block S
          this._s = this.ghash(this._hashSubkey, this._s, this._outBlock);

          // increment counter (input block)
          inc32(this._inBlock);
        };

        modes.gcm.prototype.decrypt = function(input, output, finish) {
          // not enough input to decrypt
          var inputLength = input.length();
          if (inputLength < this.blockSize && !(finish && inputLength > 0)) {
            return true;
          }

          // encrypt block (GCM always uses encryption mode)
          this.cipher.encrypt(this._inBlock, this._outBlock);

          // increment counter (input block)
          inc32(this._inBlock);

          // update hash block S
          this._hashBlock[0] = input.getInt32();
          this._hashBlock[1] = input.getInt32();
          this._hashBlock[2] = input.getInt32();
          this._hashBlock[3] = input.getInt32();
          this._s = this.ghash(this._hashSubkey, this._s, this._hashBlock);

          // XOR hash input with output
          for (var i = 0; i < this._ints; ++i) {
            output.putInt32(this._outBlock[i] ^ this._hashBlock[i]);
          }

          // increment cipher data length
          if (inputLength < this.blockSize) {
            this._cipherLength += inputLength % this.blockSize;
          } else {
            this._cipherLength += this.blockSize;
          }
        };

        modes.gcm.prototype.afterFinish = function(output, options) {
          var rval = true;

          // handle overflow
          if (options.decrypt && options.overflow) {
            output.truncate(this.blockSize - options.overflow);
          }

          // handle authentication tag
          this.tag = forge.util.createBuffer();

          // concatenate additional data length with cipher length
          var lengths = this._aDataLength.concat(
            from64To32(this._cipherLength * 8)
          );

          // include lengths in hash
          this._s = this.ghash(this._hashSubkey, this._s, lengths);

          // do GCTR(J_0, S)
          var tag = [];
          this.cipher.encrypt(this._j0, tag);
          for (var i = 0; i < this._ints; ++i) {
            this.tag.putInt32(this._s[i] ^ tag[i]);
          }

          // trim tag to length
          this.tag.truncate(this.tag.length() % (this._tagLength / 8));

          // check authentication tag
          if (options.decrypt && this.tag.bytes() !== this._tag) {
            rval = false;
          }

          return rval;
        };

        /**
 * See NIST SP-800-38D 6.3 (Algorithm 1). This function performs Galois
 * field multiplication. The field, GF(2^128), is defined by the polynomial:
 *
 * x^128 + x^7 + x^2 + x + 1
 *
 * Which is represented in little-endian binary form as: 11100001 (0xe1). When
 * the value of a coefficient is 1, a bit is set. The value R, is the
 * concatenation of this value and 120 zero bits, yielding a 128-bit value
 * which matches the block size.
 *
 * This function will multiply two elements (vectors of bytes), X and Y, in
 * the field GF(2^128). The result is initialized to zero. For each bit of
 * X (out of 128), x_i, if x_i is set, then the result is multiplied (XOR'd)
 * by the current value of Y. For each bit, the value of Y will be raised by
 * a power of x (multiplied by the polynomial x). This can be achieved by
 * shifting Y once to the right. If the current value of Y, prior to being
 * multiplied by x, has 0 as its LSB, then it is a 127th degree polynomial.
 * Otherwise, we must divide by R after shifting to find the remainder.
 *
 * @param x the first block to multiply by the second.
 * @param y the second block to multiply by the first.
 *
 * @return the block result of the multiplication.
 */
        modes.gcm.prototype.multiply = function(x, y) {
          var z_i = [0, 0, 0, 0];
          var v_i = y.slice(0);

          // calculate Z_128 (block has 128 bits)
          for (var i = 0; i < 128; ++i) {
            // if x_i is 0, Z_{i+1} = Z_i (unchanged)
            // else Z_{i+1} = Z_i ^ V_i
            // get x_i by finding 32-bit int position, then left shift 1 by remainder
            var x_i = x[(i / 32) | 0] & (1 << (31 - i % 32));
            if (x_i) {
              z_i[0] ^= v_i[0];
              z_i[1] ^= v_i[1];
              z_i[2] ^= v_i[2];
              z_i[3] ^= v_i[3];
            }

            // if LSB(V_i) is 1, V_i = V_i >> 1
            // else V_i = (V_i >> 1) ^ R
            this.pow(v_i, v_i);
          }

          return z_i;
        };

        modes.gcm.prototype.pow = function(x, out) {
          // if LSB(x) is 1, x = x >>> 1
          // else x = (x >>> 1) ^ R
          var lsb = x[3] & 1;

          // always do x >>> 1:
          // starting with the rightmost integer, shift each integer to the right
          // one bit, pulling in the bit from the integer to the left as its top
          // most bit (do this for the last 3 integers)
          for (var i = 3; i > 0; --i) {
            out[i] = (x[i] >>> 1) | ((x[i - 1] & 1) << 31);
          }
          // shift the first integer normally
          out[0] = x[0] >>> 1;

          // if lsb was not set, then polynomial had a degree of 127 and doesn't
          // need to divided; otherwise, XOR with R to find the remainder; we only
          // need to XOR the first integer since R technically ends w/120 zero bits
          if (lsb) {
            out[0] ^= this._R;
          }
        };

        modes.gcm.prototype.tableMultiply = function(x) {
          // assumes 4-bit tables are used
          var z = [0, 0, 0, 0];
          for (var i = 0; i < 32; ++i) {
            var idx = (i / 8) | 0;
            var x_i = (x[idx] >>> ((7 - i % 8) * 4)) & 0xf;
            var ah = this._m[i][x_i];
            z[0] ^= ah[0];
            z[1] ^= ah[1];
            z[2] ^= ah[2];
            z[3] ^= ah[3];
          }
          return z;
        };

        /**
 * A continuing version of the GHASH algorithm that operates on a single
 * block. The hash block, last hash value (Ym) and the new block to hash
 * are given.
 *
 * @param h the hash block.
 * @param y the previous value for Ym, use [0, 0, 0, 0] for a new hash.
 * @param x the block to hash.
 *
 * @return the hashed value (Ym).
 */
        modes.gcm.prototype.ghash = function(h, y, x) {
          y[0] ^= x[0];
          y[1] ^= x[1];
          y[2] ^= x[2];
          y[3] ^= x[3];
          return this.tableMultiply(y);
          //return this.multiply(y, h);
        };

        /**
 * Precomputes a table for multiplying against the hash subkey. This
 * mechanism provides a substantial speed increase over multiplication
 * performed without a table. The table-based multiplication this table is
 * for solves X * H by multiplying each component of X by H and then
 * composing the results together using XOR.
 *
 * This function can be used to generate tables with different bit sizes
 * for the components, however, this implementation assumes there are
 * 32 components of X (which is a 16 byte vector), therefore each component
 * takes 4-bits (so the table is constructed with bits=4).
 *
 * @param h the hash subkey.
 * @param bits the bit size for a component.
 */
        modes.gcm.prototype.generateHashTable = function(h, bits) {
          // TODO: There are further optimizations that would use only the
          // first table M_0 (or some variant) along with a remainder table;
          // this can be explored in the future
          var multiplier = 8 / bits;
          var perInt = 4 * multiplier;
          var size = 16 * multiplier;
          var m = new Array(size);
          for (var i = 0; i < size; ++i) {
            var tmp = [0, 0, 0, 0];
            var idx = (i / perInt) | 0;
            var shft = (perInt - 1 - i % perInt) * bits;
            tmp[idx] = 1 << (bits - 1) << shft;
            m[i] = this.generateSubHashTable(this.multiply(tmp, h), bits);
          }
          return m;
        };

        /**
 * Generates a table for multiplying against the hash subkey for one
 * particular component (out of all possible component values).
 *
 * @param mid the pre-multiplied value for the middle key of the table.
 * @param bits the bit size for a component.
 */
        modes.gcm.prototype.generateSubHashTable = function(mid, bits) {
          // compute the table quickly by minimizing the number of
          // POW operations -- they only need to be performed for powers of 2,
          // all other entries can be composed from those powers using XOR
          var size = 1 << bits;
          var half = size >>> 1;
          var m = new Array(size);
          m[half] = mid.slice(0);
          var i = half >>> 1;
          while (i > 0) {
            // raise m0[2 * i] and store in m0[i]
            this.pow(m[2 * i], (m[i] = []));
            i >>= 1;
          }
          i = 2;
          while (i < half) {
            for (var j = 1; j < i; ++j) {
              var m_i = m[i];
              var m_j = m[j];
              m[i + j] = [
                m_i[0] ^ m_j[0],
                m_i[1] ^ m_j[1],
                m_i[2] ^ m_j[2],
                m_i[3] ^ m_j[3]
              ];
            }
            i *= 2;
          }
          m[0] = [0, 0, 0, 0];
          /* Note: We could avoid storing these by doing composition during multiply
  calculate top half using composition by speed is preferred. */
          for (i = half + 1; i < size; ++i) {
            var c = m[i ^ half];
            m[i] = [mid[0] ^ c[0], mid[1] ^ c[1], mid[2] ^ c[2], mid[3] ^ c[3]];
          }
          return m;
        };

        /** Utility functions */

        function transformIV(iv) {
          if (typeof iv === "string") {
            // convert iv string into byte buffer
            iv = forge.util.createBuffer(iv);
          }

          if (forge.util.isArray(iv) && iv.length > 4) {
            // convert iv byte array into byte buffer
            var tmp = iv;
            iv = forge.util.createBuffer();
            for (var i = 0; i < tmp.length; ++i) {
              iv.putByte(tmp[i]);
            }
          }
          if (!forge.util.isArray(iv)) {
            // convert iv byte buffer into 32-bit integer array
            iv = [iv.getInt32(), iv.getInt32(), iv.getInt32(), iv.getInt32()];
          }

          return iv;
        }

        function inc32(block) {
          // increment last 32 bits of block only
          block[block.length - 1] = (block[block.length - 1] + 1) & 0xffffffff;
        }

        function from64To32(num) {
          // convert 64-bit number to two BE Int32s
          return [(num / 0x100000000) | 0, num & 0xffffffff];
        }

        /***/
      },
      /* 65 */
      /***/ function(module, exports, __webpack_require__) {
        /**
 * A Javascript implementation of Transport Layer Security (TLS).
 *
 * @author Dave Longley
 *
 * Copyright (c) 2009-2014 Digital Bazaar, Inc.
 *
 * The TLS Handshake Protocol involves the following steps:
 *
 * - Exchange hello messages to agree on algorithms, exchange random values,
 * and check for session resumption.
 *
 * - Exchange the necessary cryptographic parameters to allow the client and
 * server to agree on a premaster secret.
 *
 * - Exchange certificates and cryptographic information to allow the client
 * and server to authenticate themselves.
 *
 * - Generate a master secret from the premaster secret and exchanged random
 * values.
 *
 * - Provide security parameters to the record layer.
 *
 * - Allow the client and server to verify that their peer has calculated the
 * same security parameters and that the handshake occurred without tampering
 * by an attacker.
 *
 * Up to 4 different messages may be sent during a key exchange. The server
 * certificate, the server key exchange, the client certificate, and the
 * client key exchange.
 *
 * A typical handshake (from the client's perspective).
 *
 * 1. Client sends ClientHello.
 * 2. Client receives ServerHello.
 * 3. Client receives optional Certificate.
 * 4. Client receives optional ServerKeyExchange.
 * 5. Client receives ServerHelloDone.
 * 6. Client sends optional Certificate.
 * 7. Client sends ClientKeyExchange.
 * 8. Client sends optional CertificateVerify.
 * 9. Client sends ChangeCipherSpec.
 * 10. Client sends Finished.
 * 11. Client receives ChangeCipherSpec.
 * 12. Client receives Finished.
 * 13. Client sends/receives application data.
 *
 * To reuse an existing session:
 *
 * 1. Client sends ClientHello with session ID for reuse.
 * 2. Client receives ServerHello with same session ID if reusing.
 * 3. Client receives ChangeCipherSpec message if reusing.
 * 4. Client receives Finished.
 * 5. Client sends ChangeCipherSpec.
 * 6. Client sends Finished.
 *
 * Note: Client ignores HelloRequest if in the middle of a handshake.
 *
 * Record Layer:
 *
 * The record layer fragments information blocks into TLSPlaintext records
 * carrying data in chunks of 2^14 bytes or less. Client message boundaries are
 * not preserved in the record layer (i.e., multiple client messages of the
 * same ContentType MAY be coalesced into a single TLSPlaintext record, or a
 * single message MAY be fragmented across several records).
 *
 * struct {
 *   uint8 major;
 *   uint8 minor;
 * } ProtocolVersion;
 *
 * struct {
 *   ContentType type;
 *   ProtocolVersion version;
 *   uint16 length;
 *   opaque fragment[TLSPlaintext.length];
 * } TLSPlaintext;
 *
 * type:
 *   The higher-level protocol used to process the enclosed fragment.
 *
 * version:
 *   The version of the protocol being employed. TLS Version 1.2 uses version
 *   {3, 3}. TLS Version 1.0 uses version {3, 1}. Note that a client that
 *   supports multiple versions of TLS may not know what version will be
 *   employed before it receives the ServerHello.
 *
 * length:
 *   The length (in bytes) of the following TLSPlaintext.fragment. The length
 *   MUST NOT exceed 2^14 = 16384 bytes.
 *
 * fragment:
 *   The application data. This data is transparent and treated as an
 *   independent block to be dealt with by the higher-level protocol specified
 *   by the type field.
 *
 * Implementations MUST NOT send zero-length fragments of Handshake, Alert, or
 * ChangeCipherSpec content types. Zero-length fragments of Application data
 * MAY be sent as they are potentially useful as a traffic analysis
 * countermeasure.
 *
 * Note: Data of different TLS record layer content types MAY be interleaved.
 * Application data is generally of lower precedence for transmission than
 * other content types. However, records MUST be delivered to the network in
 * the same order as they are protected by the record layer. Recipients MUST
 * receive and process interleaved application layer traffic during handshakes
 * subsequent to the first one on a connection.
 *
 * struct {
 *   ContentType type;       // same as TLSPlaintext.type
 *   ProtocolVersion version;// same as TLSPlaintext.version
 *   uint16 length;
 *   opaque fragment[TLSCompressed.length];
 * } TLSCompressed;
 *
 * length:
 *   The length (in bytes) of the following TLSCompressed.fragment.
 *   The length MUST NOT exceed 2^14 + 1024.
 *
 * fragment:
 *   The compressed form of TLSPlaintext.fragment.
 *
 * Note: A CompressionMethod.null operation is an identity operation; no fields
 * are altered. In this implementation, since no compression is supported,
 * uncompressed records are always the same as compressed records.
 *
 * Encryption Information:
 *
 * The encryption and MAC functions translate a TLSCompressed structure into a
 * TLSCiphertext. The decryption functions reverse the process. The MAC of the
 * record also includes a sequence number so that missing, extra, or repeated
 * messages are detectable.
 *
 * struct {
 *   ContentType type;
 *   ProtocolVersion version;
 *   uint16 length;
 *   select (SecurityParameters.cipher_type) {
 *     case stream: GenericStreamCipher;
 *     case block:  GenericBlockCipher;
 *     case aead:   GenericAEADCipher;
 *   } fragment;
 * } TLSCiphertext;
 *
 * type:
 *   The type field is identical to TLSCompressed.type.
 *
 * version:
 *   The version field is identical to TLSCompressed.version.
 *
 * length:
 *   The length (in bytes) of the following TLSCiphertext.fragment.
 *   The length MUST NOT exceed 2^14 + 2048.
 *
 * fragment:
 *   The encrypted form of TLSCompressed.fragment, with the MAC.
 *
 * Note: Only CBC Block Ciphers are supported by this implementation.
 *
 * The TLSCompressed.fragment structures are converted to/from block
 * TLSCiphertext.fragment structures.
 *
 * struct {
 *   opaque IV[SecurityParameters.record_iv_length];
 *   block-ciphered struct {
 *     opaque content[TLSCompressed.length];
 *     opaque MAC[SecurityParameters.mac_length];
 *     uint8 padding[GenericBlockCipher.padding_length];
 *     uint8 padding_length;
 *   };
 * } GenericBlockCipher;
 *
 * The MAC is generated as described in Section 6.2.3.1.
 *
 * IV:
 *   The Initialization Vector (IV) SHOULD be chosen at random, and MUST be
 *   unpredictable. Note that in versions of TLS prior to 1.1, there was no
 *   IV field, and the last ciphertext block of the previous record (the "CBC
 *   residue") was used as the IV. This was changed to prevent the attacks
 *   described in [CBCATT]. For block ciphers, the IV length is of length
 *   SecurityParameters.record_iv_length, which is equal to the
 *   SecurityParameters.block_size.
 *
 * padding:
 *   Padding that is added to force the length of the plaintext to be an
 *   integral multiple of the block cipher's block length. The padding MAY be
 *   any length up to 255 bytes, as long as it results in the
 *   TLSCiphertext.length being an integral multiple of the block length.
 *   Lengths longer than necessary might be desirable to frustrate attacks on
 *   a protocol that are based on analysis of the lengths of exchanged
 *   messages. Each uint8 in the padding data vector MUST be filled with the
 *   padding length value. The receiver MUST check this padding and MUST use
 *   the bad_record_mac alert to indicate padding errors.
 *
 * padding_length:
 *   The padding length MUST be such that the total size of the
 *   GenericBlockCipher structure is a multiple of the cipher's block length.
 *   Legal values range from zero to 255, inclusive. This length specifies the
 *   length of the padding field exclusive of the padding_length field itself.
 *
 * The encrypted data length (TLSCiphertext.length) is one more than the sum of
 * SecurityParameters.block_length, TLSCompressed.length,
 * SecurityParameters.mac_length, and padding_length.
 *
 * Example: If the block length is 8 bytes, the content length
 * (TLSCompressed.length) is 61 bytes, and the MAC length is 20 bytes, then the
 * length before padding is 82 bytes (this does not include the IV. Thus, the
 * padding length modulo 8 must be equal to 6 in order to make the total length
 * an even multiple of 8 bytes (the block length). The padding length can be
 * 6, 14, 22, and so on, through 254. If the padding length were the minimum
 * necessary, 6, the padding would be 6 bytes, each containing the value 6.
 * Thus, the last 8 octets of the GenericBlockCipher before block encryption
 * would be xx 06 06 06 06 06 06 06, where xx is the last octet of the MAC.
 *
 * Note: With block ciphers in CBC mode (Cipher Block Chaining), it is critical
 * that the entire plaintext of the record be known before any ciphertext is
 * transmitted. Otherwise, it is possible for the attacker to mount the attack
 * described in [CBCATT].
 *
 * Implementation note: Canvel et al. [CBCTIME] have demonstrated a timing
 * attack on CBC padding based on the time required to compute the MAC. In
 * order to defend against this attack, implementations MUST ensure that
 * record processing time is essentially the same whether or not the padding
 * is correct. In general, the best way to do this is to compute the MAC even
 * if the padding is incorrect, and only then reject the packet. For instance,
 * if the pad appears to be incorrect, the implementation might assume a
 * zero-length pad and then compute the MAC. This leaves a small timing
 * channel, since MAC performance depends, to some extent, on the size of the
 * data fragment, but it is not believed to be large enough to be exploitable,
 * due to the large block size of existing MACs and the small size of the
 * timing signal.
 */
        var forge = __webpack_require__(1);
        __webpack_require__(11);
        __webpack_require__(21);
        __webpack_require__(44);
        __webpack_require__(18);
        __webpack_require__(66);
        __webpack_require__(9);
        __webpack_require__(22);
        __webpack_require__(3);

        /**
 * Generates pseudo random bytes by mixing the result of two hash functions,
 * MD5 and SHA-1.
 *
 * prf_TLS1(secret, label, seed) =
 *   P_MD5(S1, label + seed) XOR P_SHA-1(S2, label + seed);
 *
 * Each P_hash function functions as follows:
 *
 * P_hash(secret, seed) = HMAC_hash(secret, A(1) + seed) +
 *                        HMAC_hash(secret, A(2) + seed) +
 *                        HMAC_hash(secret, A(3) + seed) + ...
 * A() is defined as:
 *   A(0) = seed
 *   A(i) = HMAC_hash(secret, A(i-1))
 *
 * The '+' operator denotes concatenation.
 *
 * As many iterations A(N) as are needed are performed to generate enough
 * pseudo random byte output. If an iteration creates more data than is
 * necessary, then it is truncated.
 *
 * Therefore:
 * A(1) = HMAC_hash(secret, A(0))
 *      = HMAC_hash(secret, seed)
 * A(2) = HMAC_hash(secret, A(1))
 *      = HMAC_hash(secret, HMAC_hash(secret, seed))
 *
 * Therefore:
 * P_hash(secret, seed) =
 *   HMAC_hash(secret, HMAC_hash(secret, A(0)) + seed) +
 *   HMAC_hash(secret, HMAC_hash(secret, A(1)) + seed) +
 *   ...
 *
 * Therefore:
 * P_hash(secret, seed) =
 *   HMAC_hash(secret, HMAC_hash(secret, seed) + seed) +
 *   HMAC_hash(secret, HMAC_hash(secret, HMAC_hash(secret, seed)) + seed) +
 *   ...
 *
 * @param secret the secret to use.
 * @param label the label to use.
 * @param seed the seed value to use.
 * @param length the number of bytes to generate.
 *
 * @return the pseudo random bytes in a byte buffer.
 */
        var prf_TLS1 = function(secret, label, seed, length) {
          var rval = forge.util.createBuffer();

          /* For TLS 1.0, the secret is split in half, into two secrets of equal
    length. If the secret has an odd length then the last byte of the first
    half will be the same as the first byte of the second. The length of the
    two secrets is half of the secret rounded up. */
          var idx = secret.length >> 1;
          var slen = idx + (secret.length & 1);
          var s1 = secret.substr(0, slen);
          var s2 = secret.substr(idx, slen);
          var ai = forge.util.createBuffer();
          var hmac = forge.hmac.create();
          seed = label + seed;

          // determine the number of iterations that must be performed to generate
          // enough output bytes, md5 creates 16 byte hashes, sha1 creates 20
          var md5itr = Math.ceil(length / 16);
          var sha1itr = Math.ceil(length / 20);

          // do md5 iterations
          hmac.start("MD5", s1);
          var md5bytes = forge.util.createBuffer();
          ai.putBytes(seed);
          for (var i = 0; i < md5itr; ++i) {
            // HMAC_hash(secret, A(i-1))
            hmac.start(null, null);
            hmac.update(ai.getBytes());
            ai.putBuffer(hmac.digest());

            // HMAC_hash(secret, A(i) + seed)
            hmac.start(null, null);
            hmac.update(ai.bytes() + seed);
            md5bytes.putBuffer(hmac.digest());
          }

          // do sha1 iterations
          hmac.start("SHA1", s2);
          var sha1bytes = forge.util.createBuffer();
          ai.clear();
          ai.putBytes(seed);
          for (var i = 0; i < sha1itr; ++i) {
            // HMAC_hash(secret, A(i-1))
            hmac.start(null, null);
            hmac.update(ai.getBytes());
            ai.putBuffer(hmac.digest());

            // HMAC_hash(secret, A(i) + seed)
            hmac.start(null, null);
            hmac.update(ai.bytes() + seed);
            sha1bytes.putBuffer(hmac.digest());
          }

          // XOR the md5 bytes with the sha1 bytes
          rval.putBytes(
            forge.util.xorBytes(
              md5bytes.getBytes(),
              sha1bytes.getBytes(),
              length
            )
          );

          return rval;
        };

        /**
 * Generates pseudo random bytes using a SHA256 algorithm. For TLS 1.2.
 *
 * @param secret the secret to use.
 * @param label the label to use.
 * @param seed the seed value to use.
 * @param length the number of bytes to generate.
 *
 * @return the pseudo random bytes in a byte buffer.
 */
        var prf_sha256 = function(secret, label, seed, length) {
          // FIXME: implement me for TLS 1.2
        };

        /**
 * Gets a MAC for a record using the SHA-1 hash algorithm.
 *
 * @param key the mac key.
 * @param state the sequence number (array of two 32-bit integers).
 * @param record the record.
 *
 * @return the sha-1 hash (20 bytes) for the given record.
 */
        var hmac_sha1 = function(key, seqNum, record) {
          /* MAC is computed like so:
  HMAC_hash(
    key, seqNum +
      TLSCompressed.type +
      TLSCompressed.version +
      TLSCompressed.length +
      TLSCompressed.fragment)
  */
          var hmac = forge.hmac.create();
          hmac.start("SHA1", key);
          var b = forge.util.createBuffer();
          b.putInt32(seqNum[0]);
          b.putInt32(seqNum[1]);
          b.putByte(record.type);
          b.putByte(record.version.major);
          b.putByte(record.version.minor);
          b.putInt16(record.length);
          b.putBytes(record.fragment.bytes());
          hmac.update(b.getBytes());
          return hmac.digest().getBytes();
        };

        /**
 * Compresses the TLSPlaintext record into a TLSCompressed record using the
 * deflate algorithm.
 *
 * @param c the TLS connection.
 * @param record the TLSPlaintext record to compress.
 * @param s the ConnectionState to use.
 *
 * @return true on success, false on failure.
 */
        var deflate = function(c, record, s) {
          var rval = false;

          try {
            var bytes = c.deflate(record.fragment.getBytes());
            record.fragment = forge.util.createBuffer(bytes);
            record.length = bytes.length;
            rval = true;
          } catch (ex) {
            // deflate error, fail out
          }

          return rval;
        };

        /**
 * Decompresses the TLSCompressed record into a TLSPlaintext record using the
 * deflate algorithm.
 *
 * @param c the TLS connection.
 * @param record the TLSCompressed record to decompress.
 * @param s the ConnectionState to use.
 *
 * @return true on success, false on failure.
 */
        var inflate = function(c, record, s) {
          var rval = false;

          try {
            var bytes = c.inflate(record.fragment.getBytes());
            record.fragment = forge.util.createBuffer(bytes);
            record.length = bytes.length;
            rval = true;
          } catch (ex) {
            // inflate error, fail out
          }

          return rval;
        };

        /**
 * Reads a TLS variable-length vector from a byte buffer.
 *
 * Variable-length vectors are defined by specifying a subrange of legal
 * lengths, inclusively, using the notation <floor..ceiling>. When these are
 * encoded, the actual length precedes the vector's contents in the byte
 * stream. The length will be in the form of a number consuming as many bytes
 * as required to hold the vector's specified maximum (ceiling) length. A
 * variable-length vector with an actual length field of zero is referred to
 * as an empty vector.
 *
 * @param b the byte buffer.
 * @param lenBytes the number of bytes required to store the length.
 *
 * @return the resulting byte buffer.
 */
        var readVector = function(b, lenBytes) {
          var len = 0;
          switch (lenBytes) {
            case 1:
              len = b.getByte();
              break;
            case 2:
              len = b.getInt16();
              break;
            case 3:
              len = b.getInt24();
              break;
            case 4:
              len = b.getInt32();
              break;
          }

          // read vector bytes into a new buffer
          return forge.util.createBuffer(b.getBytes(len));
        };

        /**
 * Writes a TLS variable-length vector to a byte buffer.
 *
 * @param b the byte buffer.
 * @param lenBytes the number of bytes required to store the length.
 * @param v the byte buffer vector.
 */
        var writeVector = function(b, lenBytes, v) {
          // encode length at the start of the vector, where the number of bytes for
          // the length is the maximum number of bytes it would take to encode the
          // vector's ceiling
          b.putInt(v.length(), lenBytes << 3);
          b.putBuffer(v);
        };

        /**
 * The tls implementation.
 */
        var tls = {};

        /**
 * Version: TLS 1.2 = 3.3, TLS 1.1 = 3.2, TLS 1.0 = 3.1. Both TLS 1.1 and
 * TLS 1.2 were still too new (ie: openSSL didn't implement them) at the time
 * of this implementation so TLS 1.0 was implemented instead.
 */
        tls.Versions = {
          TLS_1_0: { major: 3, minor: 1 },
          TLS_1_1: { major: 3, minor: 2 },
          TLS_1_2: { major: 3, minor: 3 }
        };
        tls.SupportedVersions = [tls.Versions.TLS_1_1, tls.Versions.TLS_1_0];
        tls.Version = tls.SupportedVersions[0];

        /**
 * Maximum fragment size. True maximum is 16384, but we fragment before that
 * to allow for unusual small increases during compression.
 */
        tls.MaxFragment = 16384 - 1024;

        /**
 * Whether this entity is considered the "client" or "server".
 * enum { server, client } ConnectionEnd;
 */
        tls.ConnectionEnd = {
          server: 0,
          client: 1
        };

        /**
 * Pseudo-random function algorithm used to generate keys from the master
 * secret.
 * enum { tls_prf_sha256 } PRFAlgorithm;
 */
        tls.PRFAlgorithm = {
          tls_prf_sha256: 0
        };

        /**
 * Bulk encryption algorithms.
 * enum { null, rc4, des3, aes } BulkCipherAlgorithm;
 */
        tls.BulkCipherAlgorithm = {
          none: null,
          rc4: 0,
          des3: 1,
          aes: 2
        };

        /**
 * Cipher types.
 * enum { stream, block, aead } CipherType;
 */
        tls.CipherType = {
          stream: 0,
          block: 1,
          aead: 2
        };

        /**
 * MAC (Message Authentication Code) algorithms.
 * enum { null, hmac_md5, hmac_sha1, hmac_sha256,
 *   hmac_sha384, hmac_sha512} MACAlgorithm;
 */
        tls.MACAlgorithm = {
          none: null,
          hmac_md5: 0,
          hmac_sha1: 1,
          hmac_sha256: 2,
          hmac_sha384: 3,
          hmac_sha512: 4
        };

        /**
 * Compression algorithms.
 * enum { null(0), deflate(1), (255) } CompressionMethod;
 */
        tls.CompressionMethod = {
          none: 0,
          deflate: 1
        };

        /**
 * TLS record content types.
 * enum {
 *   change_cipher_spec(20), alert(21), handshake(22),
 *   application_data(23), (255)
 * } ContentType;
 */
        tls.ContentType = {
          change_cipher_spec: 20,
          alert: 21,
          handshake: 22,
          application_data: 23,
          heartbeat: 24
        };

        /**
 * TLS handshake types.
 * enum {
 *   hello_request(0), client_hello(1), server_hello(2),
 *   certificate(11), server_key_exchange (12),
 *   certificate_request(13), server_hello_done(14),
 *   certificate_verify(15), client_key_exchange(16),
 *   finished(20), (255)
 * } HandshakeType;
 */
        tls.HandshakeType = {
          hello_request: 0,
          client_hello: 1,
          server_hello: 2,
          certificate: 11,
          server_key_exchange: 12,
          certificate_request: 13,
          server_hello_done: 14,
          certificate_verify: 15,
          client_key_exchange: 16,
          finished: 20
        };

        /**
 * TLS Alert Protocol.
 *
 * enum { warning(1), fatal(2), (255) } AlertLevel;
 *
 * enum {
 *   close_notify(0),
 *   unexpected_message(10),
 *   bad_record_mac(20),
 *   decryption_failed(21),
 *   record_overflow(22),
 *   decompression_failure(30),
 *   handshake_failure(40),
 *   bad_certificate(42),
 *   unsupported_certificate(43),
 *   certificate_revoked(44),
 *   certificate_expired(45),
 *   certificate_unknown(46),
 *   illegal_parameter(47),
 *   unknown_ca(48),
 *   access_denied(49),
 *   decode_error(50),
 *   decrypt_error(51),
 *   export_restriction(60),
 *   protocol_version(70),
 *   insufficient_security(71),
 *   internal_error(80),
 *   user_canceled(90),
 *   no_renegotiation(100),
 *   (255)
 * } AlertDescription;
 *
 * struct {
 *   AlertLevel level;
 *   AlertDescription description;
 * } Alert;
 */
        tls.Alert = {};
        tls.Alert.Level = {
          warning: 1,
          fatal: 2
        };
        tls.Alert.Description = {
          close_notify: 0,
          unexpected_message: 10,
          bad_record_mac: 20,
          decryption_failed: 21,
          record_overflow: 22,
          decompression_failure: 30,
          handshake_failure: 40,
          bad_certificate: 42,
          unsupported_certificate: 43,
          certificate_revoked: 44,
          certificate_expired: 45,
          certificate_unknown: 46,
          illegal_parameter: 47,
          unknown_ca: 48,
          access_denied: 49,
          decode_error: 50,
          decrypt_error: 51,
          export_restriction: 60,
          protocol_version: 70,
          insufficient_security: 71,
          internal_error: 80,
          user_canceled: 90,
          no_renegotiation: 100
        };

        /**
 * TLS Heartbeat Message types.
 * enum {
 *   heartbeat_request(1),
 *   heartbeat_response(2),
 *   (255)
 * } HeartbeatMessageType;
 */
        tls.HeartbeatMessageType = {
          heartbeat_request: 1,
          heartbeat_response: 2
        };

        /**
 * Supported cipher suites.
 */
        tls.CipherSuites = {};

        /**
 * Gets a supported cipher suite from its 2 byte ID.
 *
 * @param twoBytes two bytes in a string.
 *
 * @return the matching supported cipher suite or null.
 */
        tls.getCipherSuite = function(twoBytes) {
          var rval = null;
          for (var key in tls.CipherSuites) {
            var cs = tls.CipherSuites[key];
            if (
              cs.id[0] === twoBytes.charCodeAt(0) &&
              cs.id[1] === twoBytes.charCodeAt(1)
            ) {
              rval = cs;
              break;
            }
          }
          return rval;
        };

        /**
 * Called when an unexpected record is encountered.
 *
 * @param c the connection.
 * @param record the record.
 */
        tls.handleUnexpected = function(c, record) {
          // if connection is client and closed, ignore unexpected messages
          var ignore = !c.open && c.entity === tls.ConnectionEnd.client;
          if (!ignore) {
            c.error(c, {
              message: "Unexpected message. Received TLS record out of order.",
              send: true,
              alert: {
                level: tls.Alert.Level.fatal,
                description: tls.Alert.Description.unexpected_message
              }
            });
          }
        };

        /**
 * Called when a client receives a HelloRequest record.
 *
 * @param c the connection.
 * @param record the record.
 * @param length the length of the handshake message.
 */
        tls.handleHelloRequest = function(c, record, length) {
          // ignore renegotiation requests from the server during a handshake, but
          // if handshaking, send a warning alert that renegotation is denied
          if (!c.handshaking && c.handshakes > 0) {
            // send alert warning
            tls.queue(
              c,
              tls.createAlert(c, {
                level: tls.Alert.Level.warning,
                description: tls.Alert.Description.no_renegotiation
              })
            );
            tls.flush(c);
          }

          // continue
          c.process();
        };

        /**
 * Parses a hello message from a ClientHello or ServerHello record.
 *
 * @param record the record to parse.
 *
 * @return the parsed message.
 */
        tls.parseHelloMessage = function(c, record, length) {
          var msg = null;

          var client = c.entity === tls.ConnectionEnd.client;

          // minimum of 38 bytes in message
          if (length < 38) {
            c.error(c, {
              message: client
                ? "Invalid ServerHello message. Message too short."
                : "Invalid ClientHello message. Message too short.",
              send: true,
              alert: {
                level: tls.Alert.Level.fatal,
                description: tls.Alert.Description.illegal_parameter
              }
            });
          } else {
            // use 'remaining' to calculate # of remaining bytes in the message
            var b = record.fragment;
            var remaining = b.length();
            msg = {
              version: {
                major: b.getByte(),
                minor: b.getByte()
              },
              random: forge.util.createBuffer(b.getBytes(32)),
              session_id: readVector(b, 1),
              extensions: []
            };
            if (client) {
              msg.cipher_suite = b.getBytes(2);
              msg.compression_method = b.getByte();
            } else {
              msg.cipher_suites = readVector(b, 2);
              msg.compression_methods = readVector(b, 1);
            }

            // read extensions if there are any bytes left in the message
            remaining = length - (remaining - b.length());
            if (remaining > 0) {
              // parse extensions
              var exts = readVector(b, 2);
              while (exts.length() > 0) {
                msg.extensions.push({
                  type: [exts.getByte(), exts.getByte()],
                  data: readVector(exts, 2)
                });
              }

              // TODO: make extension support modular
              if (!client) {
                for (var i = 0; i < msg.extensions.length; ++i) {
                  var ext = msg.extensions[i];

                  // support SNI extension
                  if (ext.type[0] === 0x00 && ext.type[1] === 0x00) {
                    // get server name list
                    var snl = readVector(ext.data, 2);
                    while (snl.length() > 0) {
                      // read server name type
                      var snType = snl.getByte();

                      // only HostName type (0x00) is known, break out if
                      // another type is detected
                      if (snType !== 0x00) {
                        break;
                      }

                      // add host name to server name list
                      c.session.extensions.server_name.serverNameList.push(
                        readVector(snl, 2).getBytes()
                      );
                    }
                  }
                }
              }
            }

            // version already set, do not allow version change
            if (c.session.version) {
              if (
                msg.version.major !== c.session.version.major ||
                msg.version.minor !== c.session.version.minor
              ) {
                return c.error(c, {
                  message:
                    "TLS version change is disallowed during renegotiation.",
                  send: true,
                  alert: {
                    level: tls.Alert.Level.fatal,
                    description: tls.Alert.Description.protocol_version
                  }
                });
              }
            }

            // get the chosen (ServerHello) cipher suite
            if (client) {
              // FIXME: should be checking configured acceptable cipher suites
              c.session.cipherSuite = tls.getCipherSuite(msg.cipher_suite);
            } else {
              // get a supported preferred (ClientHello) cipher suite
              // choose the first supported cipher suite
              var tmp = forge.util.createBuffer(msg.cipher_suites.bytes());
              while (tmp.length() > 0) {
                // FIXME: should be checking configured acceptable suites
                // cipher suites take up 2 bytes
                c.session.cipherSuite = tls.getCipherSuite(tmp.getBytes(2));
                if (c.session.cipherSuite !== null) {
                  break;
                }
              }
            }

            // cipher suite not supported
            if (c.session.cipherSuite === null) {
              return c.error(c, {
                message: "No cipher suites in common.",
                send: true,
                alert: {
                  level: tls.Alert.Level.fatal,
                  description: tls.Alert.Description.handshake_failure
                },
                cipherSuite: forge.util.bytesToHex(msg.cipher_suite)
              });
            }

            // TODO: handle compression methods
            if (client) {
              c.session.compressionMethod = msg.compression_method;
            } else {
              // no compression
              c.session.compressionMethod = tls.CompressionMethod.none;
            }
          }

          return msg;
        };

        /**
 * Creates security parameters for the given connection based on the given
 * hello message.
 *
 * @param c the TLS connection.
 * @param msg the hello message.
 */
        tls.createSecurityParameters = function(c, msg) {
          /* Note: security params are from TLS 1.2, some values like prf_algorithm
  are ignored for TLS 1.0/1.1 and the builtin as specified in the spec is
  used. */

          // TODO: handle other options from server when more supported

          // get client and server randoms
          var client = c.entity === tls.ConnectionEnd.client;
          var msgRandom = msg.random.bytes();
          var cRandom = client ? c.session.sp.client_random : msgRandom;
          var sRandom = client ? msgRandom : tls.createRandom().getBytes();

          // create new security parameters
          c.session.sp = {
            entity: c.entity,
            prf_algorithm: tls.PRFAlgorithm.tls_prf_sha256,
            bulk_cipher_algorithm: null,
            cipher_type: null,
            enc_key_length: null,
            block_length: null,
            fixed_iv_length: null,
            record_iv_length: null,
            mac_algorithm: null,
            mac_length: null,
            mac_key_length: null,
            compression_algorithm: c.session.compressionMethod,
            pre_master_secret: null,
            master_secret: null,
            client_random: cRandom,
            server_random: sRandom
          };
        };

        /**
 * Called when a client receives a ServerHello record.
 *
 * When a ServerHello message will be sent:
 *   The server will send this message in response to a client hello message
 *   when it was able to find an acceptable set of algorithms. If it cannot
 *   find such a match, it will respond with a handshake failure alert.
 *
 * uint24 length;
 * struct {
 *   ProtocolVersion server_version;
 *   Random random;
 *   SessionID session_id;
 *   CipherSuite cipher_suite;
 *   CompressionMethod compression_method;
 *   select(extensions_present) {
 *     case false:
 *       struct {};
 *     case true:
 *       Extension extensions<0..2^16-1>;
 *   };
 * } ServerHello;
 *
 * @param c the connection.
 * @param record the record.
 * @param length the length of the handshake message.
 */
        tls.handleServerHello = function(c, record, length) {
          var msg = tls.parseHelloMessage(c, record, length);
          if (c.fail) {
            return;
          }

          // ensure server version is compatible
          if (msg.version.minor <= c.version.minor) {
            c.version.minor = msg.version.minor;
          } else {
            return c.error(c, {
              message: "Incompatible TLS version.",
              send: true,
              alert: {
                level: tls.Alert.Level.fatal,
                description: tls.Alert.Description.protocol_version
              }
            });
          }

          // indicate session version has been set
          c.session.version = c.version;

          // get the session ID from the message
          var sessionId = msg.session_id.bytes();

          // if the session ID is not blank and matches the cached one, resume
          // the session
          if (sessionId.length > 0 && sessionId === c.session.id) {
            // resuming session, expect a ChangeCipherSpec next
            c.expect = SCC;
            c.session.resuming = true;

            // get new server random
            c.session.sp.server_random = msg.random.bytes();
          } else {
            // not resuming, expect a server Certificate message next
            c.expect = SCE;
            c.session.resuming = false;

            // create new security parameters
            tls.createSecurityParameters(c, msg);
          }

          // set new session ID
          c.session.id = sessionId;

          // continue
          c.process();
        };

        /**
 * Called when a server receives a ClientHello record.
 *
 * When a ClientHello message will be sent:
 *   When a client first connects to a server it is required to send the
 *   client hello as its first message. The client can also send a client
 *   hello in response to a hello request or on its own initiative in order
 *   to renegotiate the security parameters in an existing connection.
 *
 * @param c the connection.
 * @param record the record.
 * @param length the length of the handshake message.
 */
        tls.handleClientHello = function(c, record, length) {
          var msg = tls.parseHelloMessage(c, record, length);
          if (c.fail) {
            return;
          }

          // get the session ID from the message
          var sessionId = msg.session_id.bytes();

          // see if the given session ID is in the cache
          var session = null;
          if (c.sessionCache) {
            session = c.sessionCache.getSession(sessionId);
            if (session === null) {
              // session ID not found
              sessionId = "";
            } else if (
              session.version.major !== msg.version.major ||
              session.version.minor > msg.version.minor
            ) {
              // if session version is incompatible with client version, do not resume
              session = null;
              sessionId = "";
            }
          }

          // no session found to resume, generate a new session ID
          if (sessionId.length === 0) {
            sessionId = forge.random.getBytes(32);
          }

          // update session
          c.session.id = sessionId;
          c.session.clientHelloVersion = msg.version;
          c.session.sp = {};
          if (session) {
            // use version and security parameters from resumed session
            c.version = c.session.version = session.version;
            c.session.sp = session.sp;
          } else {
            // use highest compatible minor version
            var version;
            for (var i = 1; i < tls.SupportedVersions.length; ++i) {
              version = tls.SupportedVersions[i];
              if (version.minor <= msg.version.minor) {
                break;
              }
            }
            c.version = { major: version.major, minor: version.minor };
            c.session.version = c.version;
          }

          // if a session is set, resume it
          if (session !== null) {
            // resuming session, expect a ChangeCipherSpec next
            c.expect = CCC;
            c.session.resuming = true;

            // get new client random
            c.session.sp.client_random = msg.random.bytes();
          } else {
            // not resuming, expect a Certificate or ClientKeyExchange
            c.expect = c.verifyClient !== false ? CCE : CKE;
            c.session.resuming = false;

            // create new security parameters
            tls.createSecurityParameters(c, msg);
          }

          // connection now open
          c.open = true;

          // queue server hello
          tls.queue(
            c,
            tls.createRecord(c, {
              type: tls.ContentType.handshake,
              data: tls.createServerHello(c)
            })
          );

          if (c.session.resuming) {
            // queue change cipher spec message
            tls.queue(
              c,
              tls.createRecord(c, {
                type: tls.ContentType.change_cipher_spec,
                data: tls.createChangeCipherSpec()
              })
            );

            // create pending state
            c.state.pending = tls.createConnectionState(c);

            // change current write state to pending write state
            c.state.current.write = c.state.pending.write;

            // queue finished
            tls.queue(
              c,
              tls.createRecord(c, {
                type: tls.ContentType.handshake,
                data: tls.createFinished(c)
              })
            );
          } else {
            // queue server certificate
            tls.queue(
              c,
              tls.createRecord(c, {
                type: tls.ContentType.handshake,
                data: tls.createCertificate(c)
              })
            );

            if (!c.fail) {
              // queue server key exchange
              tls.queue(
                c,
                tls.createRecord(c, {
                  type: tls.ContentType.handshake,
                  data: tls.createServerKeyExchange(c)
                })
              );

              // request client certificate if set
              if (c.verifyClient !== false) {
                // queue certificate request
                tls.queue(
                  c,
                  tls.createRecord(c, {
                    type: tls.ContentType.handshake,
                    data: tls.createCertificateRequest(c)
                  })
                );
              }

              // queue server hello done
              tls.queue(
                c,
                tls.createRecord(c, {
                  type: tls.ContentType.handshake,
                  data: tls.createServerHelloDone(c)
                })
              );
            }
          }

          // send records
          tls.flush(c);

          // continue
          c.process();
        };

        /**
 * Called when a client receives a Certificate record.
 *
 * When this message will be sent:
 *   The server must send a certificate whenever the agreed-upon key exchange
 *   method is not an anonymous one. This message will always immediately
 *   follow the server hello message.
 *
 * Meaning of this message:
 *   The certificate type must be appropriate for the selected cipher suite's
 *   key exchange algorithm, and is generally an X.509v3 certificate. It must
 *   contain a key which matches the key exchange method, as follows. Unless
 *   otherwise specified, the signing algorithm for the certificate must be
 *   the same as the algorithm for the certificate key. Unless otherwise
 *   specified, the public key may be of any length.
 *
 * opaque ASN.1Cert<1..2^24-1>;
 * struct {
 *   ASN.1Cert certificate_list<1..2^24-1>;
 * } Certificate;
 *
 * @param c the connection.
 * @param record the record.
 * @param length the length of the handshake message.
 */
        tls.handleCertificate = function(c, record, length) {
          // minimum of 3 bytes in message
          if (length < 3) {
            return c.error(c, {
              message: "Invalid Certificate message. Message too short.",
              send: true,
              alert: {
                level: tls.Alert.Level.fatal,
                description: tls.Alert.Description.illegal_parameter
              }
            });
          }

          var b = record.fragment;
          var msg = {
            certificate_list: readVector(b, 3)
          };

          /* The sender's certificate will be first in the list (chain), each
    subsequent one that follows will certify the previous one, but root
    certificates (self-signed) that specify the certificate authority may
    be omitted under the assumption that clients must already possess it. */
          var cert, asn1;
          var certs = [];
          try {
            while (msg.certificate_list.length() > 0) {
              // each entry in msg.certificate_list is a vector with 3 len bytes
              cert = readVector(msg.certificate_list, 3);
              asn1 = forge.asn1.fromDer(cert);
              cert = forge.pki.certificateFromAsn1(asn1, true);
              certs.push(cert);
            }
          } catch (ex) {
            return c.error(c, {
              message: "Could not parse certificate list.",
              cause: ex,
              send: true,
              alert: {
                level: tls.Alert.Level.fatal,
                description: tls.Alert.Description.bad_certificate
              }
            });
          }

          // ensure at least 1 certificate was provided if in client-mode
          // or if verifyClient was set to true to require a certificate
          // (as opposed to 'optional')
          var client = c.entity === tls.ConnectionEnd.client;
          if ((client || c.verifyClient === true) && certs.length === 0) {
            // error, no certificate
            c.error(c, {
              message: client
                ? "No server certificate provided."
                : "No client certificate provided.",
              send: true,
              alert: {
                level: tls.Alert.Level.fatal,
                description: tls.Alert.Description.illegal_parameter
              }
            });
          } else if (certs.length === 0) {
            // no certs to verify
            // expect a ServerKeyExchange or ClientKeyExchange message next
            c.expect = client ? SKE : CKE;
          } else {
            // save certificate in session
            if (client) {
              c.session.serverCertificate = certs[0];
            } else {
              c.session.clientCertificate = certs[0];
            }

            if (tls.verifyCertificateChain(c, certs)) {
              // expect a ServerKeyExchange or ClientKeyExchange message next
              c.expect = client ? SKE : CKE;
            }
          }

          // continue
          c.process();
        };

        /**
 * Called when a client receives a ServerKeyExchange record.
 *
 * When this message will be sent:
 *   This message will be sent immediately after the server certificate
 *   message (or the server hello message, if this is an anonymous
 *   negotiation).
 *
 *   The server key exchange message is sent by the server only when the
 *   server certificate message (if sent) does not contain enough data to
 *   allow the client to exchange a premaster secret.
 *
 * Meaning of this message:
 *   This message conveys cryptographic information to allow the client to
 *   communicate the premaster secret: either an RSA public key to encrypt
 *   the premaster secret with, or a Diffie-Hellman public key with which the
 *   client can complete a key exchange (with the result being the premaster
 *   secret.)
 *
 * enum {
 *   dhe_dss, dhe_rsa, dh_anon, rsa, dh_dss, dh_rsa
 * } KeyExchangeAlgorithm;
 *
 * struct {
 *   opaque dh_p<1..2^16-1>;
 *   opaque dh_g<1..2^16-1>;
 *   opaque dh_Ys<1..2^16-1>;
 * } ServerDHParams;
 *
 * struct {
 *   select(KeyExchangeAlgorithm) {
 *     case dh_anon:
 *       ServerDHParams params;
 *     case dhe_dss:
 *     case dhe_rsa:
 *       ServerDHParams params;
 *       digitally-signed struct {
 *         opaque client_random[32];
 *         opaque server_random[32];
 *         ServerDHParams params;
 *       } signed_params;
 *     case rsa:
 *     case dh_dss:
 *     case dh_rsa:
 *       struct {};
 *   };
 * } ServerKeyExchange;
 *
 * @param c the connection.
 * @param record the record.
 * @param length the length of the handshake message.
 */
        tls.handleServerKeyExchange = function(c, record, length) {
          // this implementation only supports RSA, no Diffie-Hellman support
          // so any length > 0 is invalid
          if (length > 0) {
            return c.error(c, {
              message: "Invalid key parameters. Only RSA is supported.",
              send: true,
              alert: {
                level: tls.Alert.Level.fatal,
                description: tls.Alert.Description.unsupported_certificate
              }
            });
          }

          // expect an optional CertificateRequest message next
          c.expect = SCR;

          // continue
          c.process();
        };

        /**
 * Called when a client receives a ClientKeyExchange record.
 *
 * @param c the connection.
 * @param record the record.
 * @param length the length of the handshake message.
 */
        tls.handleClientKeyExchange = function(c, record, length) {
          // this implementation only supports RSA, no Diffie-Hellman support
          // so any length < 48 is invalid
          if (length < 48) {
            return c.error(c, {
              message: "Invalid key parameters. Only RSA is supported.",
              send: true,
              alert: {
                level: tls.Alert.Level.fatal,
                description: tls.Alert.Description.unsupported_certificate
              }
            });
          }

          var b = record.fragment;
          var msg = {
            enc_pre_master_secret: readVector(b, 2).getBytes()
          };

          // do rsa decryption
          var privateKey = null;
          if (c.getPrivateKey) {
            try {
              privateKey = c.getPrivateKey(c, c.session.serverCertificate);
              privateKey = forge.pki.privateKeyFromPem(privateKey);
            } catch (ex) {
              c.error(c, {
                message: "Could not get private key.",
                cause: ex,
                send: true,
                alert: {
                  level: tls.Alert.Level.fatal,
                  description: tls.Alert.Description.internal_error
                }
              });
            }
          }

          if (privateKey === null) {
            return c.error(c, {
              message: "No private key set.",
              send: true,
              alert: {
                level: tls.Alert.Level.fatal,
                description: tls.Alert.Description.internal_error
              }
            });
          }

          try {
            // decrypt 48-byte pre-master secret
            var sp = c.session.sp;
            sp.pre_master_secret = privateKey.decrypt(
              msg.enc_pre_master_secret
            );

            // ensure client hello version matches first 2 bytes
            var version = c.session.clientHelloVersion;
            if (
              version.major !== sp.pre_master_secret.charCodeAt(0) ||
              version.minor !== sp.pre_master_secret.charCodeAt(1)
            ) {
              // error, do not send alert (see BLEI attack below)
              throw new Error("TLS version rollback attack detected.");
            }
          } catch (ex) {
            /* Note: Daniel Bleichenbacher [BLEI] can be used to attack a
      TLS server which is using PKCS#1 encoded RSA, so instead of
      failing here, we generate 48 random bytes and use that as
      the pre-master secret. */
            sp.pre_master_secret = forge.random.getBytes(48);
          }

          // expect a CertificateVerify message if a Certificate was received that
          // does not have fixed Diffie-Hellman params, otherwise expect
          // ChangeCipherSpec
          c.expect = CCC;
          if (c.session.clientCertificate !== null) {
            // only RSA support, so expect CertificateVerify
            // TODO: support Diffie-Hellman
            c.expect = CCV;
          }

          // continue
          c.process();
        };

        /**
 * Called when a client receives a CertificateRequest record.
 *
 * When this message will be sent:
 *   A non-anonymous server can optionally request a certificate from the
 *   client, if appropriate for the selected cipher suite. This message, if
 *   sent, will immediately follow the Server Key Exchange message (if it is
 *   sent; otherwise, the Server Certificate message).
 *
 * enum {
 *   rsa_sign(1), dss_sign(2), rsa_fixed_dh(3), dss_fixed_dh(4),
 *   rsa_ephemeral_dh_RESERVED(5), dss_ephemeral_dh_RESERVED(6),
 *   fortezza_dms_RESERVED(20), (255)
 * } ClientCertificateType;
 *
 * opaque DistinguishedName<1..2^16-1>;
 *
 * struct {
 *   ClientCertificateType certificate_types<1..2^8-1>;
 *   SignatureAndHashAlgorithm supported_signature_algorithms<2^16-1>;
 *   DistinguishedName certificate_authorities<0..2^16-1>;
 * } CertificateRequest;
 *
 * @param c the connection.
 * @param record the record.
 * @param length the length of the handshake message.
 */
        tls.handleCertificateRequest = function(c, record, length) {
          // minimum of 3 bytes in message
          if (length < 3) {
            return c.error(c, {
              message: "Invalid CertificateRequest. Message too short.",
              send: true,
              alert: {
                level: tls.Alert.Level.fatal,
                description: tls.Alert.Description.illegal_parameter
              }
            });
          }

          // TODO: TLS 1.2+ has different format including
          // SignatureAndHashAlgorithm after cert types
          var b = record.fragment;
          var msg = {
            certificate_types: readVector(b, 1),
            certificate_authorities: readVector(b, 2)
          };

          // save certificate request in session
          c.session.certificateRequest = msg;

          // expect a ServerHelloDone message next
          c.expect = SHD;

          // continue
          c.process();
        };

        /**
 * Called when a server receives a CertificateVerify record.
 *
 * @param c the connection.
 * @param record the record.
 * @param length the length of the handshake message.
 */
        tls.handleCertificateVerify = function(c, record, length) {
          if (length < 2) {
            return c.error(c, {
              message: "Invalid CertificateVerify. Message too short.",
              send: true,
              alert: {
                level: tls.Alert.Level.fatal,
                description: tls.Alert.Description.illegal_parameter
              }
            });
          }

          // rewind to get full bytes for message so it can be manually
          // digested below (special case for CertificateVerify messages because
          // they must be digested *after* handling as opposed to all others)
          var b = record.fragment;
          b.read -= 4;
          var msgBytes = b.bytes();
          b.read += 4;

          var msg = {
            signature: readVector(b, 2).getBytes()
          };

          // TODO: add support for DSA

          // generate data to verify
          var verify = forge.util.createBuffer();
          verify.putBuffer(c.session.md5.digest());
          verify.putBuffer(c.session.sha1.digest());
          verify = verify.getBytes();

          try {
            var cert = c.session.clientCertificate;
            /*b = forge.pki.rsa.decrypt(
      msg.signature, cert.publicKey, true, verify.length);
    if(b !== verify) {*/
            if (!cert.publicKey.verify(verify, msg.signature, "NONE")) {
              throw new Error("CertificateVerify signature does not match.");
            }

            // digest message now that it has been handled
            c.session.md5.update(msgBytes);
            c.session.sha1.update(msgBytes);
          } catch (ex) {
            return c.error(c, {
              message: "Bad signature in CertificateVerify.",
              send: true,
              alert: {
                level: tls.Alert.Level.fatal,
                description: tls.Alert.Description.handshake_failure
              }
            });
          }

          // expect ChangeCipherSpec
          c.expect = CCC;

          // continue
          c.process();
        };

        /**
 * Called when a client receives a ServerHelloDone record.
 *
 * When this message will be sent:
 *   The server hello done message is sent by the server to indicate the end
 *   of the server hello and associated messages. After sending this message
 *   the server will wait for a client response.
 *
 * Meaning of this message:
 *   This message means that the server is done sending messages to support
 *   the key exchange, and the client can proceed with its phase of the key
 *   exchange.
 *
 *   Upon receipt of the server hello done message the client should verify
 *   that the server provided a valid certificate if required and check that
 *   the server hello parameters are acceptable.
 *
 * struct {} ServerHelloDone;
 *
 * @param c the connection.
 * @param record the record.
 * @param length the length of the handshake message.
 */
        tls.handleServerHelloDone = function(c, record, length) {
          // len must be 0 bytes
          if (length > 0) {
            return c.error(c, {
              message: "Invalid ServerHelloDone message. Invalid length.",
              send: true,
              alert: {
                level: tls.Alert.Level.fatal,
                description: tls.Alert.Description.record_overflow
              }
            });
          }

          if (c.serverCertificate === null) {
            // no server certificate was provided
            var error = {
              message: "No server certificate provided. Not enough security.",
              send: true,
              alert: {
                level: tls.Alert.Level.fatal,
                description: tls.Alert.Description.insufficient_security
              }
            };

            // call application callback
            var depth = 0;
            var ret = c.verify(c, error.alert.description, depth, []);
            if (ret !== true) {
              // check for custom alert info
              if (ret || ret === 0) {
                // set custom message and alert description
                if (typeof ret === "object" && !forge.util.isArray(ret)) {
                  if (ret.message) {
                    error.message = ret.message;
                  }
                  if (ret.alert) {
                    error.alert.description = ret.alert;
                  }
                } else if (typeof ret === "number") {
                  // set custom alert description
                  error.alert.description = ret;
                }
              }

              // send error
              return c.error(c, error);
            }
          }

          // create client certificate message if requested
          if (c.session.certificateRequest !== null) {
            record = tls.createRecord(c, {
              type: tls.ContentType.handshake,
              data: tls.createCertificate(c)
            });
            tls.queue(c, record);
          }

          // create client key exchange message
          record = tls.createRecord(c, {
            type: tls.ContentType.handshake,
            data: tls.createClientKeyExchange(c)
          });
          tls.queue(c, record);

          // expect no messages until the following callback has been called
          c.expect = SER;

          // create callback to handle client signature (for client-certs)
          var callback = function(c, signature) {
            if (
              c.session.certificateRequest !== null &&
              c.session.clientCertificate !== null
            ) {
              // create certificate verify message
              tls.queue(
                c,
                tls.createRecord(c, {
                  type: tls.ContentType.handshake,
                  data: tls.createCertificateVerify(c, signature)
                })
              );
            }

            // create change cipher spec message
            tls.queue(
              c,
              tls.createRecord(c, {
                type: tls.ContentType.change_cipher_spec,
                data: tls.createChangeCipherSpec()
              })
            );

            // create pending state
            c.state.pending = tls.createConnectionState(c);

            // change current write state to pending write state
            c.state.current.write = c.state.pending.write;

            // create finished message
            tls.queue(
              c,
              tls.createRecord(c, {
                type: tls.ContentType.handshake,
                data: tls.createFinished(c)
              })
            );

            // expect a server ChangeCipherSpec message next
            c.expect = SCC;

            // send records
            tls.flush(c);

            // continue
            c.process();
          };

          // if there is no certificate request or no client certificate, do
          // callback immediately
          if (
            c.session.certificateRequest === null ||
            c.session.clientCertificate === null
          ) {
            return callback(c, null);
          }

          // otherwise get the client signature
          tls.getClientSignature(c, callback);
        };

        /**
 * Called when a ChangeCipherSpec record is received.
 *
 * @param c the connection.
 * @param record the record.
 */
        tls.handleChangeCipherSpec = function(c, record) {
          if (record.fragment.getByte() !== 0x01) {
            return c.error(c, {
              message: "Invalid ChangeCipherSpec message received.",
              send: true,
              alert: {
                level: tls.Alert.Level.fatal,
                description: tls.Alert.Description.illegal_parameter
              }
            });
          }

          // create pending state if:
          // 1. Resuming session in client mode OR
          // 2. NOT resuming session in server mode
          var client = c.entity === tls.ConnectionEnd.client;
          if (
            (c.session.resuming && client) ||
            (!c.session.resuming && !client)
          ) {
            c.state.pending = tls.createConnectionState(c);
          }

          // change current read state to pending read state
          c.state.current.read = c.state.pending.read;

          // clear pending state if:
          // 1. NOT resuming session in client mode OR
          // 2. resuming a session in server mode
          if (
            (!c.session.resuming && client) ||
            (c.session.resuming && !client)
          ) {
            c.state.pending = null;
          }

          // expect a Finished record next
          c.expect = client ? SFI : CFI;

          // continue
          c.process();
        };

        /**
 * Called when a Finished record is received.
 *
 * When this message will be sent:
 *   A finished message is always sent immediately after a change
 *   cipher spec message to verify that the key exchange and
 *   authentication processes were successful. It is essential that a
 *   change cipher spec message be received between the other
 *   handshake messages and the Finished message.
 *
 * Meaning of this message:
 *   The finished message is the first protected with the just-
 *   negotiated algorithms, keys, and secrets. Recipients of finished
 *   messages must verify that the contents are correct.  Once a side
 *   has sent its Finished message and received and validated the
 *   Finished message from its peer, it may begin to send and receive
 *   application data over the connection.
 *
 * struct {
 *   opaque verify_data[verify_data_length];
 * } Finished;
 *
 * verify_data
 *   PRF(master_secret, finished_label, Hash(handshake_messages))
 *     [0..verify_data_length-1];
 *
 * finished_label
 *   For Finished messages sent by the client, the string
 *   "client finished". For Finished messages sent by the server, the
 *   string "server finished".
 *
 * verify_data_length depends on the cipher suite. If it is not specified
 * by the cipher suite, then it is 12. Versions of TLS < 1.2 always used
 * 12 bytes.
 *
 * @param c the connection.
 * @param record the record.
 * @param length the length of the handshake message.
 */
        tls.handleFinished = function(c, record, length) {
          // rewind to get full bytes for message so it can be manually
          // digested below (special case for Finished messages because they
          // must be digested *after* handling as opposed to all others)
          var b = record.fragment;
          b.read -= 4;
          var msgBytes = b.bytes();
          b.read += 4;

          // message contains only verify_data
          var vd = record.fragment.getBytes();

          // ensure verify data is correct
          b = forge.util.createBuffer();
          b.putBuffer(c.session.md5.digest());
          b.putBuffer(c.session.sha1.digest());

          // set label based on entity type
          var client = c.entity === tls.ConnectionEnd.client;
          var label = client ? "server finished" : "client finished";

          // TODO: determine prf function and verify length for TLS 1.2
          var sp = c.session.sp;
          var vdl = 12;
          var prf = prf_TLS1;
          b = prf(sp.master_secret, label, b.getBytes(), vdl);
          if (b.getBytes() !== vd) {
            return c.error(c, {
              message: "Invalid verify_data in Finished message.",
              send: true,
              alert: {
                level: tls.Alert.Level.fatal,
                description: tls.Alert.Description.decrypt_error
              }
            });
          }

          // digest finished message now that it has been handled
          c.session.md5.update(msgBytes);
          c.session.sha1.update(msgBytes);

          // resuming session as client or NOT resuming session as server
          if (
            (c.session.resuming && client) ||
            (!c.session.resuming && !client)
          ) {
            // create change cipher spec message
            tls.queue(
              c,
              tls.createRecord(c, {
                type: tls.ContentType.change_cipher_spec,
                data: tls.createChangeCipherSpec()
              })
            );

            // change current write state to pending write state, clear pending
            c.state.current.write = c.state.pending.write;
            c.state.pending = null;

            // create finished message
            tls.queue(
              c,
              tls.createRecord(c, {
                type: tls.ContentType.handshake,
                data: tls.createFinished(c)
              })
            );
          }

          // expect application data next
          c.expect = client ? SAD : CAD;

          // handshake complete
          c.handshaking = false;
          ++c.handshakes;

          // save access to peer certificate
          c.peerCertificate = client
            ? c.session.serverCertificate
            : c.session.clientCertificate;

          // send records
          tls.flush(c);

          // now connected
          c.isConnected = true;
          c.connected(c);

          // continue
          c.process();
        };

        /**
 * Called when an Alert record is received.
 *
 * @param c the connection.
 * @param record the record.
 */
        tls.handleAlert = function(c, record) {
          // read alert
          var b = record.fragment;
          var alert = {
            level: b.getByte(),
            description: b.getByte()
          };

          // TODO: consider using a table?
          // get appropriate message
          var msg;
          switch (alert.description) {
            case tls.Alert.Description.close_notify:
              msg = "Connection closed.";
              break;
            case tls.Alert.Description.unexpected_message:
              msg = "Unexpected message.";
              break;
            case tls.Alert.Description.bad_record_mac:
              msg = "Bad record MAC.";
              break;
            case tls.Alert.Description.decryption_failed:
              msg = "Decryption failed.";
              break;
            case tls.Alert.Description.record_overflow:
              msg = "Record overflow.";
              break;
            case tls.Alert.Description.decompression_failure:
              msg = "Decompression failed.";
              break;
            case tls.Alert.Description.handshake_failure:
              msg = "Handshake failure.";
              break;
            case tls.Alert.Description.bad_certificate:
              msg = "Bad certificate.";
              break;
            case tls.Alert.Description.unsupported_certificate:
              msg = "Unsupported certificate.";
              break;
            case tls.Alert.Description.certificate_revoked:
              msg = "Certificate revoked.";
              break;
            case tls.Alert.Description.certificate_expired:
              msg = "Certificate expired.";
              break;
            case tls.Alert.Description.certificate_unknown:
              msg = "Certificate unknown.";
              break;
            case tls.Alert.Description.illegal_parameter:
              msg = "Illegal parameter.";
              break;
            case tls.Alert.Description.unknown_ca:
              msg = "Unknown certificate authority.";
              break;
            case tls.Alert.Description.access_denied:
              msg = "Access denied.";
              break;
            case tls.Alert.Description.decode_error:
              msg = "Decode error.";
              break;
            case tls.Alert.Description.decrypt_error:
              msg = "Decrypt error.";
              break;
            case tls.Alert.Description.export_restriction:
              msg = "Export restriction.";
              break;
            case tls.Alert.Description.protocol_version:
              msg = "Unsupported protocol version.";
              break;
            case tls.Alert.Description.insufficient_security:
              msg = "Insufficient security.";
              break;
            case tls.Alert.Description.internal_error:
              msg = "Internal error.";
              break;
            case tls.Alert.Description.user_canceled:
              msg = "User canceled.";
              break;
            case tls.Alert.Description.no_renegotiation:
              msg = "Renegotiation not supported.";
              break;
            default:
              msg = "Unknown error.";
              break;
          }

          // close connection on close_notify, not an error
          if (alert.description === tls.Alert.Description.close_notify) {
            return c.close();
          }

          // call error handler
          c.error(c, {
            message: msg,
            send: false,
            // origin is the opposite end
            origin: c.entity === tls.ConnectionEnd.client ? "server" : "client",
            alert: alert
          });

          // continue
          c.process();
        };

        /**
 * Called when a Handshake record is received.
 *
 * @param c the connection.
 * @param record the record.
 */
        tls.handleHandshake = function(c, record) {
          // get the handshake type and message length
          var b = record.fragment;
          var type = b.getByte();
          var length = b.getInt24();

          // see if the record fragment doesn't yet contain the full message
          if (length > b.length()) {
            // cache the record, clear its fragment, and reset the buffer read
            // pointer before the type and length were read
            c.fragmented = record;
            record.fragment = forge.util.createBuffer();
            b.read -= 4;

            // continue
            return c.process();
          }

          // full message now available, clear cache, reset read pointer to
          // before type and length
          c.fragmented = null;
          b.read -= 4;

          // save the handshake bytes for digestion after handler is found
          // (include type and length of handshake msg)
          var bytes = b.bytes(length + 4);

          // restore read pointer
          b.read += 4;

          // handle expected message
          if (type in hsTable[c.entity][c.expect]) {
            // initialize server session
            if (c.entity === tls.ConnectionEnd.server && !c.open && !c.fail) {
              c.handshaking = true;
              c.session = {
                version: null,
                extensions: {
                  server_name: {
                    serverNameList: []
                  }
                },
                cipherSuite: null,
                compressionMethod: null,
                serverCertificate: null,
                clientCertificate: null,
                md5: forge.md.md5.create(),
                sha1: forge.md.sha1.create()
              };
            }

            /* Update handshake messages digest. Finished and CertificateVerify
      messages are not digested here. They can't be digested as part of
      the verify_data that they contain. These messages are manually
      digested in their handlers. HelloRequest messages are simply never
      included in the handshake message digest according to spec. */
            if (
              type !== tls.HandshakeType.hello_request &&
              type !== tls.HandshakeType.certificate_verify &&
              type !== tls.HandshakeType.finished
            ) {
              c.session.md5.update(bytes);
              c.session.sha1.update(bytes);
            }

            // handle specific handshake type record
            hsTable[c.entity][c.expect][type](c, record, length);
          } else {
            // unexpected record
            tls.handleUnexpected(c, record);
          }
        };

        /**
 * Called when an ApplicationData record is received.
 *
 * @param c the connection.
 * @param record the record.
 */
        tls.handleApplicationData = function(c, record) {
          // buffer data, notify that its ready
          c.data.putBuffer(record.fragment);
          c.dataReady(c);

          // continue
          c.process();
        };

        /**
 * Called when a Heartbeat record is received.
 *
 * @param c the connection.
 * @param record the record.
 */
        tls.handleHeartbeat = function(c, record) {
          // get the heartbeat type and payload
          var b = record.fragment;
          var type = b.getByte();
          var length = b.getInt16();
          var payload = b.getBytes(length);

          if (type === tls.HeartbeatMessageType.heartbeat_request) {
            // discard request during handshake or if length is too large
            if (c.handshaking || length > payload.length) {
              // continue
              return c.process();
            }
            // retransmit payload
            tls.queue(
              c,
              tls.createRecord(c, {
                type: tls.ContentType.heartbeat,
                data: tls.createHeartbeat(
                  tls.HeartbeatMessageType.heartbeat_response,
                  payload
                )
              })
            );
            tls.flush(c);
          } else if (type === tls.HeartbeatMessageType.heartbeat_response) {
            // check payload against expected payload, discard heartbeat if no match
            if (payload !== c.expectedHeartbeatPayload) {
              // continue
              return c.process();
            }

            // notify that a valid heartbeat was received
            if (c.heartbeatReceived) {
              c.heartbeatReceived(c, forge.util.createBuffer(payload));
            }
          }

          // continue
          c.process();
        };

        /**
 * The transistional state tables for receiving TLS records. It maps the
 * current TLS engine state and a received record to a function to handle the
 * record and update the state.
 *
 * For instance, if the current state is SHE, then the TLS engine is expecting
 * a ServerHello record. Once a record is received, the handler function is
 * looked up using the state SHE and the record's content type.
 *
 * The resulting function will either be an error handler or a record handler.
 * The function will take whatever action is appropriate and update the state
 * for the next record.
 *
 * The states are all based on possible server record types. Note that the
 * client will never specifically expect to receive a HelloRequest or an alert
 * from the server so there is no state that reflects this. These messages may
 * occur at any time.
 *
 * There are two tables for mapping states because there is a second tier of
 * types for handshake messages. Once a record with a content type of handshake
 * is received, the handshake record handler will look up the handshake type in
 * the secondary map to get its appropriate handler.
 *
 * Valid message orders are as follows:
 *
 * =======================FULL HANDSHAKE======================
 * Client                                               Server
 *
 * ClientHello                  -------->
 *                                                 ServerHello
 *                                                Certificate*
 *                                          ServerKeyExchange*
 *                                         CertificateRequest*
 *                              <--------      ServerHelloDone
 * Certificate*
 * ClientKeyExchange
 * CertificateVerify*
 * [ChangeCipherSpec]
 * Finished                     -------->
 *                                          [ChangeCipherSpec]
 *                              <--------             Finished
 * Application Data             <------->     Application Data
 *
 * =====================SESSION RESUMPTION=====================
 * Client                                                Server
 *
 * ClientHello                   -------->
 *                                                  ServerHello
 *                                           [ChangeCipherSpec]
 *                               <--------             Finished
 * [ChangeCipherSpec]
 * Finished                      -------->
 * Application Data              <------->     Application Data
 */
        // client expect states (indicate which records are expected to be received)
        var SHE = 0; // rcv server hello
        var SCE = 1; // rcv server certificate
        var SKE = 2; // rcv server key exchange
        var SCR = 3; // rcv certificate request
        var SHD = 4; // rcv server hello done
        var SCC = 5; // rcv change cipher spec
        var SFI = 6; // rcv finished
        var SAD = 7; // rcv application data
        var SER = 8; // not expecting any messages at this point

        // server expect states
        var CHE = 0; // rcv client hello
        var CCE = 1; // rcv client certificate
        var CKE = 2; // rcv client key exchange
        var CCV = 3; // rcv certificate verify
        var CCC = 4; // rcv change cipher spec
        var CFI = 5; // rcv finished
        var CAD = 6; // rcv application data
        var CER = 7; // not expecting any messages at this point

        // map client current expect state and content type to function
        var __ = tls.handleUnexpected;
        var R0 = tls.handleChangeCipherSpec;
        var R1 = tls.handleAlert;
        var R2 = tls.handleHandshake;
        var R3 = tls.handleApplicationData;
        var R4 = tls.handleHeartbeat;
        var ctTable = [];
        ctTable[tls.ConnectionEnd.client] = [
          //      CC,AL,HS,AD,HB
          /*SHE*/ [__, R1, R2, __, R4],
          /*SCE*/ [__, R1, R2, __, R4],
          /*SKE*/ [__, R1, R2, __, R4],
          /*SCR*/ [__, R1, R2, __, R4],
          /*SHD*/ [__, R1, R2, __, R4],
          /*SCC*/ [R0, R1, __, __, R4],
          /*SFI*/ [__, R1, R2, __, R4],
          /*SAD*/ [__, R1, R2, R3, R4],
          /*SER*/ [__, R1, R2, __, R4]
        ];

        // map server current expect state and content type to function
        ctTable[tls.ConnectionEnd.server] = [
          //      CC,AL,HS,AD
          /*CHE*/ [__, R1, R2, __, R4],
          /*CCE*/ [__, R1, R2, __, R4],
          /*CKE*/ [__, R1, R2, __, R4],
          /*CCV*/ [__, R1, R2, __, R4],
          /*CCC*/ [R0, R1, __, __, R4],
          /*CFI*/ [__, R1, R2, __, R4],
          /*CAD*/ [__, R1, R2, R3, R4],
          /*CER*/ [__, R1, R2, __, R4]
        ];

        // map client current expect state and handshake type to function
        var H0 = tls.handleHelloRequest;
        var H1 = tls.handleServerHello;
        var H2 = tls.handleCertificate;
        var H3 = tls.handleServerKeyExchange;
        var H4 = tls.handleCertificateRequest;
        var H5 = tls.handleServerHelloDone;
        var H6 = tls.handleFinished;
        var hsTable = [];
        hsTable[tls.ConnectionEnd.client] = [
          //      HR,01,SH,03,04,05,06,07,08,09,10,SC,SK,CR,HD,15,CK,17,18,19,FI
          /*SHE*/ [
            __,
            __,
            H1,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __
          ],
          /*SCE*/ [
            H0,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            H2,
            H3,
            H4,
            H5,
            __,
            __,
            __,
            __,
            __,
            __
          ],
          /*SKE*/ [
            H0,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            H3,
            H4,
            H5,
            __,
            __,
            __,
            __,
            __,
            __
          ],
          /*SCR*/ [
            H0,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            H4,
            H5,
            __,
            __,
            __,
            __,
            __,
            __
          ],
          /*SHD*/ [
            H0,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            H5,
            __,
            __,
            __,
            __,
            __,
            __
          ],
          /*SCC*/ [
            H0,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __
          ],
          /*SFI*/ [
            H0,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            H6
          ],
          /*SAD*/ [
            H0,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __
          ],
          /*SER*/ [
            H0,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __
          ]
        ];

        // map server current expect state and handshake type to function
        // Note: CAD[CH] does not map to FB because renegotation is prohibited
        var H7 = tls.handleClientHello;
        var H8 = tls.handleClientKeyExchange;
        var H9 = tls.handleCertificateVerify;
        hsTable[tls.ConnectionEnd.server] = [
          //      01,CH,02,03,04,05,06,07,08,09,10,CC,12,13,14,CV,CK,17,18,19,FI
          /*CHE*/ [
            __,
            H7,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __
          ],
          /*CCE*/ [
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            H2,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __
          ],
          /*CKE*/ [
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            H8,
            __,
            __,
            __,
            __
          ],
          /*CCV*/ [
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            H9,
            __,
            __,
            __,
            __,
            __
          ],
          /*CCC*/ [
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __
          ],
          /*CFI*/ [
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            H6
          ],
          /*CAD*/ [
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __
          ],
          /*CER*/ [
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __,
            __
          ]
        ];

        /**
 * Generates the master_secret and keys using the given security parameters.
 *
 * The security parameters for a TLS connection state are defined as such:
 *
 * struct {
 *   ConnectionEnd          entity;
 *   PRFAlgorithm           prf_algorithm;
 *   BulkCipherAlgorithm    bulk_cipher_algorithm;
 *   CipherType             cipher_type;
 *   uint8                  enc_key_length;
 *   uint8                  block_length;
 *   uint8                  fixed_iv_length;
 *   uint8                  record_iv_length;
 *   MACAlgorithm           mac_algorithm;
 *   uint8                  mac_length;
 *   uint8                  mac_key_length;
 *   CompressionMethod      compression_algorithm;
 *   opaque                 master_secret[48];
 *   opaque                 client_random[32];
 *   opaque                 server_random[32];
 * } SecurityParameters;
 *
 * Note that this definition is from TLS 1.2. In TLS 1.0 some of these
 * parameters are ignored because, for instance, the PRFAlgorithm is a
 * builtin-fixed algorithm combining iterations of MD5 and SHA-1 in TLS 1.0.
 *
 * The Record Protocol requires an algorithm to generate keys required by the
 * current connection state.
 *
 * The master secret is expanded into a sequence of secure bytes, which is then
 * split to a client write MAC key, a server write MAC key, a client write
 * encryption key, and a server write encryption key. In TLS 1.0 a client write
 * IV and server write IV are also generated. Each of these is generated from
 * the byte sequence in that order. Unused values are empty. In TLS 1.2, some
 * AEAD ciphers may additionally require a client write IV and a server write
 * IV (see Section 6.2.3.3).
 *
 * When keys, MAC keys, and IVs are generated, the master secret is used as an
 * entropy source.
 *
 * To generate the key material, compute:
 *
 * master_secret = PRF(pre_master_secret, "master secret",
 *                     ClientHello.random + ServerHello.random)
 *
 * key_block = PRF(SecurityParameters.master_secret,
 *                 "key expansion",
 *                 SecurityParameters.server_random +
 *                 SecurityParameters.client_random);
 *
 * until enough output has been generated. Then, the key_block is
 * partitioned as follows:
 *
 * client_write_MAC_key[SecurityParameters.mac_key_length]
 * server_write_MAC_key[SecurityParameters.mac_key_length]
 * client_write_key[SecurityParameters.enc_key_length]
 * server_write_key[SecurityParameters.enc_key_length]
 * client_write_IV[SecurityParameters.fixed_iv_length]
 * server_write_IV[SecurityParameters.fixed_iv_length]
 *
 * In TLS 1.2, the client_write_IV and server_write_IV are only generated for
 * implicit nonce techniques as described in Section 3.2.1 of [AEAD]. This
 * implementation uses TLS 1.0 so IVs are generated.
 *
 * Implementation note: The currently defined cipher suite which requires the
 * most material is AES_256_CBC_SHA256. It requires 2 x 32 byte keys and 2 x 32
 * byte MAC keys, for a total 128 bytes of key material. In TLS 1.0 it also
 * requires 2 x 16 byte IVs, so it actually takes 160 bytes of key material.
 *
 * @param c the connection.
 * @param sp the security parameters to use.
 *
 * @return the security keys.
 */
        tls.generateKeys = function(c, sp) {
          // TLS_RSA_WITH_AES_128_CBC_SHA (required to be compliant with TLS 1.2) &
          // TLS_RSA_WITH_AES_256_CBC_SHA are the only cipher suites implemented
          // at present

          // TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA is required to be compliant with
          // TLS 1.0 but we don't care right now because AES is better and we have
          // an implementation for it

          // TODO: TLS 1.2 implementation
          /*
  // determine the PRF
  var prf;
  switch(sp.prf_algorithm) {
  case tls.PRFAlgorithm.tls_prf_sha256:
    prf = prf_sha256;
    break;
  default:
    // should never happen
    throw new Error('Invalid PRF');
  }
  */

          // TLS 1.0/1.1 implementation
          var prf = prf_TLS1;

          // concatenate server and client random
          var random = sp.client_random + sp.server_random;

          // only create master secret if session is new
          if (!c.session.resuming) {
            // create master secret, clean up pre-master secret
            sp.master_secret = prf(
              sp.pre_master_secret,
              "master secret",
              random,
              48
            ).bytes();
            sp.pre_master_secret = null;
          }

          // generate the amount of key material needed
          random = sp.server_random + sp.client_random;
          var length = 2 * sp.mac_key_length + 2 * sp.enc_key_length;

          // include IV for TLS/1.0
          var tls10 =
            c.version.major === tls.Versions.TLS_1_0.major &&
            c.version.minor === tls.Versions.TLS_1_0.minor;
          if (tls10) {
            length += 2 * sp.fixed_iv_length;
          }
          var km = prf(sp.master_secret, "key expansion", random, length);

          // split the key material into the MAC and encryption keys
          var rval = {
            client_write_MAC_key: km.getBytes(sp.mac_key_length),
            server_write_MAC_key: km.getBytes(sp.mac_key_length),
            client_write_key: km.getBytes(sp.enc_key_length),
            server_write_key: km.getBytes(sp.enc_key_length)
          };

          // include TLS 1.0 IVs
          if (tls10) {
            rval.client_write_IV = km.getBytes(sp.fixed_iv_length);
            rval.server_write_IV = km.getBytes(sp.fixed_iv_length);
          }

          return rval;
        };

        /**
 * Creates a new initialized TLS connection state. A connection state has
 * a read mode and a write mode.
 *
 * compression state:
 *   The current state of the compression algorithm.
 *
 * cipher state:
 *   The current state of the encryption algorithm. This will consist of the
 *   scheduled key for that connection. For stream ciphers, this will also
 *   contain whatever state information is necessary to allow the stream to
 *   continue to encrypt or decrypt data.
 *
 * MAC key:
 *   The MAC key for the connection.
 *
 * sequence number:
 *   Each connection state contains a sequence number, which is maintained
 *   separately for read and write states. The sequence number MUST be set to
 *   zero whenever a connection state is made the active state. Sequence
 *   numbers are of type uint64 and may not exceed 2^64-1. Sequence numbers do
 *   not wrap. If a TLS implementation would need to wrap a sequence number,
 *   it must renegotiate instead. A sequence number is incremented after each
 *   record: specifically, the first record transmitted under a particular
 *   connection state MUST use sequence number 0.
 *
 * @param c the connection.
 *
 * @return the new initialized TLS connection state.
 */
        tls.createConnectionState = function(c) {
          var client = c.entity === tls.ConnectionEnd.client;

          var createMode = function() {
            var mode = {
              // two 32-bit numbers, first is most significant
              sequenceNumber: [0, 0],
              macKey: null,
              macLength: 0,
              macFunction: null,
              cipherState: null,
              cipherFunction: function(record) {
                return true;
              },
              compressionState: null,
              compressFunction: function(record) {
                return true;
              },
              updateSequenceNumber: function() {
                if (mode.sequenceNumber[1] === 0xffffffff) {
                  mode.sequenceNumber[1] = 0;
                  ++mode.sequenceNumber[0];
                } else {
                  ++mode.sequenceNumber[1];
                }
              }
            };
            return mode;
          };
          var state = {
            read: createMode(),
            write: createMode()
          };

          // update function in read mode will decrypt then decompress a record
          state.read.update = function(c, record) {
            if (!state.read.cipherFunction(record, state.read)) {
              c.error(c, {
                message: "Could not decrypt record or bad MAC.",
                send: true,
                alert: {
                  level: tls.Alert.Level.fatal,
                  // doesn't matter if decryption failed or MAC was
                  // invalid, return the same error so as not to reveal
                  // which one occurred
                  description: tls.Alert.Description.bad_record_mac
                }
              });
            } else if (!state.read.compressFunction(c, record, state.read)) {
              c.error(c, {
                message: "Could not decompress record.",
                send: true,
                alert: {
                  level: tls.Alert.Level.fatal,
                  description: tls.Alert.Description.decompression_failure
                }
              });
            }
            return !c.fail;
          };

          // update function in write mode will compress then encrypt a record
          state.write.update = function(c, record) {
            if (!state.write.compressFunction(c, record, state.write)) {
              // error, but do not send alert since it would require
              // compression as well
              c.error(c, {
                message: "Could not compress record.",
                send: false,
                alert: {
                  level: tls.Alert.Level.fatal,
                  description: tls.Alert.Description.internal_error
                }
              });
            } else if (!state.write.cipherFunction(record, state.write)) {
              // error, but do not send alert since it would require
              // encryption as well
              c.error(c, {
                message: "Could not encrypt record.",
                send: false,
                alert: {
                  level: tls.Alert.Level.fatal,
                  description: tls.Alert.Description.internal_error
                }
              });
            }
            return !c.fail;
          };

          // handle security parameters
          if (c.session) {
            var sp = c.session.sp;
            c.session.cipherSuite.initSecurityParameters(sp);

            // generate keys
            sp.keys = tls.generateKeys(c, sp);
            state.read.macKey = client
              ? sp.keys.server_write_MAC_key
              : sp.keys.client_write_MAC_key;
            state.write.macKey = client
              ? sp.keys.client_write_MAC_key
              : sp.keys.server_write_MAC_key;

            // cipher suite setup
            c.session.cipherSuite.initConnectionState(state, c, sp);

            // compression setup
            switch (sp.compression_algorithm) {
              case tls.CompressionMethod.none:
                break;
              case tls.CompressionMethod.deflate:
                state.read.compressFunction = inflate;
                state.write.compressFunction = deflate;
                break;
              default:
                throw new Error("Unsupported compression algorithm.");
            }
          }

          return state;
        };

        /**
 * Creates a Random structure.
 *
 * struct {
 *   uint32 gmt_unix_time;
 *   opaque random_bytes[28];
 * } Random;
 *
 * gmt_unix_time:
 *   The current time and date in standard UNIX 32-bit format (seconds since
 *   the midnight starting Jan 1, 1970, UTC, ignoring leap seconds) according
 *   to the sender's internal clock. Clocks are not required to be set
 *   correctly by the basic TLS protocol; higher-level or application
 *   protocols may define additional requirements. Note that, for historical
 *   reasons, the data element is named using GMT, the predecessor of the
 *   current worldwide time base, UTC.
 * random_bytes:
 *   28 bytes generated by a secure random number generator.
 *
 * @return the Random structure as a byte array.
 */
        tls.createRandom = function() {
          // get UTC milliseconds
          var d = new Date();
          var utc = +d + d.getTimezoneOffset() * 60000;
          var rval = forge.util.createBuffer();
          rval.putInt32(utc);
          rval.putBytes(forge.random.getBytes(28));
          return rval;
        };

        /**
 * Creates a TLS record with the given type and data.
 *
 * @param c the connection.
 * @param options:
 *   type: the record type.
 *   data: the plain text data in a byte buffer.
 *
 * @return the created record.
 */
        tls.createRecord = function(c, options) {
          if (!options.data) {
            return null;
          }
          var record = {
            type: options.type,
            version: {
              major: c.version.major,
              minor: c.version.minor
            },
            length: options.data.length(),
            fragment: options.data
          };
          return record;
        };

        /**
 * Creates a TLS alert record.
 *
 * @param c the connection.
 * @param alert:
 *   level: the TLS alert level.
 *   description: the TLS alert description.
 *
 * @return the created alert record.
 */
        tls.createAlert = function(c, alert) {
          var b = forge.util.createBuffer();
          b.putByte(alert.level);
          b.putByte(alert.description);
          return tls.createRecord(c, {
            type: tls.ContentType.alert,
            data: b
          });
        };

        /* The structure of a TLS handshake message.
 *
 * struct {
 *    HandshakeType msg_type;    // handshake type
 *    uint24 length;             // bytes in message
 *    select(HandshakeType) {
 *       case hello_request:       HelloRequest;
 *       case client_hello:        ClientHello;
 *       case server_hello:        ServerHello;
 *       case certificate:         Certificate;
 *       case server_key_exchange: ServerKeyExchange;
 *       case certificate_request: CertificateRequest;
 *       case server_hello_done:   ServerHelloDone;
 *       case certificate_verify:  CertificateVerify;
 *       case client_key_exchange: ClientKeyExchange;
 *       case finished:            Finished;
 *    } body;
 * } Handshake;
 */

        /**
 * Creates a ClientHello message.
 *
 * opaque SessionID<0..32>;
 * enum { null(0), deflate(1), (255) } CompressionMethod;
 * uint8 CipherSuite[2];
 *
 * struct {
 *   ProtocolVersion client_version;
 *   Random random;
 *   SessionID session_id;
 *   CipherSuite cipher_suites<2..2^16-2>;
 *   CompressionMethod compression_methods<1..2^8-1>;
 *   select(extensions_present) {
 *     case false:
 *       struct {};
 *     case true:
 *       Extension extensions<0..2^16-1>;
 *   };
 * } ClientHello;
 *
 * The extension format for extended client hellos and server hellos is:
 *
 * struct {
 *   ExtensionType extension_type;
 *   opaque extension_data<0..2^16-1>;
 * } Extension;
 *
 * Here:
 *
 * - "extension_type" identifies the particular extension type.
 * - "extension_data" contains information specific to the particular
 * extension type.
 *
 * The extension types defined in this document are:
 *
 * enum {
 *   server_name(0), max_fragment_length(1),
 *   client_certificate_url(2), trusted_ca_keys(3),
 *   truncated_hmac(4), status_request(5), (65535)
 * } ExtensionType;
 *
 * @param c the connection.
 *
 * @return the ClientHello byte buffer.
 */
        tls.createClientHello = function(c) {
          // save hello version
          c.session.clientHelloVersion = {
            major: c.version.major,
            minor: c.version.minor
          };

          // create supported cipher suites
          var cipherSuites = forge.util.createBuffer();
          for (var i = 0; i < c.cipherSuites.length; ++i) {
            var cs = c.cipherSuites[i];
            cipherSuites.putByte(cs.id[0]);
            cipherSuites.putByte(cs.id[1]);
          }
          var cSuites = cipherSuites.length();

          // create supported compression methods, null always supported, but
          // also support deflate if connection has inflate and deflate methods
          var compressionMethods = forge.util.createBuffer();
          compressionMethods.putByte(tls.CompressionMethod.none);
          // FIXME: deflate support disabled until issues with raw deflate data
          // without zlib headers are resolved
          /*
  if(c.inflate !== null && c.deflate !== null) {
    compressionMethods.putByte(tls.CompressionMethod.deflate);
  }
  */
          var cMethods = compressionMethods.length();

          // create TLS SNI (server name indication) extension if virtual host
          // has been specified, see RFC 3546
          var extensions = forge.util.createBuffer();
          if (c.virtualHost) {
            // create extension struct
            var ext = forge.util.createBuffer();
            ext.putByte(0x00); // type server_name (ExtensionType is 2 bytes)
            ext.putByte(0x00);

            /* In order to provide the server name, clients MAY include an
     * extension of type "server_name" in the (extended) client hello.
     * The "extension_data" field of this extension SHALL contain
     * "ServerNameList" where:
     *
     * struct {
     *   NameType name_type;
     *   select(name_type) {
     *     case host_name: HostName;
     *   } name;
     * } ServerName;
     *
     * enum {
     *   host_name(0), (255)
     * } NameType;
     *
     * opaque HostName<1..2^16-1>;
     *
     * struct {
     *   ServerName server_name_list<1..2^16-1>
     * } ServerNameList;
     */
            var serverName = forge.util.createBuffer();
            serverName.putByte(0x00); // type host_name
            writeVector(serverName, 2, forge.util.createBuffer(c.virtualHost));

            // ServerNameList is in extension_data
            var snList = forge.util.createBuffer();
            writeVector(snList, 2, serverName);
            writeVector(ext, 2, snList);
            extensions.putBuffer(ext);
          }
          var extLength = extensions.length();
          if (extLength > 0) {
            // add extension vector length
            extLength += 2;
          }

          // determine length of the handshake message
          // cipher suites and compression methods size will need to be
          // updated if more get added to the list
          var sessionId = c.session.id;
          var length =
            sessionId.length +
            1 + // session ID vector
            2 + // version (major + minor)
            4 +
            28 + // random time and random bytes
            2 +
            cSuites + // cipher suites vector
            1 +
            cMethods + // compression methods vector
            extLength; // extensions vector

          // build record fragment
          var rval = forge.util.createBuffer();
          rval.putByte(tls.HandshakeType.client_hello);
          rval.putInt24(length); // handshake length
          rval.putByte(c.version.major); // major version
          rval.putByte(c.version.minor); // minor version
          rval.putBytes(c.session.sp.client_random); // random time + bytes
          writeVector(rval, 1, forge.util.createBuffer(sessionId));
          writeVector(rval, 2, cipherSuites);
          writeVector(rval, 1, compressionMethods);
          if (extLength > 0) {
            writeVector(rval, 2, extensions);
          }
          return rval;
        };

        /**
 * Creates a ServerHello message.
 *
 * @param c the connection.
 *
 * @return the ServerHello byte buffer.
 */
        tls.createServerHello = function(c) {
          // determine length of the handshake message
          var sessionId = c.session.id;
          var length =
            sessionId.length +
            1 + // session ID vector
            2 + // version (major + minor)
            4 +
            28 + // random time and random bytes
            2 + // chosen cipher suite
            1; // chosen compression method

          // build record fragment
          var rval = forge.util.createBuffer();
          rval.putByte(tls.HandshakeType.server_hello);
          rval.putInt24(length); // handshake length
          rval.putByte(c.version.major); // major version
          rval.putByte(c.version.minor); // minor version
          rval.putBytes(c.session.sp.server_random); // random time + bytes
          writeVector(rval, 1, forge.util.createBuffer(sessionId));
          rval.putByte(c.session.cipherSuite.id[0]);
          rval.putByte(c.session.cipherSuite.id[1]);
          rval.putByte(c.session.compressionMethod);
          return rval;
        };

        /**
 * Creates a Certificate message.
 *
 * When this message will be sent:
 *   This is the first message the client can send after receiving a server
 *   hello done message and the first message the server can send after
 *   sending a ServerHello. This client message is only sent if the server
 *   requests a certificate. If no suitable certificate is available, the
 *   client should send a certificate message containing no certificates. If
 *   client authentication is required by the server for the handshake to
 *   continue, it may respond with a fatal handshake failure alert.
 *
 * opaque ASN.1Cert<1..2^24-1>;
 *
 * struct {
 *   ASN.1Cert certificate_list<0..2^24-1>;
 * } Certificate;
 *
 * @param c the connection.
 *
 * @return the Certificate byte buffer.
 */
        tls.createCertificate = function(c) {
          // TODO: check certificate request to ensure types are supported

          // get a certificate (a certificate as a PEM string)
          var client = c.entity === tls.ConnectionEnd.client;
          var cert = null;
          if (c.getCertificate) {
            var hint;
            if (client) {
              hint = c.session.certificateRequest;
            } else {
              hint = c.session.extensions.server_name.serverNameList;
            }
            cert = c.getCertificate(c, hint);
          }

          // buffer to hold certificate list
          var certList = forge.util.createBuffer();
          if (cert !== null) {
            try {
              // normalize cert to a chain of certificates
              if (!forge.util.isArray(cert)) {
                cert = [cert];
              }
              var asn1 = null;
              for (var i = 0; i < cert.length; ++i) {
                var msg = forge.pem.decode(cert[i])[0];
                if (
                  msg.type !== "CERTIFICATE" &&
                  msg.type !== "X509 CERTIFICATE" &&
                  msg.type !== "TRUSTED CERTIFICATE"
                ) {
                  var error = new Error(
                    "Could not convert certificate from PEM; PEM " +
                      'header type is not "CERTIFICATE", "X509 CERTIFICATE", or ' +
                      '"TRUSTED CERTIFICATE".'
                  );
                  error.headerType = msg.type;
                  throw error;
                }
                if (msg.procType && msg.procType.type === "ENCRYPTED") {
                  throw new Error(
                    "Could not convert certificate from PEM; PEM is encrypted."
                  );
                }

                var der = forge.util.createBuffer(msg.body);
                if (asn1 === null) {
                  asn1 = forge.asn1.fromDer(der.bytes(), false);
                }

                // certificate entry is itself a vector with 3 length bytes
                var certBuffer = forge.util.createBuffer();
                writeVector(certBuffer, 3, der);

                // add cert vector to cert list vector
                certList.putBuffer(certBuffer);
              }

              // save certificate
              cert = forge.pki.certificateFromAsn1(asn1);
              if (client) {
                c.session.clientCertificate = cert;
              } else {
                c.session.serverCertificate = cert;
              }
            } catch (ex) {
              return c.error(c, {
                message: "Could not send certificate list.",
                cause: ex,
                send: true,
                alert: {
                  level: tls.Alert.Level.fatal,
                  description: tls.Alert.Description.bad_certificate
                }
              });
            }
          }

          // determine length of the handshake message
          var length = 3 + certList.length(); // cert list vector

          // build record fragment
          var rval = forge.util.createBuffer();
          rval.putByte(tls.HandshakeType.certificate);
          rval.putInt24(length);
          writeVector(rval, 3, certList);
          return rval;
        };

        /**
 * Creates a ClientKeyExchange message.
 *
 * When this message will be sent:
 *   This message is always sent by the client. It will immediately follow the
 *   client certificate message, if it is sent. Otherwise it will be the first
 *   message sent by the client after it receives the server hello done
 *   message.
 *
 * Meaning of this message:
 *   With this message, the premaster secret is set, either though direct
 *   transmission of the RSA-encrypted secret, or by the transmission of
 *   Diffie-Hellman parameters which will allow each side to agree upon the
 *   same premaster secret. When the key exchange method is DH_RSA or DH_DSS,
 *   client certification has been requested, and the client was able to
 *   respond with a certificate which contained a Diffie-Hellman public key
 *   whose parameters (group and generator) matched those specified by the
 *   server in its certificate, this message will not contain any data.
 *
 * Meaning of this message:
 *   If RSA is being used for key agreement and authentication, the client
 *   generates a 48-byte premaster secret, encrypts it using the public key
 *   from the server's certificate or the temporary RSA key provided in a
 *   server key exchange message, and sends the result in an encrypted
 *   premaster secret message. This structure is a variant of the client
 *   key exchange message, not a message in itself.
 *
 * struct {
 *   select(KeyExchangeAlgorithm) {
 *     case rsa: EncryptedPreMasterSecret;
 *     case diffie_hellman: ClientDiffieHellmanPublic;
 *   } exchange_keys;
 * } ClientKeyExchange;
 *
 * struct {
 *   ProtocolVersion client_version;
 *   opaque random[46];
 * } PreMasterSecret;
 *
 * struct {
 *   public-key-encrypted PreMasterSecret pre_master_secret;
 * } EncryptedPreMasterSecret;
 *
 * A public-key-encrypted element is encoded as a vector <0..2^16-1>.
 *
 * @param c the connection.
 *
 * @return the ClientKeyExchange byte buffer.
 */
        tls.createClientKeyExchange = function(c) {
          // create buffer to encrypt
          var b = forge.util.createBuffer();

          // add highest client-supported protocol to help server avoid version
          // rollback attacks
          b.putByte(c.session.clientHelloVersion.major);
          b.putByte(c.session.clientHelloVersion.minor);

          // generate and add 46 random bytes
          b.putBytes(forge.random.getBytes(46));

          // save pre-master secret
          var sp = c.session.sp;
          sp.pre_master_secret = b.getBytes();

          // RSA-encrypt the pre-master secret
          var key = c.session.serverCertificate.publicKey;
          b = key.encrypt(sp.pre_master_secret);

          /* Note: The encrypted pre-master secret will be stored in a
    public-key-encrypted opaque vector that has the length prefixed using
    2 bytes, so include those 2 bytes in the handshake message length. This
    is done as a minor optimization instead of calling writeVector(). */

          // determine length of the handshake message
          var length = b.length + 2;

          // build record fragment
          var rval = forge.util.createBuffer();
          rval.putByte(tls.HandshakeType.client_key_exchange);
          rval.putInt24(length);
          // add vector length bytes
          rval.putInt16(b.length);
          rval.putBytes(b);
          return rval;
        };

        /**
 * Creates a ServerKeyExchange message.
 *
 * @param c the connection.
 *
 * @return the ServerKeyExchange byte buffer.
 */
        tls.createServerKeyExchange = function(c) {
          // this implementation only supports RSA, no Diffie-Hellman support,
          // so this record is empty

          // determine length of the handshake message
          var length = 0;

          // build record fragment
          var rval = forge.util.createBuffer();
          if (length > 0) {
            rval.putByte(tls.HandshakeType.server_key_exchange);
            rval.putInt24(length);
          }
          return rval;
        };

        /**
 * Gets the signed data used to verify a client-side certificate. See
 * tls.createCertificateVerify() for details.
 *
 * @param c the connection.
 * @param callback the callback to call once the signed data is ready.
 */
        tls.getClientSignature = function(c, callback) {
          // generate data to RSA encrypt
          var b = forge.util.createBuffer();
          b.putBuffer(c.session.md5.digest());
          b.putBuffer(c.session.sha1.digest());
          b = b.getBytes();

          // create default signing function as necessary
          c.getSignature =
            c.getSignature ||
            function(c, b, callback) {
              // do rsa encryption, call callback
              var privateKey = null;
              if (c.getPrivateKey) {
                try {
                  privateKey = c.getPrivateKey(c, c.session.clientCertificate);
                  privateKey = forge.pki.privateKeyFromPem(privateKey);
                } catch (ex) {
                  c.error(c, {
                    message: "Could not get private key.",
                    cause: ex,
                    send: true,
                    alert: {
                      level: tls.Alert.Level.fatal,
                      description: tls.Alert.Description.internal_error
                    }
                  });
                }
              }
              if (privateKey === null) {
                c.error(c, {
                  message: "No private key set.",
                  send: true,
                  alert: {
                    level: tls.Alert.Level.fatal,
                    description: tls.Alert.Description.internal_error
                  }
                });
              } else {
                b = privateKey.sign(b, null);
              }
              callback(c, b);
            };

          // get client signature
          c.getSignature(c, b, callback);
        };

        /**
 * Creates a CertificateVerify message.
 *
 * Meaning of this message:
 *   This structure conveys the client's Diffie-Hellman public value
 *   (Yc) if it was not already included in the client's certificate.
 *   The encoding used for Yc is determined by the enumerated
 *   PublicValueEncoding. This structure is a variant of the client
 *   key exchange message, not a message in itself.
 *
 * When this message will be sent:
 *   This message is used to provide explicit verification of a client
 *   certificate. This message is only sent following a client
 *   certificate that has signing capability (i.e. all certificates
 *   except those containing fixed Diffie-Hellman parameters). When
 *   sent, it will immediately follow the client key exchange message.
 *
 * struct {
 *   Signature signature;
 * } CertificateVerify;
 *
 * CertificateVerify.signature.md5_hash
 *   MD5(handshake_messages);
 *
 * Certificate.signature.sha_hash
 *   SHA(handshake_messages);
 *
 * Here handshake_messages refers to all handshake messages sent or
 * received starting at client hello up to but not including this
 * message, including the type and length fields of the handshake
 * messages.
 *
 * select(SignatureAlgorithm) {
 *   case anonymous: struct { };
 *   case rsa:
 *     digitally-signed struct {
 *       opaque md5_hash[16];
 *       opaque sha_hash[20];
 *     };
 *   case dsa:
 *     digitally-signed struct {
 *       opaque sha_hash[20];
 *     };
 * } Signature;
 *
 * In digital signing, one-way hash functions are used as input for a
 * signing algorithm. A digitally-signed element is encoded as an opaque
 * vector <0..2^16-1>, where the length is specified by the signing
 * algorithm and key.
 *
 * In RSA signing, a 36-byte structure of two hashes (one SHA and one
 * MD5) is signed (encrypted with the private key). It is encoded with
 * PKCS #1 block type 0 or type 1 as described in [PKCS1].
 *
 * In DSS, the 20 bytes of the SHA hash are run directly through the
 * Digital Signing Algorithm with no additional hashing.
 *
 * @param c the connection.
 * @param signature the signature to include in the message.
 *
 * @return the CertificateVerify byte buffer.
 */
        tls.createCertificateVerify = function(c, signature) {
          /* Note: The signature will be stored in a "digitally-signed" opaque
    vector that has the length prefixed using 2 bytes, so include those
    2 bytes in the handshake message length. This is done as a minor
    optimization instead of calling writeVector(). */

          // determine length of the handshake message
          var length = signature.length + 2;

          // build record fragment
          var rval = forge.util.createBuffer();
          rval.putByte(tls.HandshakeType.certificate_verify);
          rval.putInt24(length);
          // add vector length bytes
          rval.putInt16(signature.length);
          rval.putBytes(signature);
          return rval;
        };

        /**
 * Creates a CertificateRequest message.
 *
 * @param c the connection.
 *
 * @return the CertificateRequest byte buffer.
 */
        tls.createCertificateRequest = function(c) {
          // TODO: support other certificate types
          var certTypes = forge.util.createBuffer();

          // common RSA certificate type
          certTypes.putByte(0x01);

          // add distinguished names from CA store
          var cAs = forge.util.createBuffer();
          for (var key in c.caStore.certs) {
            var cert = c.caStore.certs[key];
            var dn = forge.pki.distinguishedNameToAsn1(cert.subject);
            var byteBuffer = forge.asn1.toDer(dn);
            cAs.putInt16(byteBuffer.length());
            cAs.putBuffer(byteBuffer);
          }

          // TODO: TLS 1.2+ has a different format

          // determine length of the handshake message
          var length = 1 + certTypes.length() + 2 + cAs.length();

          // build record fragment
          var rval = forge.util.createBuffer();
          rval.putByte(tls.HandshakeType.certificate_request);
          rval.putInt24(length);
          writeVector(rval, 1, certTypes);
          writeVector(rval, 2, cAs);
          return rval;
        };

        /**
 * Creates a ServerHelloDone message.
 *
 * @param c the connection.
 *
 * @return the ServerHelloDone byte buffer.
 */
        tls.createServerHelloDone = function(c) {
          // build record fragment
          var rval = forge.util.createBuffer();
          rval.putByte(tls.HandshakeType.server_hello_done);
          rval.putInt24(0);
          return rval;
        };

        /**
 * Creates a ChangeCipherSpec message.
 *
 * The change cipher spec protocol exists to signal transitions in
 * ciphering strategies. The protocol consists of a single message,
 * which is encrypted and compressed under the current (not the pending)
 * connection state. The message consists of a single byte of value 1.
 *
 * struct {
 *   enum { change_cipher_spec(1), (255) } type;
 * } ChangeCipherSpec;
 *
 * @return the ChangeCipherSpec byte buffer.
 */
        tls.createChangeCipherSpec = function() {
          var rval = forge.util.createBuffer();
          rval.putByte(0x01);
          return rval;
        };

        /**
 * Creates a Finished message.
 *
 * struct {
 *   opaque verify_data[12];
 * } Finished;
 *
 * verify_data
 *   PRF(master_secret, finished_label, MD5(handshake_messages) +
 *   SHA-1(handshake_messages)) [0..11];
 *
 * finished_label
 *   For Finished messages sent by the client, the string "client
 *   finished". For Finished messages sent by the server, the
 *   string "server finished".
 *
 * handshake_messages
 *   All of the data from all handshake messages up to but not
 *   including this message. This is only data visible at the
 *   handshake layer and does not include record layer headers.
 *   This is the concatenation of all the Handshake structures as
 *   defined in 7.4 exchanged thus far.
 *
 * @param c the connection.
 *
 * @return the Finished byte buffer.
 */
        tls.createFinished = function(c) {
          // generate verify_data
          var b = forge.util.createBuffer();
          b.putBuffer(c.session.md5.digest());
          b.putBuffer(c.session.sha1.digest());

          // TODO: determine prf function and verify length for TLS 1.2
          var client = c.entity === tls.ConnectionEnd.client;
          var sp = c.session.sp;
          var vdl = 12;
          var prf = prf_TLS1;
          var label = client ? "client finished" : "server finished";
          b = prf(sp.master_secret, label, b.getBytes(), vdl);

          // build record fragment
          var rval = forge.util.createBuffer();
          rval.putByte(tls.HandshakeType.finished);
          rval.putInt24(b.length());
          rval.putBuffer(b);
          return rval;
        };

        /**
 * Creates a HeartbeatMessage (See RFC 6520).
 *
 * struct {
 *   HeartbeatMessageType type;
 *   uint16 payload_length;
 *   opaque payload[HeartbeatMessage.payload_length];
 *   opaque padding[padding_length];
 * } HeartbeatMessage;
 *
 * The total length of a HeartbeatMessage MUST NOT exceed 2^14 or
 * max_fragment_length when negotiated as defined in [RFC6066].
 *
 * type: The message type, either heartbeat_request or heartbeat_response.
 *
 * payload_length: The length of the payload.
 *
 * payload: The payload consists of arbitrary content.
 *
 * padding: The padding is random content that MUST be ignored by the
 *   receiver. The length of a HeartbeatMessage is TLSPlaintext.length
 *   for TLS and DTLSPlaintext.length for DTLS. Furthermore, the
 *   length of the type field is 1 byte, and the length of the
 *   payload_length is 2. Therefore, the padding_length is
 *   TLSPlaintext.length - payload_length - 3 for TLS and
 *   DTLSPlaintext.length - payload_length - 3 for DTLS. The
 *   padding_length MUST be at least 16.
 *
 * The sender of a HeartbeatMessage MUST use a random padding of at
 * least 16 bytes. The padding of a received HeartbeatMessage message
 * MUST be ignored.
 *
 * If the payload_length of a received HeartbeatMessage is too large,
 * the received HeartbeatMessage MUST be discarded silently.
 *
 * @param c the connection.
 * @param type the tls.HeartbeatMessageType.
 * @param payload the heartbeat data to send as the payload.
 * @param [payloadLength] the payload length to use, defaults to the
 *          actual payload length.
 *
 * @return the HeartbeatRequest byte buffer.
 */
        tls.createHeartbeat = function(type, payload, payloadLength) {
          if (typeof payloadLength === "undefined") {
            payloadLength = payload.length;
          }
          // build record fragment
          var rval = forge.util.createBuffer();
          rval.putByte(type); // heartbeat message type
          rval.putInt16(payloadLength); // payload length
          rval.putBytes(payload); // payload
          // padding
          var plaintextLength = rval.length();
          var paddingLength = Math.max(16, plaintextLength - payloadLength - 3);
          rval.putBytes(forge.random.getBytes(paddingLength));
          return rval;
        };

        /**
 * Fragments, compresses, encrypts, and queues a record for delivery.
 *
 * @param c the connection.
 * @param record the record to queue.
 */
        tls.queue = function(c, record) {
          // error during record creation
          if (!record) {
            return;
          }

          if (record.fragment.length() === 0) {
            if (
              record.type === tls.ContentType.handshake ||
              record.type === tls.ContentType.alert ||
              record.type === tls.ContentType.change_cipher_spec
            ) {
              // Empty handshake, alert of change cipher spec messages are not allowed per the TLS specification and should not be sent.
              return;
            }
          }

          // if the record is a handshake record, update handshake hashes
          if (record.type === tls.ContentType.handshake) {
            var bytes = record.fragment.bytes();
            c.session.md5.update(bytes);
            c.session.sha1.update(bytes);
            bytes = null;
          }

          // handle record fragmentation
          var records;
          if (record.fragment.length() <= tls.MaxFragment) {
            records = [record];
          } else {
            // fragment data as long as it is too long
            records = [];
            var data = record.fragment.bytes();
            while (data.length > tls.MaxFragment) {
              records.push(
                tls.createRecord(c, {
                  type: record.type,
                  data: forge.util.createBuffer(data.slice(0, tls.MaxFragment))
                })
              );
              data = data.slice(tls.MaxFragment);
            }
            // add last record
            if (data.length > 0) {
              records.push(
                tls.createRecord(c, {
                  type: record.type,
                  data: forge.util.createBuffer(data)
                })
              );
            }
          }

          // compress and encrypt all fragmented records
          for (var i = 0; i < records.length && !c.fail; ++i) {
            // update the record using current write state
            var rec = records[i];
            var s = c.state.current.write;
            if (s.update(c, rec)) {
              // store record
              c.records.push(rec);
            }
          }
        };

        /**
 * Flushes all queued records to the output buffer and calls the
 * tlsDataReady() handler on the given connection.
 *
 * @param c the connection.
 *
 * @return true on success, false on failure.
 */
        tls.flush = function(c) {
          for (var i = 0; i < c.records.length; ++i) {
            var record = c.records[i];

            // add record header and fragment
            c.tlsData.putByte(record.type);
            c.tlsData.putByte(record.version.major);
            c.tlsData.putByte(record.version.minor);
            c.tlsData.putInt16(record.fragment.length());
            c.tlsData.putBuffer(c.records[i].fragment);
          }
          c.records = [];
          return c.tlsDataReady(c);
        };

        /**
 * Maps a pki.certificateError to a tls.Alert.Description.
 *
 * @param error the error to map.
 *
 * @return the alert description.
 */
        var _certErrorToAlertDesc = function(error) {
          switch (error) {
            case true:
              return true;
            case forge.pki.certificateError.bad_certificate:
              return tls.Alert.Description.bad_certificate;
            case forge.pki.certificateError.unsupported_certificate:
              return tls.Alert.Description.unsupported_certificate;
            case forge.pki.certificateError.certificate_revoked:
              return tls.Alert.Description.certificate_revoked;
            case forge.pki.certificateError.certificate_expired:
              return tls.Alert.Description.certificate_expired;
            case forge.pki.certificateError.certificate_unknown:
              return tls.Alert.Description.certificate_unknown;
            case forge.pki.certificateError.unknown_ca:
              return tls.Alert.Description.unknown_ca;
            default:
              return tls.Alert.Description.bad_certificate;
          }
        };

        /**
 * Maps a tls.Alert.Description to a pki.certificateError.
 *
 * @param desc the alert description.
 *
 * @return the certificate error.
 */
        var _alertDescToCertError = function(desc) {
          switch (desc) {
            case true:
              return true;
            case tls.Alert.Description.bad_certificate:
              return forge.pki.certificateError.bad_certificate;
            case tls.Alert.Description.unsupported_certificate:
              return forge.pki.certificateError.unsupported_certificate;
            case tls.Alert.Description.certificate_revoked:
              return forge.pki.certificateError.certificate_revoked;
            case tls.Alert.Description.certificate_expired:
              return forge.pki.certificateError.certificate_expired;
            case tls.Alert.Description.certificate_unknown:
              return forge.pki.certificateError.certificate_unknown;
            case tls.Alert.Description.unknown_ca:
              return forge.pki.certificateError.unknown_ca;
            default:
              return forge.pki.certificateError.bad_certificate;
          }
        };

        /**
 * Verifies a certificate chain against the given connection's
 * Certificate Authority store.
 *
 * @param c the TLS connection.
 * @param chain the certificate chain to verify, with the root or highest
 *          authority at the end.
 *
 * @return true if successful, false if not.
 */
        tls.verifyCertificateChain = function(c, chain) {
          try {
            // verify chain
            forge.pki.verifyCertificateChain(c.caStore, chain, function verify(
              vfd,
              depth,
              chain
            ) {
              // convert pki.certificateError to tls alert description
              var desc = _certErrorToAlertDesc(vfd);

              // call application callback
              var ret = c.verify(c, vfd, depth, chain);
              if (ret !== true) {
                if (typeof ret === "object" && !forge.util.isArray(ret)) {
                  // throw custom error
                  var error = new Error(
                    "The application rejected the certificate."
                  );
                  error.send = true;
                  error.alert = {
                    level: tls.Alert.Level.fatal,
                    description: tls.Alert.Description.bad_certificate
                  };
                  if (ret.message) {
                    error.message = ret.message;
                  }
                  if (ret.alert) {
                    error.alert.description = ret.alert;
                  }
                  throw error;
                }

                // convert tls alert description to pki.certificateError
                if (ret !== vfd) {
                  ret = _alertDescToCertError(ret);
                }
              }

              return ret;
            });
          } catch (ex) {
            // build tls error if not already customized
            var err = ex;
            if (typeof err !== "object" || forge.util.isArray(err)) {
              err = {
                send: true,
                alert: {
                  level: tls.Alert.Level.fatal,
                  description: _certErrorToAlertDesc(ex)
                }
              };
            }
            if (!("send" in err)) {
              err.send = true;
            }
            if (!("alert" in err)) {
              err.alert = {
                level: tls.Alert.Level.fatal,
                description: _certErrorToAlertDesc(err.error)
              };
            }

            // send error
            c.error(c, err);
          }

          return !c.fail;
        };

        /**
 * Creates a new TLS session cache.
 *
 * @param cache optional map of session ID to cached session.
 * @param capacity the maximum size for the cache (default: 100).
 *
 * @return the new TLS session cache.
 */
        tls.createSessionCache = function(cache, capacity) {
          var rval = null;

          // assume input is already a session cache object
          if (cache && cache.getSession && cache.setSession && cache.order) {
            rval = cache;
          } else {
            // create cache
            rval = {};
            rval.cache = cache || {};
            rval.capacity = Math.max(capacity || 100, 1);
            rval.order = [];

            // store order for sessions, delete session overflow
            for (var key in cache) {
              if (rval.order.length <= capacity) {
                rval.order.push(key);
              } else {
                delete cache[key];
              }
            }

            // get a session from a session ID (or get any session)
            rval.getSession = function(sessionId) {
              var session = null;
              var key = null;

              // if session ID provided, use it
              if (sessionId) {
                key = forge.util.bytesToHex(sessionId);
              } else if (rval.order.length > 0) {
                // get first session from cache
                key = rval.order[0];
              }

              if (key !== null && key in rval.cache) {
                // get cached session and remove from cache
                session = rval.cache[key];
                delete rval.cache[key];
                for (var i in rval.order) {
                  if (rval.order[i] === key) {
                    rval.order.splice(i, 1);
                    break;
                  }
                }
              }

              return session;
            };

            // set a session in the cache
            rval.setSession = function(sessionId, session) {
              // remove session from cache if at capacity
              if (rval.order.length === rval.capacity) {
                var key = rval.order.shift();
                delete rval.cache[key];
              }
              // add session to cache
              var key = forge.util.bytesToHex(sessionId);
              rval.order.push(key);
              rval.cache[key] = session;
            };
          }

          return rval;
        };

        /**
 * Creates a new TLS connection.
 *
 * See public createConnection() docs for more details.
 *
 * @param options the options for this connection.
 *
 * @return the new TLS connection.
 */
        tls.createConnection = function(options) {
          var caStore = null;
          if (options.caStore) {
            // if CA store is an array, convert it to a CA store object
            if (forge.util.isArray(options.caStore)) {
              caStore = forge.pki.createCaStore(options.caStore);
            } else {
              caStore = options.caStore;
            }
          } else {
            // create empty CA store
            caStore = forge.pki.createCaStore();
          }

          // setup default cipher suites
          var cipherSuites = options.cipherSuites || null;
          if (cipherSuites === null) {
            cipherSuites = [];
            for (var key in tls.CipherSuites) {
              cipherSuites.push(tls.CipherSuites[key]);
            }
          }

          // set default entity
          var entity =
            options.server || false
              ? tls.ConnectionEnd.server
              : tls.ConnectionEnd.client;

          // create session cache if requested
          var sessionCache = options.sessionCache
            ? tls.createSessionCache(options.sessionCache)
            : null;

          // create TLS connection
          var c = {
            version: { major: tls.Version.major, minor: tls.Version.minor },
            entity: entity,
            sessionId: options.sessionId,
            caStore: caStore,
            sessionCache: sessionCache,
            cipherSuites: cipherSuites,
            connected: options.connected,
            virtualHost: options.virtualHost || null,
            verifyClient: options.verifyClient || false,
            verify:
              options.verify ||
              function(cn, vfd, dpth, cts) {
                return vfd;
              },
            getCertificate: options.getCertificate || null,
            getPrivateKey: options.getPrivateKey || null,
            getSignature: options.getSignature || null,
            input: forge.util.createBuffer(),
            tlsData: forge.util.createBuffer(),
            data: forge.util.createBuffer(),
            tlsDataReady: options.tlsDataReady,
            dataReady: options.dataReady,
            heartbeatReceived: options.heartbeatReceived,
            closed: options.closed,
            error: function(c, ex) {
              // set origin if not set
              ex.origin =
                ex.origin ||
                (c.entity === tls.ConnectionEnd.client ? "client" : "server");

              // send TLS alert
              if (ex.send) {
                tls.queue(c, tls.createAlert(c, ex.alert));
                tls.flush(c);
              }

              // error is fatal by default
              var fatal = ex.fatal !== false;
              if (fatal) {
                // set fail flag
                c.fail = true;
              }

              // call error handler first
              options.error(c, ex);

              if (fatal) {
                // fatal error, close connection, do not clear fail
                c.close(false);
              }
            },
            deflate: options.deflate || null,
            inflate: options.inflate || null
          };

          /**
   * Resets a closed TLS connection for reuse. Called in c.close().
   *
   * @param clearFail true to clear the fail flag (default: true).
   */
          c.reset = function(clearFail) {
            c.version = { major: tls.Version.major, minor: tls.Version.minor };
            c.record = null;
            c.session = null;
            c.peerCertificate = null;
            c.state = {
              pending: null,
              current: null
            };
            c.expect = c.entity === tls.ConnectionEnd.client ? SHE : CHE;
            c.fragmented = null;
            c.records = [];
            c.open = false;
            c.handshakes = 0;
            c.handshaking = false;
            c.isConnected = false;
            c.fail = !(clearFail || typeof clearFail === "undefined");
            c.input.clear();
            c.tlsData.clear();
            c.data.clear();
            c.state.current = tls.createConnectionState(c);
          };

          // do initial reset of connection
          c.reset();

          /**
   * Updates the current TLS engine state based on the given record.
   *
   * @param c the TLS connection.
   * @param record the TLS record to act on.
   */
          var _update = function(c, record) {
            // get record handler (align type in table by subtracting lowest)
            var aligned = record.type - tls.ContentType.change_cipher_spec;
            var handlers = ctTable[c.entity][c.expect];
            if (aligned in handlers) {
              handlers[aligned](c, record);
            } else {
              // unexpected record
              tls.handleUnexpected(c, record);
            }
          };

          /**
   * Reads the record header and initializes the next record on the given
   * connection.
   *
   * @param c the TLS connection with the next record.
   *
   * @return 0 if the input data could be processed, otherwise the
   *         number of bytes required for data to be processed.
   */
          var _readRecordHeader = function(c) {
            var rval = 0;

            // get input buffer and its length
            var b = c.input;
            var len = b.length();

            // need at least 5 bytes to initialize a record
            if (len < 5) {
              rval = 5 - len;
            } else {
              // enough bytes for header
              // initialize record
              c.record = {
                type: b.getByte(),
                version: {
                  major: b.getByte(),
                  minor: b.getByte()
                },
                length: b.getInt16(),
                fragment: forge.util.createBuffer(),
                ready: false
              };

              // check record version
              var compatibleVersion =
                c.record.version.major === c.version.major;
              if (compatibleVersion && c.session && c.session.version) {
                // session version already set, require same minor version
                compatibleVersion = c.record.version.minor === c.version.minor;
              }
              if (!compatibleVersion) {
                c.error(c, {
                  message: "Incompatible TLS version.",
                  send: true,
                  alert: {
                    level: tls.Alert.Level.fatal,
                    description: tls.Alert.Description.protocol_version
                  }
                });
              }
            }

            return rval;
          };

          /**
   * Reads the next record's contents and appends its message to any
   * previously fragmented message.
   *
   * @param c the TLS connection with the next record.
   *
   * @return 0 if the input data could be processed, otherwise the
   *         number of bytes required for data to be processed.
   */
          var _readRecord = function(c) {
            var rval = 0;

            // ensure there is enough input data to get the entire record
            var b = c.input;
            var len = b.length();
            if (len < c.record.length) {
              // not enough data yet, return how much is required
              rval = c.record.length - len;
            } else {
              // there is enough data to parse the pending record
              // fill record fragment and compact input buffer
              c.record.fragment.putBytes(b.getBytes(c.record.length));
              b.compact();

              // update record using current read state
              var s = c.state.current.read;
              if (s.update(c, c.record)) {
                // see if there is a previously fragmented message that the
                // new record's message fragment should be appended to
                if (c.fragmented !== null) {
                  // if the record type matches a previously fragmented
                  // record, append the record fragment to it
                  if (c.fragmented.type === c.record.type) {
                    // concatenate record fragments
                    c.fragmented.fragment.putBuffer(c.record.fragment);
                    c.record = c.fragmented;
                  } else {
                    // error, invalid fragmented record
                    c.error(c, {
                      message: "Invalid fragmented record.",
                      send: true,
                      alert: {
                        level: tls.Alert.Level.fatal,
                        description: tls.Alert.Description.unexpected_message
                      }
                    });
                  }
                }

                // record is now ready
                c.record.ready = true;
              }
            }

            return rval;
          };

          /**
   * Performs a handshake using the TLS Handshake Protocol, as a client.
   *
   * This method should only be called if the connection is in client mode.
   *
   * @param sessionId the session ID to use, null to start a new one.
   */
          c.handshake = function(sessionId) {
            // error to call this in non-client mode
            if (c.entity !== tls.ConnectionEnd.client) {
              // not fatal error
              c.error(c, {
                message: "Cannot initiate handshake as a server.",
                fatal: false
              });
            } else if (c.handshaking) {
              // handshake is already in progress, fail but not fatal error
              c.error(c, {
                message: "Handshake already in progress.",
                fatal: false
              });
            } else {
              // clear fail flag on reuse
              if (c.fail && !c.open && c.handshakes === 0) {
                c.fail = false;
              }

              // now handshaking
              c.handshaking = true;

              // default to blank (new session)
              sessionId = sessionId || "";

              // if a session ID was specified, try to find it in the cache
              var session = null;
              if (sessionId.length > 0) {
                if (c.sessionCache) {
                  session = c.sessionCache.getSession(sessionId);
                }

                // matching session not found in cache, clear session ID
                if (session === null) {
                  sessionId = "";
                }
              }

              // no session given, grab a session from the cache, if available
              if (sessionId.length === 0 && c.sessionCache) {
                session = c.sessionCache.getSession();
                if (session !== null) {
                  sessionId = session.id;
                }
              }

              // set up session
              c.session = {
                id: sessionId,
                version: null,
                cipherSuite: null,
                compressionMethod: null,
                serverCertificate: null,
                certificateRequest: null,
                clientCertificate: null,
                sp: {},
                md5: forge.md.md5.create(),
                sha1: forge.md.sha1.create()
              };

              // use existing session information
              if (session) {
                // only update version on connection, session version not yet set
                c.version = session.version;
                c.session.sp = session.sp;
              }

              // generate new client random
              c.session.sp.client_random = tls.createRandom().getBytes();

              // connection now open
              c.open = true;

              // send hello
              tls.queue(
                c,
                tls.createRecord(c, {
                  type: tls.ContentType.handshake,
                  data: tls.createClientHello(c)
                })
              );
              tls.flush(c);
            }
          };

          /**
   * Called when TLS protocol data has been received from somewhere and should
   * be processed by the TLS engine.
   *
   * @param data the TLS protocol data, as a string, to process.
   *
   * @return 0 if the data could be processed, otherwise the number of bytes
   *         required for data to be processed.
   */
          c.process = function(data) {
            var rval = 0;

            // buffer input data
            if (data) {
              c.input.putBytes(data);
            }

            // process next record if no failure, process will be called after
            // each record is handled (since handling can be asynchronous)
            if (!c.fail) {
              // reset record if ready and now empty
              if (
                c.record !== null &&
                c.record.ready &&
                c.record.fragment.isEmpty()
              ) {
                c.record = null;
              }

              // if there is no pending record, try to read record header
              if (c.record === null) {
                rval = _readRecordHeader(c);
              }

              // read the next record (if record not yet ready)
              if (!c.fail && c.record !== null && !c.record.ready) {
                rval = _readRecord(c);
              }

              // record ready to be handled, update engine state
              if (!c.fail && c.record !== null && c.record.ready) {
                _update(c, c.record);
              }
            }

            return rval;
          };

          /**
   * Requests that application data be packaged into a TLS record. The
   * tlsDataReady handler will be called when the TLS record(s) have been
   * prepared.
   *
   * @param data the application data, as a raw 'binary' encoded string, to
   *          be sent; to send utf-16/utf-8 string data, use the return value
   *          of util.encodeUtf8(str).
   *
   * @return true on success, false on failure.
   */
          c.prepare = function(data) {
            tls.queue(
              c,
              tls.createRecord(c, {
                type: tls.ContentType.application_data,
                data: forge.util.createBuffer(data)
              })
            );
            return tls.flush(c);
          };

          /**
   * Requests that a heartbeat request be packaged into a TLS record for
   * transmission. The tlsDataReady handler will be called when TLS record(s)
   * have been prepared.
   *
   * When a heartbeat response has been received, the heartbeatReceived
   * handler will be called with the matching payload. This handler can
   * be used to clear a retransmission timer, etc.
   *
   * @param payload the heartbeat data to send as the payload in the message.
   * @param [payloadLength] the payload length to use, defaults to the
   *          actual payload length.
   *
   * @return true on success, false on failure.
   */
          c.prepareHeartbeatRequest = function(payload, payloadLength) {
            if (payload instanceof forge.util.ByteBuffer) {
              payload = payload.bytes();
            }
            if (typeof payloadLength === "undefined") {
              payloadLength = payload.length;
            }
            c.expectedHeartbeatPayload = payload;
            tls.queue(
              c,
              tls.createRecord(c, {
                type: tls.ContentType.heartbeat,
                data: tls.createHeartbeat(
                  tls.HeartbeatMessageType.heartbeat_request,
                  payload,
                  payloadLength
                )
              })
            );
            return tls.flush(c);
          };

          /**
   * Closes the connection (sends a close_notify alert).
   *
   * @param clearFail true to clear the fail flag (default: true).
   */
          c.close = function(clearFail) {
            // save session if connection didn't fail
            if (!c.fail && c.sessionCache && c.session) {
              // only need to preserve session ID, version, and security params
              var session = {
                id: c.session.id,
                version: c.session.version,
                sp: c.session.sp
              };
              session.sp.keys = null;
              c.sessionCache.setSession(session.id, session);
            }

            if (c.open) {
              // connection no longer open, clear input
              c.open = false;
              c.input.clear();

              // if connected or handshaking, send an alert
              if (c.isConnected || c.handshaking) {
                c.isConnected = c.handshaking = false;

                // send close_notify alert
                tls.queue(
                  c,
                  tls.createAlert(c, {
                    level: tls.Alert.Level.warning,
                    description: tls.Alert.Description.close_notify
                  })
                );
                tls.flush(c);
              }

              // call handler
              c.closed(c);
            }

            // reset TLS connection, do not clear fail flag
            c.reset(clearFail);
          };

          return c;
        };

        /* TLS API */
        module.exports = forge.tls = forge.tls || {};

        // expose non-functions
        for (var key in tls) {
          if (typeof tls[key] !== "function") {
            forge.tls[key] = tls[key];
          }
        }

        // expose prf_tls1 for testing
        forge.tls.prf_tls1 = prf_TLS1;

        // expose sha1 hmac method
        forge.tls.hmac_sha1 = hmac_sha1;

        // expose session cache creation
        forge.tls.createSessionCache = tls.createSessionCache;

        /**
 * Creates a new TLS connection. This does not make any assumptions about the
 * transport layer that TLS is working on top of, ie: it does not assume there
 * is a TCP/IP connection or establish one. A TLS connection is totally
 * abstracted away from the layer is runs on top of, it merely establishes a
 * secure channel between a client" and a "server".
 *
 * A TLS connection contains 4 connection states: pending read and write, and
 * current read and write.
 *
 * At initialization, the current read and write states will be null. Only once
 * the security parameters have been set and the keys have been generated can
 * the pending states be converted into current states. Current states will be
 * updated for each record processed.
 *
 * A custom certificate verify callback may be provided to check information
 * like the common name on the server's certificate. It will be called for
 * every certificate in the chain. It has the following signature:
 *
 * variable func(c, certs, index, preVerify)
 * Where:
 * c         The TLS connection
 * verified  Set to true if certificate was verified, otherwise the alert
 *           tls.Alert.Description for why the certificate failed.
 * depth     The current index in the chain, where 0 is the server's cert.
 * certs     The certificate chain, *NOTE* if the server was anonymous then
 *           the chain will be empty.
 *
 * The function returns true on success and on failure either the appropriate
 * tls.Alert.Description or an object with 'alert' set to the appropriate
 * tls.Alert.Description and 'message' set to a custom error message. If true
 * is not returned then the connection will abort using, in order of
 * availability, first the returned alert description, second the preVerify
 * alert description, and lastly the default 'bad_certificate'.
 *
 * There are three callbacks that can be used to make use of client-side
 * certificates where each takes the TLS connection as the first parameter:
 *
 * getCertificate(conn, hint)
 *   The second parameter is a hint as to which certificate should be
 *   returned. If the connection entity is a client, then the hint will be
 *   the CertificateRequest message from the server that is part of the
 *   TLS protocol. If the connection entity is a server, then it will be
 *   the servername list provided via an SNI extension the ClientHello, if
 *   one was provided (empty array if not). The hint can be examined to
 *   determine which certificate to use (advanced). Most implementations
 *   will just return a certificate. The return value must be a
 *   PEM-formatted certificate or an array of PEM-formatted certificates
 *   that constitute a certificate chain, with the first in the array/chain
 *   being the client's certificate.
 * getPrivateKey(conn, certificate)
 *   The second parameter is an forge.pki X.509 certificate object that
 *   is associated with the requested private key. The return value must
 *   be a PEM-formatted private key.
 * getSignature(conn, bytes, callback)
 *   This callback can be used instead of getPrivateKey if the private key
 *   is not directly accessible in javascript or should not be. For
 *   instance, a secure external web service could provide the signature
 *   in exchange for appropriate credentials. The second parameter is a
 *   string of bytes to be signed that are part of the TLS protocol. These
 *   bytes are used to verify that the private key for the previously
 *   provided client-side certificate is accessible to the client. The
 *   callback is a function that takes 2 parameters, the TLS connection
 *   and the RSA encrypted (signed) bytes as a string. This callback must
 *   be called once the signature is ready.
 *
 * @param options the options for this connection:
 *   server: true if the connection is server-side, false for client.
 *   sessionId: a session ID to reuse, null for a new connection.
 *   caStore: an array of certificates to trust.
 *   sessionCache: a session cache to use.
 *   cipherSuites: an optional array of cipher suites to use,
 *     see tls.CipherSuites.
 *   connected: function(conn) called when the first handshake completes.
 *   virtualHost: the virtual server name to use in a TLS SNI extension.
 *   verifyClient: true to require a client certificate in server mode,
 *     'optional' to request one, false not to (default: false).
 *   verify: a handler used to custom verify certificates in the chain.
 *   getCertificate: an optional callback used to get a certificate or
 *     a chain of certificates (as an array).
 *   getPrivateKey: an optional callback used to get a private key.
 *   getSignature: an optional callback used to get a signature.
 *   tlsDataReady: function(conn) called when TLS protocol data has been
 *     prepared and is ready to be used (typically sent over a socket
 *     connection to its destination), read from conn.tlsData buffer.
 *   dataReady: function(conn) called when application data has
 *     been parsed from a TLS record and should be consumed by the
 *     application, read from conn.data buffer.
 *   closed: function(conn) called when the connection has been closed.
 *   error: function(conn, error) called when there was an error.
 *   deflate: function(inBytes) if provided, will deflate TLS records using
 *     the deflate algorithm if the server supports it.
 *   inflate: function(inBytes) if provided, will inflate TLS records using
 *     the deflate algorithm if the server supports it.
 *
 * @return the new TLS connection.
 */
        forge.tls.createConnection = tls.createConnection;

        /***/
      },
      /* 66 */
      /***/ function(module, exports, __webpack_require__) {
        /**
 * Javascript implementation of a basic Public Key Infrastructure, including
 * support for RSA public and private keys.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2013 Digital Bazaar, Inc.
 */
        var forge = __webpack_require__(1);
        __webpack_require__(11);
        __webpack_require__(16);
        __webpack_require__(67);
        __webpack_require__(18);
        __webpack_require__(45);
        __webpack_require__(75);
        __webpack_require__(48);
        __webpack_require__(31);
        __webpack_require__(3);
        __webpack_require__(47);

        // shortcut for asn.1 API
        var asn1 = forge.asn1;

        /* Public Key Infrastructure (PKI) implementation. */
        var pki = (module.exports = forge.pki = forge.pki || {});

        /**
 * NOTE: THIS METHOD IS DEPRECATED. Use pem.decode() instead.
 *
 * Converts PEM-formatted data to DER.
 *
 * @param pem the PEM-formatted data.
 *
 * @return the DER-formatted data.
 */
        pki.pemToDer = function(pem) {
          var msg = forge.pem.decode(pem)[0];
          if (msg.procType && msg.procType.type === "ENCRYPTED") {
            throw new Error("Could not convert PEM to DER; PEM is encrypted.");
          }
          return forge.util.createBuffer(msg.body);
        };

        /**
 * Converts an RSA private key from PEM format.
 *
 * @param pem the PEM-formatted private key.
 *
 * @return the private key.
 */
        pki.privateKeyFromPem = function(pem) {
          var msg = forge.pem.decode(pem)[0];

          if (msg.type !== "PRIVATE KEY" && msg.type !== "RSA PRIVATE KEY") {
            var error = new Error(
              "Could not convert private key from PEM; PEM " +
                'header type is not "PRIVATE KEY" or "RSA PRIVATE KEY".'
            );
            error.headerType = msg.type;
            throw error;
          }
          if (msg.procType && msg.procType.type === "ENCRYPTED") {
            throw new Error(
              "Could not convert private key from PEM; PEM is encrypted."
            );
          }

          // convert DER to ASN.1 object
          var obj = asn1.fromDer(msg.body);

          return pki.privateKeyFromAsn1(obj);
        };

        /**
 * Converts an RSA private key to PEM format.
 *
 * @param key the private key.
 * @param maxline the maximum characters per line, defaults to 64.
 *
 * @return the PEM-formatted private key.
 */
        pki.privateKeyToPem = function(key, maxline) {
          // convert to ASN.1, then DER, then PEM-encode
          var msg = {
            type: "RSA PRIVATE KEY",
            body: asn1.toDer(pki.privateKeyToAsn1(key)).getBytes()
          };
          return forge.pem.encode(msg, { maxline: maxline });
        };

        /**
 * Converts a PrivateKeyInfo to PEM format.
 *
 * @param pki the PrivateKeyInfo.
 * @param maxline the maximum characters per line, defaults to 64.
 *
 * @return the PEM-formatted private key.
 */
        pki.privateKeyInfoToPem = function(pki, maxline) {
          // convert to DER, then PEM-encode
          var msg = {
            type: "PRIVATE KEY",
            body: asn1.toDer(pki).getBytes()
          };
          return forge.pem.encode(msg, { maxline: maxline });
        };

        /***/
      },
      /* 67 */
      /***/ function(module, exports, __webpack_require__) {
        /**
 * Password-based encryption functions.
 *
 * @author Dave Longley
 * @author Stefan Siegl <stesie@brokenpipe.de>
 *
 * Copyright (c) 2010-2013 Digital Bazaar, Inc.
 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
 *
 * An EncryptedPrivateKeyInfo:
 *
 * EncryptedPrivateKeyInfo ::= SEQUENCE {
 *   encryptionAlgorithm  EncryptionAlgorithmIdentifier,
 *   encryptedData        EncryptedData }
 *
 * EncryptionAlgorithmIdentifier ::= AlgorithmIdentifier
 *
 * EncryptedData ::= OCTET STRING
 */
        var forge = __webpack_require__(1);
        __webpack_require__(15);
        __webpack_require__(11);
        __webpack_require__(30);
        __webpack_require__(12);
        __webpack_require__(16);
        __webpack_require__(45);
        __webpack_require__(18);
        __webpack_require__(9);
        __webpack_require__(72);
        __webpack_require__(31);
        __webpack_require__(3);

        if (typeof BigInteger === "undefined") {
          var BigInteger = forge.jsbn.BigInteger;
        }

        // shortcut for asn.1 API
        var asn1 = forge.asn1;

        /* Password-based encryption implementation. */
        var pki = (forge.pki = forge.pki || {});
        module.exports = pki.pbe = forge.pbe = forge.pbe || {};
        var oids = pki.oids;

        // validator for an EncryptedPrivateKeyInfo structure
        // Note: Currently only works w/algorithm params
        var encryptedPrivateKeyValidator = {
          name: "EncryptedPrivateKeyInfo",
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.SEQUENCE,
          constructed: true,
          value: [
            {
              name: "EncryptedPrivateKeyInfo.encryptionAlgorithm",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.SEQUENCE,
              constructed: true,
              value: [
                {
                  name: "AlgorithmIdentifier.algorithm",
                  tagClass: asn1.Class.UNIVERSAL,
                  type: asn1.Type.OID,
                  constructed: false,
                  capture: "encryptionOid"
                },
                {
                  name: "AlgorithmIdentifier.parameters",
                  tagClass: asn1.Class.UNIVERSAL,
                  type: asn1.Type.SEQUENCE,
                  constructed: true,
                  captureAsn1: "encryptionParams"
                }
              ]
            },
            {
              // encryptedData
              name: "EncryptedPrivateKeyInfo.encryptedData",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.OCTETSTRING,
              constructed: false,
              capture: "encryptedData"
            }
          ]
        };

        // validator for a PBES2Algorithms structure
        // Note: Currently only works w/PBKDF2 + AES encryption schemes
        var PBES2AlgorithmsValidator = {
          name: "PBES2Algorithms",
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.SEQUENCE,
          constructed: true,
          value: [
            {
              name: "PBES2Algorithms.keyDerivationFunc",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.SEQUENCE,
              constructed: true,
              value: [
                {
                  name: "PBES2Algorithms.keyDerivationFunc.oid",
                  tagClass: asn1.Class.UNIVERSAL,
                  type: asn1.Type.OID,
                  constructed: false,
                  capture: "kdfOid"
                },
                {
                  name: "PBES2Algorithms.params",
                  tagClass: asn1.Class.UNIVERSAL,
                  type: asn1.Type.SEQUENCE,
                  constructed: true,
                  value: [
                    {
                      name: "PBES2Algorithms.params.salt",
                      tagClass: asn1.Class.UNIVERSAL,
                      type: asn1.Type.OCTETSTRING,
                      constructed: false,
                      capture: "kdfSalt"
                    },
                    {
                      name: "PBES2Algorithms.params.iterationCount",
                      tagClass: asn1.Class.UNIVERSAL,
                      type: asn1.Type.INTEGER,
                      constructed: false,
                      capture: "kdfIterationCount"
                    },
                    {
                      name: "PBES2Algorithms.params.keyLength",
                      tagClass: asn1.Class.UNIVERSAL,
                      type: asn1.Type.INTEGER,
                      constructed: false,
                      optional: true,
                      capture: "keyLength"
                    },
                    {
                      // prf
                      name: "PBES2Algorithms.params.prf",
                      tagClass: asn1.Class.UNIVERSAL,
                      type: asn1.Type.SEQUENCE,
                      constructed: true,
                      optional: true,
                      value: [
                        {
                          name: "PBES2Algorithms.params.prf.algorithm",
                          tagClass: asn1.Class.UNIVERSAL,
                          type: asn1.Type.OID,
                          constructed: false,
                          capture: "prfOid"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              name: "PBES2Algorithms.encryptionScheme",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.SEQUENCE,
              constructed: true,
              value: [
                {
                  name: "PBES2Algorithms.encryptionScheme.oid",
                  tagClass: asn1.Class.UNIVERSAL,
                  type: asn1.Type.OID,
                  constructed: false,
                  capture: "encOid"
                },
                {
                  name: "PBES2Algorithms.encryptionScheme.iv",
                  tagClass: asn1.Class.UNIVERSAL,
                  type: asn1.Type.OCTETSTRING,
                  constructed: false,
                  capture: "encIv"
                }
              ]
            }
          ]
        };

        var pkcs12PbeParamsValidator = {
          name: "pkcs-12PbeParams",
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.SEQUENCE,
          constructed: true,
          value: [
            {
              name: "pkcs-12PbeParams.salt",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.OCTETSTRING,
              constructed: false,
              capture: "salt"
            },
            {
              name: "pkcs-12PbeParams.iterations",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.INTEGER,
              constructed: false,
              capture: "iterations"
            }
          ]
        };

        /**
 * Encrypts a ASN.1 PrivateKeyInfo object, producing an EncryptedPrivateKeyInfo.
 *
 * PBES2Algorithms ALGORITHM-IDENTIFIER ::=
 *   { {PBES2-params IDENTIFIED BY id-PBES2}, ...}
 *
 * id-PBES2 OBJECT IDENTIFIER ::= {pkcs-5 13}
 *
 * PBES2-params ::= SEQUENCE {
 *   keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},
 *   encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
 * }
 *
 * PBES2-KDFs ALGORITHM-IDENTIFIER ::=
 *   { {PBKDF2-params IDENTIFIED BY id-PBKDF2}, ... }
 *
 * PBES2-Encs ALGORITHM-IDENTIFIER ::= { ... }
 *
 * PBKDF2-params ::= SEQUENCE {
 *   salt CHOICE {
 *     specified OCTET STRING,
 *     otherSource AlgorithmIdentifier {{PBKDF2-SaltSources}}
 *   },
 *   iterationCount INTEGER (1..MAX),
 *   keyLength INTEGER (1..MAX) OPTIONAL,
 *   prf AlgorithmIdentifier {{PBKDF2-PRFs}} DEFAULT algid-hmacWithSHA1
 * }
 *
 * @param obj the ASN.1 PrivateKeyInfo object.
 * @param password the password to encrypt with.
 * @param options:
 *          algorithm the encryption algorithm to use
 *            ('aes128', 'aes192', 'aes256', '3des'), defaults to 'aes128'.
 *          count the iteration count to use.
 *          saltSize the salt size to use.
 *          prfAlgorithm the PRF message digest algorithm to use
 *            ('sha1', 'sha224', 'sha256', 'sha384', 'sha512')
 *
 * @return the ASN.1 EncryptedPrivateKeyInfo.
 */
        pki.encryptPrivateKeyInfo = function(obj, password, options) {
          // set default options
          options = options || {};
          options.saltSize = options.saltSize || 8;
          options.count = options.count || 2048;
          options.algorithm = options.algorithm || "aes128";
          options.prfAlgorithm = options.prfAlgorithm || "sha1";

          // generate PBE params
          var salt = forge.random.getBytesSync(options.saltSize);
          var count = options.count;
          var countBytes = asn1.integerToDer(count);
          var dkLen;
          var encryptionAlgorithm;
          var encryptedData;
          if (
            options.algorithm.indexOf("aes") === 0 ||
            options.algorithm === "des"
          ) {
            // do PBES2
            var ivLen, encOid, cipherFn;
            switch (options.algorithm) {
              case "aes128":
                dkLen = 16;
                ivLen = 16;
                encOid = oids["aes128-CBC"];
                cipherFn = forge.aes.createEncryptionCipher;
                break;
              case "aes192":
                dkLen = 24;
                ivLen = 16;
                encOid = oids["aes192-CBC"];
                cipherFn = forge.aes.createEncryptionCipher;
                break;
              case "aes256":
                dkLen = 32;
                ivLen = 16;
                encOid = oids["aes256-CBC"];
                cipherFn = forge.aes.createEncryptionCipher;
                break;
              case "des":
                dkLen = 8;
                ivLen = 8;
                encOid = oids["desCBC"];
                cipherFn = forge.des.createEncryptionCipher;
                break;
              default:
                var error = new Error(
                  "Cannot encrypt private key. Unknown encryption algorithm."
                );
                error.algorithm = options.algorithm;
                throw error;
            }

            // get PRF message digest
            var prfAlgorithm = "hmacWith" + options.prfAlgorithm.toUpperCase();
            var md = prfAlgorithmToMessageDigest(prfAlgorithm);

            // encrypt private key using pbe SHA-1 and AES/DES
            var dk = forge.pkcs5.pbkdf2(password, salt, count, dkLen, md);
            var iv = forge.random.getBytesSync(ivLen);
            var cipher = cipherFn(dk);
            cipher.start(iv);
            cipher.update(asn1.toDer(obj));
            cipher.finish();
            encryptedData = cipher.output.getBytes();

            // get PBKDF2-params
            var params = createPbkdf2Params(
              salt,
              countBytes,
              dkLen,
              prfAlgorithm
            );

            encryptionAlgorithm = asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.SEQUENCE,
              true,
              [
                asn1.create(
                  asn1.Class.UNIVERSAL,
                  asn1.Type.OID,
                  false,
                  asn1.oidToDer(oids["pkcs5PBES2"]).getBytes()
                ),
                asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
                  // keyDerivationFunc
                  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
                    asn1.create(
                      asn1.Class.UNIVERSAL,
                      asn1.Type.OID,
                      false,
                      asn1.oidToDer(oids["pkcs5PBKDF2"]).getBytes()
                    ),
                    // PBKDF2-params
                    params
                  ]),
                  // encryptionScheme
                  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
                    asn1.create(
                      asn1.Class.UNIVERSAL,
                      asn1.Type.OID,
                      false,
                      asn1.oidToDer(encOid).getBytes()
                    ),
                    // iv
                    asn1.create(
                      asn1.Class.UNIVERSAL,
                      asn1.Type.OCTETSTRING,
                      false,
                      iv
                    )
                  ])
                ])
              ]
            );
          } else if (options.algorithm === "3des") {
            // Do PKCS12 PBE
            dkLen = 24;

            var saltBytes = new forge.util.ByteBuffer(salt);
            var dk = pki.pbe.generatePkcs12Key(
              password,
              saltBytes,
              1,
              count,
              dkLen
            );
            var iv = pki.pbe.generatePkcs12Key(
              password,
              saltBytes,
              2,
              count,
              dkLen
            );
            var cipher = forge.des.createEncryptionCipher(dk);
            cipher.start(iv);
            cipher.update(asn1.toDer(obj));
            cipher.finish();
            encryptedData = cipher.output.getBytes();

            encryptionAlgorithm = asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.SEQUENCE,
              true,
              [
                asn1.create(
                  asn1.Class.UNIVERSAL,
                  asn1.Type.OID,
                  false,
                  asn1
                    .oidToDer(oids["pbeWithSHAAnd3-KeyTripleDES-CBC"])
                    .getBytes()
                ),
                // pkcs-12PbeParams
                asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
                  // salt
                  asn1.create(
                    asn1.Class.UNIVERSAL,
                    asn1.Type.OCTETSTRING,
                    false,
                    salt
                  ),
                  // iteration count
                  asn1.create(
                    asn1.Class.UNIVERSAL,
                    asn1.Type.INTEGER,
                    false,
                    countBytes.getBytes()
                  )
                ])
              ]
            );
          } else {
            var error = new Error(
              "Cannot encrypt private key. Unknown encryption algorithm."
            );
            error.algorithm = options.algorithm;
            throw error;
          }

          // EncryptedPrivateKeyInfo
          var rval = asn1.create(
            asn1.Class.UNIVERSAL,
            asn1.Type.SEQUENCE,
            true,
            [
              // encryptionAlgorithm
              encryptionAlgorithm,
              // encryptedData
              asn1.create(
                asn1.Class.UNIVERSAL,
                asn1.Type.OCTETSTRING,
                false,
                encryptedData
              )
            ]
          );
          return rval;
        };

        /**
 * Decrypts a ASN.1 PrivateKeyInfo object.
 *
 * @param obj the ASN.1 EncryptedPrivateKeyInfo object.
 * @param password the password to decrypt with.
 *
 * @return the ASN.1 PrivateKeyInfo on success, null on failure.
 */
        pki.decryptPrivateKeyInfo = function(obj, password) {
          var rval = null;

          // get PBE params
          var capture = {};
          var errors = [];
          if (
            !asn1.validate(obj, encryptedPrivateKeyValidator, capture, errors)
          ) {
            var error = new Error(
              "Cannot read encrypted private key. " +
                "ASN.1 object is not a supported EncryptedPrivateKeyInfo."
            );
            error.errors = errors;
            throw error;
          }

          // get cipher
          var oid = asn1.derToOid(capture.encryptionOid);
          var cipher = pki.pbe.getCipher(
            oid,
            capture.encryptionParams,
            password
          );

          // get encrypted data
          var encrypted = forge.util.createBuffer(capture.encryptedData);

          cipher.update(encrypted);
          if (cipher.finish()) {
            rval = asn1.fromDer(cipher.output);
          }

          return rval;
        };

        /**
 * Converts a EncryptedPrivateKeyInfo to PEM format.
 *
 * @param epki the EncryptedPrivateKeyInfo.
 * @param maxline the maximum characters per line, defaults to 64.
 *
 * @return the PEM-formatted encrypted private key.
 */
        pki.encryptedPrivateKeyToPem = function(epki, maxline) {
          // convert to DER, then PEM-encode
          var msg = {
            type: "ENCRYPTED PRIVATE KEY",
            body: asn1.toDer(epki).getBytes()
          };
          return forge.pem.encode(msg, { maxline: maxline });
        };

        /**
 * Converts a PEM-encoded EncryptedPrivateKeyInfo to ASN.1 format. Decryption
 * is not performed.
 *
 * @param pem the EncryptedPrivateKeyInfo in PEM-format.
 *
 * @return the ASN.1 EncryptedPrivateKeyInfo.
 */
        pki.encryptedPrivateKeyFromPem = function(pem) {
          var msg = forge.pem.decode(pem)[0];

          if (msg.type !== "ENCRYPTED PRIVATE KEY") {
            var error = new Error(
              "Could not convert encrypted private key from PEM; " +
                'PEM header type is "ENCRYPTED PRIVATE KEY".'
            );
            error.headerType = msg.type;
            throw error;
          }
          if (msg.procType && msg.procType.type === "ENCRYPTED") {
            throw new Error(
              "Could not convert encrypted private key from PEM; " +
                "PEM is encrypted."
            );
          }

          // convert DER to ASN.1 object
          return asn1.fromDer(msg.body);
        };

        /**
 * Encrypts an RSA private key. By default, the key will be wrapped in
 * a PrivateKeyInfo and encrypted to produce a PKCS#8 EncryptedPrivateKeyInfo.
 * This is the standard, preferred way to encrypt a private key.
 *
 * To produce a non-standard PEM-encrypted private key that uses encapsulated
 * headers to indicate the encryption algorithm (old-style non-PKCS#8 OpenSSL
 * private key encryption), set the 'legacy' option to true. Note: Using this
 * option will cause the iteration count to be forced to 1.
 *
 * Note: The 'des' algorithm is supported, but it is not considered to be
 * secure because it only uses a single 56-bit key. If possible, it is highly
 * recommended that a different algorithm be used.
 *
 * @param rsaKey the RSA key to encrypt.
 * @param password the password to use.
 * @param options:
 *          algorithm: the encryption algorithm to use
 *            ('aes128', 'aes192', 'aes256', '3des', 'des').
 *          count: the iteration count to use.
 *          saltSize: the salt size to use.
 *          legacy: output an old non-PKCS#8 PEM-encrypted+encapsulated
 *            headers (DEK-Info) private key.
 *
 * @return the PEM-encoded ASN.1 EncryptedPrivateKeyInfo.
 */
        pki.encryptRsaPrivateKey = function(rsaKey, password, options) {
          // standard PKCS#8
          options = options || {};
          if (!options.legacy) {
            // encrypt PrivateKeyInfo
            var rval = pki.wrapRsaPrivateKey(pki.privateKeyToAsn1(rsaKey));
            rval = pki.encryptPrivateKeyInfo(rval, password, options);
            return pki.encryptedPrivateKeyToPem(rval);
          }

          // legacy non-PKCS#8
          var algorithm;
          var iv;
          var dkLen;
          var cipherFn;
          switch (options.algorithm) {
            case "aes128":
              algorithm = "AES-128-CBC";
              dkLen = 16;
              iv = forge.random.getBytesSync(16);
              cipherFn = forge.aes.createEncryptionCipher;
              break;
            case "aes192":
              algorithm = "AES-192-CBC";
              dkLen = 24;
              iv = forge.random.getBytesSync(16);
              cipherFn = forge.aes.createEncryptionCipher;
              break;
            case "aes256":
              algorithm = "AES-256-CBC";
              dkLen = 32;
              iv = forge.random.getBytesSync(16);
              cipherFn = forge.aes.createEncryptionCipher;
              break;
            case "3des":
              algorithm = "DES-EDE3-CBC";
              dkLen = 24;
              iv = forge.random.getBytesSync(8);
              cipherFn = forge.des.createEncryptionCipher;
              break;
            case "des":
              algorithm = "DES-CBC";
              dkLen = 8;
              iv = forge.random.getBytesSync(8);
              cipherFn = forge.des.createEncryptionCipher;
              break;
            default:
              var error = new Error(
                "Could not encrypt RSA private key; unsupported " +
                  'encryption algorithm "' +
                  options.algorithm +
                  '".'
              );
              error.algorithm = options.algorithm;
              throw error;
          }

          // encrypt private key using OpenSSL legacy key derivation
          var dk = forge.pbe.opensslDeriveBytes(
            password,
            iv.substr(0, 8),
            dkLen
          );
          var cipher = cipherFn(dk);
          cipher.start(iv);
          cipher.update(asn1.toDer(pki.privateKeyToAsn1(rsaKey)));
          cipher.finish();

          var msg = {
            type: "RSA PRIVATE KEY",
            procType: {
              version: "4",
              type: "ENCRYPTED"
            },
            dekInfo: {
              algorithm: algorithm,
              parameters: forge.util.bytesToHex(iv).toUpperCase()
            },
            body: cipher.output.getBytes()
          };
          return forge.pem.encode(msg);
        };

        /**
 * Decrypts an RSA private key.
 *
 * @param pem the PEM-formatted EncryptedPrivateKeyInfo to decrypt.
 * @param password the password to use.
 *
 * @return the RSA key on success, null on failure.
 */
        pki.decryptRsaPrivateKey = function(pem, password) {
          var rval = null;

          var msg = forge.pem.decode(pem)[0];

          if (
            msg.type !== "ENCRYPTED PRIVATE KEY" &&
            msg.type !== "PRIVATE KEY" &&
            msg.type !== "RSA PRIVATE KEY"
          ) {
            var error = new Error(
              "Could not convert private key from PEM; PEM header type " +
                'is not "ENCRYPTED PRIVATE KEY", "PRIVATE KEY", or "RSA PRIVATE KEY".'
            );
            error.headerType = error;
            throw error;
          }

          if (msg.procType && msg.procType.type === "ENCRYPTED") {
            var dkLen;
            var cipherFn;
            switch (msg.dekInfo.algorithm) {
              case "DES-CBC":
                dkLen = 8;
                cipherFn = forge.des.createDecryptionCipher;
                break;
              case "DES-EDE3-CBC":
                dkLen = 24;
                cipherFn = forge.des.createDecryptionCipher;
                break;
              case "AES-128-CBC":
                dkLen = 16;
                cipherFn = forge.aes.createDecryptionCipher;
                break;
              case "AES-192-CBC":
                dkLen = 24;
                cipherFn = forge.aes.createDecryptionCipher;
                break;
              case "AES-256-CBC":
                dkLen = 32;
                cipherFn = forge.aes.createDecryptionCipher;
                break;
              case "RC2-40-CBC":
                dkLen = 5;
                cipherFn = function(key) {
                  return forge.rc2.createDecryptionCipher(key, 40);
                };
                break;
              case "RC2-64-CBC":
                dkLen = 8;
                cipherFn = function(key) {
                  return forge.rc2.createDecryptionCipher(key, 64);
                };
                break;
              case "RC2-128-CBC":
                dkLen = 16;
                cipherFn = function(key) {
                  return forge.rc2.createDecryptionCipher(key, 128);
                };
                break;
              default:
                var error = new Error(
                  "Could not decrypt private key; unsupported " +
                    'encryption algorithm "' +
                    msg.dekInfo.algorithm +
                    '".'
                );
                error.algorithm = msg.dekInfo.algorithm;
                throw error;
            }

            // use OpenSSL legacy key derivation
            var iv = forge.util.hexToBytes(msg.dekInfo.parameters);
            var dk = forge.pbe.opensslDeriveBytes(
              password,
              iv.substr(0, 8),
              dkLen
            );
            var cipher = cipherFn(dk);
            cipher.start(iv);
            cipher.update(forge.util.createBuffer(msg.body));
            if (cipher.finish()) {
              rval = cipher.output.getBytes();
            } else {
              return rval;
            }
          } else {
            rval = msg.body;
          }

          if (msg.type === "ENCRYPTED PRIVATE KEY") {
            rval = pki.decryptPrivateKeyInfo(asn1.fromDer(rval), password);
          } else {
            // decryption already performed above
            rval = asn1.fromDer(rval);
          }

          if (rval !== null) {
            rval = pki.privateKeyFromAsn1(rval);
          }

          return rval;
        };

        /**
 * Derives a PKCS#12 key.
 *
 * @param password the password to derive the key material from, null or
 *          undefined for none.
 * @param salt the salt, as a ByteBuffer, to use.
 * @param id the PKCS#12 ID byte (1 = key material, 2 = IV, 3 = MAC).
 * @param iter the iteration count.
 * @param n the number of bytes to derive from the password.
 * @param md the message digest to use, defaults to SHA-1.
 *
 * @return a ByteBuffer with the bytes derived from the password.
 */
        pki.pbe.generatePkcs12Key = function(password, salt, id, iter, n, md) {
          var j, l;

          if (typeof md === "undefined" || md === null) {
            if (!("sha1" in forge.md)) {
              throw new Error('"sha1" hash algorithm unavailable.');
            }
            md = forge.md.sha1.create();
          }

          var u = md.digestLength;
          var v = md.blockLength;
          var result = new forge.util.ByteBuffer();

          /* Convert password to Unicode byte buffer + trailing 0-byte. */
          var passBuf = new forge.util.ByteBuffer();
          if (password !== null && password !== undefined) {
            for (l = 0; l < password.length; l++) {
              passBuf.putInt16(password.charCodeAt(l));
            }
            passBuf.putInt16(0);
          }

          /* Length of salt and password in BYTES. */
          var p = passBuf.length();
          var s = salt.length();

          /* 1. Construct a string, D (the "diversifier"), by concatenating
        v copies of ID. */
          var D = new forge.util.ByteBuffer();
          D.fillWithByte(id, v);

          /* 2. Concatenate copies of the salt together to create a string S of length
        v * ceil(s / v) bytes (the final copy of the salt may be trunacted
        to create S).
        Note that if the salt is the empty string, then so is S. */
          var Slen = v * Math.ceil(s / v);
          var S = new forge.util.ByteBuffer();
          for (l = 0; l < Slen; l++) {
            S.putByte(salt.at(l % s));
          }

          /* 3. Concatenate copies of the password together to create a string P of
        length v * ceil(p / v) bytes (the final copy of the password may be
        truncated to create P).
        Note that if the password is the empty string, then so is P. */
          var Plen = v * Math.ceil(p / v);
          var P = new forge.util.ByteBuffer();
          for (l = 0; l < Plen; l++) {
            P.putByte(passBuf.at(l % p));
          }

          /* 4. Set I=S||P to be the concatenation of S and P. */
          var I = S;
          I.putBuffer(P);

          /* 5. Set c=ceil(n / u). */
          var c = Math.ceil(n / u);

          /* 6. For i=1, 2, ..., c, do the following: */
          for (var i = 1; i <= c; i++) {
            /* a) Set Ai=H^r(D||I). (l.e. the rth hash of D||I, H(H(H(...H(D||I)))) */
            var buf = new forge.util.ByteBuffer();
            buf.putBytes(D.bytes());
            buf.putBytes(I.bytes());
            for (var round = 0; round < iter; round++) {
              md.start();
              md.update(buf.getBytes());
              buf = md.digest();
            }

            /* b) Concatenate copies of Ai to create a string B of length v bytes (the
          final copy of Ai may be truncated to create B). */
            var B = new forge.util.ByteBuffer();
            for (l = 0; l < v; l++) {
              B.putByte(buf.at(l % u));
            }

            /* c) Treating I as a concatenation I0, I1, ..., Ik-1 of v-byte blocks,
          where k=ceil(s / v) + ceil(p / v), modify I by setting
          Ij=(Ij+B+1) mod 2v for each j.  */
            var k = Math.ceil(s / v) + Math.ceil(p / v);
            var Inew = new forge.util.ByteBuffer();
            for (j = 0; j < k; j++) {
              var chunk = new forge.util.ByteBuffer(I.getBytes(v));
              var x = 0x1ff;
              for (l = B.length() - 1; l >= 0; l--) {
                x = x >> 8;
                x += B.at(l) + chunk.at(l);
                chunk.setAt(l, x & 0xff);
              }
              Inew.putBuffer(chunk);
            }
            I = Inew;

            /* Add Ai to A. */
            result.putBuffer(buf);
          }

          result.truncate(result.length() - n);
          return result;
        };

        /**
 * Get new Forge cipher object instance.
 *
 * @param oid the OID (in string notation).
 * @param params the ASN.1 params object.
 * @param password the password to decrypt with.
 *
 * @return new cipher object instance.
 */
        pki.pbe.getCipher = function(oid, params, password) {
          switch (oid) {
            case pki.oids["pkcs5PBES2"]:
              return pki.pbe.getCipherForPBES2(oid, params, password);

            case pki.oids["pbeWithSHAAnd3-KeyTripleDES-CBC"]:
            case pki.oids["pbewithSHAAnd40BitRC2-CBC"]:
              return pki.pbe.getCipherForPKCS12PBE(oid, params, password);

            default:
              var error = new Error(
                "Cannot read encrypted PBE data block. Unsupported OID."
              );
              error.oid = oid;
              error.supportedOids = [
                "pkcs5PBES2",
                "pbeWithSHAAnd3-KeyTripleDES-CBC",
                "pbewithSHAAnd40BitRC2-CBC"
              ];
              throw error;
          }
        };

        /**
 * Get new Forge cipher object instance according to PBES2 params block.
 *
 * The returned cipher instance is already started using the IV
 * from PBES2 parameter block.
 *
 * @param oid the PKCS#5 PBKDF2 OID (in string notation).
 * @param params the ASN.1 PBES2-params object.
 * @param password the password to decrypt with.
 *
 * @return new cipher object instance.
 */
        pki.pbe.getCipherForPBES2 = function(oid, params, password) {
          // get PBE params
          var capture = {};
          var errors = [];
          if (
            !asn1.validate(params, PBES2AlgorithmsValidator, capture, errors)
          ) {
            var error = new Error(
              "Cannot read password-based-encryption algorithm " +
                "parameters. ASN.1 object is not a supported EncryptedPrivateKeyInfo."
            );
            error.errors = errors;
            throw error;
          }

          // check oids
          oid = asn1.derToOid(capture.kdfOid);
          if (oid !== pki.oids["pkcs5PBKDF2"]) {
            var error = new Error(
              "Cannot read encrypted private key. " +
                "Unsupported key derivation function OID."
            );
            error.oid = oid;
            error.supportedOids = ["pkcs5PBKDF2"];
            throw error;
          }
          oid = asn1.derToOid(capture.encOid);
          if (
            oid !== pki.oids["aes128-CBC"] &&
            oid !== pki.oids["aes192-CBC"] &&
            oid !== pki.oids["aes256-CBC"] &&
            oid !== pki.oids["des-EDE3-CBC"] &&
            oid !== pki.oids["desCBC"]
          ) {
            var error = new Error(
              "Cannot read encrypted private key. " +
                "Unsupported encryption scheme OID."
            );
            error.oid = oid;
            error.supportedOids = [
              "aes128-CBC",
              "aes192-CBC",
              "aes256-CBC",
              "des-EDE3-CBC",
              "desCBC"
            ];
            throw error;
          }

          // set PBE params
          var salt = capture.kdfSalt;
          var count = forge.util.createBuffer(capture.kdfIterationCount);
          count = count.getInt(count.length() << 3);
          var dkLen;
          var cipherFn;
          switch (pki.oids[oid]) {
            case "aes128-CBC":
              dkLen = 16;
              cipherFn = forge.aes.createDecryptionCipher;
              break;
            case "aes192-CBC":
              dkLen = 24;
              cipherFn = forge.aes.createDecryptionCipher;
              break;
            case "aes256-CBC":
              dkLen = 32;
              cipherFn = forge.aes.createDecryptionCipher;
              break;
            case "des-EDE3-CBC":
              dkLen = 24;
              cipherFn = forge.des.createDecryptionCipher;
              break;
            case "desCBC":
              dkLen = 8;
              cipherFn = forge.des.createDecryptionCipher;
              break;
          }

          // get PRF message digest
          var md = prfOidToMessageDigest(capture.prfOid);

          // decrypt private key using pbe with chosen PRF and AES/DES
          var dk = forge.pkcs5.pbkdf2(password, salt, count, dkLen, md);
          var iv = capture.encIv;
          var cipher = cipherFn(dk);
          cipher.start(iv);

          return cipher;
        };

        /**
 * Get new Forge cipher object instance for PKCS#12 PBE.
 *
 * The returned cipher instance is already started using the key & IV
 * derived from the provided password and PKCS#12 PBE salt.
 *
 * @param oid The PKCS#12 PBE OID (in string notation).
 * @param params The ASN.1 PKCS#12 PBE-params object.
 * @param password The password to decrypt with.
 *
 * @return the new cipher object instance.
 */
        pki.pbe.getCipherForPKCS12PBE = function(oid, params, password) {
          // get PBE params
          var capture = {};
          var errors = [];
          if (
            !asn1.validate(params, pkcs12PbeParamsValidator, capture, errors)
          ) {
            var error = new Error(
              "Cannot read password-based-encryption algorithm " +
                "parameters. ASN.1 object is not a supported EncryptedPrivateKeyInfo."
            );
            error.errors = errors;
            throw error;
          }

          var salt = forge.util.createBuffer(capture.salt);
          var count = forge.util.createBuffer(capture.iterations);
          count = count.getInt(count.length() << 3);

          var dkLen, dIvLen, cipherFn;
          switch (oid) {
            case pki.oids["pbeWithSHAAnd3-KeyTripleDES-CBC"]:
              dkLen = 24;
              dIvLen = 8;
              cipherFn = forge.des.startDecrypting;
              break;

            case pki.oids["pbewithSHAAnd40BitRC2-CBC"]:
              dkLen = 5;
              dIvLen = 8;
              cipherFn = function(key, iv) {
                var cipher = forge.rc2.createDecryptionCipher(key, 40);
                cipher.start(iv, null);
                return cipher;
              };
              break;

            default:
              var error = new Error(
                "Cannot read PKCS #12 PBE data block. Unsupported OID."
              );
              error.oid = oid;
              throw error;
          }

          // get PRF message digest
          var md = prfOidToMessageDigest(capture.prfOid);
          var key = pki.pbe.generatePkcs12Key(
            password,
            salt,
            1,
            count,
            dkLen,
            md
          );
          md.start();
          var iv = pki.pbe.generatePkcs12Key(
            password,
            salt,
            2,
            count,
            dIvLen,
            md
          );

          return cipherFn(key, iv);
        };

        /**
 * OpenSSL's legacy key derivation function.
 *
 * See: http://www.openssl.org/docs/crypto/EVP_BytesToKey.html
 *
 * @param password the password to derive the key from.
 * @param salt the salt to use, null for none.
 * @param dkLen the number of bytes needed for the derived key.
 * @param [options] the options to use:
 *          [md] an optional message digest object to use.
 */
        pki.pbe.opensslDeriveBytes = function(password, salt, dkLen, md) {
          if (typeof md === "undefined" || md === null) {
            if (!("md5" in forge.md)) {
              throw new Error('"md5" hash algorithm unavailable.');
            }
            md = forge.md.md5.create();
          }
          if (salt === null) {
            salt = "";
          }
          var digests = [hash(md, password + salt)];
          for (var length = 16, i = 1; length < dkLen; ++i, length += 16) {
            digests.push(hash(md, digests[i - 1] + password + salt));
          }
          return digests.join("").substr(0, dkLen);
        };

        function hash(md, bytes) {
          return md.start().update(bytes).digest().getBytes();
        }

        function prfOidToMessageDigest(prfOid) {
          // get PRF algorithm, default to SHA-1
          var prfAlgorithm;
          if (!prfOid) {
            prfAlgorithm = "hmacWithSHA1";
          } else {
            prfAlgorithm = pki.oids[asn1.derToOid(prfOid)];
            if (!prfAlgorithm) {
              var error = new Error("Unsupported PRF OID.");
              error.oid = prfOid;
              error.supported = [
                "hmacWithSHA1",
                "hmacWithSHA224",
                "hmacWithSHA256",
                "hmacWithSHA384",
                "hmacWithSHA512"
              ];
              throw error;
            }
          }
          return prfAlgorithmToMessageDigest(prfAlgorithm);
        }

        function prfAlgorithmToMessageDigest(prfAlgorithm) {
          var factory = forge.md;
          switch (prfAlgorithm) {
            case "hmacWithSHA224":
              factory = forge.md.sha512;
            case "hmacWithSHA1":
            case "hmacWithSHA256":
            case "hmacWithSHA384":
            case "hmacWithSHA512":
              prfAlgorithm = prfAlgorithm.substr(8).toLowerCase();
              break;
            default:
              var error = new Error("Unsupported PRF algorithm.");
              error.algorithm = prfAlgorithm;
              error.supported = [
                "hmacWithSHA1",
                "hmacWithSHA224",
                "hmacWithSHA256",
                "hmacWithSHA384",
                "hmacWithSHA512"
              ];
              throw error;
          }
          if (!factory || !(prfAlgorithm in factory)) {
            throw new Error("Unknown hash algorithm: " + prfAlgorithm);
          }
          return factory[prfAlgorithm].create();
        }

        function createPbkdf2Params(salt, countBytes, dkLen, prfAlgorithm) {
          var params = asn1.create(
            asn1.Class.UNIVERSAL,
            asn1.Type.SEQUENCE,
            true,
            [
              // salt
              asn1.create(
                asn1.Class.UNIVERSAL,
                asn1.Type.OCTETSTRING,
                false,
                salt
              ),
              // iteration count
              asn1.create(
                asn1.Class.UNIVERSAL,
                asn1.Type.INTEGER,
                false,
                countBytes.getBytes()
              )
            ]
          );
          // when PRF algorithm is not SHA-1 default, add key length and PRF algorithm
          if (prfAlgorithm !== "hmacWithSHA1") {
            params.value.push(
              // key length
              asn1.create(
                asn1.Class.UNIVERSAL,
                asn1.Type.INTEGER,
                false,
                forge.util.hexToBytes(dkLen.toString(16))
              ),
              // AlgorithmIdentifier
              asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
                // algorithm
                asn1.create(
                  asn1.Class.UNIVERSAL,
                  asn1.Type.OID,
                  false,
                  asn1.oidToDer(pki.oids[prfAlgorithm]).getBytes()
                ),
                // parameters (null)
                asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, "")
              ])
            );
          }
          return params;
        }

        /***/
      },
      /* 68 */
      /***/ function(module, exports) {
        var toString = {}.toString;

        module.exports =
          Array.isArray ||
          function(arr) {
            return toString.call(arr) == "[object Array]";
          };

        /***/
      },
      /* 69 */
      /***/ function(module, exports) {
        /* (ignored) */
        /***/
      },
      /* 70 */
      /***/ function(module, exports, __webpack_require__) {
        /**
 * Secure Hash Algorithm with 256-bit digest (SHA-256) implementation.
 *
 * See FIPS 180-2 for details.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2015 Digital Bazaar, Inc.
 */
        var forge = __webpack_require__(1);
        __webpack_require__(12);
        __webpack_require__(3);

        var sha256 = (module.exports = forge.sha256 = forge.sha256 || {});
        forge.md.sha256 = forge.md.algorithms.sha256 = sha256;

        /**
 * Creates a SHA-256 message digest object.
 *
 * @return a message digest object.
 */
        sha256.create = function() {
          // do initialization as necessary
          if (!_initialized) {
            _init();
          }

          // SHA-256 state contains eight 32-bit integers
          var _state = null;

          // input buffer
          var _input = forge.util.createBuffer();

          // used for word storage
          var _w = new Array(64);

          // message digest object
          var md = {
            algorithm: "sha256",
            blockLength: 64,
            digestLength: 32,
            // 56-bit length of message so far (does not including padding)
            messageLength: 0,
            // true message length
            fullMessageLength: null,
            // size of message length in bytes
            messageLengthSize: 8
          };

          /**
   * Starts the digest.
   *
   * @return this digest object.
   */
          md.start = function() {
            // up to 56-bit message length for convenience
            md.messageLength = 0;

            // full message length (set md.messageLength64 for backwards-compatibility)
            md.fullMessageLength = md.messageLength64 = [];
            var int32s = md.messageLengthSize / 4;
            for (var i = 0; i < int32s; ++i) {
              md.fullMessageLength.push(0);
            }
            _input = forge.util.createBuffer();
            _state = {
              h0: 0x6a09e667,
              h1: 0xbb67ae85,
              h2: 0x3c6ef372,
              h3: 0xa54ff53a,
              h4: 0x510e527f,
              h5: 0x9b05688c,
              h6: 0x1f83d9ab,
              h7: 0x5be0cd19
            };
            return md;
          };
          // start digest automatically for first time
          md.start();

          /**
   * Updates the digest with the given message input. The given input can
   * treated as raw input (no encoding will be applied) or an encoding of
   * 'utf8' maybe given to encode the input using UTF-8.
   *
   * @param msg the message input to update with.
   * @param encoding the encoding to use (default: 'raw', other: 'utf8').
   *
   * @return this digest object.
   */
          md.update = function(msg, encoding) {
            if (encoding === "utf8") {
              msg = forge.util.encodeUtf8(msg);
            }

            // update message length
            var len = msg.length;
            md.messageLength += len;
            len = [(len / 0x100000000) >>> 0, len >>> 0];
            for (var i = md.fullMessageLength.length - 1; i >= 0; --i) {
              md.fullMessageLength[i] += len[1];
              len[1] = len[0] + ((md.fullMessageLength[i] / 0x100000000) >>> 0);
              md.fullMessageLength[i] = md.fullMessageLength[i] >>> 0;
              len[0] = (len[1] / 0x100000000) >>> 0;
            }

            // add bytes to input buffer
            _input.putBytes(msg);

            // process bytes
            _update(_state, _w, _input);

            // compact input buffer every 2K or if empty
            if (_input.read > 2048 || _input.length() === 0) {
              _input.compact();
            }

            return md;
          };

          /**
   * Produces the digest.
   *
   * @return a byte buffer containing the digest value.
   */
          md.digest = function() {
            /* Note: Here we copy the remaining bytes in the input buffer and
    add the appropriate SHA-256 padding. Then we do the final update
    on a copy of the state so that if the user wants to get
    intermediate digests they can do so. */

            /* Determine the number of bytes that must be added to the message
    to ensure its length is congruent to 448 mod 512. In other words,
    the data to be digested must be a multiple of 512 bits (or 128 bytes).
    This data includes the message, some padding, and the length of the
    message. Since the length of the message will be encoded as 8 bytes (64
    bits), that means that the last segment of the data must have 56 bytes
    (448 bits) of message and padding. Therefore, the length of the message
    plus the padding must be congruent to 448 mod 512 because
    512 - 128 = 448.

    In order to fill up the message length it must be filled with
    padding that begins with 1 bit followed by all 0 bits. Padding
    must *always* be present, so if the message length is already
    congruent to 448 mod 512, then 512 padding bits must be added. */

            var finalBlock = forge.util.createBuffer();
            finalBlock.putBytes(_input.bytes());

            // compute remaining size to be digested (include message length size)
            var remaining =
              md.fullMessageLength[md.fullMessageLength.length - 1] +
              md.messageLengthSize;

            // add padding for overflow blockSize - overflow
            // _padding starts with 1 byte with first bit is set (byte value 128), then
            // there may be up to (blockSize - 1) other pad bytes
            var overflow = remaining & (md.blockLength - 1);
            finalBlock.putBytes(_padding.substr(0, md.blockLength - overflow));

            // serialize message length in bits in big-endian order; since length
            // is stored in bytes we multiply by 8 and add carry from next int
            var next, carry;
            var bits = md.fullMessageLength[0] * 8;
            for (var i = 0; i < md.fullMessageLength.length - 1; ++i) {
              next = md.fullMessageLength[i + 1] * 8;
              carry = (next / 0x100000000) >>> 0;
              bits += carry;
              finalBlock.putInt32(bits >>> 0);
              bits = next >>> 0;
            }
            finalBlock.putInt32(bits);

            var s2 = {
              h0: _state.h0,
              h1: _state.h1,
              h2: _state.h2,
              h3: _state.h3,
              h4: _state.h4,
              h5: _state.h5,
              h6: _state.h6,
              h7: _state.h7
            };
            _update(s2, _w, finalBlock);
            var rval = forge.util.createBuffer();
            rval.putInt32(s2.h0);
            rval.putInt32(s2.h1);
            rval.putInt32(s2.h2);
            rval.putInt32(s2.h3);
            rval.putInt32(s2.h4);
            rval.putInt32(s2.h5);
            rval.putInt32(s2.h6);
            rval.putInt32(s2.h7);
            return rval;
          };

          return md;
        };

        // sha-256 padding bytes not initialized yet
        var _padding = null;
        var _initialized = false;

        // table of constants
        var _k = null;

        /**
 * Initializes the constant tables.
 */
        function _init() {
          // create padding
          _padding = String.fromCharCode(128);
          _padding += forge.util.fillString(String.fromCharCode(0x00), 64);

          // create K table for SHA-256
          _k = [
            0x428a2f98,
            0x71374491,
            0xb5c0fbcf,
            0xe9b5dba5,
            0x3956c25b,
            0x59f111f1,
            0x923f82a4,
            0xab1c5ed5,
            0xd807aa98,
            0x12835b01,
            0x243185be,
            0x550c7dc3,
            0x72be5d74,
            0x80deb1fe,
            0x9bdc06a7,
            0xc19bf174,
            0xe49b69c1,
            0xefbe4786,
            0x0fc19dc6,
            0x240ca1cc,
            0x2de92c6f,
            0x4a7484aa,
            0x5cb0a9dc,
            0x76f988da,
            0x983e5152,
            0xa831c66d,
            0xb00327c8,
            0xbf597fc7,
            0xc6e00bf3,
            0xd5a79147,
            0x06ca6351,
            0x14292967,
            0x27b70a85,
            0x2e1b2138,
            0x4d2c6dfc,
            0x53380d13,
            0x650a7354,
            0x766a0abb,
            0x81c2c92e,
            0x92722c85,
            0xa2bfe8a1,
            0xa81a664b,
            0xc24b8b70,
            0xc76c51a3,
            0xd192e819,
            0xd6990624,
            0xf40e3585,
            0x106aa070,
            0x19a4c116,
            0x1e376c08,
            0x2748774c,
            0x34b0bcb5,
            0x391c0cb3,
            0x4ed8aa4a,
            0x5b9cca4f,
            0x682e6ff3,
            0x748f82ee,
            0x78a5636f,
            0x84c87814,
            0x8cc70208,
            0x90befffa,
            0xa4506ceb,
            0xbef9a3f7,
            0xc67178f2
          ];

          // now initialized
          _initialized = true;
        }

        /**
 * Updates a SHA-256 state with the given byte buffer.
 *
 * @param s the SHA-256 state to update.
 * @param w the array to use to store words.
 * @param bytes the byte buffer to update with.
 */
        function _update(s, w, bytes) {
          // consume 512 bit (64 byte) chunks
          var t1, t2, s0, s1, ch, maj, i, a, b, c, d, e, f, g, h;
          var len = bytes.length();
          while (len >= 64) {
            // the w array will be populated with sixteen 32-bit big-endian words
            // and then extended into 64 32-bit words according to SHA-256
            for (i = 0; i < 16; ++i) {
              w[i] = bytes.getInt32();
            }
            for (; i < 64; ++i) {
              // XOR word 2 words ago rot right 17, rot right 19, shft right 10
              t1 = w[i - 2];
              t1 =
                ((t1 >>> 17) | (t1 << 15)) ^
                ((t1 >>> 19) | (t1 << 13)) ^
                (t1 >>> 10);
              // XOR word 15 words ago rot right 7, rot right 18, shft right 3
              t2 = w[i - 15];
              t2 =
                ((t2 >>> 7) | (t2 << 25)) ^
                ((t2 >>> 18) | (t2 << 14)) ^
                (t2 >>> 3);
              // sum(t1, word 7 ago, t2, word 16 ago) modulo 2^32
              w[i] = (t1 + w[i - 7] + t2 + w[i - 16]) | 0;
            }

            // initialize hash value for this chunk
            a = s.h0;
            b = s.h1;
            c = s.h2;
            d = s.h3;
            e = s.h4;
            f = s.h5;
            g = s.h6;
            h = s.h7;

            // round function
            for (i = 0; i < 64; ++i) {
              // Sum1(e)
              s1 =
                ((e >>> 6) | (e << 26)) ^
                ((e >>> 11) | (e << 21)) ^
                ((e >>> 25) | (e << 7));
              // Ch(e, f, g) (optimized the same way as SHA-1)
              ch = g ^ (e & (f ^ g));
              // Sum0(a)
              s0 =
                ((a >>> 2) | (a << 30)) ^
                ((a >>> 13) | (a << 19)) ^
                ((a >>> 22) | (a << 10));
              // Maj(a, b, c) (optimized the same way as SHA-1)
              maj = (a & b) | (c & (a ^ b));

              // main algorithm
              t1 = h + s1 + ch + _k[i] + w[i];
              t2 = s0 + maj;
              h = g;
              g = f;
              f = e;
              // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
              // can't truncate with `| 0`
              e = (d + t1) >>> 0;
              d = c;
              c = b;
              b = a;
              // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
              // can't truncate with `| 0`
              a = (t1 + t2) >>> 0;
            }

            // update hash state
            s.h0 = (s.h0 + a) | 0;
            s.h1 = (s.h1 + b) | 0;
            s.h2 = (s.h2 + c) | 0;
            s.h3 = (s.h3 + d) | 0;
            s.h4 = (s.h4 + e) | 0;
            s.h5 = (s.h5 + f) | 0;
            s.h6 = (s.h6 + g) | 0;
            s.h7 = (s.h7 + h) | 0;
            len -= 64;
          }
        }

        /***/
      },
      /* 71 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(process) {
          /**
 * A javascript implementation of a cryptographically-secure
 * Pseudo Random Number Generator (PRNG). The Fortuna algorithm is followed
 * here though the use of SHA-256 is not enforced; when generating an
 * a PRNG context, the hashing algorithm and block cipher used for
 * the generator are specified via a plugin.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
 */
          var forge = __webpack_require__(1);
          __webpack_require__(3);

          var _crypto = null;
          if (
            forge.util.isNodejs &&
            !forge.options.usePureJavaScript &&
            !process.versions["node-webkit"]
          ) {
            _crypto = __webpack_require__(69);
          }

          /* PRNG API */
          var prng = (module.exports = forge.prng = forge.prng || {});

          /**
 * Creates a new PRNG context.
 *
 * A PRNG plugin must be passed in that will provide:
 *
 * 1. A function that initializes the key and seed of a PRNG context. It
 *   will be given a 16 byte key and a 16 byte seed. Any key expansion
 *   or transformation of the seed from a byte string into an array of
 *   integers (or similar) should be performed.
 * 2. The cryptographic function used by the generator. It takes a key and
 *   a seed.
 * 3. A seed increment function. It takes the seed and returns seed + 1.
 * 4. An api to create a message digest.
 *
 * For an example, see random.js.
 *
 * @param plugin the PRNG plugin to use.
 */
          prng.create = function(plugin) {
            var ctx = {
              plugin: plugin,
              key: null,
              seed: null,
              time: null,
              // number of reseeds so far
              reseeds: 0,
              // amount of data generated so far
              generated: 0
            };

            // create 32 entropy pools (each is a message digest)
            var md = plugin.md;
            var pools = new Array(32);
            for (var i = 0; i < 32; ++i) {
              pools[i] = md.create();
            }
            ctx.pools = pools;

            // entropy pools are written to cyclically, starting at index 0
            ctx.pool = 0;

            /**
   * Generates random bytes. The bytes may be generated synchronously or
   * asynchronously. Web workers must use the asynchronous interface or
   * else the behavior is undefined.
   *
   * @param count the number of random bytes to generate.
   * @param [callback(err, bytes)] called once the operation completes.
   *
   * @return count random bytes as a string.
   */
            ctx.generate = function(count, callback) {
              // do synchronously
              if (!callback) {
                return ctx.generateSync(count);
              }

              // simple generator using counter-based CBC
              var cipher = ctx.plugin.cipher;
              var increment = ctx.plugin.increment;
              var formatKey = ctx.plugin.formatKey;
              var formatSeed = ctx.plugin.formatSeed;
              var b = forge.util.createBuffer();

              // reset key for every request
              ctx.key = null;

              generate();

              function generate(err) {
                if (err) {
                  return callback(err);
                }

                // sufficient bytes generated
                if (b.length() >= count) {
                  return callback(null, b.getBytes(count));
                }

                // if amount of data generated is greater than 1 MiB, trigger reseed
                if (ctx.generated > 0xfffff) {
                  ctx.key = null;
                }

                if (ctx.key === null) {
                  // prevent stack overflow
                  return forge.util.nextTick(function() {
                    _reseed(generate);
                  });
                }

                // generate the random bytes
                var bytes = cipher(ctx.key, ctx.seed);
                ctx.generated += bytes.length;
                b.putBytes(bytes);

                // generate bytes for a new key and seed
                ctx.key = formatKey(cipher(ctx.key, increment(ctx.seed)));
                ctx.seed = formatSeed(cipher(ctx.key, ctx.seed));

                forge.util.setImmediate(generate);
              }
            };

            /**
   * Generates random bytes synchronously.
   *
   * @param count the number of random bytes to generate.
   *
   * @return count random bytes as a string.
   */
            ctx.generateSync = function(count) {
              // simple generator using counter-based CBC
              var cipher = ctx.plugin.cipher;
              var increment = ctx.plugin.increment;
              var formatKey = ctx.plugin.formatKey;
              var formatSeed = ctx.plugin.formatSeed;

              // reset key for every request
              ctx.key = null;

              var b = forge.util.createBuffer();
              while (b.length() < count) {
                // if amount of data generated is greater than 1 MiB, trigger reseed
                if (ctx.generated > 0xfffff) {
                  ctx.key = null;
                }

                if (ctx.key === null) {
                  _reseedSync();
                }

                // generate the random bytes
                var bytes = cipher(ctx.key, ctx.seed);
                ctx.generated += bytes.length;
                b.putBytes(bytes);

                // generate bytes for a new key and seed
                ctx.key = formatKey(cipher(ctx.key, increment(ctx.seed)));
                ctx.seed = formatSeed(cipher(ctx.key, ctx.seed));
              }

              return b.getBytes(count);
            };

            /**
   * Private function that asynchronously reseeds a generator.
   *
   * @param callback(err) called once the operation completes.
   */
            function _reseed(callback) {
              if (ctx.pools[0].messageLength >= 32) {
                _seed();
                return callback();
              }
              // not enough seed data...
              var needed = (32 - ctx.pools[0].messageLength) << 5;
              ctx.seedFile(needed, function(err, bytes) {
                if (err) {
                  return callback(err);
                }
                ctx.collect(bytes);
                _seed();
                callback();
              });
            }

            /**
   * Private function that synchronously reseeds a generator.
   */
            function _reseedSync() {
              if (ctx.pools[0].messageLength >= 32) {
                return _seed();
              }
              // not enough seed data...
              var needed = (32 - ctx.pools[0].messageLength) << 5;
              ctx.collect(ctx.seedFileSync(needed));
              _seed();
            }

            /**
   * Private function that seeds a generator once enough bytes are available.
   */
            function _seed() {
              // create a plugin-based message digest
              var md = ctx.plugin.md.create();

              // digest pool 0's entropy and restart it
              md.update(ctx.pools[0].digest().getBytes());
              ctx.pools[0].start();

              // digest the entropy of other pools whose index k meet the
              // condition '2^k mod n == 0' where n is the number of reseeds
              var k = 1;
              for (var i = 1; i < 32; ++i) {
                // prevent signed numbers from being used
                k = k === 31 ? 0x80000000 : k << 2;
                if (k % ctx.reseeds === 0) {
                  md.update(ctx.pools[i].digest().getBytes());
                  ctx.pools[i].start();
                }
              }

              // get digest for key bytes and iterate again for seed bytes
              var keyBytes = md.digest().getBytes();
              md.start();
              md.update(keyBytes);
              var seedBytes = md.digest().getBytes();

              // update
              ctx.key = ctx.plugin.formatKey(keyBytes);
              ctx.seed = ctx.plugin.formatSeed(seedBytes);
              ctx.reseeds = ctx.reseeds === 0xffffffff ? 0 : ctx.reseeds + 1;
              ctx.generated = 0;
            }

            /**
   * The built-in default seedFile. This seedFile is used when entropy
   * is needed immediately.
   *
   * @param needed the number of bytes that are needed.
   *
   * @return the random bytes.
   */
            function defaultSeedFile(needed) {
              // use window.crypto.getRandomValues strong source of entropy if available
              var getRandomValues = null;
              if (typeof window !== "undefined") {
                var _crypto = window.crypto || window.msCrypto;
                if (_crypto && _crypto.getRandomValues) {
                  getRandomValues = function(arr) {
                    return _crypto.getRandomValues(arr);
                  };
                }
              }

              var b = forge.util.createBuffer();
              if (getRandomValues) {
                while (b.length() < needed) {
                  // max byte length is 65536 before QuotaExceededError is thrown
                  // http://www.w3.org/TR/WebCryptoAPI/#RandomSource-method-getRandomValues
                  var count = Math.max(
                    1,
                    Math.min(needed - b.length(), 65536) / 4
                  );
                  var entropy = new Uint32Array(Math.floor(count));
                  try {
                    getRandomValues(entropy);
                    for (var i = 0; i < entropy.length; ++i) {
                      b.putInt32(entropy[i]);
                    }
                  } catch (e) {
                    /* only ignore QuotaExceededError */
                    if (
                      !(
                        typeof QuotaExceededError !== "undefined" &&
                        e instanceof QuotaExceededError
                      )
                    ) {
                      throw e;
                    }
                  }
                }
              }

              // be sad and add some weak random data
              if (b.length() < needed) {
                /* Draws from Park-Miller "minimal standard" 31 bit PRNG,
      implemented with David G. Carta's optimization: with 32 bit math
      and without division (Public Domain). */
                var hi, lo, next;
                var seed = Math.floor(Math.random() * 0x010000);
                while (b.length() < needed) {
                  lo = 16807 * (seed & 0xffff);
                  hi = 16807 * (seed >> 16);
                  lo += (hi & 0x7fff) << 16;
                  lo += hi >> 15;
                  lo = (lo & 0x7fffffff) + (lo >> 31);
                  seed = lo & 0xffffffff;

                  // consume lower 3 bytes of seed
                  for (var i = 0; i < 3; ++i) {
                    // throw in more pseudo random
                    next = seed >>> (i << 3);
                    next ^= Math.floor(Math.random() * 0x0100);
                    b.putByte(String.fromCharCode(next & 0xff));
                  }
                }
              }

              return b.getBytes(needed);
            }
            // initialize seed file APIs
            if (_crypto) {
              // use nodejs async API
              ctx.seedFile = function(needed, callback) {
                _crypto.randomBytes(needed, function(err, bytes) {
                  if (err) {
                    return callback(err);
                  }
                  callback(null, bytes.toString());
                });
              };
              // use nodejs sync API
              ctx.seedFileSync = function(needed) {
                return _crypto.randomBytes(needed).toString();
              };
            } else {
              ctx.seedFile = function(needed, callback) {
                try {
                  callback(null, defaultSeedFile(needed));
                } catch (e) {
                  callback(e);
                }
              };
              ctx.seedFileSync = defaultSeedFile;
            }

            /**
   * Adds entropy to a prng ctx's accumulator.
   *
   * @param bytes the bytes of entropy as a string.
   */
            ctx.collect = function(bytes) {
              // iterate over pools distributing entropy cyclically
              var count = bytes.length;
              for (var i = 0; i < count; ++i) {
                ctx.pools[ctx.pool].update(bytes.substr(i, 1));
                ctx.pool = ctx.pool === 31 ? 0 : ctx.pool + 1;
              }
            };

            /**
   * Collects an integer of n bits.
   *
   * @param i the integer entropy.
   * @param n the number of bits in the integer.
   */
            ctx.collectInt = function(i, n) {
              var bytes = "";
              for (var x = 0; x < n; x += 8) {
                bytes += String.fromCharCode((i >> x) & 0xff);
              }
              ctx.collect(bytes);
            };

            /**
   * Registers a Web Worker to receive immediate entropy from the main thread.
   * This method is required until Web Workers can access the native crypto
   * API. This method should be called twice for each created worker, once in
   * the main thread, and once in the worker itself.
   *
   * @param worker the worker to register.
   */
            ctx.registerWorker = function(worker) {
              // worker receives random bytes
              if (worker === self) {
                ctx.seedFile = function(needed, callback) {
                  function listener(e) {
                    var data = e.data;
                    if (data.forge && data.forge.prng) {
                      self.removeEventListener("message", listener);
                      callback(data.forge.prng.err, data.forge.prng.bytes);
                    }
                  }
                  self.addEventListener("message", listener);
                  self.postMessage({ forge: { prng: { needed: needed } } });
                };
              } else {
                // main thread sends random bytes upon request
                var listener = function(e) {
                  var data = e.data;
                  if (data.forge && data.forge.prng) {
                    ctx.seedFile(data.forge.prng.needed, function(err, bytes) {
                      worker.postMessage({
                        forge: { prng: { err: err, bytes: bytes } }
                      });
                    });
                  }
                };
                // TODO: do we need to remove the event listener when the worker dies?
                worker.addEventListener("message", listener);
              }
            };

            return ctx;
          };

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(6)));

        /***/
      },
      /* 72 */
      /***/ function(module, exports, __webpack_require__) {
        /**
 * RC2 implementation.
 *
 * @author Stefan Siegl
 *
 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
 *
 * Information on the RC2 cipher is available from RFC #2268,
 * http://www.ietf.org/rfc/rfc2268.txt
 */
        var forge = __webpack_require__(1);
        __webpack_require__(3);

        var piTable = [
          0xd9,
          0x78,
          0xf9,
          0xc4,
          0x19,
          0xdd,
          0xb5,
          0xed,
          0x28,
          0xe9,
          0xfd,
          0x79,
          0x4a,
          0xa0,
          0xd8,
          0x9d,
          0xc6,
          0x7e,
          0x37,
          0x83,
          0x2b,
          0x76,
          0x53,
          0x8e,
          0x62,
          0x4c,
          0x64,
          0x88,
          0x44,
          0x8b,
          0xfb,
          0xa2,
          0x17,
          0x9a,
          0x59,
          0xf5,
          0x87,
          0xb3,
          0x4f,
          0x13,
          0x61,
          0x45,
          0x6d,
          0x8d,
          0x09,
          0x81,
          0x7d,
          0x32,
          0xbd,
          0x8f,
          0x40,
          0xeb,
          0x86,
          0xb7,
          0x7b,
          0x0b,
          0xf0,
          0x95,
          0x21,
          0x22,
          0x5c,
          0x6b,
          0x4e,
          0x82,
          0x54,
          0xd6,
          0x65,
          0x93,
          0xce,
          0x60,
          0xb2,
          0x1c,
          0x73,
          0x56,
          0xc0,
          0x14,
          0xa7,
          0x8c,
          0xf1,
          0xdc,
          0x12,
          0x75,
          0xca,
          0x1f,
          0x3b,
          0xbe,
          0xe4,
          0xd1,
          0x42,
          0x3d,
          0xd4,
          0x30,
          0xa3,
          0x3c,
          0xb6,
          0x26,
          0x6f,
          0xbf,
          0x0e,
          0xda,
          0x46,
          0x69,
          0x07,
          0x57,
          0x27,
          0xf2,
          0x1d,
          0x9b,
          0xbc,
          0x94,
          0x43,
          0x03,
          0xf8,
          0x11,
          0xc7,
          0xf6,
          0x90,
          0xef,
          0x3e,
          0xe7,
          0x06,
          0xc3,
          0xd5,
          0x2f,
          0xc8,
          0x66,
          0x1e,
          0xd7,
          0x08,
          0xe8,
          0xea,
          0xde,
          0x80,
          0x52,
          0xee,
          0xf7,
          0x84,
          0xaa,
          0x72,
          0xac,
          0x35,
          0x4d,
          0x6a,
          0x2a,
          0x96,
          0x1a,
          0xd2,
          0x71,
          0x5a,
          0x15,
          0x49,
          0x74,
          0x4b,
          0x9f,
          0xd0,
          0x5e,
          0x04,
          0x18,
          0xa4,
          0xec,
          0xc2,
          0xe0,
          0x41,
          0x6e,
          0x0f,
          0x51,
          0xcb,
          0xcc,
          0x24,
          0x91,
          0xaf,
          0x50,
          0xa1,
          0xf4,
          0x70,
          0x39,
          0x99,
          0x7c,
          0x3a,
          0x85,
          0x23,
          0xb8,
          0xb4,
          0x7a,
          0xfc,
          0x02,
          0x36,
          0x5b,
          0x25,
          0x55,
          0x97,
          0x31,
          0x2d,
          0x5d,
          0xfa,
          0x98,
          0xe3,
          0x8a,
          0x92,
          0xae,
          0x05,
          0xdf,
          0x29,
          0x10,
          0x67,
          0x6c,
          0xba,
          0xc9,
          0xd3,
          0x00,
          0xe6,
          0xcf,
          0xe1,
          0x9e,
          0xa8,
          0x2c,
          0x63,
          0x16,
          0x01,
          0x3f,
          0x58,
          0xe2,
          0x89,
          0xa9,
          0x0d,
          0x38,
          0x34,
          0x1b,
          0xab,
          0x33,
          0xff,
          0xb0,
          0xbb,
          0x48,
          0x0c,
          0x5f,
          0xb9,
          0xb1,
          0xcd,
          0x2e,
          0xc5,
          0xf3,
          0xdb,
          0x47,
          0xe5,
          0xa5,
          0x9c,
          0x77,
          0x0a,
          0xa6,
          0x20,
          0x68,
          0xfe,
          0x7f,
          0xc1,
          0xad
        ];

        var s = [1, 2, 3, 5];

        /**
 * Rotate a word left by given number of bits.
 *
 * Bits that are shifted out on the left are put back in on the right
 * hand side.
 *
 * @param word The word to shift left.
 * @param bits The number of bits to shift by.
 * @return The rotated word.
 */
        var rol = function(word, bits) {
          return ((word << bits) & 0xffff) | ((word & 0xffff) >> (16 - bits));
        };

        /**
 * Rotate a word right by given number of bits.
 *
 * Bits that are shifted out on the right are put back in on the left
 * hand side.
 *
 * @param word The word to shift right.
 * @param bits The number of bits to shift by.
 * @return The rotated word.
 */
        var ror = function(word, bits) {
          return ((word & 0xffff) >> bits) | ((word << (16 - bits)) & 0xffff);
        };

        /* RC2 API */
        module.exports = forge.rc2 = forge.rc2 || {};

        /**
 * Perform RC2 key expansion as per RFC #2268, section 2.
 *
 * @param key variable-length user key (between 1 and 128 bytes)
 * @param effKeyBits number of effective key bits (default: 128)
 * @return the expanded RC2 key (ByteBuffer of 128 bytes)
 */
        forge.rc2.expandKey = function(key, effKeyBits) {
          if (typeof key === "string") {
            key = forge.util.createBuffer(key);
          }
          effKeyBits = effKeyBits || 128;

          /* introduce variables that match the names used in RFC #2268 */
          var L = key;
          var T = key.length();
          var T1 = effKeyBits;
          var T8 = Math.ceil(T1 / 8);
          var TM = 0xff >> (T1 & 0x07);
          var i;

          for (i = T; i < 128; i++) {
            L.putByte(piTable[(L.at(i - 1) + L.at(i - T)) & 0xff]);
          }

          L.setAt(128 - T8, piTable[L.at(128 - T8) & TM]);

          for (i = 127 - T8; i >= 0; i--) {
            L.setAt(i, piTable[L.at(i + 1) ^ L.at(i + T8)]);
          }

          return L;
        };

        /**
 * Creates a RC2 cipher object.
 *
 * @param key the symmetric key to use (as base for key generation).
 * @param bits the number of effective key bits.
 * @param encrypt false for decryption, true for encryption.
 *
 * @return the cipher.
 */
        var createCipher = function(key, bits, encrypt) {
          var _finish = false,
            _input = null,
            _output = null,
            _iv = null;
          var mixRound, mashRound;
          var i,
            j,
            K = [];

          /* Expand key and fill into K[] Array */
          key = forge.rc2.expandKey(key, bits);
          for (i = 0; i < 64; i++) {
            K.push(key.getInt16Le());
          }

          if (encrypt) {
            /**
     * Perform one mixing round "in place".
     *
     * @param R Array of four words to perform mixing on.
     */
            mixRound = function(R) {
              for (i = 0; i < 4; i++) {
                R[i] +=
                  K[j] +
                  (R[(i + 3) % 4] & R[(i + 2) % 4]) +
                  (~R[(i + 3) % 4] & R[(i + 1) % 4]);
                R[i] = rol(R[i], s[i]);
                j++;
              }
            };

            /**
     * Perform one mashing round "in place".
     *
     * @param R Array of four words to perform mashing on.
     */
            mashRound = function(R) {
              for (i = 0; i < 4; i++) {
                R[i] += K[R[(i + 3) % 4] & 63];
              }
            };
          } else {
            /**
     * Perform one r-mixing round "in place".
     *
     * @param R Array of four words to perform mixing on.
     */
            mixRound = function(R) {
              for (i = 3; i >= 0; i--) {
                R[i] = ror(R[i], s[i]);
                R[i] -=
                  K[j] +
                  (R[(i + 3) % 4] & R[(i + 2) % 4]) +
                  (~R[(i + 3) % 4] & R[(i + 1) % 4]);
                j--;
              }
            };

            /**
     * Perform one r-mashing round "in place".
     *
     * @param R Array of four words to perform mashing on.
     */
            mashRound = function(R) {
              for (i = 3; i >= 0; i--) {
                R[i] -= K[R[(i + 3) % 4] & 63];
              }
            };
          }

          /**
   * Run the specified cipher execution plan.
   *
   * This function takes four words from the input buffer, applies the IV on
   * it (if requested) and runs the provided execution plan.
   *
   * The plan must be put together in form of a array of arrays.  Where the
   * outer one is simply a list of steps to perform and the inner one needs
   * to have two elements: the first one telling how many rounds to perform,
   * the second one telling what to do (i.e. the function to call).
   *
   * @param {Array} plan The plan to execute.
   */
          var runPlan = function(plan) {
            var R = [];

            /* Get data from input buffer and fill the four words into R */
            for (i = 0; i < 4; i++) {
              var val = _input.getInt16Le();

              if (_iv !== null) {
                if (encrypt) {
                  /* We're encrypting, apply the IV first. */
                  val ^= _iv.getInt16Le();
                } else {
                  /* We're decryption, keep cipher text for next block. */
                  _iv.putInt16Le(val);
                }
              }

              R.push(val & 0xffff);
            }

            /* Reset global "j" variable as per spec. */
            j = encrypt ? 0 : 63;

            /* Run execution plan. */
            for (var ptr = 0; ptr < plan.length; ptr++) {
              for (var ctr = 0; ctr < plan[ptr][0]; ctr++) {
                plan[ptr][1](R);
              }
            }

            /* Write back result to output buffer. */
            for (i = 0; i < 4; i++) {
              if (_iv !== null) {
                if (encrypt) {
                  /* We're encrypting in CBC-mode, feed back encrypted bytes into
             IV buffer to carry it forward to next block. */
                  _iv.putInt16Le(R[i]);
                } else {
                  R[i] ^= _iv.getInt16Le();
                }
              }

              _output.putInt16Le(R[i]);
            }
          };

          /* Create cipher object */
          var cipher = null;
          cipher = {
            /**
     * Starts or restarts the encryption or decryption process, whichever
     * was previously configured.
     *
     * To use the cipher in CBC mode, iv may be given either as a string
     * of bytes, or as a byte buffer.  For ECB mode, give null as iv.
     *
     * @param iv the initialization vector to use, null for ECB mode.
     * @param output the output the buffer to write to, null to create one.
     */
            start: function(iv, output) {
              if (iv) {
                /* CBC mode */
                if (typeof iv === "string") {
                  iv = forge.util.createBuffer(iv);
                }
              }

              _finish = false;
              _input = forge.util.createBuffer();
              _output = output || new forge.util.createBuffer();
              _iv = iv;

              cipher.output = _output;
            },

            /**
     * Updates the next block.
     *
     * @param input the buffer to read from.
     */
            update: function(input) {
              if (!_finish) {
                // not finishing, so fill the input buffer with more input
                _input.putBuffer(input);
              }

              while (_input.length() >= 8) {
                runPlan([
                  [5, mixRound],
                  [1, mashRound],
                  [6, mixRound],
                  [1, mashRound],
                  [5, mixRound]
                ]);
              }
            },

            /**
     * Finishes encrypting or decrypting.
     *
     * @param pad a padding function to use, null for PKCS#7 padding,
     *           signature(blockSize, buffer, decrypt).
     *
     * @return true if successful, false on error.
     */
            finish: function(pad) {
              var rval = true;

              if (encrypt) {
                if (pad) {
                  rval = pad(8, _input, !encrypt);
                } else {
                  // add PKCS#7 padding to block (each pad byte is the
                  // value of the number of pad bytes)
                  var padding = _input.length() === 8 ? 8 : 8 - _input.length();
                  _input.fillWithByte(padding, padding);
                }
              }

              if (rval) {
                // do final update
                _finish = true;
                cipher.update();
              }

              if (!encrypt) {
                // check for error: input data not a multiple of block size
                rval = _input.length() === 0;
                if (rval) {
                  if (pad) {
                    rval = pad(8, _output, !encrypt);
                  } else {
                    // ensure padding byte count is valid
                    var len = _output.length();
                    var count = _output.at(len - 1);

                    if (count > len) {
                      rval = false;
                    } else {
                      // trim off padding bytes
                      _output.truncate(count);
                    }
                  }
                }
              }

              return rval;
            }
          };

          return cipher;
        };

        /**
 * Creates an RC2 cipher object to encrypt data in ECB or CBC mode using the
 * given symmetric key. The output will be stored in the 'output' member
 * of the returned cipher.
 *
 * The key and iv may be given as a string of bytes or a byte buffer.
 * The cipher is initialized to use 128 effective key bits.
 *
 * @param key the symmetric key to use.
 * @param iv the initialization vector to use.
 * @param output the buffer to write to, null to create one.
 *
 * @return the cipher.
 */
        forge.rc2.startEncrypting = function(key, iv, output) {
          var cipher = forge.rc2.createEncryptionCipher(key, 128);
          cipher.start(iv, output);
          return cipher;
        };

        /**
 * Creates an RC2 cipher object to encrypt data in ECB or CBC mode using the
 * given symmetric key.
 *
 * The key may be given as a string of bytes or a byte buffer.
 *
 * To start encrypting call start() on the cipher with an iv and optional
 * output buffer.
 *
 * @param key the symmetric key to use.
 *
 * @return the cipher.
 */
        forge.rc2.createEncryptionCipher = function(key, bits) {
          return createCipher(key, bits, true);
        };

        /**
 * Creates an RC2 cipher object to decrypt data in ECB or CBC mode using the
 * given symmetric key. The output will be stored in the 'output' member
 * of the returned cipher.
 *
 * The key and iv may be given as a string of bytes or a byte buffer.
 * The cipher is initialized to use 128 effective key bits.
 *
 * @param key the symmetric key to use.
 * @param iv the initialization vector to use.
 * @param output the buffer to write to, null to create one.
 *
 * @return the cipher.
 */
        forge.rc2.startDecrypting = function(key, iv, output) {
          var cipher = forge.rc2.createDecryptionCipher(key, 128);
          cipher.start(iv, output);
          return cipher;
        };

        /**
 * Creates an RC2 cipher object to decrypt data in ECB or CBC mode using the
 * given symmetric key.
 *
 * The key may be given as a string of bytes or a byte buffer.
 *
 * To start decrypting call start() on the cipher with an iv and optional
 * output buffer.
 *
 * @param key the symmetric key to use.
 *
 * @return the cipher.
 */
        forge.rc2.createDecryptionCipher = function(key, bits) {
          return createCipher(key, bits, false);
        };

        /***/
      },
      /* 73 */
      /***/ function(module, exports, __webpack_require__) {
        /**
 * Partial implementation of PKCS#1 v2.2: RSA-OEAP
 *
 * Modified but based on the following MIT and BSD licensed code:
 *
 * https://github.com/kjur/jsjws/blob/master/rsa.js:
 *
 * The 'jsjws'(JSON Web Signature JavaScript Library) License
 *
 * Copyright (c) 2012 Kenji Urushima
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * http://webrsa.cvs.sourceforge.net/viewvc/webrsa/Client/RSAES-OAEP.js?content-type=text%2Fplain:
 *
 * RSAES-OAEP.js
 * $Id: RSAES-OAEP.js,v 1.1.1.1 2003/03/19 15:37:20 ellispritchard Exp $
 * JavaScript Implementation of PKCS #1 v2.1 RSA CRYPTOGRAPHY STANDARD (RSA Laboratories, June 14, 2002)
 * Copyright (C) Ellis Pritchard, Guardian Unlimited 2003.
 * Contact: ellis@nukinetics.com
 * Distributed under the BSD License.
 *
 * Official documentation: http://www.rsa.com/rsalabs/node.asp?id=2125
 *
 * @author Evan Jones (http://evanjones.ca/)
 * @author Dave Longley
 *
 * Copyright (c) 2013-2014 Digital Bazaar, Inc.
 */
        var forge = __webpack_require__(1);
        __webpack_require__(3);
        __webpack_require__(9);
        __webpack_require__(22);

        // shortcut for PKCS#1 API
        var pkcs1 = (module.exports = forge.pkcs1 = forge.pkcs1 || {});

        /**
 * Encode the given RSAES-OAEP message (M) using key, with optional label (L)
 * and seed.
 *
 * This method does not perform RSA encryption, it only encodes the message
 * using RSAES-OAEP.
 *
 * @param key the RSA key to use.
 * @param message the message to encode.
 * @param options the options to use:
 *          label an optional label to use.
 *          seed the seed to use.
 *          md the message digest object to use, undefined for SHA-1.
 *          mgf1 optional mgf1 parameters:
 *            md the message digest object to use for MGF1.
 *
 * @return the encoded message bytes.
 */
        pkcs1.encode_rsa_oaep = function(key, message, options) {
          // parse arguments
          var label;
          var seed;
          var md;
          var mgf1Md;
          // legacy args (label, seed, md)
          if (typeof options === "string") {
            label = options;
            seed = arguments[3] || undefined;
            md = arguments[4] || undefined;
          } else if (options) {
            label = options.label || undefined;
            seed = options.seed || undefined;
            md = options.md || undefined;
            if (options.mgf1 && options.mgf1.md) {
              mgf1Md = options.mgf1.md;
            }
          }

          // default OAEP to SHA-1 message digest
          if (!md) {
            md = forge.md.sha1.create();
          } else {
            md.start();
          }

          // default MGF-1 to same as OAEP
          if (!mgf1Md) {
            mgf1Md = md;
          }

          // compute length in bytes and check output
          var keyLength = Math.ceil(key.n.bitLength() / 8);
          var maxLength = keyLength - 2 * md.digestLength - 2;
          if (message.length > maxLength) {
            var error = new Error(
              "RSAES-OAEP input message length is too long."
            );
            error.length = message.length;
            error.maxLength = maxLength;
            throw error;
          }

          if (!label) {
            label = "";
          }
          md.update(label, "raw");
          var lHash = md.digest();

          var PS = "";
          var PS_length = maxLength - message.length;
          for (var i = 0; i < PS_length; i++) {
            PS += "\x00";
          }

          var DB = lHash.getBytes() + PS + "\x01" + message;

          if (!seed) {
            seed = forge.random.getBytes(md.digestLength);
          } else if (seed.length !== md.digestLength) {
            var error = new Error(
              "Invalid RSAES-OAEP seed. The seed length must " +
                "match the digest length."
            );
            error.seedLength = seed.length;
            error.digestLength = md.digestLength;
            throw error;
          }

          var dbMask = rsa_mgf1(seed, keyLength - md.digestLength - 1, mgf1Md);
          var maskedDB = forge.util.xorBytes(DB, dbMask, DB.length);

          var seedMask = rsa_mgf1(maskedDB, md.digestLength, mgf1Md);
          var maskedSeed = forge.util.xorBytes(seed, seedMask, seed.length);

          // return encoded message
          return "\x00" + maskedSeed + maskedDB;
        };

        /**
 * Decode the given RSAES-OAEP encoded message (EM) using key, with optional
 * label (L).
 *
 * This method does not perform RSA decryption, it only decodes the message
 * using RSAES-OAEP.
 *
 * @param key the RSA key to use.
 * @param em the encoded message to decode.
 * @param options the options to use:
 *          label an optional label to use.
 *          md the message digest object to use for OAEP, undefined for SHA-1.
 *          mgf1 optional mgf1 parameters:
 *            md the message digest object to use for MGF1.
 *
 * @return the decoded message bytes.
 */
        pkcs1.decode_rsa_oaep = function(key, em, options) {
          // parse args
          var label;
          var md;
          var mgf1Md;
          // legacy args
          if (typeof options === "string") {
            label = options;
            md = arguments[3] || undefined;
          } else if (options) {
            label = options.label || undefined;
            md = options.md || undefined;
            if (options.mgf1 && options.mgf1.md) {
              mgf1Md = options.mgf1.md;
            }
          }

          // compute length in bytes
          var keyLength = Math.ceil(key.n.bitLength() / 8);

          if (em.length !== keyLength) {
            var error = new Error(
              "RSAES-OAEP encoded message length is invalid."
            );
            error.length = em.length;
            error.expectedLength = keyLength;
            throw error;
          }

          // default OAEP to SHA-1 message digest
          if (md === undefined) {
            md = forge.md.sha1.create();
          } else {
            md.start();
          }

          // default MGF-1 to same as OAEP
          if (!mgf1Md) {
            mgf1Md = md;
          }

          if (keyLength < 2 * md.digestLength + 2) {
            throw new Error(
              "RSAES-OAEP key is too short for the hash function."
            );
          }

          if (!label) {
            label = "";
          }
          md.update(label, "raw");
          var lHash = md.digest().getBytes();

          // split the message into its parts
          var y = em.charAt(0);
          var maskedSeed = em.substring(1, md.digestLength + 1);
          var maskedDB = em.substring(1 + md.digestLength);

          var seedMask = rsa_mgf1(maskedDB, md.digestLength, mgf1Md);
          var seed = forge.util.xorBytes(
            maskedSeed,
            seedMask,
            maskedSeed.length
          );

          var dbMask = rsa_mgf1(seed, keyLength - md.digestLength - 1, mgf1Md);
          var db = forge.util.xorBytes(maskedDB, dbMask, maskedDB.length);

          var lHashPrime = db.substring(0, md.digestLength);

          // constant time check that all values match what is expected
          var error = y !== "\x00";

          // constant time check lHash vs lHashPrime
          for (var i = 0; i < md.digestLength; ++i) {
            error |= lHash.charAt(i) !== lHashPrime.charAt(i);
          }

          // "constant time" find the 0x1 byte separating the padding (zeros) from the
          // message
          // TODO: It must be possible to do this in a better/smarter way?
          var in_ps = 1;
          var index = md.digestLength;
          for (var j = md.digestLength; j < db.length; j++) {
            var code = db.charCodeAt(j);

            var is_0 = (code & 0x1) ^ 0x1;

            // non-zero if not 0 or 1 in the ps section
            var error_mask = in_ps ? 0xfffe : 0x0000;
            error |= code & error_mask;

            // latch in_ps to zero after we find 0x1
            in_ps = in_ps & is_0;
            index += in_ps;
          }

          if (error || db.charCodeAt(index) !== 0x1) {
            throw new Error("Invalid RSAES-OAEP padding.");
          }

          return db.substring(index + 1);
        };

        function rsa_mgf1(seed, maskLength, hash) {
          // default to SHA-1 message digest
          if (!hash) {
            hash = forge.md.sha1.create();
          }
          var t = "";
          var count = Math.ceil(maskLength / hash.digestLength);
          for (var i = 0; i < count; ++i) {
            var c = String.fromCharCode(
              (i >> 24) & 0xff,
              (i >> 16) & 0xff,
              (i >> 8) & 0xff,
              i & 0xff
            );
            hash.start();
            hash.update(seed + c);
            t += hash.digest().getBytes();
          }
          return t.substring(0, maskLength);
        }

        /***/
      },
      /* 74 */
      /***/ function(module, exports, __webpack_require__) {
        /**
 * Prime number generation API.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2014 Digital Bazaar, Inc.
 */
        var forge = __webpack_require__(1);
        __webpack_require__(3);
        __webpack_require__(46);
        __webpack_require__(9);

        (function() {
          // forge.prime already defined
          if (forge.prime) {
            module.exports = forge.prime;
            return;
          }

          /* PRIME API */
          var prime = (module.exports = forge.prime = forge.prime || {});

          var BigInteger = forge.jsbn.BigInteger;

          // primes are 30k+i for i = 1, 7, 11, 13, 17, 19, 23, 29
          var GCD_30_DELTA = [6, 4, 2, 4, 2, 4, 6, 2];
          var THIRTY = new BigInteger(null);
          THIRTY.fromInt(30);
          var op_or = function(x, y) {
            return x | y;
          };

          /**
 * Generates a random probable prime with the given number of bits.
 *
 * Alternative algorithms can be specified by name as a string or as an
 * object with custom options like so:
 *
 * {
 *   name: 'PRIMEINC',
 *   options: {
 *     maxBlockTime: <the maximum amount of time to block the main
 *       thread before allowing I/O other JS to run>,
 *     millerRabinTests: <the number of miller-rabin tests to run>,
 *     workerScript: <the worker script URL>,
 *     workers: <the number of web workers (if supported) to use,
 *       -1 to use estimated cores minus one>.
 *     workLoad: the size of the work load, ie: number of possible prime
 *       numbers for each web worker to check per work assignment,
 *       (default: 100).
 *   }
 * }
 *
 * @param bits the number of bits for the prime number.
 * @param options the options to use.
 *          [algorithm] the algorithm to use (default: 'PRIMEINC').
 *          [prng] a custom crypto-secure pseudo-random number generator to use,
 *            that must define "getBytesSync".
 *
 * @return callback(err, num) called once the operation completes.
 */
          prime.generateProbablePrime = function(bits, options, callback) {
            if (typeof options === "function") {
              callback = options;
              options = {};
            }
            options = options || {};

            // default to PRIMEINC algorithm
            var algorithm = options.algorithm || "PRIMEINC";
            if (typeof algorithm === "string") {
              algorithm = { name: algorithm };
            }
            algorithm.options = algorithm.options || {};

            // create prng with api that matches BigInteger secure random
            var prng = options.prng || forge.random;
            var rng = {
              // x is an array to fill with bytes
              nextBytes: function(x) {
                var b = prng.getBytesSync(x.length);
                for (var i = 0; i < x.length; ++i) {
                  x[i] = b.charCodeAt(i);
                }
              }
            };

            if (algorithm.name === "PRIMEINC") {
              return primeincFindPrime(bits, rng, algorithm.options, callback);
            }

            throw new Error(
              "Invalid prime generation algorithm: " + algorithm.name
            );
          };

          function primeincFindPrime(bits, rng, options, callback) {
            if ("workers" in options) {
              return primeincFindPrimeWithWorkers(bits, rng, options, callback);
            }
            return primeincFindPrimeWithoutWorkers(
              bits,
              rng,
              options,
              callback
            );
          }

          function primeincFindPrimeWithoutWorkers(
            bits,
            rng,
            options,
            callback
          ) {
            // initialize random number
            var num = generateRandom(bits, rng);

            /* Note: All primes are of the form 30k+i for i < 30 and gcd(30, i)=1. The
  number we are given is always aligned at 30k + 1. Each time the number is
  determined not to be prime we add to get to the next 'i', eg: if the number
  was at 30k + 1 we add 6. */
            var deltaIdx = 0;

            // get required number of MR tests
            var mrTests = getMillerRabinTests(num.bitLength());
            if ("millerRabinTests" in options) {
              mrTests = options.millerRabinTests;
            }

            // find prime nearest to 'num' for maxBlockTime ms
            // 10 ms gives 5ms of leeway for other calculations before dropping
            // below 60fps (1000/60 == 16.67), but in reality, the number will
            // likely be higher due to an 'atomic' big int modPow
            var maxBlockTime = 10;
            if ("maxBlockTime" in options) {
              maxBlockTime = options.maxBlockTime;
            }

            _primeinc(
              num,
              bits,
              rng,
              deltaIdx,
              mrTests,
              maxBlockTime,
              callback
            );
          }

          function _primeinc(
            num,
            bits,
            rng,
            deltaIdx,
            mrTests,
            maxBlockTime,
            callback
          ) {
            var start = +new Date();
            do {
              // overflow, regenerate random number
              if (num.bitLength() > bits) {
                num = generateRandom(bits, rng);
              }
              // do primality test
              if (num.isProbablePrime(mrTests)) {
                return callback(null, num);
              }
              // get next potential prime
              num.dAddOffset(GCD_30_DELTA[deltaIdx++ % 8], 0);
            } while (maxBlockTime < 0 || +new Date() - start < maxBlockTime);

            // keep trying later
            forge.util.setImmediate(function() {
              _primeinc(
                num,
                bits,
                rng,
                deltaIdx,
                mrTests,
                maxBlockTime,
                callback
              );
            });
          }

          // NOTE: This algorithm is indeterminate in nature because workers
          // run in parallel looking at different segments of numbers. Even if this
          // algorithm is run twice with the same input from a predictable RNG, it
          // may produce different outputs.
          function primeincFindPrimeWithWorkers(bits, rng, options, callback) {
            // web workers unavailable
            if (typeof Worker === "undefined") {
              return primeincFindPrimeWithoutWorkers(
                bits,
                rng,
                options,
                callback
              );
            }

            // initialize random number
            var num = generateRandom(bits, rng);

            // use web workers to generate keys
            var numWorkers = options.workers;
            var workLoad = options.workLoad || 100;
            var range = workLoad * 30 / 8;
            var workerScript = options.workerScript || "forge/prime.worker.js";
            if (numWorkers === -1) {
              return forge.util.estimateCores(function(err, cores) {
                if (err) {
                  // default to 2
                  cores = 2;
                }
                numWorkers = cores - 1;
                generate();
              });
            }
            generate();

            function generate() {
              // require at least 1 worker
              numWorkers = Math.max(1, numWorkers);

              // TODO: consider optimizing by starting workers outside getPrime() ...
              // note that in order to clean up they will have to be made internally
              // asynchronous which may actually be slower

              // start workers immediately
              var workers = [];
              for (var i = 0; i < numWorkers; ++i) {
                // FIXME: fix path or use blob URLs
                workers[i] = new Worker(workerScript);
              }
              var running = numWorkers;

              // listen for requests from workers and assign ranges to find prime
              for (var i = 0; i < numWorkers; ++i) {
                workers[i].addEventListener("message", workerMessage);
              }

              /* Note: The distribution of random numbers is unknown. Therefore, each
    web worker is continuously allocated a range of numbers to check for a
    random number until one is found.

    Every 30 numbers will be checked just 8 times, because prime numbers
    have the form:

    30k+i, for i < 30 and gcd(30, i)=1 (there are 8 values of i for this)

    Therefore, if we want a web worker to run N checks before asking for
    a new range of numbers, each range must contain N*30/8 numbers.

    For 100 checks (workLoad), this is a range of 375. */

              var found = false;
              function workerMessage(e) {
                // ignore message, prime already found
                if (found) {
                  return;
                }

                --running;
                var data = e.data;
                if (data.found) {
                  // terminate all workers
                  for (var i = 0; i < workers.length; ++i) {
                    workers[i].terminate();
                  }
                  found = true;
                  return callback(null, new BigInteger(data.prime, 16));
                }

                // overflow, regenerate random number
                if (num.bitLength() > bits) {
                  num = generateRandom(bits, rng);
                }

                // assign new range to check
                var hex = num.toString(16);

                // start prime search
                e.target.postMessage({
                  hex: hex,
                  workLoad: workLoad
                });

                num.dAddOffset(range, 0);
              }
            }
          }

          /**
 * Generates a random number using the given number of bits and RNG.
 *
 * @param bits the number of bits for the number.
 * @param rng the random number generator to use.
 *
 * @return the random number.
 */
          function generateRandom(bits, rng) {
            var num = new BigInteger(bits, rng);
            // force MSB set
            var bits1 = bits - 1;
            if (!num.testBit(bits1)) {
              num.bitwiseTo(BigInteger.ONE.shiftLeft(bits1), op_or, num);
            }
            // align number on 30k+1 boundary
            num.dAddOffset(31 - num.mod(THIRTY).byteValue(), 0);
            return num;
          }

          /**
 * Returns the required number of Miller-Rabin tests to generate a
 * prime with an error probability of (1/2)^80.
 *
 * See Handbook of Applied Cryptography Chapter 4, Table 4.4.
 *
 * @param bits the bit size.
 *
 * @return the required number of iterations.
 */
          function getMillerRabinTests(bits) {
            if (bits <= 100) return 27;
            if (bits <= 150) return 18;
            if (bits <= 200) return 15;
            if (bits <= 250) return 12;
            if (bits <= 300) return 9;
            if (bits <= 350) return 8;
            if (bits <= 400) return 7;
            if (bits <= 500) return 6;
            if (bits <= 600) return 5;
            if (bits <= 800) return 4;
            if (bits <= 1250) return 3;
            return 2;
          }
        })();

        /***/
      },
      /* 75 */
      /***/ function(module, exports, __webpack_require__) {
        /**
 * Javascript implementation of PKCS#12.
 *
 * @author Dave Longley
 * @author Stefan Siegl <stesie@brokenpipe.de>
 *
 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
 *
 * The ASN.1 representation of PKCS#12 is as follows
 * (see ftp://ftp.rsasecurity.com/pub/pkcs/pkcs-12/pkcs-12-tc1.pdf for details)
 *
 * PFX ::= SEQUENCE {
 *   version  INTEGER {v3(3)}(v3,...),
 *   authSafe ContentInfo,
 *   macData  MacData OPTIONAL
 * }
 *
 * MacData ::= SEQUENCE {
 *   mac DigestInfo,
 *   macSalt OCTET STRING,
 *   iterations INTEGER DEFAULT 1
 * }
 * Note: The iterations default is for historical reasons and its use is
 * deprecated. A higher value, like 1024, is recommended.
 *
 * DigestInfo is defined in PKCS#7 as follows:
 *
 * DigestInfo ::= SEQUENCE {
 *   digestAlgorithm DigestAlgorithmIdentifier,
 *   digest Digest
 * }
 *
 * DigestAlgorithmIdentifier ::= AlgorithmIdentifier
 *
 * The AlgorithmIdentifier contains an Object Identifier (OID) and parameters
 * for the algorithm, if any. In the case of SHA1 there is none.
 *
 * AlgorithmIdentifer ::= SEQUENCE {
 *    algorithm OBJECT IDENTIFIER,
 *    parameters ANY DEFINED BY algorithm OPTIONAL
 * }
 *
 * Digest ::= OCTET STRING
 *
 *
 * ContentInfo ::= SEQUENCE {
 *   contentType ContentType,
 *   content     [0] EXPLICIT ANY DEFINED BY contentType OPTIONAL
 * }
 *
 * ContentType ::= OBJECT IDENTIFIER
 *
 * AuthenticatedSafe ::= SEQUENCE OF ContentInfo
 * -- Data if unencrypted
 * -- EncryptedData if password-encrypted
 * -- EnvelopedData if public key-encrypted
 *
 *
 * SafeContents ::= SEQUENCE OF SafeBag
 *
 * SafeBag ::= SEQUENCE {
 *   bagId     BAG-TYPE.&id ({PKCS12BagSet})
 *   bagValue  [0] EXPLICIT BAG-TYPE.&Type({PKCS12BagSet}{@bagId}),
 *   bagAttributes SET OF PKCS12Attribute OPTIONAL
 * }
 *
 * PKCS12Attribute ::= SEQUENCE {
 *   attrId ATTRIBUTE.&id ({PKCS12AttrSet}),
 *   attrValues SET OF ATTRIBUTE.&Type ({PKCS12AttrSet}{@attrId})
 * } -- This type is compatible with the X.500 type ’Attribute’
 *
 * PKCS12AttrSet ATTRIBUTE ::= {
 *   friendlyName | -- from PKCS #9
 *   localKeyId, -- from PKCS #9
 *   ... -- Other attributes are allowed
 * }
 *
 * CertBag ::= SEQUENCE {
 *   certId    BAG-TYPE.&id   ({CertTypes}),
 *   certValue [0] EXPLICIT BAG-TYPE.&Type ({CertTypes}{@certId})
 * }
 *
 * x509Certificate BAG-TYPE ::= {OCTET STRING IDENTIFIED BY {certTypes 1}}
 *   -- DER-encoded X.509 certificate stored in OCTET STRING
 *
 * sdsiCertificate BAG-TYPE ::= {IA5String IDENTIFIED BY {certTypes 2}}
 * -- Base64-encoded SDSI certificate stored in IA5String
 *
 * CertTypes BAG-TYPE ::= {
 *   x509Certificate |
 *   sdsiCertificate,
 *   ... -- For future extensions
 * }
 */
        var forge = __webpack_require__(1);
        __webpack_require__(11);
        __webpack_require__(21);
        __webpack_require__(16);
        __webpack_require__(76);
        __webpack_require__(67);
        __webpack_require__(9);
        __webpack_require__(31);
        __webpack_require__(22);
        __webpack_require__(3);
        __webpack_require__(47);

        // shortcut for asn.1 & PKI API
        var asn1 = forge.asn1;
        var pki = forge.pki;

        // shortcut for PKCS#12 API
        var p12 = (module.exports = forge.pkcs12 = forge.pkcs12 || {});

        var contentInfoValidator = {
          name: "ContentInfo",
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.SEQUENCE, // a ContentInfo
          constructed: true,
          value: [
            {
              name: "ContentInfo.contentType",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.OID,
              constructed: false,
              capture: "contentType"
            },
            {
              name: "ContentInfo.content",
              tagClass: asn1.Class.CONTEXT_SPECIFIC,
              constructed: true,
              captureAsn1: "content"
            }
          ]
        };

        var pfxValidator = {
          name: "PFX",
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.SEQUENCE,
          constructed: true,
          value: [
            {
              name: "PFX.version",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.INTEGER,
              constructed: false,
              capture: "version"
            },
            contentInfoValidator,
            {
              name: "PFX.macData",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.SEQUENCE,
              constructed: true,
              optional: true,
              captureAsn1: "mac",
              value: [
                {
                  name: "PFX.macData.mac",
                  tagClass: asn1.Class.UNIVERSAL,
                  type: asn1.Type.SEQUENCE, // DigestInfo
                  constructed: true,
                  value: [
                    {
                      name: "PFX.macData.mac.digestAlgorithm",
                      tagClass: asn1.Class.UNIVERSAL,
                      type: asn1.Type.SEQUENCE, // DigestAlgorithmIdentifier
                      constructed: true,
                      value: [
                        {
                          name: "PFX.macData.mac.digestAlgorithm.algorithm",
                          tagClass: asn1.Class.UNIVERSAL,
                          type: asn1.Type.OID,
                          constructed: false,
                          capture: "macAlgorithm"
                        },
                        {
                          name: "PFX.macData.mac.digestAlgorithm.parameters",
                          tagClass: asn1.Class.UNIVERSAL,
                          captureAsn1: "macAlgorithmParameters"
                        }
                      ]
                    },
                    {
                      name: "PFX.macData.mac.digest",
                      tagClass: asn1.Class.UNIVERSAL,
                      type: asn1.Type.OCTETSTRING,
                      constructed: false,
                      capture: "macDigest"
                    }
                  ]
                },
                {
                  name: "PFX.macData.macSalt",
                  tagClass: asn1.Class.UNIVERSAL,
                  type: asn1.Type.OCTETSTRING,
                  constructed: false,
                  capture: "macSalt"
                },
                {
                  name: "PFX.macData.iterations",
                  tagClass: asn1.Class.UNIVERSAL,
                  type: asn1.Type.INTEGER,
                  constructed: false,
                  optional: true,
                  capture: "macIterations"
                }
              ]
            }
          ]
        };

        var safeBagValidator = {
          name: "SafeBag",
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.SEQUENCE,
          constructed: true,
          value: [
            {
              name: "SafeBag.bagId",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.OID,
              constructed: false,
              capture: "bagId"
            },
            {
              name: "SafeBag.bagValue",
              tagClass: asn1.Class.CONTEXT_SPECIFIC,
              constructed: true,
              captureAsn1: "bagValue"
            },
            {
              name: "SafeBag.bagAttributes",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.SET,
              constructed: true,
              optional: true,
              capture: "bagAttributes"
            }
          ]
        };

        var attributeValidator = {
          name: "Attribute",
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.SEQUENCE,
          constructed: true,
          value: [
            {
              name: "Attribute.attrId",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.OID,
              constructed: false,
              capture: "oid"
            },
            {
              name: "Attribute.attrValues",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.SET,
              constructed: true,
              capture: "values"
            }
          ]
        };

        var certBagValidator = {
          name: "CertBag",
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.SEQUENCE,
          constructed: true,
          value: [
            {
              name: "CertBag.certId",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.OID,
              constructed: false,
              capture: "certId"
            },
            {
              name: "CertBag.certValue",
              tagClass: asn1.Class.CONTEXT_SPECIFIC,
              constructed: true,
              /* So far we only support X.509 certificates (which are wrapped in
       an OCTET STRING, hence hard code that here). */
              value: [
                {
                  name: "CertBag.certValue[0]",
                  tagClass: asn1.Class.UNIVERSAL,
                  type: asn1.Class.OCTETSTRING,
                  constructed: false,
                  capture: "cert"
                }
              ]
            }
          ]
        };

        /**
 * Search SafeContents structure for bags with matching attributes.
 *
 * The search can optionally be narrowed by a certain bag type.
 *
 * @param safeContents the SafeContents structure to search in.
 * @param attrName the name of the attribute to compare against.
 * @param attrValue the attribute value to search for.
 * @param [bagType] bag type to narrow search by.
 *
 * @return an array of matching bags.
 */
        function _getBagsByAttribute(
          safeContents,
          attrName,
          attrValue,
          bagType
        ) {
          var result = [];

          for (var i = 0; i < safeContents.length; i++) {
            for (var j = 0; j < safeContents[i].safeBags.length; j++) {
              var bag = safeContents[i].safeBags[j];
              if (bagType !== undefined && bag.type !== bagType) {
                continue;
              }
              // only filter by bag type, no attribute specified
              if (attrName === null) {
                result.push(bag);
                continue;
              }
              if (
                bag.attributes[attrName] !== undefined &&
                bag.attributes[attrName].indexOf(attrValue) >= 0
              ) {
                result.push(bag);
              }
            }
          }

          return result;
        }

        /**
 * Converts a PKCS#12 PFX in ASN.1 notation into a PFX object.
 *
 * @param obj The PKCS#12 PFX in ASN.1 notation.
 * @param strict true to use strict DER decoding, false not to (default: true).
 * @param {String} password Password to decrypt with (optional).
 *
 * @return PKCS#12 PFX object.
 */
        p12.pkcs12FromAsn1 = function(obj, strict, password) {
          // handle args
          if (typeof strict === "string") {
            password = strict;
            strict = true;
          } else if (strict === undefined) {
            strict = true;
          }

          // validate PFX and capture data
          var capture = {};
          var errors = [];
          if (!asn1.validate(obj, pfxValidator, capture, errors)) {
            var error = new Error(
              "Cannot read PKCS#12 PFX. " +
                "ASN.1 object is not an PKCS#12 PFX."
            );
            error.errors = error;
            throw error;
          }

          var pfx = {
            version: capture.version.charCodeAt(0),
            safeContents: [],

            /**
     * Gets bags with matching attributes.
     *
     * @param filter the attributes to filter by:
     *          [localKeyId] the localKeyId to search for.
     *          [localKeyIdHex] the localKeyId in hex to search for.
     *          [friendlyName] the friendly name to search for.
     *          [bagType] bag type to narrow each attribute search by.
     *
     * @return a map of attribute type to an array of matching bags or, if no
     *           attribute was given but a bag type, the map key will be the
     *           bag type.
     */
            getBags: function(filter) {
              var rval = {};

              var localKeyId;
              if ("localKeyId" in filter) {
                localKeyId = filter.localKeyId;
              } else if ("localKeyIdHex" in filter) {
                localKeyId = forge.util.hexToBytes(filter.localKeyIdHex);
              }

              // filter on bagType only
              if (
                localKeyId === undefined &&
                !("friendlyName" in filter) &&
                "bagType" in filter
              ) {
                rval[filter.bagType] = _getBagsByAttribute(
                  pfx.safeContents,
                  null,
                  null,
                  filter.bagType
                );
              }

              if (localKeyId !== undefined) {
                rval.localKeyId = _getBagsByAttribute(
                  pfx.safeContents,
                  "localKeyId",
                  localKeyId,
                  filter.bagType
                );
              }
              if ("friendlyName" in filter) {
                rval.friendlyName = _getBagsByAttribute(
                  pfx.safeContents,
                  "friendlyName",
                  filter.friendlyName,
                  filter.bagType
                );
              }

              return rval;
            },

            /**
     * DEPRECATED: use getBags() instead.
     *
     * Get bags with matching friendlyName attribute.
     *
     * @param friendlyName the friendly name to search for.
     * @param [bagType] bag type to narrow search by.
     *
     * @return an array of bags with matching friendlyName attribute.
     */
            getBagsByFriendlyName: function(friendlyName, bagType) {
              return _getBagsByAttribute(
                pfx.safeContents,
                "friendlyName",
                friendlyName,
                bagType
              );
            },

            /**
     * DEPRECATED: use getBags() instead.
     *
     * Get bags with matching localKeyId attribute.
     *
     * @param localKeyId the localKeyId to search for.
     * @param [bagType] bag type to narrow search by.
     *
     * @return an array of bags with matching localKeyId attribute.
     */
            getBagsByLocalKeyId: function(localKeyId, bagType) {
              return _getBagsByAttribute(
                pfx.safeContents,
                "localKeyId",
                localKeyId,
                bagType
              );
            }
          };

          if (capture.version.charCodeAt(0) !== 3) {
            var error = new Error(
              "PKCS#12 PFX of version other than 3 not supported."
            );
            error.version = capture.version.charCodeAt(0);
            throw error;
          }

          if (asn1.derToOid(capture.contentType) !== pki.oids.data) {
            var error = new Error(
              "Only PKCS#12 PFX in password integrity mode supported."
            );
            error.oid = asn1.derToOid(capture.contentType);
            throw error;
          }

          var data = capture.content.value[0];
          if (
            data.tagClass !== asn1.Class.UNIVERSAL ||
            data.type !== asn1.Type.OCTETSTRING
          ) {
            throw new Error(
              "PKCS#12 authSafe content data is not an OCTET STRING."
            );
          }
          data = _decodePkcs7Data(data);

          // check for MAC
          if (capture.mac) {
            var md = null;
            var macKeyBytes = 0;
            var macAlgorithm = asn1.derToOid(capture.macAlgorithm);
            switch (macAlgorithm) {
              case pki.oids.sha1:
                md = forge.md.sha1.create();
                macKeyBytes = 20;
                break;
              case pki.oids.sha256:
                md = forge.md.sha256.create();
                macKeyBytes = 32;
                break;
              case pki.oids.sha384:
                md = forge.md.sha384.create();
                macKeyBytes = 48;
                break;
              case pki.oids.sha512:
                md = forge.md.sha512.create();
                macKeyBytes = 64;
                break;
              case pki.oids.md5:
                md = forge.md.md5.create();
                macKeyBytes = 16;
                break;
            }
            if (md === null) {
              throw new Error(
                "PKCS#12 uses unsupported MAC algorithm: " + macAlgorithm
              );
            }

            // verify MAC (iterations default to 1)
            var macSalt = new forge.util.ByteBuffer(capture.macSalt);
            var macIterations =
              "macIterations" in capture
                ? parseInt(forge.util.bytesToHex(capture.macIterations), 16)
                : 1;
            var macKey = p12.generateKey(
              password,
              macSalt,
              3,
              macIterations,
              macKeyBytes,
              md
            );
            var mac = forge.hmac.create();
            mac.start(md, macKey);
            mac.update(data.value);
            var macValue = mac.getMac();
            if (macValue.getBytes() !== capture.macDigest) {
              throw new Error(
                "PKCS#12 MAC could not be verified. Invalid password?"
              );
            }
          }

          _decodeAuthenticatedSafe(pfx, data.value, strict, password);
          return pfx;
        };

        /**
 * Decodes PKCS#7 Data. PKCS#7 (RFC 2315) defines "Data" as an OCTET STRING,
 * but it is sometimes an OCTET STRING that is composed/constructed of chunks,
 * each its own OCTET STRING. This is BER-encoding vs. DER-encoding. This
 * function transforms this corner-case into the usual simple,
 * non-composed/constructed OCTET STRING.
 *
 * This function may be moved to ASN.1 at some point to better deal with
 * more BER-encoding issues, should they arise.
 *
 * @param data the ASN.1 Data object to transform.
 */
        function _decodePkcs7Data(data) {
          // handle special case of "chunked" data content: an octet string composed
          // of other octet strings
          if (data.composed || data.constructed) {
            var value = forge.util.createBuffer();
            for (var i = 0; i < data.value.length; ++i) {
              value.putBytes(data.value[i].value);
            }
            data.composed = data.constructed = false;
            data.value = value.getBytes();
          }
          return data;
        }

        /**
 * Decode PKCS#12 AuthenticatedSafe (BER encoded) into PFX object.
 *
 * The AuthenticatedSafe is a BER-encoded SEQUENCE OF ContentInfo.
 *
 * @param pfx The PKCS#12 PFX object to fill.
 * @param {String} authSafe BER-encoded AuthenticatedSafe.
 * @param strict true to use strict DER decoding, false not to.
 * @param {String} password Password to decrypt with (optional).
 */
        function _decodeAuthenticatedSafe(pfx, authSafe, strict, password) {
          authSafe = asn1.fromDer(
            authSafe,
            strict
          ); /* actually it's BER encoded */

          if (
            authSafe.tagClass !== asn1.Class.UNIVERSAL ||
            authSafe.type !== asn1.Type.SEQUENCE ||
            authSafe.constructed !== true
          ) {
            throw new Error(
              "PKCS#12 AuthenticatedSafe expected to be a " +
                "SEQUENCE OF ContentInfo"
            );
          }

          for (var i = 0; i < authSafe.value.length; i++) {
            var contentInfo = authSafe.value[i];

            // validate contentInfo and capture data
            var capture = {};
            var errors = [];
            if (
              !asn1.validate(contentInfo, contentInfoValidator, capture, errors)
            ) {
              var error = new Error("Cannot read ContentInfo.");
              error.errors = errors;
              throw error;
            }

            var obj = {
              encrypted: false
            };
            var safeContents = null;
            var data = capture.content.value[0];
            switch (asn1.derToOid(capture.contentType)) {
              case pki.oids.data:
                if (
                  data.tagClass !== asn1.Class.UNIVERSAL ||
                  data.type !== asn1.Type.OCTETSTRING
                ) {
                  throw new Error(
                    "PKCS#12 SafeContents Data is not an OCTET STRING."
                  );
                }
                safeContents = _decodePkcs7Data(data).value;
                break;
              case pki.oids.encryptedData:
                safeContents = _decryptSafeContents(data, password);
                obj.encrypted = true;
                break;
              default:
                var error = new Error("Unsupported PKCS#12 contentType.");
                error.contentType = asn1.derToOid(capture.contentType);
                throw error;
            }

            obj.safeBags = _decodeSafeContents(safeContents, strict, password);
            pfx.safeContents.push(obj);
          }
        }

        /**
 * Decrypt PKCS#7 EncryptedData structure.
 *
 * @param data ASN.1 encoded EncryptedContentInfo object.
 * @param password The user-provided password.
 *
 * @return The decrypted SafeContents (ASN.1 object).
 */
        function _decryptSafeContents(data, password) {
          var capture = {};
          var errors = [];
          if (
            !asn1.validate(
              data,
              forge.pkcs7.asn1.encryptedDataValidator,
              capture,
              errors
            )
          ) {
            var error = new Error("Cannot read EncryptedContentInfo.");
            error.errors = errors;
            throw error;
          }

          var oid = asn1.derToOid(capture.contentType);
          if (oid !== pki.oids.data) {
            var error = new Error(
              "PKCS#12 EncryptedContentInfo ContentType is not Data."
            );
            error.oid = oid;
            throw error;
          }

          // get cipher
          oid = asn1.derToOid(capture.encAlgorithm);
          var cipher = pki.pbe.getCipher(oid, capture.encParameter, password);

          // get encrypted data
          var encryptedContentAsn1 = _decodePkcs7Data(
            capture.encryptedContentAsn1
          );
          var encrypted = forge.util.createBuffer(encryptedContentAsn1.value);

          cipher.update(encrypted);
          if (!cipher.finish()) {
            throw new Error("Failed to decrypt PKCS#12 SafeContents.");
          }

          return cipher.output.getBytes();
        }

        /**
 * Decode PKCS#12 SafeContents (BER-encoded) into array of Bag objects.
 *
 * The safeContents is a BER-encoded SEQUENCE OF SafeBag.
 *
 * @param {String} safeContents BER-encoded safeContents.
 * @param strict true to use strict DER decoding, false not to.
 * @param {String} password Password to decrypt with (optional).
 *
 * @return {Array} Array of Bag objects.
 */
        function _decodeSafeContents(safeContents, strict, password) {
          // if strict and no safe contents, return empty safes
          if (!strict && safeContents.length === 0) {
            return [];
          }

          // actually it's BER-encoded
          safeContents = asn1.fromDer(safeContents, strict);

          if (
            safeContents.tagClass !== asn1.Class.UNIVERSAL ||
            safeContents.type !== asn1.Type.SEQUENCE ||
            safeContents.constructed !== true
          ) {
            throw new Error(
              "PKCS#12 SafeContents expected to be a SEQUENCE OF SafeBag."
            );
          }

          var res = [];
          for (var i = 0; i < safeContents.value.length; i++) {
            var safeBag = safeContents.value[i];

            // validate SafeBag and capture data
            var capture = {};
            var errors = [];
            if (!asn1.validate(safeBag, safeBagValidator, capture, errors)) {
              var error = new Error("Cannot read SafeBag.");
              error.errors = errors;
              throw error;
            }

            /* Create bag object and push to result array. */
            var bag = {
              type: asn1.derToOid(capture.bagId),
              attributes: _decodeBagAttributes(capture.bagAttributes)
            };
            res.push(bag);

            var validator, decoder;
            var bagAsn1 = capture.bagValue.value[0];
            switch (bag.type) {
              case pki.oids.pkcs8ShroudedKeyBag:
                /* bagAsn1 has a EncryptedPrivateKeyInfo, which we need to decrypt.
           Afterwards we can handle it like a keyBag,
           which is a PrivateKeyInfo. */
                bagAsn1 = pki.decryptPrivateKeyInfo(bagAsn1, password);
                if (bagAsn1 === null) {
                  throw new Error(
                    "Unable to decrypt PKCS#8 ShroudedKeyBag, wrong password?"
                  );
                }

              /* fall through */
              case pki.oids.keyBag:
                /* A PKCS#12 keyBag is a simple PrivateKeyInfo as understood by our
           PKI module, hence we don't have to do validation/capturing here,
           just pass what we already got. */
                try {
                  bag.key = pki.privateKeyFromAsn1(bagAsn1);
                } catch (e) {
                  // ignore unknown key type, pass asn1 value
                  bag.key = null;
                  bag.asn1 = bagAsn1;
                }
                continue; /* Nothing more to do. */

              case pki.oids.certBag:
                /* A PKCS#12 certBag can wrap both X.509 and sdsi certificates.
           Therefore put the SafeBag content through another validator to
           capture the fields.  Afterwards check & store the results. */
                validator = certBagValidator;
                decoder = function() {
                  if (
                    asn1.derToOid(capture.certId) !== pki.oids.x509Certificate
                  ) {
                    var error = new Error(
                      "Unsupported certificate type, only X.509 supported."
                    );
                    error.oid = asn1.derToOid(capture.certId);
                    throw error;
                  }

                  // true=produce cert hash
                  var certAsn1 = asn1.fromDer(capture.cert, strict);
                  try {
                    bag.cert = pki.certificateFromAsn1(certAsn1, true);
                  } catch (e) {
                    // ignore unknown cert type, pass asn1 value
                    bag.cert = null;
                    bag.asn1 = certAsn1;
                  }
                };
                break;

              default:
                var error = new Error("Unsupported PKCS#12 SafeBag type.");
                error.oid = bag.type;
                throw error;
            }

            /* Validate SafeBag value (i.e. CertBag, etc.) and capture data if needed. */
            if (
              validator !== undefined &&
              !asn1.validate(bagAsn1, validator, capture, errors)
            ) {
              var error = new Error("Cannot read PKCS#12 " + validator.name);
              error.errors = errors;
              throw error;
            }

            /* Call decoder function from above to store the results. */
            decoder();
          }

          return res;
        }

        /**
 * Decode PKCS#12 SET OF PKCS12Attribute into JavaScript object.
 *
 * @param attributes SET OF PKCS12Attribute (ASN.1 object).
 *
 * @return the decoded attributes.
 */
        function _decodeBagAttributes(attributes) {
          var decodedAttrs = {};

          if (attributes !== undefined) {
            for (var i = 0; i < attributes.length; ++i) {
              var capture = {};
              var errors = [];
              if (
                !asn1.validate(
                  attributes[i],
                  attributeValidator,
                  capture,
                  errors
                )
              ) {
                var error = new Error("Cannot read PKCS#12 BagAttribute.");
                error.errors = errors;
                throw error;
              }

              var oid = asn1.derToOid(capture.oid);
              if (pki.oids[oid] === undefined) {
                // unsupported attribute type, ignore.
                continue;
              }

              decodedAttrs[pki.oids[oid]] = [];
              for (var j = 0; j < capture.values.length; ++j) {
                decodedAttrs[pki.oids[oid]].push(capture.values[j].value);
              }
            }
          }

          return decodedAttrs;
        }

        /**
 * Wraps a private key and certificate in a PKCS#12 PFX wrapper. If a
 * password is provided then the private key will be encrypted.
 *
 * An entire certificate chain may also be included. To do this, pass
 * an array for the "cert" parameter where the first certificate is
 * the one that is paired with the private key and each subsequent one
 * verifies the previous one. The certificates may be in PEM format or
 * have been already parsed by Forge.
 *
 * @todo implement password-based-encryption for the whole package
 *
 * @param key the private key.
 * @param cert the certificate (may be an array of certificates in order
 *          to specify a certificate chain).
 * @param password the password to use, null for none.
 * @param options:
 *          algorithm the encryption algorithm to use
 *            ('aes128', 'aes192', 'aes256', '3des'), defaults to 'aes128'.
 *          count the iteration count to use.
 *          saltSize the salt size to use.
 *          useMac true to include a MAC, false not to, defaults to true.
 *          localKeyId the local key ID to use, in hex.
 *          friendlyName the friendly name to use.
 *          generateLocalKeyId true to generate a random local key ID,
 *            false not to, defaults to true.
 *
 * @return the PKCS#12 PFX ASN.1 object.
 */
        p12.toPkcs12Asn1 = function(key, cert, password, options) {
          // set default options
          options = options || {};
          options.saltSize = options.saltSize || 8;
          options.count = options.count || 2048;
          options.algorithm =
            options.algorithm || options.encAlgorithm || "aes128";
          if (!("useMac" in options)) {
            options.useMac = true;
          }
          if (!("localKeyId" in options)) {
            options.localKeyId = null;
          }
          if (!("generateLocalKeyId" in options)) {
            options.generateLocalKeyId = true;
          }

          var localKeyId = options.localKeyId;
          var bagAttrs;
          if (localKeyId !== null) {
            localKeyId = forge.util.hexToBytes(localKeyId);
          } else if (options.generateLocalKeyId) {
            // use SHA-1 of paired cert, if available
            if (cert) {
              var pairedCert = forge.util.isArray(cert) ? cert[0] : cert;
              if (typeof pairedCert === "string") {
                pairedCert = pki.certificateFromPem(pairedCert);
              }
              var sha1 = forge.md.sha1.create();
              sha1.update(
                asn1.toDer(pki.certificateToAsn1(pairedCert)).getBytes()
              );
              localKeyId = sha1.digest().getBytes();
            } else {
              // FIXME: consider using SHA-1 of public key (which can be generated
              // from private key components), see: cert.generateSubjectKeyIdentifier
              // generate random bytes
              localKeyId = forge.random.getBytes(20);
            }
          }

          var attrs = [];
          if (localKeyId !== null) {
            attrs.push(
              // localKeyID
              asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
                // attrId
                asn1.create(
                  asn1.Class.UNIVERSAL,
                  asn1.Type.OID,
                  false,
                  asn1.oidToDer(pki.oids.localKeyId).getBytes()
                ),
                // attrValues
                asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, [
                  asn1.create(
                    asn1.Class.UNIVERSAL,
                    asn1.Type.OCTETSTRING,
                    false,
                    localKeyId
                  )
                ])
              ])
            );
          }
          if ("friendlyName" in options) {
            attrs.push(
              // friendlyName
              asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
                // attrId
                asn1.create(
                  asn1.Class.UNIVERSAL,
                  asn1.Type.OID,
                  false,
                  asn1.oidToDer(pki.oids.friendlyName).getBytes()
                ),
                // attrValues
                asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, [
                  asn1.create(
                    asn1.Class.UNIVERSAL,
                    asn1.Type.BMPSTRING,
                    false,
                    options.friendlyName
                  )
                ])
              ])
            );
          }

          if (attrs.length > 0) {
            bagAttrs = asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.SET,
              true,
              attrs
            );
          }

          // collect contents for AuthenticatedSafe
          var contents = [];

          // create safe bag(s) for certificate chain
          var chain = [];
          if (cert !== null) {
            if (forge.util.isArray(cert)) {
              chain = cert;
            } else {
              chain = [cert];
            }
          }

          var certSafeBags = [];
          for (var i = 0; i < chain.length; ++i) {
            // convert cert from PEM as necessary
            cert = chain[i];
            if (typeof cert === "string") {
              cert = pki.certificateFromPem(cert);
            }

            // SafeBag
            var certBagAttrs = i === 0 ? bagAttrs : undefined;
            var certAsn1 = pki.certificateToAsn1(cert);
            var certSafeBag = asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.SEQUENCE,
              true,
              [
                // bagId
                asn1.create(
                  asn1.Class.UNIVERSAL,
                  asn1.Type.OID,
                  false,
                  asn1.oidToDer(pki.oids.certBag).getBytes()
                ),
                // bagValue
                asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
                  // CertBag
                  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
                    // certId
                    asn1.create(
                      asn1.Class.UNIVERSAL,
                      asn1.Type.OID,
                      false,
                      asn1.oidToDer(pki.oids.x509Certificate).getBytes()
                    ),
                    // certValue (x509Certificate)
                    asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
                      asn1.create(
                        asn1.Class.UNIVERSAL,
                        asn1.Type.OCTETSTRING,
                        false,
                        asn1.toDer(certAsn1).getBytes()
                      )
                    ])
                  ])
                ]),
                // bagAttributes (OPTIONAL)
                certBagAttrs
              ]
            );
            certSafeBags.push(certSafeBag);
          }

          if (certSafeBags.length > 0) {
            // SafeContents
            var certSafeContents = asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.SEQUENCE,
              true,
              certSafeBags
            );

            // ContentInfo
            var certCI =
              // PKCS#7 ContentInfo
              asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
                // contentType
                asn1.create(
                  asn1.Class.UNIVERSAL,
                  asn1.Type.OID,
                  false,
                  // OID for the content type is 'data'
                  asn1.oidToDer(pki.oids.data).getBytes()
                ),
                // content
                asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
                  asn1.create(
                    asn1.Class.UNIVERSAL,
                    asn1.Type.OCTETSTRING,
                    false,
                    asn1.toDer(certSafeContents).getBytes()
                  )
                ])
              ]);
            contents.push(certCI);
          }

          // create safe contents for private key
          var keyBag = null;
          if (key !== null) {
            // SafeBag
            var pkAsn1 = pki.wrapRsaPrivateKey(pki.privateKeyToAsn1(key));
            if (password === null) {
              // no encryption
              keyBag = asn1.create(
                asn1.Class.UNIVERSAL,
                asn1.Type.SEQUENCE,
                true,
                [
                  // bagId
                  asn1.create(
                    asn1.Class.UNIVERSAL,
                    asn1.Type.OID,
                    false,
                    asn1.oidToDer(pki.oids.keyBag).getBytes()
                  ),
                  // bagValue
                  asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
                    // PrivateKeyInfo
                    pkAsn1
                  ]),
                  // bagAttributes (OPTIONAL)
                  bagAttrs
                ]
              );
            } else {
              // encrypted PrivateKeyInfo
              keyBag = asn1.create(
                asn1.Class.UNIVERSAL,
                asn1.Type.SEQUENCE,
                true,
                [
                  // bagId
                  asn1.create(
                    asn1.Class.UNIVERSAL,
                    asn1.Type.OID,
                    false,
                    asn1.oidToDer(pki.oids.pkcs8ShroudedKeyBag).getBytes()
                  ),
                  // bagValue
                  asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
                    // EncryptedPrivateKeyInfo
                    pki.encryptPrivateKeyInfo(pkAsn1, password, options)
                  ]),
                  // bagAttributes (OPTIONAL)
                  bagAttrs
                ]
              );
            }

            // SafeContents
            var keySafeContents = asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.SEQUENCE,
              true,
              [keyBag]
            );

            // ContentInfo
            var keyCI =
              // PKCS#7 ContentInfo
              asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
                // contentType
                asn1.create(
                  asn1.Class.UNIVERSAL,
                  asn1.Type.OID,
                  false,
                  // OID for the content type is 'data'
                  asn1.oidToDer(pki.oids.data).getBytes()
                ),
                // content
                asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
                  asn1.create(
                    asn1.Class.UNIVERSAL,
                    asn1.Type.OCTETSTRING,
                    false,
                    asn1.toDer(keySafeContents).getBytes()
                  )
                ])
              ]);
            contents.push(keyCI);
          }

          // create AuthenticatedSafe by stringing together the contents
          var safe = asn1.create(
            asn1.Class.UNIVERSAL,
            asn1.Type.SEQUENCE,
            true,
            contents
          );

          var macData;
          if (options.useMac) {
            // MacData
            var sha1 = forge.md.sha1.create();
            var macSalt = new forge.util.ByteBuffer(
              forge.random.getBytes(options.saltSize)
            );
            var count = options.count;
            // 160-bit key
            var key = p12.generateKey(password, macSalt, 3, count, 20);
            var mac = forge.hmac.create();
            mac.start(sha1, key);
            mac.update(asn1.toDer(safe).getBytes());
            var macValue = mac.getMac();
            macData = asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.SEQUENCE,
              true,
              [
                // mac DigestInfo
                asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
                  // digestAlgorithm
                  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
                    // algorithm = SHA-1
                    asn1.create(
                      asn1.Class.UNIVERSAL,
                      asn1.Type.OID,
                      false,
                      asn1.oidToDer(pki.oids.sha1).getBytes()
                    ),
                    // parameters = Null
                    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, "")
                  ]),
                  // digest
                  asn1.create(
                    asn1.Class.UNIVERSAL,
                    asn1.Type.OCTETSTRING,
                    false,
                    macValue.getBytes()
                  )
                ]),
                // macSalt OCTET STRING
                asn1.create(
                  asn1.Class.UNIVERSAL,
                  asn1.Type.OCTETSTRING,
                  false,
                  macSalt.getBytes()
                ),
                // iterations INTEGER (XXX: Only support count < 65536)
                asn1.create(
                  asn1.Class.UNIVERSAL,
                  asn1.Type.INTEGER,
                  false,
                  asn1.integerToDer(count).getBytes()
                )
              ]
            );
          }

          // PFX
          return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
            // version (3)
            asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.INTEGER,
              false,
              asn1.integerToDer(3).getBytes()
            ),
            // PKCS#7 ContentInfo
            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
              // contentType
              asn1.create(
                asn1.Class.UNIVERSAL,
                asn1.Type.OID,
                false,
                // OID for the content type is 'data'
                asn1.oidToDer(pki.oids.data).getBytes()
              ),
              // content
              asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
                asn1.create(
                  asn1.Class.UNIVERSAL,
                  asn1.Type.OCTETSTRING,
                  false,
                  asn1.toDer(safe).getBytes()
                )
              ])
            ]),
            macData
          ]);
        };

        /**
 * Derives a PKCS#12 key.
 *
 * @param password the password to derive the key material from, null or
 *          undefined for none.
 * @param salt the salt, as a ByteBuffer, to use.
 * @param id the PKCS#12 ID byte (1 = key material, 2 = IV, 3 = MAC).
 * @param iter the iteration count.
 * @param n the number of bytes to derive from the password.
 * @param md the message digest to use, defaults to SHA-1.
 *
 * @return a ByteBuffer with the bytes derived from the password.
 */
        p12.generateKey = forge.pbe.generatePkcs12Key;

        /***/
      },
      /* 76 */
      /***/ function(module, exports, __webpack_require__) {
        /**
 * Javascript implementation of ASN.1 validators for PKCS#7 v1.5.
 *
 * @author Dave Longley
 * @author Stefan Siegl
 *
 * Copyright (c) 2012-2015 Digital Bazaar, Inc.
 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
 *
 * The ASN.1 representation of PKCS#7 is as follows
 * (see RFC #2315 for details, http://www.ietf.org/rfc/rfc2315.txt):
 *
 * A PKCS#7 message consists of a ContentInfo on root level, which may
 * contain any number of further ContentInfo nested into it.
 *
 * ContentInfo ::= SEQUENCE {
 *   contentType                ContentType,
 *   content               [0]  EXPLICIT ANY DEFINED BY contentType OPTIONAL
 * }
 *
 * ContentType ::= OBJECT IDENTIFIER
 *
 * EnvelopedData ::= SEQUENCE {
 *   version                    Version,
 *   recipientInfos             RecipientInfos,
 *   encryptedContentInfo       EncryptedContentInfo
 * }
 *
 * EncryptedData ::= SEQUENCE {
 *   version                    Version,
 *   encryptedContentInfo       EncryptedContentInfo
 * }
 *
 * id-signedData OBJECT IDENTIFIER ::= { iso(1) member-body(2)
 *   us(840) rsadsi(113549) pkcs(1) pkcs7(7) 2 }
 *
 * SignedData ::= SEQUENCE {
 *   version           INTEGER,
 *   digestAlgorithms  DigestAlgorithmIdentifiers,
 *   contentInfo       ContentInfo,
 *   certificates      [0] IMPLICIT Certificates OPTIONAL,
 *   crls              [1] IMPLICIT CertificateRevocationLists OPTIONAL,
 *   signerInfos       SignerInfos
 * }
 *
 * SignerInfos ::= SET OF SignerInfo
 *
 * SignerInfo ::= SEQUENCE {
 *   version                    Version,
 *   issuerAndSerialNumber      IssuerAndSerialNumber,
 *   digestAlgorithm            DigestAlgorithmIdentifier,
 *   authenticatedAttributes    [0] IMPLICIT Attributes OPTIONAL,
 *   digestEncryptionAlgorithm  DigestEncryptionAlgorithmIdentifier,
 *   encryptedDigest            EncryptedDigest,
 *   unauthenticatedAttributes  [1] IMPLICIT Attributes OPTIONAL
 * }
 *
 * EncryptedDigest ::= OCTET STRING
 *
 * Attributes ::= SET OF Attribute
 *
 * Attribute ::= SEQUENCE {
 *   attrType    OBJECT IDENTIFIER,
 *   attrValues  SET OF AttributeValue
 * }
 *
 * AttributeValue ::= ANY
 *
 * Version ::= INTEGER
 *
 * RecipientInfos ::= SET OF RecipientInfo
 *
 * EncryptedContentInfo ::= SEQUENCE {
 *   contentType                 ContentType,
 *   contentEncryptionAlgorithm  ContentEncryptionAlgorithmIdentifier,
 *   encryptedContent       [0]  IMPLICIT EncryptedContent OPTIONAL
 * }
 *
 * ContentEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier
 *
 * The AlgorithmIdentifier contains an Object Identifier (OID) and parameters
 * for the algorithm, if any. In the case of AES and DES3, there is only one,
 * the IV.
 *
 * AlgorithmIdentifer ::= SEQUENCE {
 *    algorithm OBJECT IDENTIFIER,
 *    parameters ANY DEFINED BY algorithm OPTIONAL
 * }
 *
 * EncryptedContent ::= OCTET STRING
 *
 * RecipientInfo ::= SEQUENCE {
 *   version                     Version,
 *   issuerAndSerialNumber       IssuerAndSerialNumber,
 *   keyEncryptionAlgorithm      KeyEncryptionAlgorithmIdentifier,
 *   encryptedKey                EncryptedKey
 * }
 *
 * IssuerAndSerialNumber ::= SEQUENCE {
 *   issuer                      Name,
 *   serialNumber                CertificateSerialNumber
 * }
 *
 * CertificateSerialNumber ::= INTEGER
 *
 * KeyEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier
 *
 * EncryptedKey ::= OCTET STRING
 */
        var forge = __webpack_require__(1);
        __webpack_require__(11);
        __webpack_require__(3);

        // shortcut for ASN.1 API
        var asn1 = forge.asn1;

        // shortcut for PKCS#7 API
        var p7v = (module.exports = forge.pkcs7asn1 = forge.pkcs7asn1 || {});
        forge.pkcs7 = forge.pkcs7 || {};
        forge.pkcs7.asn1 = p7v;

        var contentInfoValidator = {
          name: "ContentInfo",
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.SEQUENCE,
          constructed: true,
          value: [
            {
              name: "ContentInfo.ContentType",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.OID,
              constructed: false,
              capture: "contentType"
            },
            {
              name: "ContentInfo.content",
              tagClass: asn1.Class.CONTEXT_SPECIFIC,
              type: 0,
              constructed: true,
              optional: true,
              captureAsn1: "content"
            }
          ]
        };
        p7v.contentInfoValidator = contentInfoValidator;

        var encryptedContentInfoValidator = {
          name: "EncryptedContentInfo",
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.SEQUENCE,
          constructed: true,
          value: [
            {
              name: "EncryptedContentInfo.contentType",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.OID,
              constructed: false,
              capture: "contentType"
            },
            {
              name: "EncryptedContentInfo.contentEncryptionAlgorithm",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.SEQUENCE,
              constructed: true,
              value: [
                {
                  name:
                    "EncryptedContentInfo.contentEncryptionAlgorithm.algorithm",
                  tagClass: asn1.Class.UNIVERSAL,
                  type: asn1.Type.OID,
                  constructed: false,
                  capture: "encAlgorithm"
                },
                {
                  name:
                    "EncryptedContentInfo.contentEncryptionAlgorithm.parameter",
                  tagClass: asn1.Class.UNIVERSAL,
                  captureAsn1: "encParameter"
                }
              ]
            },
            {
              name: "EncryptedContentInfo.encryptedContent",
              tagClass: asn1.Class.CONTEXT_SPECIFIC,
              type: 0,
              /* The PKCS#7 structure output by OpenSSL somewhat differs from what
     * other implementations do generate.
     *
     * OpenSSL generates a structure like this:
     * SEQUENCE {
     *    ...
     *    [0]
     *       26 DA 67 D2 17 9C 45 3C B1 2A A8 59 2F 29 33 38
     *       C3 C3 DF 86 71 74 7A 19 9F 40 D0 29 BE 85 90 45
     *       ...
     * }
     *
     * Whereas other implementations (and this PKCS#7 module) generate:
     * SEQUENCE {
     *    ...
     *    [0] {
     *       OCTET STRING
     *          26 DA 67 D2 17 9C 45 3C B1 2A A8 59 2F 29 33 38
     *          C3 C3 DF 86 71 74 7A 19 9F 40 D0 29 BE 85 90 45
     *          ...
     *    }
     * }
     *
     * In order to support both, we just capture the context specific
     * field here.  The OCTET STRING bit is removed below.
     */
              capture: "encryptedContent",
              captureAsn1: "encryptedContentAsn1"
            }
          ]
        };

        p7v.envelopedDataValidator = {
          name: "EnvelopedData",
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.SEQUENCE,
          constructed: true,
          value: [
            {
              name: "EnvelopedData.Version",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.INTEGER,
              constructed: false,
              capture: "version"
            },
            {
              name: "EnvelopedData.RecipientInfos",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.SET,
              constructed: true,
              captureAsn1: "recipientInfos"
            }
          ].concat(encryptedContentInfoValidator)
        };

        p7v.encryptedDataValidator = {
          name: "EncryptedData",
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.SEQUENCE,
          constructed: true,
          value: [
            {
              name: "EncryptedData.Version",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.INTEGER,
              constructed: false,
              capture: "version"
            }
          ].concat(encryptedContentInfoValidator)
        };

        var signerValidator = {
          name: "SignerInfo",
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.SEQUENCE,
          constructed: true,
          value: [
            {
              name: "SignerInfo.version",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.INTEGER,
              constructed: false
            },
            {
              name: "SignerInfo.issuerAndSerialNumber",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.SEQUENCE,
              constructed: true,
              value: [
                {
                  name: "SignerInfo.issuerAndSerialNumber.issuer",
                  tagClass: asn1.Class.UNIVERSAL,
                  type: asn1.Type.SEQUENCE,
                  constructed: true,
                  captureAsn1: "issuer"
                },
                {
                  name: "SignerInfo.issuerAndSerialNumber.serialNumber",
                  tagClass: asn1.Class.UNIVERSAL,
                  type: asn1.Type.INTEGER,
                  constructed: false,
                  capture: "serial"
                }
              ]
            },
            {
              name: "SignerInfo.digestAlgorithm",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.SEQUENCE,
              constructed: true,
              value: [
                {
                  name: "SignerInfo.digestAlgorithm.algorithm",
                  tagClass: asn1.Class.UNIVERSAL,
                  type: asn1.Type.OID,
                  constructed: false,
                  capture: "digestAlgorithm"
                },
                {
                  name: "SignerInfo.digestAlgorithm.parameter",
                  tagClass: asn1.Class.UNIVERSAL,
                  constructed: false,
                  captureAsn1: "digestParameter",
                  optional: true
                }
              ]
            },
            {
              name: "SignerInfo.authenticatedAttributes",
              tagClass: asn1.Class.CONTEXT_SPECIFIC,
              type: 0,
              constructed: true,
              optional: true,
              capture: "authenticatedAttributes"
            },
            {
              name: "SignerInfo.digestEncryptionAlgorithm",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.SEQUENCE,
              constructed: true,
              capture: "signatureAlgorithm"
            },
            {
              name: "SignerInfo.encryptedDigest",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.OCTETSTRING,
              constructed: false,
              capture: "signature"
            },
            {
              name: "SignerInfo.unauthenticatedAttributes",
              tagClass: asn1.Class.CONTEXT_SPECIFIC,
              type: 1,
              constructed: true,
              optional: true,
              capture: "unauthenticatedAttributes"
            }
          ]
        };

        p7v.signedDataValidator = {
          name: "SignedData",
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.SEQUENCE,
          constructed: true,
          value: [
            {
              name: "SignedData.Version",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.INTEGER,
              constructed: false,
              capture: "version"
            },
            {
              name: "SignedData.DigestAlgorithms",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.SET,
              constructed: true,
              captureAsn1: "digestAlgorithms"
            },
            contentInfoValidator,
            {
              name: "SignedData.Certificates",
              tagClass: asn1.Class.CONTEXT_SPECIFIC,
              type: 0,
              optional: true,
              captureAsn1: "certificates"
            },
            {
              name: "SignedData.CertificateRevocationLists",
              tagClass: asn1.Class.CONTEXT_SPECIFIC,
              type: 1,
              optional: true,
              captureAsn1: "crls"
            },
            {
              name: "SignedData.SignerInfos",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.SET,
              capture: "signerInfos",
              optional: true,
              value: [signerValidator]
            }
          ]
        };

        p7v.recipientInfoValidator = {
          name: "RecipientInfo",
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.SEQUENCE,
          constructed: true,
          value: [
            {
              name: "RecipientInfo.version",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.INTEGER,
              constructed: false,
              capture: "version"
            },
            {
              name: "RecipientInfo.issuerAndSerial",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.SEQUENCE,
              constructed: true,
              value: [
                {
                  name: "RecipientInfo.issuerAndSerial.issuer",
                  tagClass: asn1.Class.UNIVERSAL,
                  type: asn1.Type.SEQUENCE,
                  constructed: true,
                  captureAsn1: "issuer"
                },
                {
                  name: "RecipientInfo.issuerAndSerial.serialNumber",
                  tagClass: asn1.Class.UNIVERSAL,
                  type: asn1.Type.INTEGER,
                  constructed: false,
                  capture: "serial"
                }
              ]
            },
            {
              name: "RecipientInfo.keyEncryptionAlgorithm",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.SEQUENCE,
              constructed: true,
              value: [
                {
                  name: "RecipientInfo.keyEncryptionAlgorithm.algorithm",
                  tagClass: asn1.Class.UNIVERSAL,
                  type: asn1.Type.OID,
                  constructed: false,
                  capture: "encAlgorithm"
                },
                {
                  name: "RecipientInfo.keyEncryptionAlgorithm.parameter",
                  tagClass: asn1.Class.UNIVERSAL,
                  constructed: false,
                  captureAsn1: "encParameter"
                }
              ]
            },
            {
              name: "RecipientInfo.encryptedKey",
              tagClass: asn1.Class.UNIVERSAL,
              type: asn1.Type.OCTETSTRING,
              constructed: false,
              capture: "encKey"
            }
          ]
        };

        /***/
      },
      /* 77 */
      /***/ function(module, exports, __webpack_require__) {
        /**
 * Javascript implementation of mask generation function MGF1.
 *
 * @author Stefan Siegl
 * @author Dave Longley
 *
 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
 * Copyright (c) 2014 Digital Bazaar, Inc.
 */
        var forge = __webpack_require__(1);
        __webpack_require__(3);

        forge.mgf = forge.mgf || {};
        var mgf1 = (module.exports = forge.mgf.mgf1 = forge.mgf1 =
          forge.mgf1 || {});

        /**
 * Creates a MGF1 mask generation function object.
 *
 * @param md the message digest API to use (eg: forge.md.sha1.create()).
 *
 * @return a mask generation function object.
 */
        mgf1.create = function(md) {
          var mgf = {
            /**
     * Generate mask of specified length.
     *
     * @param {String} seed The seed for mask generation.
     * @param maskLen Number of bytes to generate.
     * @return {String} The generated mask.
     */
            generate: function(seed, maskLen) {
              /* 2. Let T be the empty octet string. */
              var t = new forge.util.ByteBuffer();

              /* 3. For counter from 0 to ceil(maskLen / hLen), do the following: */
              var len = Math.ceil(maskLen / md.digestLength);
              for (var i = 0; i < len; i++) {
                /* a. Convert counter to an octet string C of length 4 octets */
                var c = new forge.util.ByteBuffer();
                c.putInt32(i);

                /* b. Concatenate the hash of the seed mgfSeed and C to the octet
         * string T: */
                md.start();
                md.update(seed + c.getBytes());
                t.putBuffer(md.digest());
              }

              /* Output the leading maskLen octets of T as the octet string mask. */
              t.truncate(t.length() - maskLen);
              return t.getBytes();
            }
          };

          return mgf;
        };

        /***/
      },
      /* 78 */
      /***/ function(module, exports, __webpack_require__) {
        /**
 * Debugging support for web applications.
 *
 * @author David I. Lehn <dlehn@digitalbazaar.com>
 *
 * Copyright 2008-2013 Digital Bazaar, Inc.
 */
        var forge = __webpack_require__(1);

        /* DEBUG API */
        module.exports = forge.debug = forge.debug || {};

        // Private storage for debugging.
        // Useful to expose data that is otherwise unviewable behind closures.
        // NOTE: remember that this can hold references to data and cause leaks!
        // format is "forge._debug.<modulename>.<dataname> = data"
        // Example:
        // (function() {
        //   var cat = 'forge.test.Test'; // debugging category
        //   var sState = {...}; // local state
        //   forge.debug.set(cat, 'sState', sState);
        // })();
        forge.debug.storage = {};

        /**
 * Gets debug data. Omit name for all cat data  Omit name and cat for
 * all data.
 *
 * @param cat name of debugging category.
 * @param name name of data to get (optional).
 * @return object with requested debug data or undefined.
 */
        forge.debug.get = function(cat, name) {
          var rval;
          if (typeof cat === "undefined") {
            rval = forge.debug.storage;
          } else if (cat in forge.debug.storage) {
            if (typeof name === "undefined") {
              rval = forge.debug.storage[cat];
            } else {
              rval = forge.debug.storage[cat][name];
            }
          }
          return rval;
        };

        /**
 * Sets debug data.
 *
 * @param cat name of debugging category.
 * @param name name of data to set.
 * @param data data to set.
 */
        forge.debug.set = function(cat, name, data) {
          if (!(cat in forge.debug.storage)) {
            forge.debug.storage[cat] = {};
          }
          forge.debug.storage[cat][name] = data;
        };

        /**
 * Clears debug data. Omit name for all cat data. Omit name and cat for
 * all data.
 *
 * @param cat name of debugging category.
 * @param name name of data to clear or omit to clear entire category.
 */
        forge.debug.clear = function(cat, name) {
          if (typeof cat === "undefined") {
            forge.debug.storage = {};
          } else if (cat in forge.debug.storage) {
            if (typeof name === "undefined") {
              delete forge.debug.storage[cat];
            } else {
              delete forge.debug.storage[cat][name];
            }
          }
        };

        /***/
      },
      /* 79 */
      /***/ function(module, exports, __webpack_require__) {
        /**
 * Cross-browser support for logging in a web application.
 *
 * @author David I. Lehn <dlehn@digitalbazaar.com>
 *
 * Copyright (c) 2008-2013 Digital Bazaar, Inc.
 */
        var forge = __webpack_require__(1);
        __webpack_require__(3);

        /* LOG API */
        module.exports = forge.log = forge.log || {};

        /**
 * Application logging system.
 *
 * Each logger level available as it's own function of the form:
 *   forge.log.level(category, args...)
 * The category is an arbitrary string, and the args are the same as
 * Firebug's console.log API. By default the call will be output as:
 *   'LEVEL [category] <args[0]>, args[1], ...'
 * This enables proper % formatting via the first argument.
 * Each category is enabled by default but can be enabled or disabled with
 * the setCategoryEnabled() function.
 */
        // list of known levels
        forge.log.levels = [
          "none",
          "error",
          "warning",
          "info",
          "debug",
          "verbose",
          "max"
        ];
        // info on the levels indexed by name:
        //   index: level index
        //   name: uppercased display name
        var sLevelInfo = {};
        // list of loggers
        var sLoggers = [];
        /**
 * Standard console logger. If no console support is enabled this will
 * remain null. Check before using.
 */
        var sConsoleLogger = null;

        // logger flags
        /**
 * Lock the level at the current value. Used in cases where user config may
 * set the level such that only critical messages are seen but more verbose
 * messages are needed for debugging or other purposes.
 */
        forge.log.LEVEL_LOCKED = 1 << 1;
        /**
 * Always call log function. By default, the logging system will check the
 * message level against logger.level before calling the log function. This
 * flag allows the function to do its own check.
 */
        forge.log.NO_LEVEL_CHECK = 1 << 2;
        /**
 * Perform message interpolation with the passed arguments. "%" style
 * fields in log messages will be replaced by arguments as needed. Some
 * loggers, such as Firebug, may do this automatically. The original log
 * message will be available as 'message' and the interpolated version will
 * be available as 'fullMessage'.
 */
        forge.log.INTERPOLATE = 1 << 3;

        // setup each log level
        for (var i = 0; i < forge.log.levels.length; ++i) {
          var level = forge.log.levels[i];
          sLevelInfo[level] = {
            index: i,
            name: level.toUpperCase()
          };
        }

        /**
 * Message logger. Will dispatch a message to registered loggers as needed.
 *
 * @param message message object
 */
        forge.log.logMessage = function(message) {
          var messageLevelIndex = sLevelInfo[message.level].index;
          for (var i = 0; i < sLoggers.length; ++i) {
            var logger = sLoggers[i];
            if (logger.flags & forge.log.NO_LEVEL_CHECK) {
              logger.f(message);
            } else {
              // get logger level
              var loggerLevelIndex = sLevelInfo[logger.level].index;
              // check level
              if (messageLevelIndex <= loggerLevelIndex) {
                // message critical enough, call logger
                logger.f(logger, message);
              }
            }
          }
        };

        /**
 * Sets the 'standard' key on a message object to:
 * "LEVEL [category] " + message
 *
 * @param message a message log object
 */
        forge.log.prepareStandard = function(message) {
          if (!("standard" in message)) {
            message.standard =
              sLevelInfo[message.level].name +
              //' ' + +message.timestamp +
              " [" +
              message.category +
              "] " +
              message.message;
          }
        };

        /**
 * Sets the 'full' key on a message object to the original message
 * interpolated via % formatting with the message arguments.
 *
 * @param message a message log object.
 */
        forge.log.prepareFull = function(message) {
          if (!("full" in message)) {
            // copy args and insert message at the front
            var args = [message.message];
            args = args.concat([] || message["arguments"]);
            // format the message
            message.full = forge.util.format.apply(this, args);
          }
        };

        /**
 * Applies both preparseStandard() and prepareFull() to a message object and
 * store result in 'standardFull'.
 *
 * @param message a message log object.
 */
        forge.log.prepareStandardFull = function(message) {
          if (!("standardFull" in message)) {
            // FIXME implement 'standardFull' logging
            forge.log.prepareStandard(message);
            message.standardFull = message.standard;
          }
        };

        // create log level functions
        if (true) {
          // levels for which we want functions
          var levels = ["error", "warning", "info", "debug", "verbose"];
          for (var i = 0; i < levels.length; ++i) {
            // wrap in a function to ensure proper level var is passed
            (function(level) {
              // create function for this level
              forge.log[level] = function(category, message /*, args...*/) {
                // convert arguments to real array, remove category and message
                var args = Array.prototype.slice.call(arguments).slice(2);
                // create message object
                // Note: interpolation and standard formatting is done lazily
                var msg = {
                  timestamp: new Date(),
                  level: level,
                  category: category,
                  message: message,
                  arguments: args
                  /*standard*/
                  /*full*/
                  /*fullMessage*/
                };
                // process this message
                forge.log.logMessage(msg);
              };
            })(levels[i]);
          }
        }

        /**
 * Creates a new logger with specified custom logging function.
 *
 * The logging function has a signature of:
 *   function(logger, message)
 * logger: current logger
 * message: object:
 *   level: level id
 *   category: category
 *   message: string message
 *   arguments: Array of extra arguments
 *   fullMessage: interpolated message and arguments if INTERPOLATE flag set
 *
 * @param logFunction a logging function which takes a log message object
 *          as a parameter.
 *
 * @return a logger object.
 */
        forge.log.makeLogger = function(logFunction) {
          var logger = {
            flags: 0,
            f: logFunction
          };
          forge.log.setLevel(logger, "none");
          return logger;
        };

        /**
 * Sets the current log level on a logger.
 *
 * @param logger the target logger.
 * @param level the new maximum log level as a string.
 *
 * @return true if set, false if not.
 */
        forge.log.setLevel = function(logger, level) {
          var rval = false;
          if (logger && !(logger.flags & forge.log.LEVEL_LOCKED)) {
            for (var i = 0; i < forge.log.levels.length; ++i) {
              var aValidLevel = forge.log.levels[i];
              if (level == aValidLevel) {
                // set level
                logger.level = level;
                rval = true;
                break;
              }
            }
          }

          return rval;
        };

        /**
 * Locks the log level at its current value.
 *
 * @param logger the target logger.
 * @param lock boolean lock value, default to true.
 */
        forge.log.lock = function(logger, lock) {
          if (typeof lock === "undefined" || lock) {
            logger.flags |= forge.log.LEVEL_LOCKED;
          } else {
            logger.flags &= ~forge.log.LEVEL_LOCKED;
          }
        };

        /**
 * Adds a logger.
 *
 * @param logger the logger object.
 */
        forge.log.addLogger = function(logger) {
          sLoggers.push(logger);
        };

        // setup the console logger if possible, else create fake console.log
        if (typeof console !== "undefined" && "log" in console) {
          var logger;
          if (console.error && console.warn && console.info && console.debug) {
            // looks like Firebug-style logging is available
            // level handlers map
            var levelHandlers = {
              error: console.error,
              warning: console.warn,
              info: console.info,
              debug: console.debug,
              verbose: console.debug
            };
            var f = function(logger, message) {
              forge.log.prepareStandard(message);
              var handler = levelHandlers[message.level];
              // prepend standard message and concat args
              var args = [message.standard];
              args = args.concat(message["arguments"].slice());
              // apply to low-level console function
              handler.apply(console, args);
            };
            logger = forge.log.makeLogger(f);
          } else {
            // only appear to have basic console.log
            var f = function(logger, message) {
              forge.log.prepareStandardFull(message);
              console.log(message.standardFull);
            };
            logger = forge.log.makeLogger(f);
          }
          forge.log.setLevel(logger, "debug");
          forge.log.addLogger(logger);
          sConsoleLogger = logger;
        } else {
          // define fake console.log to avoid potential script errors on
          // browsers that do not have console logging
          console = {
            log: function() {}
          };
        }

        /*
 * Check for logging control query vars.
 *
 * console.level=<level-name>
 * Set's the console log level by name.  Useful to override defaults and
 * allow more verbose logging before a user config is loaded.
 *
 * console.lock=<true|false>
 * Lock the console log level at whatever level it is set at.  This is run
 * after console.level is processed.  Useful to force a level of verbosity
 * that could otherwise be limited by a user config.
 */
        if (sConsoleLogger !== null) {
          var query = forge.util.getQueryVariables();
          if ("console.level" in query) {
            // set with last value
            forge.log.setLevel(
              sConsoleLogger,
              query["console.level"].slice(-1)[0]
            );
          }
          if ("console.lock" in query) {
            // set with last value
            var lock = query["console.lock"].slice(-1)[0];
            if (lock == "true") {
              forge.log.lock(sConsoleLogger);
            }
          }
        }

        // provide public access to console logger
        forge.log.consoleLogger = sConsoleLogger;

        /***/
      },
      /* 80 */
      /***/ function(module, exports, __webpack_require__) {
        var jws = __webpack_require__(50);

        module.exports = function(jwt, options) {
          options = options || {};
          var decoded = jws.decode(jwt, options);
          if (!decoded) {
            return null;
          }
          var payload = decoded.payload;

          //try parse the payload
          if (typeof payload === "string") {
            try {
              var obj = JSON.parse(payload);
              if (typeof obj === "object") {
                payload = obj;
              }
            } catch (e) {}
          }

          //return header if `complete` option is enabled.  header includes claims
          //such as `kid` and `alg` used to select the key within a JWKS needed to
          //verify the signature
          if (options.complete === true) {
            return {
              header: decoded.header,
              payload: payload,
              signature: decoded.signature
            };
          }
          return payload;
        };

        /***/
      },
      /* 81 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(process) {
          /*global module, process*/
          var Buffer = __webpack_require__(51).Buffer;
          var Stream = __webpack_require__(19);
          var util = __webpack_require__(34);

          function DataStream(data) {
            this.buffer = null;
            this.writable = true;
            this.readable = true;

            // No input
            if (!data) {
              this.buffer = Buffer.alloc(0);
              return this;
            }

            // Stream
            if (typeof data.pipe === "function") {
              this.buffer = Buffer.alloc(0);
              data.pipe(this);
              return this;
            }

            // Buffer or String
            // or Object (assumedly a passworded key)
            if (data.length || typeof data === "object") {
              this.buffer = data;
              this.writable = false;
              process.nextTick(
                function() {
                  this.emit("end", data);
                  this.readable = false;
                  this.emit("close");
                }.bind(this)
              );
              return this;
            }

            throw new TypeError("Unexpected data type (" + typeof data + ")");
          }
          util.inherits(DataStream, Stream);

          DataStream.prototype.write = function write(data) {
            this.buffer = Buffer.concat([this.buffer, Buffer.from(data)]);
            this.emit("data", data);
          };

          DataStream.prototype.end = function end(data) {
            if (data) this.write(data);
            this.emit("end", data);
            this.emit("close");
            this.writable = false;
            this.readable = false;
          };

          module.exports = DataStream;

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(6)));

        /***/
      },
      /* 82 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";
        /* WEBPACK VAR INJECTION */ (function(global, process) {
          // Copyright Joyent, Inc. and other Node contributors.
          //
          // Permission is hereby granted, free of charge, to any person obtaining a
          // copy of this software and associated documentation files (the
          // "Software"), to deal in the Software without restriction, including
          // without limitation the rights to use, copy, modify, merge, publish,
          // distribute, sublicense, and/or sell copies of the Software, and to permit
          // persons to whom the Software is furnished to do so, subject to the
          // following conditions:
          //
          // The above copyright notice and this permission notice shall be included
          // in all copies or substantial portions of the Software.
          //
          // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
          // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
          // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
          // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
          // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
          // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
          // USE OR OTHER DEALINGS IN THE SOFTWARE.

          /*<replacement>*/

          var processNextTick = __webpack_require__(33);
          /*</replacement>*/

          module.exports = Readable;

          /*<replacement>*/
          var isArray = __webpack_require__(68);
          /*</replacement>*/

          /*<replacement>*/
          var Duplex;
          /*</replacement>*/

          Readable.ReadableState = ReadableState;

          /*<replacement>*/
          var EE = __webpack_require__(52).EventEmitter;

          var EElistenerCount = function(emitter, type) {
            return emitter.listeners(type).length;
          };
          /*</replacement>*/

          /*<replacement>*/
          var Stream = __webpack_require__(83);
          /*</replacement>*/

          // TODO(bmeurer): Change this back to const once hole checks are
          // properly optimized away early in Ignition+TurboFan.
          /*<replacement>*/
          var Buffer = __webpack_require__(13).Buffer;
          var OurUint8Array = global.Uint8Array || function() {};
          function _uint8ArrayToBuffer(chunk) {
            return Buffer.from(chunk);
          }
          function _isUint8Array(obj) {
            return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
          }
          /*</replacement>*/

          /*<replacement>*/
          var util = __webpack_require__(23);
          util.inherits = __webpack_require__(2);
          /*</replacement>*/

          /*<replacement>*/
          var debugUtil = __webpack_require__(142);
          var debug = void 0;
          if (debugUtil && debugUtil.debuglog) {
            debug = debugUtil.debuglog("stream");
          } else {
            debug = function() {};
          }
          /*</replacement>*/

          var BufferList = __webpack_require__(143);
          var destroyImpl = __webpack_require__(84);
          var StringDecoder;

          util.inherits(Readable, Stream);

          var kProxyEvents = ["error", "close", "destroy", "pause", "resume"];

          function prependListener(emitter, event, fn) {
            // Sadly this is not cacheable as some libraries bundle their own
            // event emitter implementation with them.
            if (typeof emitter.prependListener === "function") {
              return emitter.prependListener(event, fn);
            } else {
              // This is a hack to make sure that our error handler is attached before any
              // userland ones.  NEVER DO THIS. This is here only because this code needs
              // to continue to work with older versions of Node.js that do not include
              // the prependListener() method. The goal is to eventually remove this hack.
              if (!emitter._events || !emitter._events[event])
                emitter.on(event, fn);
              else if (isArray(emitter._events[event]))
                emitter._events[event].unshift(fn);
              else emitter._events[event] = [fn, emitter._events[event]];
            }
          }

          function ReadableState(options, stream) {
            Duplex = Duplex || __webpack_require__(17);

            options = options || {};

            // object stream flag. Used to make read(n) ignore n and to
            // make all the buffer merging and length checks go away
            this.objectMode = !!options.objectMode;

            if (stream instanceof Duplex)
              this.objectMode = this.objectMode || !!options.readableObjectMode;

            // the point at which it stops calling _read() to fill the buffer
            // Note: 0 is a valid value, means "don't call _read preemptively ever"
            var hwm = options.highWaterMark;
            var defaultHwm = this.objectMode ? 16 : 16 * 1024;
            this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

            // cast to ints.
            this.highWaterMark = Math.floor(this.highWaterMark);

            // A linked list is used to store data chunks instead of an array because the
            // linked list can remove elements from the beginning faster than
            // array.shift()
            this.buffer = new BufferList();
            this.length = 0;
            this.pipes = null;
            this.pipesCount = 0;
            this.flowing = null;
            this.ended = false;
            this.endEmitted = false;
            this.reading = false;

            // a flag to be able to tell if the event 'readable'/'data' is emitted
            // immediately, or on a later tick.  We set this to true at first, because
            // any actions that shouldn't happen until "later" should generally also
            // not happen before the first read call.
            this.sync = true;

            // whenever we return null, then we set a flag to say
            // that we're awaiting a 'readable' event emission.
            this.needReadable = false;
            this.emittedReadable = false;
            this.readableListening = false;
            this.resumeScheduled = false;

            // has it been destroyed
            this.destroyed = false;

            // Crypto is kind of old and crusty.  Historically, its default string
            // encoding is 'binary' so we have to make this configurable.
            // Everything else in the universe uses 'utf8', though.
            this.defaultEncoding = options.defaultEncoding || "utf8";

            // the number of writers that are awaiting a drain event in .pipe()s
            this.awaitDrain = 0;

            // if true, a maybeReadMore has been scheduled
            this.readingMore = false;

            this.decoder = null;
            this.encoding = null;
            if (options.encoding) {
              if (!StringDecoder)
                StringDecoder = __webpack_require__(55).StringDecoder;
              this.decoder = new StringDecoder(options.encoding);
              this.encoding = options.encoding;
            }
          }

          function Readable(options) {
            Duplex = Duplex || __webpack_require__(17);

            if (!(this instanceof Readable)) return new Readable(options);

            this._readableState = new ReadableState(options, this);

            // legacy
            this.readable = true;

            if (options) {
              if (typeof options.read === "function") this._read = options.read;

              if (typeof options.destroy === "function")
                this._destroy = options.destroy;
            }

            Stream.call(this);
          }

          Object.defineProperty(Readable.prototype, "destroyed", {
            get: function() {
              if (this._readableState === undefined) {
                return false;
              }
              return this._readableState.destroyed;
            },
            set: function(value) {
              // we ignore the value if the stream
              // has not been initialized yet
              if (!this._readableState) {
                return;
              }

              // backward compatibility, the user is explicitly
              // managing destroyed
              this._readableState.destroyed = value;
            }
          });

          Readable.prototype.destroy = destroyImpl.destroy;
          Readable.prototype._undestroy = destroyImpl.undestroy;
          Readable.prototype._destroy = function(err, cb) {
            this.push(null);
            cb(err);
          };

          // Manually shove something into the read() buffer.
          // This returns true if the highWaterMark has not been hit yet,
          // similar to how Writable.write() returns true if you should
          // write() some more.
          Readable.prototype.push = function(chunk, encoding) {
            var state = this._readableState;
            var skipChunkCheck;

            if (!state.objectMode) {
              if (typeof chunk === "string") {
                encoding = encoding || state.defaultEncoding;
                if (encoding !== state.encoding) {
                  chunk = Buffer.from(chunk, encoding);
                  encoding = "";
                }
                skipChunkCheck = true;
              }
            } else {
              skipChunkCheck = true;
            }

            return readableAddChunk(
              this,
              chunk,
              encoding,
              false,
              skipChunkCheck
            );
          };

          // Unshift should *always* be something directly out of read()
          Readable.prototype.unshift = function(chunk) {
            return readableAddChunk(this, chunk, null, true, false);
          };

          function readableAddChunk(
            stream,
            chunk,
            encoding,
            addToFront,
            skipChunkCheck
          ) {
            var state = stream._readableState;
            if (chunk === null) {
              state.reading = false;
              onEofChunk(stream, state);
            } else {
              var er;
              if (!skipChunkCheck) er = chunkInvalid(state, chunk);
              if (er) {
                stream.emit("error", er);
              } else if (state.objectMode || (chunk && chunk.length > 0)) {
                if (
                  typeof chunk !== "string" &&
                  !state.objectMode &&
                  Object.getPrototypeOf(chunk) !== Buffer.prototype
                ) {
                  chunk = _uint8ArrayToBuffer(chunk);
                }

                if (addToFront) {
                  if (state.endEmitted)
                    stream.emit(
                      "error",
                      new Error("stream.unshift() after end event")
                    );
                  else addChunk(stream, state, chunk, true);
                } else if (state.ended) {
                  stream.emit("error", new Error("stream.push() after EOF"));
                } else {
                  state.reading = false;
                  if (state.decoder && !encoding) {
                    chunk = state.decoder.write(chunk);
                    if (state.objectMode || chunk.length !== 0)
                      addChunk(stream, state, chunk, false);
                    else maybeReadMore(stream, state);
                  } else {
                    addChunk(stream, state, chunk, false);
                  }
                }
              } else if (!addToFront) {
                state.reading = false;
              }
            }

            return needMoreData(state);
          }

          function addChunk(stream, state, chunk, addToFront) {
            if (state.flowing && state.length === 0 && !state.sync) {
              stream.emit("data", chunk);
              stream.read(0);
            } else {
              // update the buffer info.
              state.length += state.objectMode ? 1 : chunk.length;
              if (addToFront) state.buffer.unshift(chunk);
              else state.buffer.push(chunk);

              if (state.needReadable) emitReadable(stream);
            }
            maybeReadMore(stream, state);
          }

          function chunkInvalid(state, chunk) {
            var er;
            if (
              !_isUint8Array(chunk) &&
              typeof chunk !== "string" &&
              chunk !== undefined &&
              !state.objectMode
            ) {
              er = new TypeError("Invalid non-string/buffer chunk");
            }
            return er;
          }

          // if it's past the high water mark, we can push in some more.
          // Also, if we have no data yet, we can stand some
          // more bytes.  This is to work around cases where hwm=0,
          // such as the repl.  Also, if the push() triggered a
          // readable event, and the user called read(largeNumber) such that
          // needReadable was set, then we ought to push more, so that another
          // 'readable' event will be triggered.
          function needMoreData(state) {
            return (
              !state.ended &&
              (state.needReadable ||
                state.length < state.highWaterMark ||
                state.length === 0)
            );
          }

          Readable.prototype.isPaused = function() {
            return this._readableState.flowing === false;
          };

          // backwards compatibility.
          Readable.prototype.setEncoding = function(enc) {
            if (!StringDecoder)
              StringDecoder = __webpack_require__(55).StringDecoder;
            this._readableState.decoder = new StringDecoder(enc);
            this._readableState.encoding = enc;
            return this;
          };

          // Don't raise the hwm > 8MB
          var MAX_HWM = 0x800000;
          function computeNewHighWaterMark(n) {
            if (n >= MAX_HWM) {
              n = MAX_HWM;
            } else {
              // Get the next highest power of 2 to prevent increasing hwm excessively in
              // tiny amounts
              n--;
              n |= n >>> 1;
              n |= n >>> 2;
              n |= n >>> 4;
              n |= n >>> 8;
              n |= n >>> 16;
              n++;
            }
            return n;
          }

          // This function is designed to be inlinable, so please take care when making
          // changes to the function body.
          function howMuchToRead(n, state) {
            if (n <= 0 || (state.length === 0 && state.ended)) return 0;
            if (state.objectMode) return 1;
            if (n !== n) {
              // Only flow one buffer at a time
              if (state.flowing && state.length)
                return state.buffer.head.data.length;
              else return state.length;
            }
            // If we're asking for more than the current hwm, then raise the hwm.
            if (n > state.highWaterMark)
              state.highWaterMark = computeNewHighWaterMark(n);
            if (n <= state.length) return n;
            // Don't have enough
            if (!state.ended) {
              state.needReadable = true;
              return 0;
            }
            return state.length;
          }

          // you can override either this method, or the async _read(n) below.
          Readable.prototype.read = function(n) {
            debug("read", n);
            n = parseInt(n, 10);
            var state = this._readableState;
            var nOrig = n;

            if (n !== 0) state.emittedReadable = false;

            // if we're doing read(0) to trigger a readable event, but we
            // already have a bunch of data in the buffer, then just trigger
            // the 'readable' event and move on.
            if (
              n === 0 &&
              state.needReadable &&
              (state.length >= state.highWaterMark || state.ended)
            ) {
              debug("read: emitReadable", state.length, state.ended);
              if (state.length === 0 && state.ended) endReadable(this);
              else emitReadable(this);
              return null;
            }

            n = howMuchToRead(n, state);

            // if we've ended, and we're now clear, then finish it up.
            if (n === 0 && state.ended) {
              if (state.length === 0) endReadable(this);
              return null;
            }

            // All the actual chunk generation logic needs to be
            // *below* the call to _read.  The reason is that in certain
            // synthetic stream cases, such as passthrough streams, _read
            // may be a completely synchronous operation which may change
            // the state of the read buffer, providing enough data when
            // before there was *not* enough.
            //
            // So, the steps are:
            // 1. Figure out what the state of things will be after we do
            // a read from the buffer.
            //
            // 2. If that resulting state will trigger a _read, then call _read.
            // Note that this may be asynchronous, or synchronous.  Yes, it is
            // deeply ugly to write APIs this way, but that still doesn't mean
            // that the Readable class should behave improperly, as streams are
            // designed to be sync/async agnostic.
            // Take note if the _read call is sync or async (ie, if the read call
            // has returned yet), so that we know whether or not it's safe to emit
            // 'readable' etc.
            //
            // 3. Actually pull the requested chunks out of the buffer and return.

            // if we need a readable event, then we need to do some reading.
            var doRead = state.needReadable;
            debug("need readable", doRead);

            // if we currently have less than the highWaterMark, then also read some
            if (state.length === 0 || state.length - n < state.highWaterMark) {
              doRead = true;
              debug("length less than watermark", doRead);
            }

            // however, if we've ended, then there's no point, and if we're already
            // reading, then it's unnecessary.
            if (state.ended || state.reading) {
              doRead = false;
              debug("reading or ended", doRead);
            } else if (doRead) {
              debug("do read");
              state.reading = true;
              state.sync = true;
              // if the length is currently zero, then we *need* a readable event.
              if (state.length === 0) state.needReadable = true;
              // call internal read method
              this._read(state.highWaterMark);
              state.sync = false;
              // If _read pushed data synchronously, then `reading` will be false,
              // and we need to re-evaluate how much data we can return to the user.
              if (!state.reading) n = howMuchToRead(nOrig, state);
            }

            var ret;
            if (n > 0) ret = fromList(n, state);
            else ret = null;

            if (ret === null) {
              state.needReadable = true;
              n = 0;
            } else {
              state.length -= n;
            }

            if (state.length === 0) {
              // If we have nothing in the buffer, then we want to know
              // as soon as we *do* get something into the buffer.
              if (!state.ended) state.needReadable = true;

              // If we tried to read() past the EOF, then emit end on the next tick.
              if (nOrig !== n && state.ended) endReadable(this);
            }

            if (ret !== null) this.emit("data", ret);

            return ret;
          };

          function onEofChunk(stream, state) {
            if (state.ended) return;
            if (state.decoder) {
              var chunk = state.decoder.end();
              if (chunk && chunk.length) {
                state.buffer.push(chunk);
                state.length += state.objectMode ? 1 : chunk.length;
              }
            }
            state.ended = true;

            // emit 'readable' now to make sure it gets picked up.
            emitReadable(stream);
          }

          // Don't emit readable right away in sync mode, because this can trigger
          // another read() call => stack overflow.  This way, it might trigger
          // a nextTick recursion warning, but that's not so bad.
          function emitReadable(stream) {
            var state = stream._readableState;
            state.needReadable = false;
            if (!state.emittedReadable) {
              debug("emitReadable", state.flowing);
              state.emittedReadable = true;
              if (state.sync) processNextTick(emitReadable_, stream);
              else emitReadable_(stream);
            }
          }

          function emitReadable_(stream) {
            debug("emit readable");
            stream.emit("readable");
            flow(stream);
          }

          // at this point, the user has presumably seen the 'readable' event,
          // and called read() to consume some data.  that may have triggered
          // in turn another _read(n) call, in which case reading = true if
          // it's in progress.
          // However, if we're not ended, or reading, and the length < hwm,
          // then go ahead and try to read some more preemptively.
          function maybeReadMore(stream, state) {
            if (!state.readingMore) {
              state.readingMore = true;
              processNextTick(maybeReadMore_, stream, state);
            }
          }

          function maybeReadMore_(stream, state) {
            var len = state.length;
            while (
              !state.reading &&
              !state.flowing &&
              !state.ended &&
              state.length < state.highWaterMark
            ) {
              debug("maybeReadMore read 0");
              stream.read(0);
              if (len === state.length)
                // didn't get any data, stop spinning.
                break;
              else len = state.length;
            }
            state.readingMore = false;
          }

          // abstract method.  to be overridden in specific implementation classes.
          // call cb(er, data) where data is <= n in length.
          // for virtual (non-string, non-buffer) streams, "length" is somewhat
          // arbitrary, and perhaps not very meaningful.
          Readable.prototype._read = function(n) {
            this.emit("error", new Error("_read() is not implemented"));
          };

          Readable.prototype.pipe = function(dest, pipeOpts) {
            var src = this;
            var state = this._readableState;

            switch (state.pipesCount) {
              case 0:
                state.pipes = dest;
                break;
              case 1:
                state.pipes = [state.pipes, dest];
                break;
              default:
                state.pipes.push(dest);
                break;
            }
            state.pipesCount += 1;
            debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);

            var doEnd =
              (!pipeOpts || pipeOpts.end !== false) &&
              dest !== process.stdout &&
              dest !== process.stderr;

            var endFn = doEnd ? onend : unpipe;
            if (state.endEmitted) processNextTick(endFn);
            else src.once("end", endFn);

            dest.on("unpipe", onunpipe);
            function onunpipe(readable, unpipeInfo) {
              debug("onunpipe");
              if (readable === src) {
                if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                  unpipeInfo.hasUnpiped = true;
                  cleanup();
                }
              }
            }

            function onend() {
              debug("onend");
              dest.end();
            }

            // when the dest drains, it reduces the awaitDrain counter
            // on the source.  This would be more elegant with a .once()
            // handler in flow(), but adding and removing repeatedly is
            // too slow.
            var ondrain = pipeOnDrain(src);
            dest.on("drain", ondrain);

            var cleanedUp = false;
            function cleanup() {
              debug("cleanup");
              // cleanup event handlers once the pipe is broken
              dest.removeListener("close", onclose);
              dest.removeListener("finish", onfinish);
              dest.removeListener("drain", ondrain);
              dest.removeListener("error", onerror);
              dest.removeListener("unpipe", onunpipe);
              src.removeListener("end", onend);
              src.removeListener("end", unpipe);
              src.removeListener("data", ondata);

              cleanedUp = true;

              // if the reader is waiting for a drain event from this
              // specific writer, then it would cause it to never start
              // flowing again.
              // So, if this is awaiting a drain, then we just call it now.
              // If we don't know, then assume that we are waiting for one.
              if (
                state.awaitDrain &&
                (!dest._writableState || dest._writableState.needDrain)
              )
                ondrain();
            }

            // If the user pushes more data while we're writing to dest then we'll end up
            // in ondata again. However, we only want to increase awaitDrain once because
            // dest will only emit one 'drain' event for the multiple writes.
            // => Introduce a guard on increasing awaitDrain.
            var increasedAwaitDrain = false;
            src.on("data", ondata);
            function ondata(chunk) {
              debug("ondata");
              increasedAwaitDrain = false;
              var ret = dest.write(chunk);
              if (false === ret && !increasedAwaitDrain) {
                // If the user unpiped during `dest.write()`, it is possible
                // to get stuck in a permanently paused state if that write
                // also returned false.
                // => Check whether `dest` is still a piping destination.
                if (
                  ((state.pipesCount === 1 && state.pipes === dest) ||
                    (state.pipesCount > 1 &&
                      indexOf(state.pipes, dest) !== -1)) &&
                  !cleanedUp
                ) {
                  debug(
                    "false write response, pause",
                    src._readableState.awaitDrain
                  );
                  src._readableState.awaitDrain++;
                  increasedAwaitDrain = true;
                }
                src.pause();
              }
            }

            // if the dest has an error, then stop piping into it.
            // however, don't suppress the throwing behavior for this.
            function onerror(er) {
              debug("onerror", er);
              unpipe();
              dest.removeListener("error", onerror);
              if (EElistenerCount(dest, "error") === 0) dest.emit("error", er);
            }

            // Make sure our error handler is attached before userland ones.
            prependListener(dest, "error", onerror);

            // Both close and finish should trigger unpipe, but only once.
            function onclose() {
              dest.removeListener("finish", onfinish);
              unpipe();
            }
            dest.once("close", onclose);
            function onfinish() {
              debug("onfinish");
              dest.removeListener("close", onclose);
              unpipe();
            }
            dest.once("finish", onfinish);

            function unpipe() {
              debug("unpipe");
              src.unpipe(dest);
            }

            // tell the dest that it's being piped to
            dest.emit("pipe", src);

            // start the flow if it hasn't been started already.
            if (!state.flowing) {
              debug("pipe resume");
              src.resume();
            }

            return dest;
          };

          function pipeOnDrain(src) {
            return function() {
              var state = src._readableState;
              debug("pipeOnDrain", state.awaitDrain);
              if (state.awaitDrain) state.awaitDrain--;
              if (state.awaitDrain === 0 && EElistenerCount(src, "data")) {
                state.flowing = true;
                flow(src);
              }
            };
          }

          Readable.prototype.unpipe = function(dest) {
            var state = this._readableState;
            var unpipeInfo = { hasUnpiped: false };

            // if we're not piping anywhere, then do nothing.
            if (state.pipesCount === 0) return this;

            // just one destination.  most common case.
            if (state.pipesCount === 1) {
              // passed in one, but it's not the right one.
              if (dest && dest !== state.pipes) return this;

              if (!dest) dest = state.pipes;

              // got a match.
              state.pipes = null;
              state.pipesCount = 0;
              state.flowing = false;
              if (dest) dest.emit("unpipe", this, unpipeInfo);
              return this;
            }

            // slow case. multiple pipe destinations.

            if (!dest) {
              // remove all.
              var dests = state.pipes;
              var len = state.pipesCount;
              state.pipes = null;
              state.pipesCount = 0;
              state.flowing = false;

              for (var i = 0; i < len; i++) {
                dests[i].emit("unpipe", this, unpipeInfo);
              }
              return this;
            }

            // try to find the right one.
            var index = indexOf(state.pipes, dest);
            if (index === -1) return this;

            state.pipes.splice(index, 1);
            state.pipesCount -= 1;
            if (state.pipesCount === 1) state.pipes = state.pipes[0];

            dest.emit("unpipe", this, unpipeInfo);

            return this;
          };

          // set up data events if they are asked for
          // Ensure readable listeners eventually get something
          Readable.prototype.on = function(ev, fn) {
            var res = Stream.prototype.on.call(this, ev, fn);

            if (ev === "data") {
              // Start flowing on next tick if stream isn't explicitly paused
              if (this._readableState.flowing !== false) this.resume();
            } else if (ev === "readable") {
              var state = this._readableState;
              if (!state.endEmitted && !state.readableListening) {
                state.readableListening = state.needReadable = true;
                state.emittedReadable = false;
                if (!state.reading) {
                  processNextTick(nReadingNextTick, this);
                } else if (state.length) {
                  emitReadable(this);
                }
              }
            }

            return res;
          };
          Readable.prototype.addListener = Readable.prototype.on;

          function nReadingNextTick(self) {
            debug("readable nexttick read 0");
            self.read(0);
          }

          // pause() and resume() are remnants of the legacy readable stream API
          // If the user uses them, then switch into old mode.
          Readable.prototype.resume = function() {
            var state = this._readableState;
            if (!state.flowing) {
              debug("resume");
              state.flowing = true;
              resume(this, state);
            }
            return this;
          };

          function resume(stream, state) {
            if (!state.resumeScheduled) {
              state.resumeScheduled = true;
              processNextTick(resume_, stream, state);
            }
          }

          function resume_(stream, state) {
            if (!state.reading) {
              debug("resume read 0");
              stream.read(0);
            }

            state.resumeScheduled = false;
            state.awaitDrain = 0;
            stream.emit("resume");
            flow(stream);
            if (state.flowing && !state.reading) stream.read(0);
          }

          Readable.prototype.pause = function() {
            debug("call pause flowing=%j", this._readableState.flowing);
            if (false !== this._readableState.flowing) {
              debug("pause");
              this._readableState.flowing = false;
              this.emit("pause");
            }
            return this;
          };

          function flow(stream) {
            var state = stream._readableState;
            debug("flow", state.flowing);
            while (state.flowing && stream.read() !== null) {}
          }

          // wrap an old-style stream as the async data source.
          // This is *not* part of the readable stream interface.
          // It is an ugly unfortunate mess of history.
          Readable.prototype.wrap = function(stream) {
            var state = this._readableState;
            var paused = false;

            var self = this;
            stream.on("end", function() {
              debug("wrapped end");
              if (state.decoder && !state.ended) {
                var chunk = state.decoder.end();
                if (chunk && chunk.length) self.push(chunk);
              }

              self.push(null);
            });

            stream.on("data", function(chunk) {
              debug("wrapped data");
              if (state.decoder) chunk = state.decoder.write(chunk);

              // don't skip over falsy values in objectMode
              if (state.objectMode && (chunk === null || chunk === undefined))
                return;
              else if (!state.objectMode && (!chunk || !chunk.length)) return;

              var ret = self.push(chunk);
              if (!ret) {
                paused = true;
                stream.pause();
              }
            });

            // proxy all the other methods.
            // important when wrapping filters and duplexes.
            for (var i in stream) {
              if (this[i] === undefined && typeof stream[i] === "function") {
                this[i] = (function(method) {
                  return function() {
                    return stream[method].apply(stream, arguments);
                  };
                })(i);
              }
            }

            // proxy certain important events.
            for (var n = 0; n < kProxyEvents.length; n++) {
              stream.on(kProxyEvents[n], self.emit.bind(self, kProxyEvents[n]));
            }

            // when we try to consume some more bytes, simply unpause the
            // underlying stream.
            self._read = function(n) {
              debug("wrapped _read", n);
              if (paused) {
                paused = false;
                stream.resume();
              }
            };

            return self;
          };

          // exposed for testing purposes only.
          Readable._fromList = fromList;

          // Pluck off n bytes from an array of buffers.
          // Length is the combined lengths of all the buffers in the list.
          // This function is designed to be inlinable, so please take care when making
          // changes to the function body.
          function fromList(n, state) {
            // nothing buffered
            if (state.length === 0) return null;

            var ret;
            if (state.objectMode) ret = state.buffer.shift();
            else if (!n || n >= state.length) {
              // read it all, truncate the list
              if (state.decoder) ret = state.buffer.join("");
              else if (state.buffer.length === 1) ret = state.buffer.head.data;
              else ret = state.buffer.concat(state.length);
              state.buffer.clear();
            } else {
              // read part of list
              ret = fromListPartial(n, state.buffer, state.decoder);
            }

            return ret;
          }

          // Extracts only enough buffered data to satisfy the amount requested.
          // This function is designed to be inlinable, so please take care when making
          // changes to the function body.
          function fromListPartial(n, list, hasStrings) {
            var ret;
            if (n < list.head.data.length) {
              // slice is the same for buffers and strings
              ret = list.head.data.slice(0, n);
              list.head.data = list.head.data.slice(n);
            } else if (n === list.head.data.length) {
              // first chunk is a perfect match
              ret = list.shift();
            } else {
              // result spans more than one buffer
              ret = hasStrings
                ? copyFromBufferString(n, list)
                : copyFromBuffer(n, list);
            }
            return ret;
          }

          // Copies a specified amount of characters from the list of buffered data
          // chunks.
          // This function is designed to be inlinable, so please take care when making
          // changes to the function body.
          function copyFromBufferString(n, list) {
            var p = list.head;
            var c = 1;
            var ret = p.data;
            n -= ret.length;
            while ((p = p.next)) {
              var str = p.data;
              var nb = n > str.length ? str.length : n;
              if (nb === str.length) ret += str;
              else ret += str.slice(0, n);
              n -= nb;
              if (n === 0) {
                if (nb === str.length) {
                  ++c;
                  if (p.next) list.head = p.next;
                  else list.head = list.tail = null;
                } else {
                  list.head = p;
                  p.data = str.slice(nb);
                }
                break;
              }
              ++c;
            }
            list.length -= c;
            return ret;
          }

          // Copies a specified amount of bytes from the list of buffered data chunks.
          // This function is designed to be inlinable, so please take care when making
          // changes to the function body.
          function copyFromBuffer(n, list) {
            var ret = Buffer.allocUnsafe(n);
            var p = list.head;
            var c = 1;
            p.data.copy(ret);
            n -= p.data.length;
            while ((p = p.next)) {
              var buf = p.data;
              var nb = n > buf.length ? buf.length : n;
              buf.copy(ret, ret.length - n, 0, nb);
              n -= nb;
              if (n === 0) {
                if (nb === buf.length) {
                  ++c;
                  if (p.next) list.head = p.next;
                  else list.head = list.tail = null;
                } else {
                  list.head = p;
                  p.data = buf.slice(nb);
                }
                break;
              }
              ++c;
            }
            list.length -= c;
            return ret;
          }

          function endReadable(stream) {
            var state = stream._readableState;

            // If we get here before consuming all the bytes, then that is a
            // bug in node.  Should never happen.
            if (state.length > 0)
              throw new Error('"endReadable()" called on non-empty stream');

            if (!state.endEmitted) {
              state.ended = true;
              processNextTick(endReadableNT, state, stream);
            }
          }

          function endReadableNT(state, stream) {
            // Check that we didn't get one last unshift.
            if (!state.endEmitted && state.length === 0) {
              state.endEmitted = true;
              stream.readable = false;
              stream.emit("end");
            }
          }

          function forEach(xs, f) {
            for (var i = 0, l = xs.length; i < l; i++) {
              f(xs[i], i);
            }
          }

          function indexOf(xs, x) {
            for (var i = 0, l = xs.length; i < l; i++) {
              if (xs[i] === x) return i;
            }
            return -1;
          }
          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(8), __webpack_require__(6)));

        /***/
      },
      /* 83 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(52).EventEmitter;

        /***/
      },
      /* 84 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        /*<replacement>*/

        var processNextTick = __webpack_require__(33);
        /*</replacement>*/

        // undocumented cb() API, needed for core, not for public API
        function destroy(err, cb) {
          var _this = this;

          var readableDestroyed =
            this._readableState && this._readableState.destroyed;
          var writableDestroyed =
            this._writableState && this._writableState.destroyed;

          if (readableDestroyed || writableDestroyed) {
            if (cb) {
              cb(err);
            } else if (
              err &&
              (!this._writableState || !this._writableState.errorEmitted)
            ) {
              processNextTick(emitErrorNT, this, err);
            }
            return;
          }

          // we set destroyed to true before firing error callbacks in order
          // to make it re-entrance safe in case destroy() is called within callbacks

          if (this._readableState) {
            this._readableState.destroyed = true;
          }

          // if this is a duplex stream mark the writable part as destroyed as well
          if (this._writableState) {
            this._writableState.destroyed = true;
          }

          this._destroy(err || null, function(err) {
            if (!cb && err) {
              processNextTick(emitErrorNT, _this, err);
              if (_this._writableState) {
                _this._writableState.errorEmitted = true;
              }
            } else if (cb) {
              cb(err);
            }
          });
        }

        function undestroy() {
          if (this._readableState) {
            this._readableState.destroyed = false;
            this._readableState.reading = false;
            this._readableState.ended = false;
            this._readableState.endEmitted = false;
          }

          if (this._writableState) {
            this._writableState.destroyed = false;
            this._writableState.ended = false;
            this._writableState.ending = false;
            this._writableState.finished = false;
            this._writableState.errorEmitted = false;
          }
        }

        function emitErrorNT(self, err) {
          self.emit("error", err);
        }

        module.exports = {
          destroy: destroy,
          undestroy: undestroy
        };

        /***/
      },
      /* 85 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";
        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.

        // a transform stream is a readable/writable stream where you do
        // something with the data.  Sometimes it's called a "filter",
        // but that's not a great name for it, since that implies a thing where
        // some bits pass through, and others are simply ignored.  (That would
        // be a valid example of a transform, of course.)
        //
        // While the output is causally related to the input, it's not a
        // necessarily symmetric or synchronous transformation.  For example,
        // a zlib stream might take multiple plain-text writes(), and then
        // emit a single compressed chunk some time in the future.
        //
        // Here's how this works:
        //
        // The Transform stream has all the aspects of the readable and writable
        // stream classes.  When you write(chunk), that calls _write(chunk,cb)
        // internally, and returns false if there's a lot of pending writes
        // buffered up.  When you call read(), that calls _read(n) until
        // there's enough pending readable data buffered up.
        //
        // In a transform stream, the written data is placed in a buffer.  When
        // _read(n) is called, it transforms the queued up data, calling the
        // buffered _write cb's as it consumes chunks.  If consuming a single
        // written chunk would result in multiple output chunks, then the first
        // outputted bit calls the readcb, and subsequent chunks just go into
        // the read buffer, and will cause it to emit 'readable' if necessary.
        //
        // This way, back-pressure is actually determined by the reading side,
        // since _read has to be called to start processing a new chunk.  However,
        // a pathological inflate type of transform can cause excessive buffering
        // here.  For example, imagine a stream where every byte of input is
        // interpreted as an integer from 0-255, and then results in that many
        // bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
        // 1kb of data being output.  In this case, you could write a very small
        // amount of input, and end up with a very large amount of output.  In
        // such a pathological inflating mechanism, there'd be no way to tell
        // the system to stop doing the transform.  A single 4MB write could
        // cause the system to run out of memory.
        //
        // However, even in such a pathological case, only a single written chunk
        // would be consumed, and then the rest would wait (un-transformed) until
        // the results of the previous transformed chunk were consumed.

        module.exports = Transform;

        var Duplex = __webpack_require__(17);

        /*<replacement>*/
        var util = __webpack_require__(23);
        util.inherits = __webpack_require__(2);
        /*</replacement>*/

        util.inherits(Transform, Duplex);

        function TransformState(stream) {
          this.afterTransform = function(er, data) {
            return afterTransform(stream, er, data);
          };

          this.needTransform = false;
          this.transforming = false;
          this.writecb = null;
          this.writechunk = null;
          this.writeencoding = null;
        }

        function afterTransform(stream, er, data) {
          var ts = stream._transformState;
          ts.transforming = false;

          var cb = ts.writecb;

          if (!cb) {
            return stream.emit(
              "error",
              new Error("write callback called multiple times")
            );
          }

          ts.writechunk = null;
          ts.writecb = null;

          if (data !== null && data !== undefined) stream.push(data);

          cb(er);

          var rs = stream._readableState;
          rs.reading = false;
          if (rs.needReadable || rs.length < rs.highWaterMark) {
            stream._read(rs.highWaterMark);
          }
        }

        function Transform(options) {
          if (!(this instanceof Transform)) return new Transform(options);

          Duplex.call(this, options);

          this._transformState = new TransformState(this);

          var stream = this;

          // start out asking for a readable event once data is transformed.
          this._readableState.needReadable = true;

          // we have implemented the _read method, and done the other things
          // that Readable wants before the first _read call, so unset the
          // sync guard flag.
          this._readableState.sync = false;

          if (options) {
            if (typeof options.transform === "function")
              this._transform = options.transform;

            if (typeof options.flush === "function")
              this._flush = options.flush;
          }

          // When the writable side finishes, then flush out anything remaining.
          this.once("prefinish", function() {
            if (typeof this._flush === "function")
              this._flush(function(er, data) {
                done(stream, er, data);
              });
            else done(stream);
          });
        }

        Transform.prototype.push = function(chunk, encoding) {
          this._transformState.needTransform = false;
          return Duplex.prototype.push.call(this, chunk, encoding);
        };

        // This is the part where you do stuff!
        // override this function in implementation classes.
        // 'chunk' is an input chunk.
        //
        // Call `push(newChunk)` to pass along transformed output
        // to the readable side.  You may call 'push' zero or more times.
        //
        // Call `cb(err)` when you are done with this chunk.  If you pass
        // an error, then that'll put the hurt on the whole operation.  If you
        // never call cb(), then you'll never get another chunk.
        Transform.prototype._transform = function(chunk, encoding, cb) {
          throw new Error("_transform() is not implemented");
        };

        Transform.prototype._write = function(chunk, encoding, cb) {
          var ts = this._transformState;
          ts.writecb = cb;
          ts.writechunk = chunk;
          ts.writeencoding = encoding;
          if (!ts.transforming) {
            var rs = this._readableState;
            if (
              ts.needTransform ||
              rs.needReadable ||
              rs.length < rs.highWaterMark
            )
              this._read(rs.highWaterMark);
          }
        };

        // Doesn't matter what the args are here.
        // _transform does all the work.
        // That we got here means that the readable side wants more data.
        Transform.prototype._read = function(n) {
          var ts = this._transformState;

          if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
            ts.transforming = true;
            this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
          } else {
            // mark that we need a transform, so that any data that comes in
            // will get processed, now that we've asked for it.
            ts.needTransform = true;
          }
        };

        Transform.prototype._destroy = function(err, cb) {
          var _this = this;

          Duplex.prototype._destroy.call(this, err, function(err2) {
            cb(err2);
            _this.emit("close");
          });
        };

        function done(stream, er, data) {
          if (er) return stream.emit("error", er);

          if (data !== null && data !== undefined) stream.push(data);

          // if there's nothing in the write buffer, then that means
          // that nothing more will ever be provided
          var ws = stream._writableState;
          var ts = stream._transformState;

          if (ws.length)
            throw new Error("Calling transform done when ws.length != 0");

          if (ts.transforming)
            throw new Error("Calling transform done when still transforming");

          return stream.push(null);
        }

        /***/
      },
      /* 86 */
      /***/ function(module, exports, __webpack_require__) {
        var bufferEqual = __webpack_require__(152);
        var base64url = __webpack_require__(32);
        var Buffer = __webpack_require__(51).Buffer;
        var crypto = __webpack_require__(153);
        var formatEcdsa = __webpack_require__(220);
        var util = __webpack_require__(34);

        var MSG_INVALID_ALGORITHM =
          '"%s" is not a valid algorithm.\n  Supported algorithms are:\n  "HS256", "HS384", "HS512", "RS256", "RS384", "RS512" and "none".';
        var MSG_INVALID_SECRET = "secret must be a string or buffer";
        var MSG_INVALID_VERIFIER_KEY = "key must be a string or a buffer";
        var MSG_INVALID_SIGNER_KEY =
          "key must be a string, a buffer or an object";

        function typeError(template) {
          var args = [].slice.call(arguments, 1);
          var errMsg = util.format.bind(util, template).apply(null, args);
          return new TypeError(errMsg);
        }

        function bufferOrString(obj) {
          return Buffer.isBuffer(obj) || typeof obj === "string";
        }

        function normalizeInput(thing) {
          if (!bufferOrString(thing)) thing = JSON.stringify(thing);
          return thing;
        }

        function createHmacSigner(bits) {
          return function sign(thing, secret) {
            if (!bufferOrString(secret)) throw typeError(MSG_INVALID_SECRET);
            thing = normalizeInput(thing);
            var hmac = crypto.createHmac("sha" + bits, secret);
            var sig = (hmac.update(thing), hmac.digest("base64"));
            return base64url.fromBase64(sig);
          };
        }

        function createHmacVerifier(bits) {
          return function verify(thing, signature, secret) {
            var computedSig = createHmacSigner(bits)(thing, secret);
            return bufferEqual(
              Buffer.from(signature),
              Buffer.from(computedSig)
            );
          };
        }

        function createKeySigner(bits) {
          return function sign(thing, privateKey) {
            if (
              !bufferOrString(privateKey) &&
              !(typeof privateKey === "object")
            )
              throw typeError(MSG_INVALID_SIGNER_KEY);
            thing = normalizeInput(thing);
            // Even though we are specifying "RSA" here, this works with ECDSA
            // keys as well.
            var signer = crypto.createSign("RSA-SHA" + bits);
            var sig = (signer.update(thing), signer.sign(privateKey, "base64"));
            return base64url.fromBase64(sig);
          };
        }

        function createKeyVerifier(bits) {
          return function verify(thing, signature, publicKey) {
            if (!bufferOrString(publicKey))
              throw typeError(MSG_INVALID_VERIFIER_KEY);
            thing = normalizeInput(thing);
            signature = base64url.toBase64(signature);
            var verifier = crypto.createVerify("RSA-SHA" + bits);
            verifier.update(thing);
            return verifier.verify(publicKey, signature, "base64");
          };
        }

        function createECDSASigner(bits) {
          var inner = createKeySigner(bits);
          return function sign() {
            var signature = inner.apply(null, arguments);
            signature = formatEcdsa.derToJose(signature, "ES" + bits);
            return signature;
          };
        }

        function createECDSAVerifer(bits) {
          var inner = createKeyVerifier(bits);
          return function verify(thing, signature, publicKey) {
            signature = formatEcdsa
              .joseToDer(signature, "ES" + bits)
              .toString("base64");
            var result = inner(thing, signature, publicKey);
            return result;
          };
        }

        function createNoneSigner() {
          return function sign() {
            return "";
          };
        }

        function createNoneVerifier() {
          return function verify(thing, signature) {
            return signature === "";
          };
        }

        module.exports = function jwa(algorithm) {
          var signerFactories = {
            hs: createHmacSigner,
            rs: createKeySigner,
            es: createECDSASigner,
            none: createNoneSigner
          };
          var verifierFactories = {
            hs: createHmacVerifier,
            rs: createKeyVerifier,
            es: createECDSAVerifer,
            none: createNoneVerifier
          };
          var match = algorithm.match(/^(RS|ES|HS)(256|384|512)$|^(none)$/i);
          if (!match) throw typeError(MSG_INVALID_ALGORITHM, algorithm);
          var algo = (match[1] || match[3]).toLowerCase();
          var bits = match[2];

          return {
            sign: signerFactories[algo](bits),
            verify: verifierFactories[algo](bits)
          };
        };

        /***/
      },
      /* 87 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(Buffer) {
          /**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

          var inherits = __webpack_require__(2);
          var Hash = __webpack_require__(20);

          var K = [
            0x428a2f98,
            0x71374491,
            0xb5c0fbcf,
            0xe9b5dba5,
            0x3956c25b,
            0x59f111f1,
            0x923f82a4,
            0xab1c5ed5,
            0xd807aa98,
            0x12835b01,
            0x243185be,
            0x550c7dc3,
            0x72be5d74,
            0x80deb1fe,
            0x9bdc06a7,
            0xc19bf174,
            0xe49b69c1,
            0xefbe4786,
            0x0fc19dc6,
            0x240ca1cc,
            0x2de92c6f,
            0x4a7484aa,
            0x5cb0a9dc,
            0x76f988da,
            0x983e5152,
            0xa831c66d,
            0xb00327c8,
            0xbf597fc7,
            0xc6e00bf3,
            0xd5a79147,
            0x06ca6351,
            0x14292967,
            0x27b70a85,
            0x2e1b2138,
            0x4d2c6dfc,
            0x53380d13,
            0x650a7354,
            0x766a0abb,
            0x81c2c92e,
            0x92722c85,
            0xa2bfe8a1,
            0xa81a664b,
            0xc24b8b70,
            0xc76c51a3,
            0xd192e819,
            0xd6990624,
            0xf40e3585,
            0x106aa070,
            0x19a4c116,
            0x1e376c08,
            0x2748774c,
            0x34b0bcb5,
            0x391c0cb3,
            0x4ed8aa4a,
            0x5b9cca4f,
            0x682e6ff3,
            0x748f82ee,
            0x78a5636f,
            0x84c87814,
            0x8cc70208,
            0x90befffa,
            0xa4506ceb,
            0xbef9a3f7,
            0xc67178f2
          ];

          var W = new Array(64);

          function Sha256() {
            this.init();

            this._w = W; // new Array(64)

            Hash.call(this, 64, 56);
          }

          inherits(Sha256, Hash);

          Sha256.prototype.init = function() {
            this._a = 0x6a09e667;
            this._b = 0xbb67ae85;
            this._c = 0x3c6ef372;
            this._d = 0xa54ff53a;
            this._e = 0x510e527f;
            this._f = 0x9b05688c;
            this._g = 0x1f83d9ab;
            this._h = 0x5be0cd19;

            return this;
          };

          function ch(x, y, z) {
            return z ^ (x & (y ^ z));
          }

          function maj(x, y, z) {
            return (x & y) | (z & (x | y));
          }

          function sigma0(x) {
            return (
              ((x >>> 2) | (x << 30)) ^
              ((x >>> 13) | (x << 19)) ^
              ((x >>> 22) | (x << 10))
            );
          }

          function sigma1(x) {
            return (
              ((x >>> 6) | (x << 26)) ^
              ((x >>> 11) | (x << 21)) ^
              ((x >>> 25) | (x << 7))
            );
          }

          function gamma0(x) {
            return (
              ((x >>> 7) | (x << 25)) ^ ((x >>> 18) | (x << 14)) ^ (x >>> 3)
            );
          }

          function gamma1(x) {
            return (
              ((x >>> 17) | (x << 15)) ^ ((x >>> 19) | (x << 13)) ^ (x >>> 10)
            );
          }

          Sha256.prototype._update = function(M) {
            var W = this._w;

            var a = this._a | 0;
            var b = this._b | 0;
            var c = this._c | 0;
            var d = this._d | 0;
            var e = this._e | 0;
            var f = this._f | 0;
            var g = this._g | 0;
            var h = this._h | 0;

            for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4);
            for (; i < 64; ++i)
              W[i] =
                (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) |
                0;

            for (var j = 0; j < 64; ++j) {
              var T1 = (h + sigma1(e) + ch(e, f, g) + K[j] + W[j]) | 0;
              var T2 = (sigma0(a) + maj(a, b, c)) | 0;

              h = g;
              g = f;
              f = e;
              e = (d + T1) | 0;
              d = c;
              c = b;
              b = a;
              a = (T1 + T2) | 0;
            }

            this._a = (a + this._a) | 0;
            this._b = (b + this._b) | 0;
            this._c = (c + this._c) | 0;
            this._d = (d + this._d) | 0;
            this._e = (e + this._e) | 0;
            this._f = (f + this._f) | 0;
            this._g = (g + this._g) | 0;
            this._h = (h + this._h) | 0;
          };

          Sha256.prototype._hash = function() {
            var H = new Buffer(32);

            H.writeInt32BE(this._a, 0);
            H.writeInt32BE(this._b, 4);
            H.writeInt32BE(this._c, 8);
            H.writeInt32BE(this._d, 12);
            H.writeInt32BE(this._e, 16);
            H.writeInt32BE(this._f, 20);
            H.writeInt32BE(this._g, 24);
            H.writeInt32BE(this._h, 28);

            return H;
          };

          module.exports = Sha256;

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(0).Buffer));

        /***/
      },
      /* 88 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(Buffer) {
          var inherits = __webpack_require__(2);
          var Hash = __webpack_require__(20);

          var K = [
            0x428a2f98,
            0xd728ae22,
            0x71374491,
            0x23ef65cd,
            0xb5c0fbcf,
            0xec4d3b2f,
            0xe9b5dba5,
            0x8189dbbc,
            0x3956c25b,
            0xf348b538,
            0x59f111f1,
            0xb605d019,
            0x923f82a4,
            0xaf194f9b,
            0xab1c5ed5,
            0xda6d8118,
            0xd807aa98,
            0xa3030242,
            0x12835b01,
            0x45706fbe,
            0x243185be,
            0x4ee4b28c,
            0x550c7dc3,
            0xd5ffb4e2,
            0x72be5d74,
            0xf27b896f,
            0x80deb1fe,
            0x3b1696b1,
            0x9bdc06a7,
            0x25c71235,
            0xc19bf174,
            0xcf692694,
            0xe49b69c1,
            0x9ef14ad2,
            0xefbe4786,
            0x384f25e3,
            0x0fc19dc6,
            0x8b8cd5b5,
            0x240ca1cc,
            0x77ac9c65,
            0x2de92c6f,
            0x592b0275,
            0x4a7484aa,
            0x6ea6e483,
            0x5cb0a9dc,
            0xbd41fbd4,
            0x76f988da,
            0x831153b5,
            0x983e5152,
            0xee66dfab,
            0xa831c66d,
            0x2db43210,
            0xb00327c8,
            0x98fb213f,
            0xbf597fc7,
            0xbeef0ee4,
            0xc6e00bf3,
            0x3da88fc2,
            0xd5a79147,
            0x930aa725,
            0x06ca6351,
            0xe003826f,
            0x14292967,
            0x0a0e6e70,
            0x27b70a85,
            0x46d22ffc,
            0x2e1b2138,
            0x5c26c926,
            0x4d2c6dfc,
            0x5ac42aed,
            0x53380d13,
            0x9d95b3df,
            0x650a7354,
            0x8baf63de,
            0x766a0abb,
            0x3c77b2a8,
            0x81c2c92e,
            0x47edaee6,
            0x92722c85,
            0x1482353b,
            0xa2bfe8a1,
            0x4cf10364,
            0xa81a664b,
            0xbc423001,
            0xc24b8b70,
            0xd0f89791,
            0xc76c51a3,
            0x0654be30,
            0xd192e819,
            0xd6ef5218,
            0xd6990624,
            0x5565a910,
            0xf40e3585,
            0x5771202a,
            0x106aa070,
            0x32bbd1b8,
            0x19a4c116,
            0xb8d2d0c8,
            0x1e376c08,
            0x5141ab53,
            0x2748774c,
            0xdf8eeb99,
            0x34b0bcb5,
            0xe19b48a8,
            0x391c0cb3,
            0xc5c95a63,
            0x4ed8aa4a,
            0xe3418acb,
            0x5b9cca4f,
            0x7763e373,
            0x682e6ff3,
            0xd6b2b8a3,
            0x748f82ee,
            0x5defb2fc,
            0x78a5636f,
            0x43172f60,
            0x84c87814,
            0xa1f0ab72,
            0x8cc70208,
            0x1a6439ec,
            0x90befffa,
            0x23631e28,
            0xa4506ceb,
            0xde82bde9,
            0xbef9a3f7,
            0xb2c67915,
            0xc67178f2,
            0xe372532b,
            0xca273ece,
            0xea26619c,
            0xd186b8c7,
            0x21c0c207,
            0xeada7dd6,
            0xcde0eb1e,
            0xf57d4f7f,
            0xee6ed178,
            0x06f067aa,
            0x72176fba,
            0x0a637dc5,
            0xa2c898a6,
            0x113f9804,
            0xbef90dae,
            0x1b710b35,
            0x131c471b,
            0x28db77f5,
            0x23047d84,
            0x32caab7b,
            0x40c72493,
            0x3c9ebe0a,
            0x15c9bebc,
            0x431d67c4,
            0x9c100d4c,
            0x4cc5d4be,
            0xcb3e42b6,
            0x597f299c,
            0xfc657e2a,
            0x5fcb6fab,
            0x3ad6faec,
            0x6c44198c,
            0x4a475817
          ];

          var W = new Array(160);

          function Sha512() {
            this.init();
            this._w = W;

            Hash.call(this, 128, 112);
          }

          inherits(Sha512, Hash);

          Sha512.prototype.init = function() {
            this._ah = 0x6a09e667;
            this._bh = 0xbb67ae85;
            this._ch = 0x3c6ef372;
            this._dh = 0xa54ff53a;
            this._eh = 0x510e527f;
            this._fh = 0x9b05688c;
            this._gh = 0x1f83d9ab;
            this._hh = 0x5be0cd19;

            this._al = 0xf3bcc908;
            this._bl = 0x84caa73b;
            this._cl = 0xfe94f82b;
            this._dl = 0x5f1d36f1;
            this._el = 0xade682d1;
            this._fl = 0x2b3e6c1f;
            this._gl = 0xfb41bd6b;
            this._hl = 0x137e2179;

            return this;
          };

          function Ch(x, y, z) {
            return z ^ (x & (y ^ z));
          }

          function maj(x, y, z) {
            return (x & y) | (z & (x | y));
          }

          function sigma0(x, xl) {
            return (
              ((x >>> 28) | (xl << 4)) ^
              ((xl >>> 2) | (x << 30)) ^
              ((xl >>> 7) | (x << 25))
            );
          }

          function sigma1(x, xl) {
            return (
              ((x >>> 14) | (xl << 18)) ^
              ((x >>> 18) | (xl << 14)) ^
              ((xl >>> 9) | (x << 23))
            );
          }

          function Gamma0(x, xl) {
            return (
              ((x >>> 1) | (xl << 31)) ^ ((x >>> 8) | (xl << 24)) ^ (x >>> 7)
            );
          }

          function Gamma0l(x, xl) {
            return (
              ((x >>> 1) | (xl << 31)) ^
              ((x >>> 8) | (xl << 24)) ^
              ((x >>> 7) | (xl << 25))
            );
          }

          function Gamma1(x, xl) {
            return (
              ((x >>> 19) | (xl << 13)) ^ ((xl >>> 29) | (x << 3)) ^ (x >>> 6)
            );
          }

          function Gamma1l(x, xl) {
            return (
              ((x >>> 19) | (xl << 13)) ^
              ((xl >>> 29) | (x << 3)) ^
              ((x >>> 6) | (xl << 26))
            );
          }

          function getCarry(a, b) {
            return a >>> 0 < b >>> 0 ? 1 : 0;
          }

          Sha512.prototype._update = function(M) {
            var W = this._w;

            var ah = this._ah | 0;
            var bh = this._bh | 0;
            var ch = this._ch | 0;
            var dh = this._dh | 0;
            var eh = this._eh | 0;
            var fh = this._fh | 0;
            var gh = this._gh | 0;
            var hh = this._hh | 0;

            var al = this._al | 0;
            var bl = this._bl | 0;
            var cl = this._cl | 0;
            var dl = this._dl | 0;
            var el = this._el | 0;
            var fl = this._fl | 0;
            var gl = this._gl | 0;
            var hl = this._hl | 0;

            for (var i = 0; i < 32; i += 2) {
              W[i] = M.readInt32BE(i * 4);
              W[i + 1] = M.readInt32BE(i * 4 + 4);
            }
            for (; i < 160; i += 2) {
              var xh = W[i - 15 * 2];
              var xl = W[i - 15 * 2 + 1];
              var gamma0 = Gamma0(xh, xl);
              var gamma0l = Gamma0l(xl, xh);

              xh = W[i - 2 * 2];
              xl = W[i - 2 * 2 + 1];
              var gamma1 = Gamma1(xh, xl);
              var gamma1l = Gamma1l(xl, xh);

              // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
              var Wi7h = W[i - 7 * 2];
              var Wi7l = W[i - 7 * 2 + 1];

              var Wi16h = W[i - 16 * 2];
              var Wi16l = W[i - 16 * 2 + 1];

              var Wil = (gamma0l + Wi7l) | 0;
              var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0;
              Wil = (Wil + gamma1l) | 0;
              Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0;
              Wil = (Wil + Wi16l) | 0;
              Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0;

              W[i] = Wih;
              W[i + 1] = Wil;
            }

            for (var j = 0; j < 160; j += 2) {
              Wih = W[j];
              Wil = W[j + 1];

              var majh = maj(ah, bh, ch);
              var majl = maj(al, bl, cl);

              var sigma0h = sigma0(ah, al);
              var sigma0l = sigma0(al, ah);
              var sigma1h = sigma1(eh, el);
              var sigma1l = sigma1(el, eh);

              // t1 = h + sigma1 + ch + K[j] + W[j]
              var Kih = K[j];
              var Kil = K[j + 1];

              var chh = Ch(eh, fh, gh);
              var chl = Ch(el, fl, gl);

              var t1l = (hl + sigma1l) | 0;
              var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0;
              t1l = (t1l + chl) | 0;
              t1h = (t1h + chh + getCarry(t1l, chl)) | 0;
              t1l = (t1l + Kil) | 0;
              t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0;
              t1l = (t1l + Wil) | 0;
              t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0;

              // t2 = sigma0 + maj
              var t2l = (sigma0l + majl) | 0;
              var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0;

              hh = gh;
              hl = gl;
              gh = fh;
              gl = fl;
              fh = eh;
              fl = el;
              el = (dl + t1l) | 0;
              eh = (dh + t1h + getCarry(el, dl)) | 0;
              dh = ch;
              dl = cl;
              ch = bh;
              cl = bl;
              bh = ah;
              bl = al;
              al = (t1l + t2l) | 0;
              ah = (t1h + t2h + getCarry(al, t1l)) | 0;
            }

            this._al = (this._al + al) | 0;
            this._bl = (this._bl + bl) | 0;
            this._cl = (this._cl + cl) | 0;
            this._dl = (this._dl + dl) | 0;
            this._el = (this._el + el) | 0;
            this._fl = (this._fl + fl) | 0;
            this._gl = (this._gl + gl) | 0;
            this._hl = (this._hl + hl) | 0;

            this._ah = (this._ah + ah + getCarry(this._al, al)) | 0;
            this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0;
            this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0;
            this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0;
            this._eh = (this._eh + eh + getCarry(this._el, el)) | 0;
            this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0;
            this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0;
            this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0;
          };

          Sha512.prototype._hash = function() {
            var H = new Buffer(64);

            function writeInt64BE(h, l, offset) {
              H.writeInt32BE(h, offset);
              H.writeInt32BE(l, offset + 4);
            }

            writeInt64BE(this._ah, this._al, 0);
            writeInt64BE(this._bh, this._bl, 8);
            writeInt64BE(this._ch, this._cl, 16);
            writeInt64BE(this._dh, this._dl, 24);
            writeInt64BE(this._eh, this._el, 32);
            writeInt64BE(this._fh, this._fl, 40);
            writeInt64BE(this._gh, this._gl, 48);
            writeInt64BE(this._hh, this._hl, 56);

            return H;
          };

          module.exports = Sha512;

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(0).Buffer));

        /***/
      },
      /* 89 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var inherits = __webpack_require__(2);
        var Legacy = __webpack_require__(160);
        var Base = __webpack_require__(14);
        var Buffer = __webpack_require__(13).Buffer;
        var md5 = __webpack_require__(35);
        var RIPEMD160 = __webpack_require__(56);

        var sha = __webpack_require__(57);

        var ZEROS = Buffer.alloc(128);

        function Hmac(alg, key) {
          Base.call(this, "digest");
          if (typeof key === "string") {
            key = Buffer.from(key);
          }

          var blocksize = alg === "sha512" || alg === "sha384" ? 128 : 64;

          this._alg = alg;
          this._key = key;
          if (key.length > blocksize) {
            var hash = alg === "rmd160" ? new RIPEMD160() : sha(alg);
            key = hash.update(key).digest();
          } else if (key.length < blocksize) {
            key = Buffer.concat([key, ZEROS], blocksize);
          }

          var ipad = (this._ipad = Buffer.allocUnsafe(blocksize));
          var opad = (this._opad = Buffer.allocUnsafe(blocksize));

          for (var i = 0; i < blocksize; i++) {
            ipad[i] = key[i] ^ 0x36;
            opad[i] = key[i] ^ 0x5c;
          }
          this._hash = alg === "rmd160" ? new RIPEMD160() : sha(alg);
          this._hash.update(ipad);
        }

        inherits(Hmac, Base);

        Hmac.prototype._update = function(data) {
          this._hash.update(data);
        };

        Hmac.prototype._final = function() {
          var h = this._hash.digest();
          var hash = this._alg === "rmd160" ? new RIPEMD160() : sha(this._alg);
          return hash.update(this._opad).update(h).digest();
        };

        module.exports = function createHmac(alg, key) {
          alg = alg.toLowerCase();
          if (alg === "rmd160" || alg === "ripemd160") {
            return new Hmac("rmd160", key);
          }
          if (alg === "md5") {
            return new Legacy(md5, key);
          }
          return new Hmac(alg, key);
        };

        /***/
      },
      /* 90 */
      /***/ function(module, exports) {
        module.exports = {
          sha224WithRSAEncryption: {
            sign: "rsa",
            hash: "sha224",
            id: "302d300d06096086480165030402040500041c"
          },
          "RSA-SHA224": {
            sign: "ecdsa/rsa",
            hash: "sha224",
            id: "302d300d06096086480165030402040500041c"
          },
          sha256WithRSAEncryption: {
            sign: "rsa",
            hash: "sha256",
            id: "3031300d060960864801650304020105000420"
          },
          "RSA-SHA256": {
            sign: "ecdsa/rsa",
            hash: "sha256",
            id: "3031300d060960864801650304020105000420"
          },
          sha384WithRSAEncryption: {
            sign: "rsa",
            hash: "sha384",
            id: "3041300d060960864801650304020205000430"
          },
          "RSA-SHA384": {
            sign: "ecdsa/rsa",
            hash: "sha384",
            id: "3041300d060960864801650304020205000430"
          },
          sha512WithRSAEncryption: {
            sign: "rsa",
            hash: "sha512",
            id: "3051300d060960864801650304020305000440"
          },
          "RSA-SHA512": {
            sign: "ecdsa/rsa",
            hash: "sha512",
            id: "3051300d060960864801650304020305000440"
          },
          "RSA-SHA1": {
            sign: "rsa",
            hash: "sha1",
            id: "3021300906052b0e03021a05000414"
          },
          "ecdsa-with-SHA1": { sign: "ecdsa", hash: "sha1", id: "" },
          sha256: { sign: "ecdsa", hash: "sha256", id: "" },
          sha224: { sign: "ecdsa", hash: "sha224", id: "" },
          sha384: { sign: "ecdsa", hash: "sha384", id: "" },
          sha512: { sign: "ecdsa", hash: "sha512", id: "" },
          "DSA-SHA": { sign: "dsa", hash: "sha1", id: "" },
          "DSA-SHA1": { sign: "dsa", hash: "sha1", id: "" },
          DSA: { sign: "dsa", hash: "sha1", id: "" },
          "DSA-WITH-SHA224": { sign: "dsa", hash: "sha224", id: "" },
          "DSA-SHA224": { sign: "dsa", hash: "sha224", id: "" },
          "DSA-WITH-SHA256": { sign: "dsa", hash: "sha256", id: "" },
          "DSA-SHA256": { sign: "dsa", hash: "sha256", id: "" },
          "DSA-WITH-SHA384": { sign: "dsa", hash: "sha384", id: "" },
          "DSA-SHA384": { sign: "dsa", hash: "sha384", id: "" },
          "DSA-WITH-SHA512": { sign: "dsa", hash: "sha512", id: "" },
          "DSA-SHA512": { sign: "dsa", hash: "sha512", id: "" },
          "DSA-RIPEMD160": { sign: "dsa", hash: "rmd160", id: "" },
          ripemd160WithRSA: {
            sign: "rsa",
            hash: "rmd160",
            id: "3021300906052b2403020105000414"
          },
          "RSA-RIPEMD160": {
            sign: "rsa",
            hash: "rmd160",
            id: "3021300906052b2403020105000414"
          },
          md5WithRSAEncryption: {
            sign: "rsa",
            hash: "md5",
            id: "3020300c06082a864886f70d020505000410"
          },
          "RSA-MD5": {
            sign: "rsa",
            hash: "md5",
            id: "3020300c06082a864886f70d020505000410"
          }
        };

        /***/
      },
      /* 91 */
      /***/ function(module, exports, __webpack_require__) {
        exports.pbkdf2 = __webpack_require__(162);

        exports.pbkdf2Sync = __webpack_require__(94);

        /***/
      },
      /* 92 */
      /***/ function(module, exports) {
        var MAX_ALLOC = Math.pow(2, 30) - 1; // default in iojs
        module.exports = function(iterations, keylen) {
          if (typeof iterations !== "number") {
            throw new TypeError("Iterations not a number");
          }

          if (iterations < 0) {
            throw new TypeError("Bad iterations");
          }

          if (typeof keylen !== "number") {
            throw new TypeError("Key length not a number");
          }

          if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) {
            /* eslint no-self-compare: 0 */
            throw new TypeError("Bad key length");
          }
        };

        /***/
      },
      /* 93 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(process) {
          var defaultEncoding;
          /* istanbul ignore next */
          if (process.browser) {
            defaultEncoding = "utf-8";
          } else {
            var pVersionMajor = parseInt(
              process.version.split(".")[0].slice(1),
              10
            );

            defaultEncoding = pVersionMajor >= 6 ? "utf-8" : "binary";
          }
          module.exports = defaultEncoding;

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(6)));

        /***/
      },
      /* 94 */
      /***/ function(module, exports, __webpack_require__) {
        var md5 = __webpack_require__(35);
        var rmd160 = __webpack_require__(56);
        var sha = __webpack_require__(57);

        var checkParameters = __webpack_require__(92);
        var defaultEncoding = __webpack_require__(93);
        var Buffer = __webpack_require__(13).Buffer;
        var ZEROS = Buffer.alloc(128);
        var sizes = {
          md5: 16,
          sha1: 20,
          sha224: 28,
          sha256: 32,
          sha384: 48,
          sha512: 64,
          rmd160: 20,
          ripemd160: 20
        };

        function Hmac(alg, key, saltLen) {
          var hash = getDigest(alg);
          var blocksize = alg === "sha512" || alg === "sha384" ? 128 : 64;

          if (key.length > blocksize) {
            key = hash(key);
          } else if (key.length < blocksize) {
            key = Buffer.concat([key, ZEROS], blocksize);
          }

          var ipad = Buffer.allocUnsafe(blocksize + sizes[alg]);
          var opad = Buffer.allocUnsafe(blocksize + sizes[alg]);
          for (var i = 0; i < blocksize; i++) {
            ipad[i] = key[i] ^ 0x36;
            opad[i] = key[i] ^ 0x5c;
          }

          var ipad1 = Buffer.allocUnsafe(blocksize + saltLen + 4);
          ipad.copy(ipad1, 0, 0, blocksize);
          this.ipad1 = ipad1;
          this.ipad2 = ipad;
          this.opad = opad;
          this.alg = alg;
          this.blocksize = blocksize;
          this.hash = hash;
          this.size = sizes[alg];
        }

        Hmac.prototype.run = function(data, ipad) {
          data.copy(ipad, this.blocksize);
          var h = this.hash(ipad);
          h.copy(this.opad, this.blocksize);
          return this.hash(this.opad);
        };

        function getDigest(alg) {
          function shaFunc(data) {
            return sha(alg).update(data).digest();
          }

          if (alg === "rmd160" || alg === "ripemd160") return rmd160;
          if (alg === "md5") return md5;
          return shaFunc;
        }

        function pbkdf2(password, salt, iterations, keylen, digest) {
          if (!Buffer.isBuffer(password))
            password = Buffer.from(password, defaultEncoding);
          if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, defaultEncoding);

          checkParameters(iterations, keylen);

          digest = digest || "sha1";

          var hmac = new Hmac(digest, password, salt.length);

          var DK = Buffer.allocUnsafe(keylen);
          var block1 = Buffer.allocUnsafe(salt.length + 4);
          salt.copy(block1, 0, 0, salt.length);

          var destPos = 0;
          var hLen = sizes[digest];
          var l = Math.ceil(keylen / hLen);

          for (var i = 1; i <= l; i++) {
            block1.writeUInt32BE(i, salt.length);

            var T = hmac.run(block1, hmac.ipad1);
            var U = T;

            for (var j = 1; j < iterations; j++) {
              U = hmac.run(U, hmac.ipad2);
              for (var k = 0; k < hLen; k++) T[k] ^= U[k];
            }

            T.copy(DK, destPos);
            destPos += hLen;
          }

          return DK;
        }

        module.exports = pbkdf2;

        /***/
      },
      /* 95 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(Buffer) {
          var aes = __webpack_require__(37);
          var Transform = __webpack_require__(14);
          var inherits = __webpack_require__(2);

          inherits(StreamCipher, Transform);
          module.exports = StreamCipher;
          function StreamCipher(mode, key, iv, decrypt) {
            if (!(this instanceof StreamCipher)) {
              return new StreamCipher(mode, key, iv);
            }
            Transform.call(this);
            this._cipher = new aes.AES(key);
            this._prev = new Buffer(iv.length);
            this._cache = new Buffer("");
            this._secCache = new Buffer("");
            this._decrypt = decrypt;
            iv.copy(this._prev);
            this._mode = mode;
          }
          StreamCipher.prototype._update = function(chunk) {
            return this._mode.encrypt(this, chunk, this._decrypt);
          };
          StreamCipher.prototype._final = function() {
            this._cipher.scrub();
          };

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(0).Buffer));

        /***/
      },
      /* 96 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(Buffer) {
          var aes = __webpack_require__(37);
          var Transform = __webpack_require__(14);
          var inherits = __webpack_require__(2);
          var GHASH = __webpack_require__(165);
          var xor = __webpack_require__(26);
          inherits(StreamCipher, Transform);
          module.exports = StreamCipher;

          function StreamCipher(mode, key, iv, decrypt) {
            if (!(this instanceof StreamCipher)) {
              return new StreamCipher(mode, key, iv);
            }
            Transform.call(this);
            this._finID = Buffer.concat([iv, new Buffer([0, 0, 0, 1])]);
            iv = Buffer.concat([iv, new Buffer([0, 0, 0, 2])]);
            this._cipher = new aes.AES(key);
            this._prev = new Buffer(iv.length);
            this._cache = new Buffer("");
            this._secCache = new Buffer("");
            this._decrypt = decrypt;
            this._alen = 0;
            this._len = 0;
            iv.copy(this._prev);
            this._mode = mode;
            var h = new Buffer(4);
            h.fill(0);
            this._ghash = new GHASH(this._cipher.encryptBlock(h));
            this._authTag = null;
            this._called = false;
          }
          StreamCipher.prototype._update = function(chunk) {
            if (!this._called && this._alen) {
              var rump = 16 - this._alen % 16;
              if (rump < 16) {
                rump = new Buffer(rump);
                rump.fill(0);
                this._ghash.update(rump);
              }
            }
            this._called = true;
            var out = this._mode.encrypt(this, chunk);
            if (this._decrypt) {
              this._ghash.update(chunk);
            } else {
              this._ghash.update(out);
            }
            this._len += chunk.length;
            return out;
          };
          StreamCipher.prototype._final = function() {
            if (this._decrypt && !this._authTag) {
              throw new Error(
                "Unsupported state or unable to authenticate data"
              );
            }
            var tag = xor(
              this._ghash.final(this._alen * 8, this._len * 8),
              this._cipher.encryptBlock(this._finID)
            );
            if (this._decrypt) {
              if (xorTest(tag, this._authTag)) {
                throw new Error(
                  "Unsupported state or unable to authenticate data"
                );
              }
            } else {
              this._authTag = tag;
            }
            this._cipher.scrub();
          };
          StreamCipher.prototype.getAuthTag = function getAuthTag() {
            if (!this._decrypt && Buffer.isBuffer(this._authTag)) {
              return this._authTag;
            } else {
              throw new Error(
                "Attempting to get auth tag in unsupported state"
              );
            }
          };
          StreamCipher.prototype.setAuthTag = function setAuthTag(tag) {
            if (this._decrypt) {
              this._authTag = tag;
            } else {
              throw new Error(
                "Attempting to set auth tag in unsupported state"
              );
            }
          };
          StreamCipher.prototype.setAAD = function setAAD(buf) {
            if (!this._called) {
              this._ghash.update(buf);
              this._alen += buf.length;
            } else {
              throw new Error("Attempting to set AAD in unsupported state");
            }
          };
          function xorTest(a, b) {
            var out = 0;
            if (a.length !== b.length) {
              out++;
            }
            var len = Math.min(a.length, b.length);
            var i = -1;
            while (++i < len) {
              out += a[i] ^ b[i];
            }
            return out;
          }

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(0).Buffer));

        /***/
      },
      /* 97 */
      /***/ function(module, exports) {
        exports.encrypt = function(self, block) {
          return self._cipher.encryptBlock(block);
        };
        exports.decrypt = function(self, block) {
          return self._cipher.decryptBlock(block);
        };

        /***/
      },
      /* 98 */
      /***/ function(module, exports, __webpack_require__) {
        var xor = __webpack_require__(26);

        exports.encrypt = function(self, block) {
          var data = xor(block, self._prev);

          self._prev = self._cipher.encryptBlock(data);
          return self._prev;
        };

        exports.decrypt = function(self, block) {
          var pad = self._prev;

          self._prev = block;
          var out = self._cipher.decryptBlock(block);

          return xor(out, pad);
        };

        /***/
      },
      /* 99 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(Buffer) {
          var xor = __webpack_require__(26);

          exports.encrypt = function(self, data, decrypt) {
            var out = new Buffer("");
            var len;

            while (data.length) {
              if (self._cache.length === 0) {
                self._cache = self._cipher.encryptBlock(self._prev);
                self._prev = new Buffer("");
              }

              if (self._cache.length <= data.length) {
                len = self._cache.length;
                out = Buffer.concat([
                  out,
                  encryptStart(self, data.slice(0, len), decrypt)
                ]);
                data = data.slice(len);
              } else {
                out = Buffer.concat([out, encryptStart(self, data, decrypt)]);
                break;
              }
            }

            return out;
          };
          function encryptStart(self, data, decrypt) {
            var len = data.length;
            var out = xor(data, self._cache);
            self._cache = self._cache.slice(len);
            self._prev = Buffer.concat([self._prev, decrypt ? data : out]);
            return out;
          }

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(0).Buffer));

        /***/
      },
      /* 100 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(Buffer) {
          function encryptByte(self, byteParam, decrypt) {
            var pad = self._cipher.encryptBlock(self._prev);
            var out = pad[0] ^ byteParam;
            self._prev = Buffer.concat([
              self._prev.slice(1),
              new Buffer([decrypt ? byteParam : out])
            ]);
            return out;
          }
          exports.encrypt = function(self, chunk, decrypt) {
            var len = chunk.length;
            var out = new Buffer(len);
            var i = -1;
            while (++i < len) {
              out[i] = encryptByte(self, chunk[i], decrypt);
            }
            return out;
          };

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(0).Buffer));

        /***/
      },
      /* 101 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(Buffer) {
          function encryptByte(self, byteParam, decrypt) {
            var pad;
            var i = -1;
            var len = 8;
            var out = 0;
            var bit, value;
            while (++i < len) {
              pad = self._cipher.encryptBlock(self._prev);
              bit = byteParam & (1 << (7 - i)) ? 0x80 : 0;
              value = pad[0] ^ bit;
              out += (value & 0x80) >> (i % 8);
              self._prev = shiftIn(self._prev, decrypt ? bit : value);
            }
            return out;
          }
          exports.encrypt = function(self, chunk, decrypt) {
            var len = chunk.length;
            var out = new Buffer(len);
            var i = -1;
            while (++i < len) {
              out[i] = encryptByte(self, chunk[i], decrypt);
            }
            return out;
          };
          function shiftIn(buffer, value) {
            var len = buffer.length;
            var i = -1;
            var out = new Buffer(buffer.length);
            buffer = Buffer.concat([buffer, new Buffer([value])]);
            while (++i < len) {
              out[i] = (buffer[i] << 1) | (buffer[i + 1] >> 7);
            }
            return out;
          }

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(0).Buffer));

        /***/
      },
      /* 102 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(Buffer) {
          var xor = __webpack_require__(26);

          function getBlock(self) {
            self._prev = self._cipher.encryptBlock(self._prev);
            return self._prev;
          }

          exports.encrypt = function(self, chunk) {
            while (self._cache.length < chunk.length) {
              self._cache = Buffer.concat([self._cache, getBlock(self)]);
            }

            var pad = self._cache.slice(0, chunk.length);
            self._cache = self._cache.slice(chunk.length);
            return xor(chunk, pad);
          };

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(0).Buffer));

        /***/
      },
      /* 103 */
      /***/ function(module, exports, __webpack_require__) {
        var randomBytes = __webpack_require__(24);
        module.exports = findPrime;
        findPrime.simpleSieve = simpleSieve;
        findPrime.fermatTest = fermatTest;
        var BN = __webpack_require__(4);
        var TWENTYFOUR = new BN(24);
        var MillerRabin = __webpack_require__(105);
        var millerRabin = new MillerRabin();
        var ONE = new BN(1);
        var TWO = new BN(2);
        var FIVE = new BN(5);
        var SIXTEEN = new BN(16);
        var EIGHT = new BN(8);
        var TEN = new BN(10);
        var THREE = new BN(3);
        var SEVEN = new BN(7);
        var ELEVEN = new BN(11);
        var FOUR = new BN(4);
        var TWELVE = new BN(12);
        var primes = null;

        function _getPrimes() {
          if (primes !== null) return primes;

          var limit = 0x100000;
          var res = [];
          res[0] = 2;
          for (var i = 1, k = 3; k < limit; k += 2) {
            var sqrt = Math.ceil(Math.sqrt(k));
            for (var j = 0; j < i && res[j] <= sqrt; j++)
              if (k % res[j] === 0) break;

            if (i !== j && res[j] <= sqrt) continue;

            res[i++] = k;
          }
          primes = res;
          return res;
        }

        function simpleSieve(p) {
          var primes = _getPrimes();

          for (var i = 0; i < primes.length; i++)
            if (p.modn(primes[i]) === 0) {
              if (p.cmpn(primes[i]) === 0) {
                return true;
              } else {
                return false;
              }
            }

          return true;
        }

        function fermatTest(p) {
          var red = BN.mont(p);
          return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
        }

        function findPrime(bits, gen) {
          if (bits < 16) {
            // this is what openssl does
            if (gen === 2 || gen === 5) {
              return new BN([0x8c, 0x7b]);
            } else {
              return new BN([0x8c, 0x27]);
            }
          }
          gen = new BN(gen);

          var num, n2;

          while (true) {
            num = new BN(randomBytes(Math.ceil(bits / 8)));
            while (num.bitLength() > bits) {
              num.ishrn(1);
            }
            if (num.isEven()) {
              num.iadd(ONE);
            }
            if (!num.testn(1)) {
              num.iadd(TWO);
            }
            if (!gen.cmp(TWO)) {
              while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {
                num.iadd(FOUR);
              }
            } else if (!gen.cmp(FIVE)) {
              while (num.mod(TEN).cmp(THREE)) {
                num.iadd(FOUR);
              }
            }
            n2 = num.shrn(1);
            if (
              simpleSieve(n2) &&
              simpleSieve(num) &&
              fermatTest(n2) &&
              fermatTest(num) &&
              millerRabin.test(n2) &&
              millerRabin.test(num)
            ) {
              return num;
            }
          }
        }

        /***/
      },
      /* 104 */
      /***/ function(module, exports) {
        module.exports = function(module) {
          if (!module.webpackPolyfill) {
            module.deprecate = function() {};
            module.paths = [];
            // module.parent = undefined by default
            if (!module.children) module.children = [];
            Object.defineProperty(module, "loaded", {
              enumerable: true,
              get: function() {
                return module.l;
              }
            });
            Object.defineProperty(module, "id", {
              enumerable: true,
              get: function() {
                return module.i;
              }
            });
            module.webpackPolyfill = 1;
          }
          return module;
        };

        /***/
      },
      /* 105 */
      /***/ function(module, exports, __webpack_require__) {
        var bn = __webpack_require__(4);
        var brorand = __webpack_require__(106);

        function MillerRabin(rand) {
          this.rand = rand || new brorand.Rand();
        }
        module.exports = MillerRabin;

        MillerRabin.create = function create(rand) {
          return new MillerRabin(rand);
        };

        MillerRabin.prototype._rand = function _rand(n) {
          var len = n.bitLength();
          var buf = this.rand.generate(Math.ceil(len / 8));

          // Set low bits
          buf[0] |= 3;

          // Mask high bits
          var mask = len & 0x7;
          if (mask !== 0) buf[buf.length - 1] >>= 7 - mask;

          return new bn(buf);
        };

        MillerRabin.prototype.test = function test(n, k, cb) {
          var len = n.bitLength();
          var red = bn.mont(n);
          var rone = new bn(1).toRed(red);

          if (!k) k = Math.max(1, (len / 48) | 0);

          // Find d and s, (n - 1) = (2 ^ s) * d;
          var n1 = n.subn(1);
          var n2 = n1.subn(1);
          for (var s = 0; !n1.testn(s); s++) {}
          var d = n.shrn(s);

          var rn1 = n1.toRed(red);

          var prime = true;
          for (; k > 0; k--) {
            var a = this._rand(n2);
            if (cb) cb(a);

            var x = a.toRed(red).redPow(d);
            if (x.cmp(rone) === 0 || x.cmp(rn1) === 0) continue;

            for (var i = 1; i < s; i++) {
              x = x.redSqr();

              if (x.cmp(rone) === 0) return false;
              if (x.cmp(rn1) === 0) break;
            }

            if (i === s) return false;
          }

          return prime;
        };

        MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
          var len = n.bitLength();
          var red = bn.mont(n);
          var rone = new bn(1).toRed(red);

          if (!k) k = Math.max(1, (len / 48) | 0);

          // Find d and s, (n - 1) = (2 ^ s) * d;
          var n1 = n.subn(1);
          var n2 = n1.subn(1);
          for (var s = 0; !n1.testn(s); s++) {}
          var d = n.shrn(s);

          var rn1 = n1.toRed(red);

          for (; k > 0; k--) {
            var a = this._rand(n2);

            var g = n.gcd(a);
            if (g.cmpn(1) !== 0) return g;

            var x = a.toRed(red).redPow(d);
            if (x.cmp(rone) === 0 || x.cmp(rn1) === 0) continue;

            for (var i = 1; i < s; i++) {
              x = x.redSqr();

              if (x.cmp(rone) === 0) return x.fromRed().subn(1).gcd(n);
              if (x.cmp(rn1) === 0) break;
            }

            if (i === s) {
              x = x.redSqr();
              return x.fromRed().subn(1).gcd(n);
            }
          }

          return false;
        };

        /***/
      },
      /* 106 */
      /***/ function(module, exports, __webpack_require__) {
        var r;

        module.exports = function rand(len) {
          if (!r) r = new Rand(null);

          return r.generate(len);
        };

        function Rand(rand) {
          this.rand = rand;
        }
        module.exports.Rand = Rand;

        Rand.prototype.generate = function generate(len) {
          return this._rand(len);
        };

        // Emulate crypto API using randy
        Rand.prototype._rand = function _rand(n) {
          if (this.rand.getBytes) return this.rand.getBytes(n);

          var res = new Uint8Array(n);
          for (var i = 0; i < res.length; i++) res[i] = this.rand.getByte();
          return res;
        };

        if (typeof self === "object") {
          if (self.crypto && self.crypto.getRandomValues) {
            // Modern browsers
            Rand.prototype._rand = function _rand(n) {
              var arr = new Uint8Array(n);
              self.crypto.getRandomValues(arr);
              return arr;
            };
          } else if (self.msCrypto && self.msCrypto.getRandomValues) {
            // IE
            Rand.prototype._rand = function _rand(n) {
              var arr = new Uint8Array(n);
              self.msCrypto.getRandomValues(arr);
              return arr;
            };

            // Safari's WebWorkers do not have `crypto`
          } else if (typeof window === "object") {
            // Old junk
            Rand.prototype._rand = function() {
              throw new Error("Not implemented yet");
            };
          }
        } else {
          // Node.js or Web worker with no crypto support
          try {
            var crypto = __webpack_require__(175);
            if (typeof crypto.randomBytes !== "function")
              throw new Error("Not supported");

            Rand.prototype._rand = function _rand(n) {
              return crypto.randomBytes(n);
            };
          } catch (e) {}
        }

        /***/
      },
      /* 107 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var utils = exports;

        function toArray(msg, enc) {
          if (Array.isArray(msg)) return msg.slice();
          if (!msg) return [];
          var res = [];
          if (typeof msg !== "string") {
            for (var i = 0; i < msg.length; i++) res[i] = msg[i] | 0;
            return res;
          }
          if (enc === "hex") {
            msg = msg.replace(/[^a-z0-9]+/gi, "");
            if (msg.length % 2 !== 0) msg = "0" + msg;
            for (var i = 0; i < msg.length; i += 2)
              res.push(parseInt(msg[i] + msg[i + 1], 16));
          } else {
            for (var i = 0; i < msg.length; i++) {
              var c = msg.charCodeAt(i);
              var hi = c >> 8;
              var lo = c & 0xff;
              if (hi) res.push(hi, lo);
              else res.push(lo);
            }
          }
          return res;
        }
        utils.toArray = toArray;

        function zero2(word) {
          if (word.length === 1) return "0" + word;
          else return word;
        }
        utils.zero2 = zero2;

        function toHex(msg) {
          var res = "";
          for (var i = 0; i < msg.length; i++)
            res += zero2(msg[i].toString(16));
          return res;
        }
        utils.toHex = toHex;

        utils.encode = function encode(arr, enc) {
          if (enc === "hex") return toHex(arr);
          else return arr;
        };

        /***/
      },
      /* 108 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var utils = __webpack_require__(10);
        var rotr32 = utils.rotr32;

        function ft_1(s, x, y, z) {
          if (s === 0) return ch32(x, y, z);
          if (s === 1 || s === 3) return p32(x, y, z);
          if (s === 2) return maj32(x, y, z);
        }
        exports.ft_1 = ft_1;

        function ch32(x, y, z) {
          return (x & y) ^ (~x & z);
        }
        exports.ch32 = ch32;

        function maj32(x, y, z) {
          return (x & y) ^ (x & z) ^ (y & z);
        }
        exports.maj32 = maj32;

        function p32(x, y, z) {
          return x ^ y ^ z;
        }
        exports.p32 = p32;

        function s0_256(x) {
          return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
        }
        exports.s0_256 = s0_256;

        function s1_256(x) {
          return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
        }
        exports.s1_256 = s1_256;

        function g0_256(x) {
          return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
        }
        exports.g0_256 = g0_256;

        function g1_256(x) {
          return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
        }
        exports.g1_256 = g1_256;

        /***/
      },
      /* 109 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var utils = __webpack_require__(10);
        var common = __webpack_require__(27);
        var shaCommon = __webpack_require__(108);
        var assert = __webpack_require__(7);

        var sum32 = utils.sum32;
        var sum32_4 = utils.sum32_4;
        var sum32_5 = utils.sum32_5;
        var ch32 = shaCommon.ch32;
        var maj32 = shaCommon.maj32;
        var s0_256 = shaCommon.s0_256;
        var s1_256 = shaCommon.s1_256;
        var g0_256 = shaCommon.g0_256;
        var g1_256 = shaCommon.g1_256;

        var BlockHash = common.BlockHash;

        var sha256_K = [
          0x428a2f98,
          0x71374491,
          0xb5c0fbcf,
          0xe9b5dba5,
          0x3956c25b,
          0x59f111f1,
          0x923f82a4,
          0xab1c5ed5,
          0xd807aa98,
          0x12835b01,
          0x243185be,
          0x550c7dc3,
          0x72be5d74,
          0x80deb1fe,
          0x9bdc06a7,
          0xc19bf174,
          0xe49b69c1,
          0xefbe4786,
          0x0fc19dc6,
          0x240ca1cc,
          0x2de92c6f,
          0x4a7484aa,
          0x5cb0a9dc,
          0x76f988da,
          0x983e5152,
          0xa831c66d,
          0xb00327c8,
          0xbf597fc7,
          0xc6e00bf3,
          0xd5a79147,
          0x06ca6351,
          0x14292967,
          0x27b70a85,
          0x2e1b2138,
          0x4d2c6dfc,
          0x53380d13,
          0x650a7354,
          0x766a0abb,
          0x81c2c92e,
          0x92722c85,
          0xa2bfe8a1,
          0xa81a664b,
          0xc24b8b70,
          0xc76c51a3,
          0xd192e819,
          0xd6990624,
          0xf40e3585,
          0x106aa070,
          0x19a4c116,
          0x1e376c08,
          0x2748774c,
          0x34b0bcb5,
          0x391c0cb3,
          0x4ed8aa4a,
          0x5b9cca4f,
          0x682e6ff3,
          0x748f82ee,
          0x78a5636f,
          0x84c87814,
          0x8cc70208,
          0x90befffa,
          0xa4506ceb,
          0xbef9a3f7,
          0xc67178f2
        ];

        function SHA256() {
          if (!(this instanceof SHA256)) return new SHA256();

          BlockHash.call(this);
          this.h = [
            0x6a09e667,
            0xbb67ae85,
            0x3c6ef372,
            0xa54ff53a,
            0x510e527f,
            0x9b05688c,
            0x1f83d9ab,
            0x5be0cd19
          ];
          this.k = sha256_K;
          this.W = new Array(64);
        }
        utils.inherits(SHA256, BlockHash);
        module.exports = SHA256;

        SHA256.blockSize = 512;
        SHA256.outSize = 256;
        SHA256.hmacStrength = 192;
        SHA256.padLength = 64;

        SHA256.prototype._update = function _update(msg, start) {
          var W = this.W;

          for (var i = 0; i < 16; i++) W[i] = msg[start + i];
          for (; i < W.length; i++)
            W[i] = sum32_4(
              g1_256(W[i - 2]),
              W[i - 7],
              g0_256(W[i - 15]),
              W[i - 16]
            );

          var a = this.h[0];
          var b = this.h[1];
          var c = this.h[2];
          var d = this.h[3];
          var e = this.h[4];
          var f = this.h[5];
          var g = this.h[6];
          var h = this.h[7];

          assert(this.k.length === W.length);
          for (i = 0; i < W.length; i++) {
            var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
            var T2 = sum32(s0_256(a), maj32(a, b, c));
            h = g;
            g = f;
            f = e;
            e = sum32(d, T1);
            d = c;
            c = b;
            b = a;
            a = sum32(T1, T2);
          }

          this.h[0] = sum32(this.h[0], a);
          this.h[1] = sum32(this.h[1], b);
          this.h[2] = sum32(this.h[2], c);
          this.h[3] = sum32(this.h[3], d);
          this.h[4] = sum32(this.h[4], e);
          this.h[5] = sum32(this.h[5], f);
          this.h[6] = sum32(this.h[6], g);
          this.h[7] = sum32(this.h[7], h);
        };

        SHA256.prototype._digest = function digest(enc) {
          if (enc === "hex") return utils.toHex32(this.h, "big");
          else return utils.split32(this.h, "big");
        };

        /***/
      },
      /* 110 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var utils = __webpack_require__(10);
        var common = __webpack_require__(27);
        var assert = __webpack_require__(7);

        var rotr64_hi = utils.rotr64_hi;
        var rotr64_lo = utils.rotr64_lo;
        var shr64_hi = utils.shr64_hi;
        var shr64_lo = utils.shr64_lo;
        var sum64 = utils.sum64;
        var sum64_hi = utils.sum64_hi;
        var sum64_lo = utils.sum64_lo;
        var sum64_4_hi = utils.sum64_4_hi;
        var sum64_4_lo = utils.sum64_4_lo;
        var sum64_5_hi = utils.sum64_5_hi;
        var sum64_5_lo = utils.sum64_5_lo;

        var BlockHash = common.BlockHash;

        var sha512_K = [
          0x428a2f98,
          0xd728ae22,
          0x71374491,
          0x23ef65cd,
          0xb5c0fbcf,
          0xec4d3b2f,
          0xe9b5dba5,
          0x8189dbbc,
          0x3956c25b,
          0xf348b538,
          0x59f111f1,
          0xb605d019,
          0x923f82a4,
          0xaf194f9b,
          0xab1c5ed5,
          0xda6d8118,
          0xd807aa98,
          0xa3030242,
          0x12835b01,
          0x45706fbe,
          0x243185be,
          0x4ee4b28c,
          0x550c7dc3,
          0xd5ffb4e2,
          0x72be5d74,
          0xf27b896f,
          0x80deb1fe,
          0x3b1696b1,
          0x9bdc06a7,
          0x25c71235,
          0xc19bf174,
          0xcf692694,
          0xe49b69c1,
          0x9ef14ad2,
          0xefbe4786,
          0x384f25e3,
          0x0fc19dc6,
          0x8b8cd5b5,
          0x240ca1cc,
          0x77ac9c65,
          0x2de92c6f,
          0x592b0275,
          0x4a7484aa,
          0x6ea6e483,
          0x5cb0a9dc,
          0xbd41fbd4,
          0x76f988da,
          0x831153b5,
          0x983e5152,
          0xee66dfab,
          0xa831c66d,
          0x2db43210,
          0xb00327c8,
          0x98fb213f,
          0xbf597fc7,
          0xbeef0ee4,
          0xc6e00bf3,
          0x3da88fc2,
          0xd5a79147,
          0x930aa725,
          0x06ca6351,
          0xe003826f,
          0x14292967,
          0x0a0e6e70,
          0x27b70a85,
          0x46d22ffc,
          0x2e1b2138,
          0x5c26c926,
          0x4d2c6dfc,
          0x5ac42aed,
          0x53380d13,
          0x9d95b3df,
          0x650a7354,
          0x8baf63de,
          0x766a0abb,
          0x3c77b2a8,
          0x81c2c92e,
          0x47edaee6,
          0x92722c85,
          0x1482353b,
          0xa2bfe8a1,
          0x4cf10364,
          0xa81a664b,
          0xbc423001,
          0xc24b8b70,
          0xd0f89791,
          0xc76c51a3,
          0x0654be30,
          0xd192e819,
          0xd6ef5218,
          0xd6990624,
          0x5565a910,
          0xf40e3585,
          0x5771202a,
          0x106aa070,
          0x32bbd1b8,
          0x19a4c116,
          0xb8d2d0c8,
          0x1e376c08,
          0x5141ab53,
          0x2748774c,
          0xdf8eeb99,
          0x34b0bcb5,
          0xe19b48a8,
          0x391c0cb3,
          0xc5c95a63,
          0x4ed8aa4a,
          0xe3418acb,
          0x5b9cca4f,
          0x7763e373,
          0x682e6ff3,
          0xd6b2b8a3,
          0x748f82ee,
          0x5defb2fc,
          0x78a5636f,
          0x43172f60,
          0x84c87814,
          0xa1f0ab72,
          0x8cc70208,
          0x1a6439ec,
          0x90befffa,
          0x23631e28,
          0xa4506ceb,
          0xde82bde9,
          0xbef9a3f7,
          0xb2c67915,
          0xc67178f2,
          0xe372532b,
          0xca273ece,
          0xea26619c,
          0xd186b8c7,
          0x21c0c207,
          0xeada7dd6,
          0xcde0eb1e,
          0xf57d4f7f,
          0xee6ed178,
          0x06f067aa,
          0x72176fba,
          0x0a637dc5,
          0xa2c898a6,
          0x113f9804,
          0xbef90dae,
          0x1b710b35,
          0x131c471b,
          0x28db77f5,
          0x23047d84,
          0x32caab7b,
          0x40c72493,
          0x3c9ebe0a,
          0x15c9bebc,
          0x431d67c4,
          0x9c100d4c,
          0x4cc5d4be,
          0xcb3e42b6,
          0x597f299c,
          0xfc657e2a,
          0x5fcb6fab,
          0x3ad6faec,
          0x6c44198c,
          0x4a475817
        ];

        function SHA512() {
          if (!(this instanceof SHA512)) return new SHA512();

          BlockHash.call(this);
          this.h = [
            0x6a09e667,
            0xf3bcc908,
            0xbb67ae85,
            0x84caa73b,
            0x3c6ef372,
            0xfe94f82b,
            0xa54ff53a,
            0x5f1d36f1,
            0x510e527f,
            0xade682d1,
            0x9b05688c,
            0x2b3e6c1f,
            0x1f83d9ab,
            0xfb41bd6b,
            0x5be0cd19,
            0x137e2179
          ];
          this.k = sha512_K;
          this.W = new Array(160);
        }
        utils.inherits(SHA512, BlockHash);
        module.exports = SHA512;

        SHA512.blockSize = 1024;
        SHA512.outSize = 512;
        SHA512.hmacStrength = 192;
        SHA512.padLength = 128;

        SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
          var W = this.W;

          // 32 x 32bit words
          for (var i = 0; i < 32; i++) W[i] = msg[start + i];
          for (; i < W.length; i += 2) {
            var c0_hi = g1_512_hi(W[i - 4], W[i - 3]); // i - 2
            var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
            var c1_hi = W[i - 14]; // i - 7
            var c1_lo = W[i - 13];
            var c2_hi = g0_512_hi(W[i - 30], W[i - 29]); // i - 15
            var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
            var c3_hi = W[i - 32]; // i - 16
            var c3_lo = W[i - 31];

            W[i] = sum64_4_hi(
              c0_hi,
              c0_lo,
              c1_hi,
              c1_lo,
              c2_hi,
              c2_lo,
              c3_hi,
              c3_lo
            );
            W[i + 1] = sum64_4_lo(
              c0_hi,
              c0_lo,
              c1_hi,
              c1_lo,
              c2_hi,
              c2_lo,
              c3_hi,
              c3_lo
            );
          }
        };

        SHA512.prototype._update = function _update(msg, start) {
          this._prepareBlock(msg, start);

          var W = this.W;

          var ah = this.h[0];
          var al = this.h[1];
          var bh = this.h[2];
          var bl = this.h[3];
          var ch = this.h[4];
          var cl = this.h[5];
          var dh = this.h[6];
          var dl = this.h[7];
          var eh = this.h[8];
          var el = this.h[9];
          var fh = this.h[10];
          var fl = this.h[11];
          var gh = this.h[12];
          var gl = this.h[13];
          var hh = this.h[14];
          var hl = this.h[15];

          assert(this.k.length === W.length);
          for (var i = 0; i < W.length; i += 2) {
            var c0_hi = hh;
            var c0_lo = hl;
            var c1_hi = s1_512_hi(eh, el);
            var c1_lo = s1_512_lo(eh, el);
            var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
            var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
            var c3_hi = this.k[i];
            var c3_lo = this.k[i + 1];
            var c4_hi = W[i];
            var c4_lo = W[i + 1];

            var T1_hi = sum64_5_hi(
              c0_hi,
              c0_lo,
              c1_hi,
              c1_lo,
              c2_hi,
              c2_lo,
              c3_hi,
              c3_lo,
              c4_hi,
              c4_lo
            );
            var T1_lo = sum64_5_lo(
              c0_hi,
              c0_lo,
              c1_hi,
              c1_lo,
              c2_hi,
              c2_lo,
              c3_hi,
              c3_lo,
              c4_hi,
              c4_lo
            );

            c0_hi = s0_512_hi(ah, al);
            c0_lo = s0_512_lo(ah, al);
            c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
            c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

            var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
            var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

            hh = gh;
            hl = gl;

            gh = fh;
            gl = fl;

            fh = eh;
            fl = el;

            eh = sum64_hi(dh, dl, T1_hi, T1_lo);
            el = sum64_lo(dl, dl, T1_hi, T1_lo);

            dh = ch;
            dl = cl;

            ch = bh;
            cl = bl;

            bh = ah;
            bl = al;

            ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
            al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
          }

          sum64(this.h, 0, ah, al);
          sum64(this.h, 2, bh, bl);
          sum64(this.h, 4, ch, cl);
          sum64(this.h, 6, dh, dl);
          sum64(this.h, 8, eh, el);
          sum64(this.h, 10, fh, fl);
          sum64(this.h, 12, gh, gl);
          sum64(this.h, 14, hh, hl);
        };

        SHA512.prototype._digest = function digest(enc) {
          if (enc === "hex") return utils.toHex32(this.h, "big");
          else return utils.split32(this.h, "big");
        };

        function ch64_hi(xh, xl, yh, yl, zh) {
          var r = (xh & yh) ^ (~xh & zh);
          if (r < 0) r += 0x100000000;
          return r;
        }

        function ch64_lo(xh, xl, yh, yl, zh, zl) {
          var r = (xl & yl) ^ (~xl & zl);
          if (r < 0) r += 0x100000000;
          return r;
        }

        function maj64_hi(xh, xl, yh, yl, zh) {
          var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
          if (r < 0) r += 0x100000000;
          return r;
        }

        function maj64_lo(xh, xl, yh, yl, zh, zl) {
          var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
          if (r < 0) r += 0x100000000;
          return r;
        }

        function s0_512_hi(xh, xl) {
          var c0_hi = rotr64_hi(xh, xl, 28);
          var c1_hi = rotr64_hi(xl, xh, 2); // 34
          var c2_hi = rotr64_hi(xl, xh, 7); // 39

          var r = c0_hi ^ c1_hi ^ c2_hi;
          if (r < 0) r += 0x100000000;
          return r;
        }

        function s0_512_lo(xh, xl) {
          var c0_lo = rotr64_lo(xh, xl, 28);
          var c1_lo = rotr64_lo(xl, xh, 2); // 34
          var c2_lo = rotr64_lo(xl, xh, 7); // 39

          var r = c0_lo ^ c1_lo ^ c2_lo;
          if (r < 0) r += 0x100000000;
          return r;
        }

        function s1_512_hi(xh, xl) {
          var c0_hi = rotr64_hi(xh, xl, 14);
          var c1_hi = rotr64_hi(xh, xl, 18);
          var c2_hi = rotr64_hi(xl, xh, 9); // 41

          var r = c0_hi ^ c1_hi ^ c2_hi;
          if (r < 0) r += 0x100000000;
          return r;
        }

        function s1_512_lo(xh, xl) {
          var c0_lo = rotr64_lo(xh, xl, 14);
          var c1_lo = rotr64_lo(xh, xl, 18);
          var c2_lo = rotr64_lo(xl, xh, 9); // 41

          var r = c0_lo ^ c1_lo ^ c2_lo;
          if (r < 0) r += 0x100000000;
          return r;
        }

        function g0_512_hi(xh, xl) {
          var c0_hi = rotr64_hi(xh, xl, 1);
          var c1_hi = rotr64_hi(xh, xl, 8);
          var c2_hi = shr64_hi(xh, xl, 7);

          var r = c0_hi ^ c1_hi ^ c2_hi;
          if (r < 0) r += 0x100000000;
          return r;
        }

        function g0_512_lo(xh, xl) {
          var c0_lo = rotr64_lo(xh, xl, 1);
          var c1_lo = rotr64_lo(xh, xl, 8);
          var c2_lo = shr64_lo(xh, xl, 7);

          var r = c0_lo ^ c1_lo ^ c2_lo;
          if (r < 0) r += 0x100000000;
          return r;
        }

        function g1_512_hi(xh, xl) {
          var c0_hi = rotr64_hi(xh, xl, 19);
          var c1_hi = rotr64_hi(xl, xh, 29); // 61
          var c2_hi = shr64_hi(xh, xl, 6);

          var r = c0_hi ^ c1_hi ^ c2_hi;
          if (r < 0) r += 0x100000000;
          return r;
        }

        function g1_512_lo(xh, xl) {
          var c0_lo = rotr64_lo(xh, xl, 19);
          var c1_lo = rotr64_lo(xl, xh, 29); // 61
          var c2_lo = shr64_lo(xh, xl, 6);

          var r = c0_lo ^ c1_lo ^ c2_lo;
          if (r < 0) r += 0x100000000;
          return r;
        }

        /***/
      },
      /* 111 */
      /***/ function(module, exports, __webpack_require__) {
        var inherits = __webpack_require__(2);
        var Reporter = __webpack_require__(29).Reporter;
        var Buffer = __webpack_require__(0).Buffer;

        function DecoderBuffer(base, options) {
          Reporter.call(this, options);
          if (!Buffer.isBuffer(base)) {
            this.error("Input not Buffer");
            return;
          }

          this.base = base;
          this.offset = 0;
          this.length = base.length;
        }
        inherits(DecoderBuffer, Reporter);
        exports.DecoderBuffer = DecoderBuffer;

        DecoderBuffer.prototype.save = function save() {
          return {
            offset: this.offset,
            reporter: Reporter.prototype.save.call(this)
          };
        };

        DecoderBuffer.prototype.restore = function restore(save) {
          // Return skipped data
          var res = new DecoderBuffer(this.base);
          res.offset = save.offset;
          res.length = this.offset;

          this.offset = save.offset;
          Reporter.prototype.restore.call(this, save.reporter);

          return res;
        };

        DecoderBuffer.prototype.isEmpty = function isEmpty() {
          return this.offset === this.length;
        };

        DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
          if (this.offset + 1 <= this.length)
            return this.base.readUInt8(this.offset++, true);
          else return this.error(fail || "DecoderBuffer overrun");
        };

        DecoderBuffer.prototype.skip = function skip(bytes, fail) {
          if (!(this.offset + bytes <= this.length))
            return this.error(fail || "DecoderBuffer overrun");

          var res = new DecoderBuffer(this.base);

          // Share reporter state
          res._reporterState = this._reporterState;

          res.offset = this.offset;
          res.length = this.offset + bytes;
          this.offset += bytes;
          return res;
        };

        DecoderBuffer.prototype.raw = function raw(save) {
          return this.base.slice(save ? save.offset : this.offset, this.length);
        };

        function EncoderBuffer(value, reporter) {
          if (Array.isArray(value)) {
            this.length = 0;
            this.value = value.map(function(item) {
              if (!(item instanceof EncoderBuffer))
                item = new EncoderBuffer(item, reporter);
              this.length += item.length;
              return item;
            }, this);
          } else if (typeof value === "number") {
            if (!(0 <= value && value <= 0xff))
              return reporter.error("non-byte EncoderBuffer value");
            this.value = value;
            this.length = 1;
          } else if (typeof value === "string") {
            this.value = value;
            this.length = Buffer.byteLength(value);
          } else if (Buffer.isBuffer(value)) {
            this.value = value;
            this.length = value.length;
          } else {
            return reporter.error("Unsupported type: " + typeof value);
          }
        }
        exports.EncoderBuffer = EncoderBuffer;

        EncoderBuffer.prototype.join = function join(out, offset) {
          if (!out) out = new Buffer(this.length);
          if (!offset) offset = 0;

          if (this.length === 0) return out;

          if (Array.isArray(this.value)) {
            this.value.forEach(function(item) {
              item.join(out, offset);
              offset += item.length;
            });
          } else {
            if (typeof this.value === "number") out[offset] = this.value;
            else if (typeof this.value === "string")
              out.write(this.value, offset);
            else if (Buffer.isBuffer(this.value)) this.value.copy(out, offset);
            offset += this.length;
          }

          return out;
        };

        /***/
      },
      /* 112 */
      /***/ function(module, exports, __webpack_require__) {
        var constants = exports;

        // Helper
        constants._reverse = function reverse(map) {
          var res = {};

          Object.keys(map).forEach(function(key) {
            // Convert key to integer if it is stringified
            if ((key | 0) == key) key = key | 0;

            var value = map[key];
            res[value] = key;
          });

          return res;
        };

        constants.der = __webpack_require__(207);

        /***/
      },
      /* 113 */
      /***/ function(module, exports, __webpack_require__) {
        var inherits = __webpack_require__(2);

        var asn1 = __webpack_require__(28);
        var base = asn1.base;
        var bignum = asn1.bignum;

        // Import DER constants
        var der = asn1.constants.der;

        function DERDecoder(entity) {
          this.enc = "der";
          this.name = entity.name;
          this.entity = entity;

          // Construct base tree
          this.tree = new DERNode();
          this.tree._init(entity.body);
        }
        module.exports = DERDecoder;

        DERDecoder.prototype.decode = function decode(data, options) {
          if (!(data instanceof base.DecoderBuffer))
            data = new base.DecoderBuffer(data, options);

          return this.tree._decode(data, options);
        };

        // Tree methods

        function DERNode(parent) {
          base.Node.call(this, "der", parent);
        }
        inherits(DERNode, base.Node);

        DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
          if (buffer.isEmpty()) return false;

          var state = buffer.save();
          var decodedTag = derDecodeTag(
            buffer,
            'Failed to peek tag: "' + tag + '"'
          );
          if (buffer.isError(decodedTag)) return decodedTag;

          buffer.restore(state);

          return (
            decodedTag.tag === tag ||
            decodedTag.tagStr === tag ||
            decodedTag.tagStr + "of" === tag ||
            any
          );
        };

        DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
          var decodedTag = derDecodeTag(
            buffer,
            'Failed to decode tag of "' + tag + '"'
          );
          if (buffer.isError(decodedTag)) return decodedTag;

          var len = derDecodeLen(
            buffer,
            decodedTag.primitive,
            'Failed to get length of "' + tag + '"'
          );

          // Failure
          if (buffer.isError(len)) return len;

          if (
            !any &&
            decodedTag.tag !== tag &&
            decodedTag.tagStr !== tag &&
            decodedTag.tagStr + "of" !== tag
          ) {
            return buffer.error('Failed to match tag: "' + tag + '"');
          }

          if (decodedTag.primitive || len !== null)
            return buffer.skip(len, 'Failed to match body of: "' + tag + '"');

          // Indefinite length... find END tag
          var state = buffer.save();
          var res = this._skipUntilEnd(
            buffer,
            'Failed to skip indefinite length body: "' + this.tag + '"'
          );
          if (buffer.isError(res)) return res;

          len = buffer.offset - state.offset;
          buffer.restore(state);
          return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
        };

        DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
          while (true) {
            var tag = derDecodeTag(buffer, fail);
            if (buffer.isError(tag)) return tag;
            var len = derDecodeLen(buffer, tag.primitive, fail);
            if (buffer.isError(len)) return len;

            var res;
            if (tag.primitive || len !== null) res = buffer.skip(len);
            else res = this._skipUntilEnd(buffer, fail);

            // Failure
            if (buffer.isError(res)) return res;

            if (tag.tagStr === "end") break;
          }
        };

        DERNode.prototype._decodeList = function decodeList(
          buffer,
          tag,
          decoder,
          options
        ) {
          var result = [];
          while (!buffer.isEmpty()) {
            var possibleEnd = this._peekTag(buffer, "end");
            if (buffer.isError(possibleEnd)) return possibleEnd;

            var res = decoder.decode(buffer, "der", options);
            if (buffer.isError(res) && possibleEnd) break;
            result.push(res);
          }
          return result;
        };

        DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
          if (tag === "bitstr") {
            var unused = buffer.readUInt8();
            if (buffer.isError(unused)) return unused;
            return { unused: unused, data: buffer.raw() };
          } else if (tag === "bmpstr") {
            var raw = buffer.raw();
            if (raw.length % 2 === 1)
              return buffer.error(
                "Decoding of string type: bmpstr length mismatch"
              );

            var str = "";
            for (var i = 0; i < raw.length / 2; i++) {
              str += String.fromCharCode(raw.readUInt16BE(i * 2));
            }
            return str;
          } else if (tag === "numstr") {
            var numstr = buffer.raw().toString("ascii");
            if (!this._isNumstr(numstr)) {
              return buffer.error(
                "Decoding of string type: " + "numstr unsupported characters"
              );
            }
            return numstr;
          } else if (tag === "octstr") {
            return buffer.raw();
          } else if (tag === "objDesc") {
            return buffer.raw();
          } else if (tag === "printstr") {
            var printstr = buffer.raw().toString("ascii");
            if (!this._isPrintstr(printstr)) {
              return buffer.error(
                "Decoding of string type: " + "printstr unsupported characters"
              );
            }
            return printstr;
          } else if (/str$/.test(tag)) {
            return buffer.raw().toString();
          } else {
            return buffer.error(
              "Decoding of string type: " + tag + " unsupported"
            );
          }
        };

        DERNode.prototype._decodeObjid = function decodeObjid(
          buffer,
          values,
          relative
        ) {
          var result;
          var identifiers = [];
          var ident = 0;
          while (!buffer.isEmpty()) {
            var subident = buffer.readUInt8();
            ident <<= 7;
            ident |= subident & 0x7f;
            if ((subident & 0x80) === 0) {
              identifiers.push(ident);
              ident = 0;
            }
          }
          if (subident & 0x80) identifiers.push(ident);

          var first = (identifiers[0] / 40) | 0;
          var second = identifiers[0] % 40;

          if (relative) result = identifiers;
          else result = [first, second].concat(identifiers.slice(1));

          if (values) {
            var tmp = values[result.join(" ")];
            if (tmp === undefined) tmp = values[result.join(".")];
            if (tmp !== undefined) result = tmp;
          }

          return result;
        };

        DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
          var str = buffer.raw().toString();
          if (tag === "gentime") {
            var year = str.slice(0, 4) | 0;
            var mon = str.slice(4, 6) | 0;
            var day = str.slice(6, 8) | 0;
            var hour = str.slice(8, 10) | 0;
            var min = str.slice(10, 12) | 0;
            var sec = str.slice(12, 14) | 0;
          } else if (tag === "utctime") {
            var year = str.slice(0, 2) | 0;
            var mon = str.slice(2, 4) | 0;
            var day = str.slice(4, 6) | 0;
            var hour = str.slice(6, 8) | 0;
            var min = str.slice(8, 10) | 0;
            var sec = str.slice(10, 12) | 0;
            if (year < 70) year = 2000 + year;
            else year = 1900 + year;
          } else {
            return buffer.error(
              "Decoding " + tag + " time is not supported yet"
            );
          }

          return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
        };

        DERNode.prototype._decodeNull = function decodeNull(buffer) {
          return null;
        };

        DERNode.prototype._decodeBool = function decodeBool(buffer) {
          var res = buffer.readUInt8();
          if (buffer.isError(res)) return res;
          else return res !== 0;
        };

        DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
          // Bigint, return as it is (assume big endian)
          var raw = buffer.raw();
          var res = new bignum(raw);

          if (values) res = values[res.toString(10)] || res;

          return res;
        };

        DERNode.prototype._use = function use(entity, obj) {
          if (typeof entity === "function") entity = entity(obj);
          return entity._getDecoder("der").tree;
        };

        // Utility methods

        function derDecodeTag(buf, fail) {
          var tag = buf.readUInt8(fail);
          if (buf.isError(tag)) return tag;

          var cls = der.tagClass[tag >> 6];
          var primitive = (tag & 0x20) === 0;

          // Multi-octet tag - load
          if ((tag & 0x1f) === 0x1f) {
            var oct = tag;
            tag = 0;
            while ((oct & 0x80) === 0x80) {
              oct = buf.readUInt8(fail);
              if (buf.isError(oct)) return oct;

              tag <<= 7;
              tag |= oct & 0x7f;
            }
          } else {
            tag &= 0x1f;
          }
          var tagStr = der.tag[tag];

          return {
            cls: cls,
            primitive: primitive,
            tag: tag,
            tagStr: tagStr
          };
        }

        function derDecodeLen(buf, primitive, fail) {
          var len = buf.readUInt8(fail);
          if (buf.isError(len)) return len;

          // Indefinite form
          if (!primitive && len === 0x80) return null;

          // Definite form
          if ((len & 0x80) === 0) {
            // Short form
            return len;
          }

          // Long form
          var num = len & 0x7f;
          if (num > 4) return buf.error("length octect is too long");

          len = 0;
          for (var i = 0; i < num; i++) {
            len <<= 8;
            var j = buf.readUInt8(fail);
            if (buf.isError(j)) return j;
            len |= j;
          }

          return len;
        }

        /***/
      },
      /* 114 */
      /***/ function(module, exports, __webpack_require__) {
        var inherits = __webpack_require__(2);
        var Buffer = __webpack_require__(0).Buffer;

        var asn1 = __webpack_require__(28);
        var base = asn1.base;

        // Import DER constants
        var der = asn1.constants.der;

        function DEREncoder(entity) {
          this.enc = "der";
          this.name = entity.name;
          this.entity = entity;

          // Construct base tree
          this.tree = new DERNode();
          this.tree._init(entity.body);
        }
        module.exports = DEREncoder;

        DEREncoder.prototype.encode = function encode(data, reporter) {
          return this.tree._encode(data, reporter).join();
        };

        // Tree methods

        function DERNode(parent) {
          base.Node.call(this, "der", parent);
        }
        inherits(DERNode, base.Node);

        DERNode.prototype._encodeComposite = function encodeComposite(
          tag,
          primitive,
          cls,
          content
        ) {
          var encodedTag = encodeTag(tag, primitive, cls, this.reporter);

          // Short form
          if (content.length < 0x80) {
            var header = new Buffer(2);
            header[0] = encodedTag;
            header[1] = content.length;
            return this._createEncoderBuffer([header, content]);
          }

          // Long form
          // Count octets required to store length
          var lenOctets = 1;
          for (var i = content.length; i >= 0x100; i >>= 8) lenOctets++;

          var header = new Buffer(1 + 1 + lenOctets);
          header[0] = encodedTag;
          header[1] = 0x80 | lenOctets;

          for (var i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)
            header[i] = j & 0xff;

          return this._createEncoderBuffer([header, content]);
        };

        DERNode.prototype._encodeStr = function encodeStr(str, tag) {
          if (tag === "bitstr") {
            return this._createEncoderBuffer([str.unused | 0, str.data]);
          } else if (tag === "bmpstr") {
            var buf = new Buffer(str.length * 2);
            for (var i = 0; i < str.length; i++) {
              buf.writeUInt16BE(str.charCodeAt(i), i * 2);
            }
            return this._createEncoderBuffer(buf);
          } else if (tag === "numstr") {
            if (!this._isNumstr(str)) {
              return this.reporter.error(
                "Encoding of string type: numstr supports " +
                  "only digits and space"
              );
            }
            return this._createEncoderBuffer(str);
          } else if (tag === "printstr") {
            if (!this._isPrintstr(str)) {
              return this.reporter.error(
                "Encoding of string type: printstr supports " +
                  "only latin upper and lower case letters, " +
                  "digits, space, apostrophe, left and rigth " +
                  "parenthesis, plus sign, comma, hyphen, " +
                  "dot, slash, colon, equal sign, " +
                  "question mark"
              );
            }
            return this._createEncoderBuffer(str);
          } else if (/str$/.test(tag)) {
            return this._createEncoderBuffer(str);
          } else if (tag === "objDesc") {
            return this._createEncoderBuffer(str);
          } else {
            return this.reporter.error(
              "Encoding of string type: " + tag + " unsupported"
            );
          }
        };

        DERNode.prototype._encodeObjid = function encodeObjid(
          id,
          values,
          relative
        ) {
          if (typeof id === "string") {
            if (!values)
              return this.reporter.error(
                "string objid given, but no values map found"
              );
            if (!values.hasOwnProperty(id))
              return this.reporter.error("objid not found in values map");
            id = values[id].split(/[\s\.]+/g);
            for (var i = 0; i < id.length; i++) id[i] |= 0;
          } else if (Array.isArray(id)) {
            id = id.slice();
            for (var i = 0; i < id.length; i++) id[i] |= 0;
          }

          if (!Array.isArray(id)) {
            return this.reporter.error(
              "objid() should be either array or string, " +
                "got: " +
                JSON.stringify(id)
            );
          }

          if (!relative) {
            if (id[1] >= 40)
              return this.reporter.error("Second objid identifier OOB");
            id.splice(0, 2, id[0] * 40 + id[1]);
          }

          // Count number of octets
          var size = 0;
          for (var i = 0; i < id.length; i++) {
            var ident = id[i];
            for (size++; ident >= 0x80; ident >>= 7) size++;
          }

          var objid = new Buffer(size);
          var offset = objid.length - 1;
          for (var i = id.length - 1; i >= 0; i--) {
            var ident = id[i];
            objid[offset--] = ident & 0x7f;
            while ((ident >>= 7) > 0) objid[offset--] = 0x80 | (ident & 0x7f);
          }

          return this._createEncoderBuffer(objid);
        };

        function two(num) {
          if (num < 10) return "0" + num;
          else return num;
        }

        DERNode.prototype._encodeTime = function encodeTime(time, tag) {
          var str;
          var date = new Date(time);

          if (tag === "gentime") {
            str = [
              two(date.getFullYear()),
              two(date.getUTCMonth() + 1),
              two(date.getUTCDate()),
              two(date.getUTCHours()),
              two(date.getUTCMinutes()),
              two(date.getUTCSeconds()),
              "Z"
            ].join("");
          } else if (tag === "utctime") {
            str = [
              two(date.getFullYear() % 100),
              two(date.getUTCMonth() + 1),
              two(date.getUTCDate()),
              two(date.getUTCHours()),
              two(date.getUTCMinutes()),
              two(date.getUTCSeconds()),
              "Z"
            ].join("");
          } else {
            this.reporter.error(
              "Encoding " + tag + " time is not supported yet"
            );
          }

          return this._encodeStr(str, "octstr");
        };

        DERNode.prototype._encodeNull = function encodeNull() {
          return this._createEncoderBuffer("");
        };

        DERNode.prototype._encodeInt = function encodeInt(num, values) {
          if (typeof num === "string") {
            if (!values)
              return this.reporter.error(
                "String int or enum given, but no values map"
              );
            if (!values.hasOwnProperty(num)) {
              return this.reporter.error(
                "Values map doesn't contain: " + JSON.stringify(num)
              );
            }
            num = values[num];
          }

          // Bignum, assume big endian
          if (typeof num !== "number" && !Buffer.isBuffer(num)) {
            var numArray = num.toArray();
            if (!num.sign && numArray[0] & 0x80) {
              numArray.unshift(0);
            }
            num = new Buffer(numArray);
          }

          if (Buffer.isBuffer(num)) {
            var size = num.length;
            if (num.length === 0) size++;

            var out = new Buffer(size);
            num.copy(out);
            if (num.length === 0) out[0] = 0;
            return this._createEncoderBuffer(out);
          }

          if (num < 0x80) return this._createEncoderBuffer(num);

          if (num < 0x100) return this._createEncoderBuffer([0, num]);

          var size = 1;
          for (var i = num; i >= 0x100; i >>= 8) size++;

          var out = new Array(size);
          for (var i = out.length - 1; i >= 0; i--) {
            out[i] = num & 0xff;
            num >>= 8;
          }
          if (out[0] & 0x80) {
            out.unshift(0);
          }

          return this._createEncoderBuffer(new Buffer(out));
        };

        DERNode.prototype._encodeBool = function encodeBool(value) {
          return this._createEncoderBuffer(value ? 0xff : 0);
        };

        DERNode.prototype._use = function use(entity, obj) {
          if (typeof entity === "function") entity = entity(obj);
          return entity._getEncoder("der").tree;
        };

        DERNode.prototype._skipDefault = function skipDefault(
          dataBuffer,
          reporter,
          parent
        ) {
          var state = this._baseState;
          var i;
          if (state["default"] === null) return false;

          var data = dataBuffer.join();
          if (state.defaultBuffer === undefined)
            state.defaultBuffer = this._encodeValue(
              state["default"],
              reporter,
              parent
            ).join();

          if (data.length !== state.defaultBuffer.length) return false;

          for (i = 0; i < data.length; i++)
            if (data[i] !== state.defaultBuffer[i]) return false;

          return true;
        };

        // Utility methods

        function encodeTag(tag, primitive, cls, reporter) {
          var res;

          if (tag === "seqof") tag = "seq";
          else if (tag === "setof") tag = "set";

          if (der.tagByName.hasOwnProperty(tag)) res = der.tagByName[tag];
          else if (typeof tag === "number" && (tag | 0) === tag) res = tag;
          else return reporter.error("Unknown tag: " + tag);

          if (res >= 0x1f)
            return reporter.error("Multi-octet tag encoding unsupported");

          if (!primitive) res |= 0x20;

          res |= der.tagClassByName[cls || "universal"] << 6;

          return res;
        }

        /***/
      },
      /* 115 */
      /***/ function(module, exports) {
        module.exports = {
          "1.3.132.0.10": "secp256k1",
          "1.3.132.0.33": "p224",
          "1.2.840.10045.3.1.1": "p192",
          "1.2.840.10045.3.1.7": "p256",
          "1.3.132.0.34": "p384",
          "1.3.132.0.35": "p521"
        };

        /***/
      },
      /* 116 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(Buffer) {
          var createHash = __webpack_require__(25);
          module.exports = function(seed, len) {
            var t = new Buffer("");
            var i = 0,
              c;
            while (t.length < len) {
              c = i2ops(i++);
              t = Buffer.concat([
                t,
                createHash("sha1").update(seed).update(c).digest()
              ]);
            }
            return t.slice(0, len);
          };

          function i2ops(c) {
            var out = new Buffer(4);
            out.writeUInt32BE(c, 0);
            return out;
          }
          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(0).Buffer));

        /***/
      },
      /* 117 */
      /***/ function(module, exports) {
        module.exports = function xor(a, b) {
          var len = a.length;
          var i = -1;
          while (++i < len) {
            a[i] ^= b[i];
          }
          return a;
        };

        /***/
      },
      /* 118 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(Buffer) {
          var bn = __webpack_require__(4);
          function withPublic(paddedMsg, key) {
            return new Buffer(
              paddedMsg
                .toRed(bn.mont(key.modulus))
                .redPow(new bn(key.publicExponent))
                .fromRed()
                .toArray()
            );
          }

          module.exports = withPublic;
          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(0).Buffer));

        /***/
      },
      /* 119 */
      /***/ function(module, exports, __webpack_require__) {
        /*global module*/
        var Buffer = __webpack_require__(0).Buffer;

        module.exports = function toString(obj) {
          if (typeof obj === "string") return obj;
          if (typeof obj === "number" || Buffer.isBuffer(obj))
            return obj.toString();
          return JSON.stringify(obj);
        };

        /***/
      },
      /* 120 */
      /***/ function(module, exports, __webpack_require__) {
        var JsonWebTokenError = __webpack_require__(42);

        var NotBeforeError = function(message, date) {
          JsonWebTokenError.call(this, message);
          this.name = "NotBeforeError";
          this.date = date;
        };

        NotBeforeError.prototype = Object.create(JsonWebTokenError.prototype);

        NotBeforeError.prototype.constructor = NotBeforeError;

        module.exports = NotBeforeError;

        /***/
      },
      /* 121 */
      /***/ function(module, exports, __webpack_require__) {
        var JsonWebTokenError = __webpack_require__(42);

        var TokenExpiredError = function(message, expiredAt) {
          JsonWebTokenError.call(this, message);
          this.name = "TokenExpiredError";
          this.expiredAt = expiredAt;
        };

        TokenExpiredError.prototype = Object.create(
          JsonWebTokenError.prototype
        );

        TokenExpiredError.prototype.constructor = TokenExpiredError;

        module.exports = TokenExpiredError;

        /***/
      },
      /* 122 */
      /***/ function(module, exports) {
        module.exports = extend;

        var hasOwnProperty = Object.prototype.hasOwnProperty;

        function extend() {
          var target = {};

          for (var i = 0; i < arguments.length; i++) {
            var source = arguments[i];

            for (var key in source) {
              if (hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }

          return target;
        }

        /***/
      },
      /* 123 */
      /***/ function(module, __webpack_exports__, __webpack_require__) {
        "use strict";
        Object.defineProperty(__webpack_exports__, "__esModule", {
          value: true
        });
        /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_node_forge__ = __webpack_require__(
          62
        );
        /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_node_forge___default = __webpack_require__.n(
          __WEBPACK_IMPORTED_MODULE_0_node_forge__
        );
        /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_debug__ = __webpack_require__(
          136
        );
        /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_debug___default = __webpack_require__.n(
          __WEBPACK_IMPORTED_MODULE_1_debug__
        );
        /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_jsonwebtoken__ = __webpack_require__(
          138
        );
        /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_jsonwebtoken___default = __webpack_require__.n(
          __WEBPACK_IMPORTED_MODULE_2_jsonwebtoken__
        );
        /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils__ = __webpack_require__(
          228
        );
        /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_url__ = __webpack_require__(
          229
        );
        /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_url___default = __webpack_require__.n(
          __WEBPACK_IMPORTED_MODULE_4_url__
        );
        /* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__ca_js__ = __webpack_require__(
          235
        );

        const log = __WEBPACK_IMPORTED_MODULE_1_debug___default()(
          "sk:dove-jwt"
        );

        const throwCode = function(code) {
          const err = new Error(code);
          throw err;
        };

        class DoveJwt {
          /**
   * Create a new DoveJwt instance. Usually you won't need to do this -- we've already created one
   * for you that you can get at `import dove from "dove-jwt".` But if you need to have different
   * instances of dove that trust different root CAs, you might make more than one.
   * @return {DoveJwt}
   */
          constructor() {
            this.caStore = __WEBPACK_IMPORTED_MODULE_0_node_forge___default.a.pki.createCaStore();
          }

          /**
   * Add one or more trusted root CAs.
   *
   * The behavior here is kinda weird. We only support RSA keys, but we also want to be able to
   * seamlessly import /etc/ssl/certs/ca-certificates.crt. So, if you try and pass in a single PEM
   * file which we can't parse, that's an error. But if you pass in a big ol' bundle of
   * concatenated CAs, we only throw an error if they're all invalid. (And we print a warning, but
   * that'll have to change if people actually lose this library for anything 😀)
   *
   * @param {String} rootCA PEM-encoded root CA. Lots of them concatted together is fine too.
   */
          addCertAuthority(rootCA) {
            let added = 0;
            let failed = 0;
            let lastError;
            Object(__WEBPACK_IMPORTED_MODULE_3__utils__["c" /* splitca */])(
              rootCA
            ).forEach(ca => {
              try {
                this.caStore.addCertificate(ca);
                added += 1;
              } catch (e) {
                // We can safely ignore this very specific error... I guess. Eew for matching this error
                // this way.
                if (e.message !== "Cannot read public key. OID is not RSA.") {
                  throw e;
                } else {
                  failed += 1;
                }
              }
            });
            if (added === 0 && failed === 0) {
              throw new Error("addCertAuthority called with no keys.");
            }
            if (added === 0) {
              throw new Error(
                "None of the keys passed to addCertAuthority were RSA keys, none added."
              );
            }
            if (failed > 0) {
              log(
                `${added} RSA CAs added, ${failed} non-RSA CAs ignored. (This is normal because we only support RSA certs, and is not ordinarily cause for concern)`
              );
            }
          }

          /**
   * Use the system's built-in root CAs as best as we can. See ca.js for details but basically only
   * works on Debian-y systems right now. See ca.js and ca-browser.js.
   */
          useSystemCertAuthorities() {
            const systemCAs = Object(
              __WEBPACK_IMPORTED_MODULE_5__ca_js__["a" /* default */]
            )();
            this.addCertAuthority(systemCAs);
          }

          /**
   * Throws a cert_untrusted error if the cert isn't trusted according to our CA store.
   * @param  {Strong} cert PEM formatted cert
   */
          verifyCertTrusted(cert) {
            try {
              const result = __WEBPACK_IMPORTED_MODULE_0_node_forge___default.a.pki.verifyCertificateChain(
                this.caStore,
                Object(__WEBPACK_IMPORTED_MODULE_3__utils__["c" /* splitca */])(
                  cert
                ).map(
                  __WEBPACK_IMPORTED_MODULE_0_node_forge___default.a.pki
                    .certificateFromPem
                )
              );
            } catch (e) {
              log("Error from forge.pki.verifyCertificateChain", e);
              throwCode("cert_untrusted");
            }
          }

          /**
   * If we weren't provided an issuer, derive it from the cert
   * @param  {String} cert PEM-formatted certificate
   * @return {String} https://example.com/
   */
          getIssuer(cert) {
            const forgeCert = __WEBPACK_IMPORTED_MODULE_0_node_forge___default.a.pki.certificateFromPem(
              cert
            );
            const subject = forgeCert.subject.getField("CN");
            const commonName = subject.value;
            return `https://${commonName}/`;
          }

          verifyCertIssuerMatch(cert, issuer) {
            if (!issuer) {
              throwCode("issuer_missing");
            }
            const { host } = Object(__WEBPACK_IMPORTED_MODULE_4_url__["parse"])(
              issuer
            );
            if (issuer !== `https://${host}/`) {
              log(
                `Malformed issuer: "${issuer}" should be of form "https://${host}/"`
              );
              throwCode("issuer_invalid");
            }
            let commonName;
            try {
              const forgeCert = __WEBPACK_IMPORTED_MODULE_0_node_forge___default.a.pki.certificateFromPem(
                cert
              );
              const subject = forgeCert.subject.getField("CN");
              commonName = subject.value;
            } catch (e) {
              log("Error from forge", e);
              throwCode("x5c_invalid");
            }
            if (host !== commonName) {
              log(`Incorrect issuer: ${host} !== ${commonName}`);
              throwCode("issuer_wrong");
            }
          }

          /**
   * Create a new dove-jwt.
   * @param  {Object} payload   Body of the JWT you'd like to produce. Passed directly to jsonwebtoken.
   * @param  {String} secretKey RSA secret key.
   * @param  {String} cert      RSA cert, signed by your relevant CA.
   * @param  {Object} options   Options object, passed through to [the same configuration options
   *                            of node-jsonwebtoken](https://github.com/auth0/node-jsonwebtoken#usage).
   * @return {String} The dove-jwt.
   */
          sign(payload, secretKey, cert, options = {}) {
            if (!payload || !secretKey || !cert) {
              throw new Error("Missing required parameters to dove.sign.");
            }
            this.verifyCertTrusted(cert);
            options.algorithm = "RS256";
            if (!options.issuer) {
              options.issuer = this.getIssuer(cert);
            } else {
              this.verifyCertIssuerMatch(cert, options.issuer);
            }
            if (!options.header) {
              options.header = {};
            }
            options.header.x5c = Object(
              __WEBPACK_IMPORTED_MODULE_3__utils__["b" /* pemToDerArray */]
            )(cert);
            return __WEBPACK_IMPORTED_MODULE_2_jsonwebtoken___default.a.sign(
              payload,
              secretKey,
              options
            );
          }

          /**
   * Parse and verify a dove-jwt.
   * @param  {[type]} token The dove-jwt
   * @return {Object}       Returns a decrypted JWT. Otherwise, throws an error otherwise. If
   *                        you want to look at the (evil, invalid, not-to-be-trusted) JWT
   *                        after a verification failure, it's available on the `decryptedJwt`
   *                        property of the error.
   */
          verify(token) {
            const {
              header,
              payload: untrustedPayload
            } = __WEBPACK_IMPORTED_MODULE_2_jsonwebtoken___default.a.decode(
              token,
              {
                complete: true
              }
            );
            if (!header.x5c) {
              throwCode("x5c_missing");
            }
            let cert;
            try {
              cert = Object(
                __WEBPACK_IMPORTED_MODULE_3__utils__["a" /* derArrayToPem */]
              )(header.x5c);
            } catch (e) {
              log("Error from forge", e);
              throwCode("x5c_invalid");
            }
            this.verifyCertTrusted(cert);
            this.verifyCertIssuerMatch(cert, untrustedPayload.iss);
            // jsonwebtoken checks for this, but it's v important, so let's check too
            if (header.alg !== "RS256") {
              throwCode("algorithm_invalid");
            }
            const trustedPayload = __WEBPACK_IMPORTED_MODULE_2_jsonwebtoken___default.a.verify(
              token,
              cert,
              { algorithms: "RS256" }
            );
            return trustedPayload;
          }
        }
        /* harmony export (immutable) */ __webpack_exports__[
          "DoveJwt"
        ] = DoveJwt;

        const defaultDove = new DoveJwt();
        /* harmony default export */ __webpack_exports__[
          "default"
        ] = defaultDove;

        /***/
      },
      /* 124 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(global, process) {
          (function(global, undefined) {
            "use strict";

            if (global.setImmediate) {
              return;
            }

            var nextHandle = 1; // Spec says greater than zero
            var tasksByHandle = {};
            var currentlyRunningATask = false;
            var doc = global.document;
            var registerImmediate;

            function setImmediate(callback) {
              // Callback can either be a function or a string
              if (typeof callback !== "function") {
                callback = new Function("" + callback);
              }
              // Copy function arguments
              var args = new Array(arguments.length - 1);
              for (var i = 0; i < args.length; i++) {
                args[i] = arguments[i + 1];
              }
              // Store and register the task
              var task = { callback: callback, args: args };
              tasksByHandle[nextHandle] = task;
              registerImmediate(nextHandle);
              return nextHandle++;
            }

            function clearImmediate(handle) {
              delete tasksByHandle[handle];
            }

            function run(task) {
              var callback = task.callback;
              var args = task.args;
              switch (args.length) {
                case 0:
                  callback();
                  break;
                case 1:
                  callback(args[0]);
                  break;
                case 2:
                  callback(args[0], args[1]);
                  break;
                case 3:
                  callback(args[0], args[1], args[2]);
                  break;
                default:
                  callback.apply(undefined, args);
                  break;
              }
            }

            function runIfPresent(handle) {
              // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
              // So if we're currently running a task, we'll need to delay this invocation.
              if (currentlyRunningATask) {
                // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
                // "too much recursion" error.
                setTimeout(runIfPresent, 0, handle);
              } else {
                var task = tasksByHandle[handle];
                if (task) {
                  currentlyRunningATask = true;
                  try {
                    run(task);
                  } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                  }
                }
              }
            }

            function installNextTickImplementation() {
              registerImmediate = function(handle) {
                process.nextTick(function() {
                  runIfPresent(handle);
                });
              };
            }

            function canUsePostMessage() {
              // The test against `importScripts` prevents this implementation from being installed inside a web worker,
              // where `global.postMessage` means something completely different and can't be used for this purpose.
              if (global.postMessage && !global.importScripts) {
                var postMessageIsAsynchronous = true;
                var oldOnMessage = global.onmessage;
                global.onmessage = function() {
                  postMessageIsAsynchronous = false;
                };
                global.postMessage("", "*");
                global.onmessage = oldOnMessage;
                return postMessageIsAsynchronous;
              }
            }

            function installPostMessageImplementation() {
              // Installs an event handler on `global` for the `message` event: see
              // * https://developer.mozilla.org/en/DOM/window.postMessage
              // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

              var messagePrefix = "setImmediate$" + Math.random() + "$";
              var onGlobalMessage = function(event) {
                if (
                  event.source === global &&
                  typeof event.data === "string" &&
                  event.data.indexOf(messagePrefix) === 0
                ) {
                  runIfPresent(+event.data.slice(messagePrefix.length));
                }
              };

              if (global.addEventListener) {
                global.addEventListener("message", onGlobalMessage, false);
              } else {
                global.attachEvent("onmessage", onGlobalMessage);
              }

              registerImmediate = function(handle) {
                global.postMessage(messagePrefix + handle, "*");
              };
            }

            function installMessageChannelImplementation() {
              var channel = new MessageChannel();
              channel.port1.onmessage = function(event) {
                var handle = event.data;
                runIfPresent(handle);
              };

              registerImmediate = function(handle) {
                channel.port2.postMessage(handle);
              };
            }

            function installReadyStateChangeImplementation() {
              var html = doc.documentElement;
              registerImmediate = function(handle) {
                // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
                // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
                var script = doc.createElement("script");
                script.onreadystatechange = function() {
                  runIfPresent(handle);
                  script.onreadystatechange = null;
                  html.removeChild(script);
                  script = null;
                };
                html.appendChild(script);
              };
            }

            function installSetTimeoutImplementation() {
              registerImmediate = function(handle) {
                setTimeout(runIfPresent, 0, handle);
              };
            }

            // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
            var attachTo =
              Object.getPrototypeOf && Object.getPrototypeOf(global);
            attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

            // Don't get fooled by e.g. browserify environments.
            if ({}.toString.call(global.process) === "[object process]") {
              // For Node.js before 0.9
              installNextTickImplementation();
            } else if (canUsePostMessage()) {
              // For non-IE10 modern browsers
              installPostMessageImplementation();
            } else if (global.MessageChannel) {
              // For web workers, where supported
              installMessageChannelImplementation();
            } else if (
              doc &&
              "onreadystatechange" in doc.createElement("script")
            ) {
              // For IE 6–8
              installReadyStateChangeImplementation();
            } else {
              // For older browsers
              installSetTimeoutImplementation();
            }

            attachTo.setImmediate = setImmediate;
            attachTo.clearImmediate = clearImmediate;
          })(
            typeof self === "undefined"
              ? typeof global === "undefined" ? this : global
              : self
          );

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(8), __webpack_require__(6)));

        /***/
      },
      /* 125 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(global) {
          var win;

          if (typeof window !== "undefined") {
            win = window;
          } else if (typeof global !== "undefined") {
            win = global;
          } else if (typeof self !== "undefined") {
            win = self;
          } else {
            win = {};
          }

          module.exports = win;

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(8)));

        /***/
      },
      /* 126 */
      /***/ function(module, exports, __webpack_require__) {
        /**
 * A Javascript implementation of AES Cipher Suites for TLS.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2009-2015 Digital Bazaar, Inc.
 *
 */
        var forge = __webpack_require__(1);
        __webpack_require__(15);
        __webpack_require__(65);

        var tls = (module.exports = forge.tls);

        /**
 * Supported cipher suites.
 */
        tls.CipherSuites["TLS_RSA_WITH_AES_128_CBC_SHA"] = {
          id: [0x00, 0x2f],
          name: "TLS_RSA_WITH_AES_128_CBC_SHA",
          initSecurityParameters: function(sp) {
            sp.bulk_cipher_algorithm = tls.BulkCipherAlgorithm.aes;
            sp.cipher_type = tls.CipherType.block;
            sp.enc_key_length = 16;
            sp.block_length = 16;
            sp.fixed_iv_length = 16;
            sp.record_iv_length = 16;
            sp.mac_algorithm = tls.MACAlgorithm.hmac_sha1;
            sp.mac_length = 20;
            sp.mac_key_length = 20;
          },
          initConnectionState: initConnectionState
        };
        tls.CipherSuites["TLS_RSA_WITH_AES_256_CBC_SHA"] = {
          id: [0x00, 0x35],
          name: "TLS_RSA_WITH_AES_256_CBC_SHA",
          initSecurityParameters: function(sp) {
            sp.bulk_cipher_algorithm = tls.BulkCipherAlgorithm.aes;
            sp.cipher_type = tls.CipherType.block;
            sp.enc_key_length = 32;
            sp.block_length = 16;
            sp.fixed_iv_length = 16;
            sp.record_iv_length = 16;
            sp.mac_algorithm = tls.MACAlgorithm.hmac_sha1;
            sp.mac_length = 20;
            sp.mac_key_length = 20;
          },
          initConnectionState: initConnectionState
        };

        function initConnectionState(state, c, sp) {
          var client = c.entity === forge.tls.ConnectionEnd.client;

          // cipher setup
          state.read.cipherState = {
            init: false,
            cipher: forge.cipher.createDecipher(
              "AES-CBC",
              client ? sp.keys.server_write_key : sp.keys.client_write_key
            ),
            iv: client ? sp.keys.server_write_IV : sp.keys.client_write_IV
          };
          state.write.cipherState = {
            init: false,
            cipher: forge.cipher.createCipher(
              "AES-CBC",
              client ? sp.keys.client_write_key : sp.keys.server_write_key
            ),
            iv: client ? sp.keys.client_write_IV : sp.keys.server_write_IV
          };
          state.read.cipherFunction = decrypt_aes_cbc_sha1;
          state.write.cipherFunction = encrypt_aes_cbc_sha1;

          // MAC setup
          state.read.macLength = state.write.macLength = sp.mac_length;
          state.read.macFunction = state.write.macFunction = tls.hmac_sha1;
        }

        /**
 * Encrypts the TLSCompressed record into a TLSCipherText record using AES
 * in CBC mode.
 *
 * @param record the TLSCompressed record to encrypt.
 * @param s the ConnectionState to use.
 *
 * @return true on success, false on failure.
 */
        function encrypt_aes_cbc_sha1(record, s) {
          var rval = false;

          // append MAC to fragment, update sequence number
          var mac = s.macFunction(s.macKey, s.sequenceNumber, record);
          record.fragment.putBytes(mac);
          s.updateSequenceNumber();

          // TLS 1.1+ use an explicit IV every time to protect against CBC attacks
          var iv;
          if (record.version.minor === tls.Versions.TLS_1_0.minor) {
            // use the pre-generated IV when initializing for TLS 1.0, otherwise use
            // the residue from the previous encryption
            iv = s.cipherState.init ? null : s.cipherState.iv;
          } else {
            iv = forge.random.getBytesSync(16);
          }

          s.cipherState.init = true;

          // start cipher
          var cipher = s.cipherState.cipher;
          cipher.start({ iv: iv });

          // TLS 1.1+ write IV into output
          if (record.version.minor >= tls.Versions.TLS_1_1.minor) {
            cipher.output.putBytes(iv);
          }

          // do encryption (default padding is appropriate)
          cipher.update(record.fragment);
          if (cipher.finish(encrypt_aes_cbc_sha1_padding)) {
            // set record fragment to encrypted output
            record.fragment = cipher.output;
            record.length = record.fragment.length();
            rval = true;
          }

          return rval;
        }

        /**
 * Handles padding for aes_cbc_sha1 in encrypt mode.
 *
 * @param blockSize the block size.
 * @param input the input buffer.
 * @param decrypt true in decrypt mode, false in encrypt mode.
 *
 * @return true on success, false on failure.
 */
        function encrypt_aes_cbc_sha1_padding(blockSize, input, decrypt) {
          /* The encrypted data length (TLSCiphertext.length) is one more than the sum
   of SecurityParameters.block_length, TLSCompressed.length,
   SecurityParameters.mac_length, and padding_length.

   The padding may be any length up to 255 bytes long, as long as it results in
   the TLSCiphertext.length being an integral multiple of the block length.
   Lengths longer than necessary might be desirable to frustrate attacks on a
   protocol based on analysis of the lengths of exchanged messages. Each uint8
   in the padding data vector must be filled with the padding length value.

   The padding length should be such that the total size of the
   GenericBlockCipher structure is a multiple of the cipher's block length.
   Legal values range from zero to 255, inclusive. This length specifies the
   length of the padding field exclusive of the padding_length field itself.

   This is slightly different from PKCS#7 because the padding value is 1
   less than the actual number of padding bytes if you include the
   padding_length uint8 itself as a padding byte. */
          if (!decrypt) {
            // get the number of padding bytes required to reach the blockSize and
            // subtract 1 for the padding value (to make room for the padding_length
            // uint8)
            var padding = blockSize - input.length() % blockSize;
            input.fillWithByte(padding - 1, padding);
          }
          return true;
        }

        /**
 * Handles padding for aes_cbc_sha1 in decrypt mode.
 *
 * @param blockSize the block size.
 * @param output the output buffer.
 * @param decrypt true in decrypt mode, false in encrypt mode.
 *
 * @return true on success, false on failure.
 */
        function decrypt_aes_cbc_sha1_padding(blockSize, output, decrypt) {
          var rval = true;
          if (decrypt) {
            /* The last byte in the output specifies the number of padding bytes not
      including itself. Each of the padding bytes has the same value as that
      last byte (known as the padding_length). Here we check all padding
      bytes to ensure they have the value of padding_length even if one of
      them is bad in order to ward-off timing attacks. */
            var len = output.length();
            var paddingLength = output.last();
            for (var i = len - 1 - paddingLength; i < len - 1; ++i) {
              rval = rval && output.at(i) == paddingLength;
            }
            if (rval) {
              // trim off padding bytes and last padding length byte
              output.truncate(paddingLength + 1);
            }
          }
          return rval;
        }

        /**
 * Decrypts a TLSCipherText record into a TLSCompressed record using
 * AES in CBC mode.
 *
 * @param record the TLSCipherText record to decrypt.
 * @param s the ConnectionState to use.
 *
 * @return true on success, false on failure.
 */
        var count = 0;
        function decrypt_aes_cbc_sha1(record, s) {
          var rval = false;
          ++count;

          var iv;
          if (record.version.minor === tls.Versions.TLS_1_0.minor) {
            // use pre-generated IV when initializing for TLS 1.0, otherwise use the
            // residue from the previous decryption
            iv = s.cipherState.init ? null : s.cipherState.iv;
          } else {
            // TLS 1.1+ use an explicit IV every time to protect against CBC attacks
            // that is appended to the record fragment
            iv = record.fragment.getBytes(16);
          }

          s.cipherState.init = true;

          // start cipher
          var cipher = s.cipherState.cipher;
          cipher.start({ iv: iv });

          // do decryption
          cipher.update(record.fragment);
          rval = cipher.finish(decrypt_aes_cbc_sha1_padding);

          // even if decryption fails, keep going to minimize timing attacks

          // decrypted data:
          // first (len - 20) bytes = application data
          // last 20 bytes          = MAC
          var macLen = s.macLength;

          // create a random MAC to check against should the mac length check fail
          // Note: do this regardless of the failure to keep timing consistent
          var mac = forge.random.getBytesSync(macLen);

          // get fragment and mac
          var len = cipher.output.length();
          if (len >= macLen) {
            record.fragment = cipher.output.getBytes(len - macLen);
            mac = cipher.output.getBytes(macLen);
          } else {
            // bad data, but get bytes anyway to try to keep timing consistent
            record.fragment = cipher.output.getBytes();
          }
          record.fragment = forge.util.createBuffer(record.fragment);
          record.length = record.fragment.length();

          // see if data integrity checks out, update sequence number
          var mac2 = s.macFunction(s.macKey, s.sequenceNumber, record);
          s.updateSequenceNumber();
          rval = compareMacs(s.macKey, mac, mac2) && rval;
          return rval;
        }

        /**
 * Safely compare two MACs. This function will compare two MACs in a way
 * that protects against timing attacks.
 *
 * TODO: Expose elsewhere as a utility API.
 *
 * See: https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2011/february/double-hmac-verification/
 *
 * @param key the MAC key to use.
 * @param mac1 as a binary-encoded string of bytes.
 * @param mac2 as a binary-encoded string of bytes.
 *
 * @return true if the MACs are the same, false if not.
 */
        function compareMacs(key, mac1, mac2) {
          var hmac = forge.hmac.create();

          hmac.start("SHA1", key);
          hmac.update(mac1);
          mac1 = hmac.digest().getBytes();

          hmac.start(null, null);
          hmac.update(mac2);
          mac2 = hmac.digest().getBytes();

          return mac1 === mac2;
        }

        /***/
      },
      /* 127 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        exports.byteLength = byteLength;
        exports.toByteArray = toByteArray;
        exports.fromByteArray = fromByteArray;

        var lookup = [];
        var revLookup = [];
        var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;

        var code =
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
        for (var i = 0, len = code.length; i < len; ++i) {
          lookup[i] = code[i];
          revLookup[code.charCodeAt(i)] = i;
        }

        revLookup["-".charCodeAt(0)] = 62;
        revLookup["_".charCodeAt(0)] = 63;

        function placeHoldersCount(b64) {
          var len = b64.length;
          if (len % 4 > 0) {
            throw new Error("Invalid string. Length must be a multiple of 4");
          }

          // the number of equal signs (place holders)
          // if there are two placeholders, than the two characters before it
          // represent one byte
          // if there is only one, then the three characters before it represent 2 bytes
          // this is just a cheap hack to not do indexOf twice
          return b64[len - 2] === "=" ? 2 : b64[len - 1] === "=" ? 1 : 0;
        }

        function byteLength(b64) {
          // base64 is 4/3 + up to two characters of the original data
          return b64.length * 3 / 4 - placeHoldersCount(b64);
        }

        function toByteArray(b64) {
          var i, l, tmp, placeHolders, arr;
          var len = b64.length;
          placeHolders = placeHoldersCount(b64);

          arr = new Arr(len * 3 / 4 - placeHolders);

          // if there are placeholders, only get up to the last complete 4 chars
          l = placeHolders > 0 ? len - 4 : len;

          var L = 0;

          for (i = 0; i < l; i += 4) {
            tmp =
              (revLookup[b64.charCodeAt(i)] << 18) |
              (revLookup[b64.charCodeAt(i + 1)] << 12) |
              (revLookup[b64.charCodeAt(i + 2)] << 6) |
              revLookup[b64.charCodeAt(i + 3)];
            arr[L++] = (tmp >> 16) & 0xff;
            arr[L++] = (tmp >> 8) & 0xff;
            arr[L++] = tmp & 0xff;
          }

          if (placeHolders === 2) {
            tmp =
              (revLookup[b64.charCodeAt(i)] << 2) |
              (revLookup[b64.charCodeAt(i + 1)] >> 4);
            arr[L++] = tmp & 0xff;
          } else if (placeHolders === 1) {
            tmp =
              (revLookup[b64.charCodeAt(i)] << 10) |
              (revLookup[b64.charCodeAt(i + 1)] << 4) |
              (revLookup[b64.charCodeAt(i + 2)] >> 2);
            arr[L++] = (tmp >> 8) & 0xff;
            arr[L++] = tmp & 0xff;
          }

          return arr;
        }

        function tripletToBase64(num) {
          return (
            lookup[(num >> 18) & 0x3f] +
            lookup[(num >> 12) & 0x3f] +
            lookup[(num >> 6) & 0x3f] +
            lookup[num & 0x3f]
          );
        }

        function encodeChunk(uint8, start, end) {
          var tmp;
          var output = [];
          for (var i = start; i < end; i += 3) {
            tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
            output.push(tripletToBase64(tmp));
          }
          return output.join("");
        }

        function fromByteArray(uint8) {
          var tmp;
          var len = uint8.length;
          var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
          var output = "";
          var parts = [];
          var maxChunkLength = 16383; // must be multiple of 3

          // go through the array every three bytes, we'll deal with trailing stuff later
          for (
            var i = 0, len2 = len - extraBytes;
            i < len2;
            i += maxChunkLength
          ) {
            parts.push(
              encodeChunk(
                uint8,
                i,
                i + maxChunkLength > len2 ? len2 : i + maxChunkLength
              )
            );
          }

          // pad the end with zeros, but make sure to not forget the extra bytes
          if (extraBytes === 1) {
            tmp = uint8[len - 1];
            output += lookup[tmp >> 2];
            output += lookup[(tmp << 4) & 0x3f];
            output += "==";
          } else if (extraBytes === 2) {
            tmp = (uint8[len - 2] << 8) + uint8[len - 1];
            output += lookup[tmp >> 10];
            output += lookup[(tmp >> 4) & 0x3f];
            output += lookup[(tmp << 2) & 0x3f];
            output += "=";
          }

          parts.push(output);

          return parts.join("");
        }

        /***/
      },
      /* 128 */
      /***/ function(module, exports) {
        exports.read = function(buffer, offset, isLE, mLen, nBytes) {
          var e, m;
          var eLen = nBytes * 8 - mLen - 1;
          var eMax = (1 << eLen) - 1;
          var eBias = eMax >> 1;
          var nBits = -7;
          var i = isLE ? nBytes - 1 : 0;
          var d = isLE ? -1 : 1;
          var s = buffer[offset + i];

          i += d;

          e = s & ((1 << -nBits) - 1);
          s >>= -nBits;
          nBits += eLen;
          for (
            ;
            nBits > 0;
            e = e * 256 + buffer[offset + i], i += d, nBits -= 8
          ) {}

          m = e & ((1 << -nBits) - 1);
          e >>= -nBits;
          nBits += mLen;
          for (
            ;
            nBits > 0;
            m = m * 256 + buffer[offset + i], i += d, nBits -= 8
          ) {}

          if (e === 0) {
            e = 1 - eBias;
          } else if (e === eMax) {
            return m ? NaN : (s ? -1 : 1) * Infinity;
          } else {
            m = m + Math.pow(2, mLen);
            e = e - eBias;
          }
          return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
        };

        exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
          var e, m, c;
          var eLen = nBytes * 8 - mLen - 1;
          var eMax = (1 << eLen) - 1;
          var eBias = eMax >> 1;
          var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
          var i = isLE ? 0 : nBytes - 1;
          var d = isLE ? 1 : -1;
          var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

          value = Math.abs(value);

          if (isNaN(value) || value === Infinity) {
            m = isNaN(value) ? 1 : 0;
            e = eMax;
          } else {
            e = Math.floor(Math.log(value) / Math.LN2);
            if (value * (c = Math.pow(2, -e)) < 1) {
              e--;
              c *= 2;
            }
            if (e + eBias >= 1) {
              value += rt / c;
            } else {
              value += rt * Math.pow(2, 1 - eBias);
            }
            if (value * c >= 2) {
              e++;
              c /= 2;
            }

            if (e + eBias >= eMax) {
              m = 0;
              e = eMax;
            } else if (e + eBias >= 1) {
              m = (value * c - 1) * Math.pow(2, mLen);
              e = e + eBias;
            } else {
              m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
              e = 0;
            }
          }

          for (
            ;
            mLen >= 8;
            buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8
          ) {}

          e = (e << mLen) | m;
          eLen += mLen;
          for (
            ;
            eLen > 0;
            buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8
          ) {}

          buffer[offset + i - d] |= s * 128;
        };

        /***/
      },
      /* 129 */
      /***/ function(module, exports, __webpack_require__) {
        /**
 * Node.js module for Forge mask generation functions.
 *
 * @author Stefan Siegl
 *
 * Copyright 2012 Stefan Siegl <stesie@brokenpipe.de>
 */
        var forge = __webpack_require__(1);
        __webpack_require__(77);

        module.exports = forge.mgf = forge.mgf || {};
        forge.mgf.mgf1 = forge.mgf1;

        /***/
      },
      /* 130 */
      /***/ function(module, exports, __webpack_require__) {
        /**
 * Javascript implementation of RSA-KEM.
 *
 * @author Lautaro Cozzani Rodriguez
 * @author Dave Longley
 *
 * Copyright (c) 2014 Lautaro Cozzani <lautaro.cozzani@scytl.com>
 * Copyright (c) 2014 Digital Bazaar, Inc.
 */
        var forge = __webpack_require__(1);
        __webpack_require__(3);
        __webpack_require__(9);
        __webpack_require__(46);

        module.exports = forge.kem = forge.kem || {};

        var BigInteger = forge.jsbn.BigInteger;

        /**
 * The API for the RSA Key Encapsulation Mechanism (RSA-KEM) from ISO 18033-2.
 */
        forge.kem.rsa = {};

        /**
 * Creates an RSA KEM API object for generating a secret asymmetric key.
 *
 * The symmetric key may be generated via a call to 'encrypt', which will
 * produce a ciphertext to be transmitted to the recipient and a key to be
 * kept secret. The ciphertext is a parameter to be passed to 'decrypt' which
 * will produce the same secret key for the recipient to use to decrypt a
 * message that was encrypted with the secret key.
 *
 * @param kdf the KDF API to use (eg: new forge.kem.kdf1()).
 * @param options the options to use.
 *          [prng] a custom crypto-secure pseudo-random number generator to use,
 *            that must define "getBytesSync".
 */
        forge.kem.rsa.create = function(kdf, options) {
          options = options || {};
          var prng = options.prng || forge.random;

          var kem = {};

          /**
   * Generates a secret key and its encapsulation.
   *
   * @param publicKey the RSA public key to encrypt with.
   * @param keyLength the length, in bytes, of the secret key to generate.
   *
   * @return an object with:
   *   encapsulation: the ciphertext for generating the secret key, as a
   *     binary-encoded string of bytes.
   *   key: the secret key to use for encrypting a message.
   */
          kem.encrypt = function(publicKey, keyLength) {
            // generate a random r where 1 > r > n
            var byteLength = Math.ceil(publicKey.n.bitLength() / 8);
            var r;
            do {
              r = new BigInteger(
                forge.util.bytesToHex(prng.getBytesSync(byteLength)),
                16
              ).mod(publicKey.n);
            } while (r.equals(BigInteger.ZERO));

            // prepend r with zeros
            r = forge.util.hexToBytes(r.toString(16));
            var zeros = byteLength - r.length;
            if (zeros > 0) {
              r = forge.util.fillString(String.fromCharCode(0), zeros) + r;
            }

            // encrypt the random
            var encapsulation = publicKey.encrypt(r, "NONE");

            // generate the secret key
            var key = kdf.generate(r, keyLength);

            return { encapsulation: encapsulation, key: key };
          };

          /**
   * Decrypts an encapsulated secret key.
   *
   * @param privateKey the RSA private key to decrypt with.
   * @param encapsulation the ciphertext for generating the secret key, as
   *          a binary-encoded string of bytes.
   * @param keyLength the length, in bytes, of the secret key to generate.
   *
   * @return the secret key as a binary-encoded string of bytes.
   */
          kem.decrypt = function(privateKey, encapsulation, keyLength) {
            // decrypt the encapsulation and generate the secret key
            var r = privateKey.decrypt(encapsulation, "NONE");
            return kdf.generate(r, keyLength);
          };

          return kem;
        };

        // TODO: add forge.kem.kdf.create('KDF1', {md: ..., ...}) API?

        /**
 * Creates a key derivation API object that implements KDF1 per ISO 18033-2.
 *
 * @param md the hash API to use.
 * @param [digestLength] an optional digest length that must be positive and
 *          less than or equal to md.digestLength.
 *
 * @return a KDF1 API object.
 */
        forge.kem.kdf1 = function(md, digestLength) {
          _createKDF(this, md, 0, digestLength || md.digestLength);
        };

        /**
 * Creates a key derivation API object that implements KDF2 per ISO 18033-2.
 *
 * @param md the hash API to use.
 * @param [digestLength] an optional digest length that must be positive and
 *          less than or equal to md.digestLength.
 *
 * @return a KDF2 API object.
 */
        forge.kem.kdf2 = function(md, digestLength) {
          _createKDF(this, md, 1, digestLength || md.digestLength);
        };

        /**
 * Creates a KDF1 or KDF2 API object.
 *
 * @param md the hash API to use.
 * @param counterStart the starting index for the counter.
 * @param digestLength the digest length to use.
 *
 * @return the KDF API object.
 */
        function _createKDF(kdf, md, counterStart, digestLength) {
          /**
   * Generate a key of the specified length.
   *
   * @param x the binary-encoded byte string to generate a key from.
   * @param length the number of bytes to generate (the size of the key).
   *
   * @return the key as a binary-encoded string.
   */
          kdf.generate = function(x, length) {
            var key = new forge.util.ByteBuffer();

            // run counter from counterStart to ceil(length / Hash.len)
            var k = Math.ceil(length / digestLength) + counterStart;

            var c = new forge.util.ByteBuffer();
            for (var i = counterStart; i < k; ++i) {
              // I2OSP(i, 4): convert counter to an octet string of 4 octets
              c.putInt32(i);

              // digest 'x' and the counter and add the result to the key
              md.start();
              md.update(x + c.getBytes());
              var hash = md.digest();
              key.putBytes(hash.getBytes(digestLength));
            }

            // truncate to the correct key length
            key.truncate(key.length() - length);
            return key.getBytes();
          };
        }

        /***/
      },
      /* 131 */
      /***/ function(module, exports, __webpack_require__) {
        /**
 * Node.js module for all known Forge message digests.
 *
 * @author Dave Longley
 *
 * Copyright 2011-2017 Digital Bazaar, Inc.
 */
        module.exports = __webpack_require__(12);

        __webpack_require__(44);
        __webpack_require__(22);
        __webpack_require__(70);
        __webpack_require__(132);

        /***/
      },
      /* 132 */
      /***/ function(module, exports, __webpack_require__) {
        /**
 * Secure Hash Algorithm with a 1024-bit block size implementation.
 *
 * This includes: SHA-512, SHA-384, SHA-512/224, and SHA-512/256. For
 * SHA-256 (block size 512 bits), see sha256.js.
 *
 * See FIPS 180-4 for details.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2014-2015 Digital Bazaar, Inc.
 */
        var forge = __webpack_require__(1);
        __webpack_require__(12);
        __webpack_require__(3);

        var sha512 = (module.exports = forge.sha512 = forge.sha512 || {});

        // SHA-512
        forge.md.sha512 = forge.md.algorithms.sha512 = sha512;

        // SHA-384
        var sha384 = (forge.sha384 = forge.sha512.sha384 =
          forge.sha512.sha384 || {});
        sha384.create = function() {
          return sha512.create("SHA-384");
        };
        forge.md.sha384 = forge.md.algorithms.sha384 = sha384;

        // SHA-512/256
        forge.sha512.sha256 = forge.sha512.sha256 || {
          create: function() {
            return sha512.create("SHA-512/256");
          }
        };
        forge.md["sha512/256"] = forge.md.algorithms["sha512/256"] =
          forge.sha512.sha256;

        // SHA-512/224
        forge.sha512.sha224 = forge.sha512.sha224 || {
          create: function() {
            return sha512.create("SHA-512/224");
          }
        };
        forge.md["sha512/224"] = forge.md.algorithms["sha512/224"] =
          forge.sha512.sha224;

        /**
 * Creates a SHA-2 message digest object.
 *
 * @param algorithm the algorithm to use (SHA-512, SHA-384, SHA-512/224,
 *          SHA-512/256).
 *
 * @return a message digest object.
 */
        sha512.create = function(algorithm) {
          // do initialization as necessary
          if (!_initialized) {
            _init();
          }

          if (typeof algorithm === "undefined") {
            algorithm = "SHA-512";
          }

          if (!(algorithm in _states)) {
            throw new Error("Invalid SHA-512 algorithm: " + algorithm);
          }

          // SHA-512 state contains eight 64-bit integers (each as two 32-bit ints)
          var _state = _states[algorithm];
          var _h = null;

          // input buffer
          var _input = forge.util.createBuffer();

          // used for 64-bit word storage
          var _w = new Array(80);
          for (var wi = 0; wi < 80; ++wi) {
            _w[wi] = new Array(2);
          }

          // determine digest length by algorithm name (default)
          var digestLength = 64;
          switch (algorithm) {
            case "SHA-384":
              digestLength = 48;
              break;
            case "SHA-512/256":
              digestLength = 32;
              break;
            case "SHA-512/224":
              digestLength = 28;
              break;
          }

          // message digest object
          var md = {
            // SHA-512 => sha512
            algorithm: algorithm.replace("-", "").toLowerCase(),
            blockLength: 128,
            digestLength: digestLength,
            // 56-bit length of message so far (does not including padding)
            messageLength: 0,
            // true message length
            fullMessageLength: null,
            // size of message length in bytes
            messageLengthSize: 16
          };

          /**
   * Starts the digest.
   *
   * @return this digest object.
   */
          md.start = function() {
            // up to 56-bit message length for convenience
            md.messageLength = 0;

            // full message length (set md.messageLength128 for backwards-compatibility)
            md.fullMessageLength = md.messageLength128 = [];
            var int32s = md.messageLengthSize / 4;
            for (var i = 0; i < int32s; ++i) {
              md.fullMessageLength.push(0);
            }
            _input = forge.util.createBuffer();
            _h = new Array(_state.length);
            for (var i = 0; i < _state.length; ++i) {
              _h[i] = _state[i].slice(0);
            }
            return md;
          };
          // start digest automatically for first time
          md.start();

          /**
   * Updates the digest with the given message input. The given input can
   * treated as raw input (no encoding will be applied) or an encoding of
   * 'utf8' maybe given to encode the input using UTF-8.
   *
   * @param msg the message input to update with.
   * @param encoding the encoding to use (default: 'raw', other: 'utf8').
   *
   * @return this digest object.
   */
          md.update = function(msg, encoding) {
            if (encoding === "utf8") {
              msg = forge.util.encodeUtf8(msg);
            }

            // update message length
            var len = msg.length;
            md.messageLength += len;
            len = [(len / 0x100000000) >>> 0, len >>> 0];
            for (var i = md.fullMessageLength.length - 1; i >= 0; --i) {
              md.fullMessageLength[i] += len[1];
              len[1] = len[0] + ((md.fullMessageLength[i] / 0x100000000) >>> 0);
              md.fullMessageLength[i] = md.fullMessageLength[i] >>> 0;
              len[0] = (len[1] / 0x100000000) >>> 0;
            }

            // add bytes to input buffer
            _input.putBytes(msg);

            // process bytes
            _update(_h, _w, _input);

            // compact input buffer every 2K or if empty
            if (_input.read > 2048 || _input.length() === 0) {
              _input.compact();
            }

            return md;
          };

          /**
   * Produces the digest.
   *
   * @return a byte buffer containing the digest value.
   */
          md.digest = function() {
            /* Note: Here we copy the remaining bytes in the input buffer and
    add the appropriate SHA-512 padding. Then we do the final update
    on a copy of the state so that if the user wants to get
    intermediate digests they can do so. */

            /* Determine the number of bytes that must be added to the message
    to ensure its length is congruent to 896 mod 1024. In other words,
    the data to be digested must be a multiple of 1024 bits (or 128 bytes).
    This data includes the message, some padding, and the length of the
    message. Since the length of the message will be encoded as 16 bytes (128
    bits), that means that the last segment of the data must have 112 bytes
    (896 bits) of message and padding. Therefore, the length of the message
    plus the padding must be congruent to 896 mod 1024 because
    1024 - 128 = 896.

    In order to fill up the message length it must be filled with
    padding that begins with 1 bit followed by all 0 bits. Padding
    must *always* be present, so if the message length is already
    congruent to 896 mod 1024, then 1024 padding bits must be added. */

            var finalBlock = forge.util.createBuffer();
            finalBlock.putBytes(_input.bytes());

            // compute remaining size to be digested (include message length size)
            var remaining =
              md.fullMessageLength[md.fullMessageLength.length - 1] +
              md.messageLengthSize;

            // add padding for overflow blockSize - overflow
            // _padding starts with 1 byte with first bit is set (byte value 128), then
            // there may be up to (blockSize - 1) other pad bytes
            var overflow = remaining & (md.blockLength - 1);
            finalBlock.putBytes(_padding.substr(0, md.blockLength - overflow));

            // serialize message length in bits in big-endian order; since length
            // is stored in bytes we multiply by 8 and add carry from next int
            var next, carry;
            var bits = md.fullMessageLength[0] * 8;
            for (var i = 0; i < md.fullMessageLength.length - 1; ++i) {
              next = md.fullMessageLength[i + 1] * 8;
              carry = (next / 0x100000000) >>> 0;
              bits += carry;
              finalBlock.putInt32(bits >>> 0);
              bits = next >>> 0;
            }
            finalBlock.putInt32(bits);

            var h = new Array(_h.length);
            for (var i = 0; i < _h.length; ++i) {
              h[i] = _h[i].slice(0);
            }
            _update(h, _w, finalBlock);
            var rval = forge.util.createBuffer();
            var hlen;
            if (algorithm === "SHA-512") {
              hlen = h.length;
            } else if (algorithm === "SHA-384") {
              hlen = h.length - 2;
            } else {
              hlen = h.length - 4;
            }
            for (var i = 0; i < hlen; ++i) {
              rval.putInt32(h[i][0]);
              if (i !== hlen - 1 || algorithm !== "SHA-512/224") {
                rval.putInt32(h[i][1]);
              }
            }
            return rval;
          };

          return md;
        };

        // sha-512 padding bytes not initialized yet
        var _padding = null;
        var _initialized = false;

        // table of constants
        var _k = null;

        // initial hash states
        var _states = null;

        /**
 * Initializes the constant tables.
 */
        function _init() {
          // create padding
          _padding = String.fromCharCode(128);
          _padding += forge.util.fillString(String.fromCharCode(0x00), 128);

          // create K table for SHA-512
          _k = [
            [0x428a2f98, 0xd728ae22],
            [0x71374491, 0x23ef65cd],
            [0xb5c0fbcf, 0xec4d3b2f],
            [0xe9b5dba5, 0x8189dbbc],
            [0x3956c25b, 0xf348b538],
            [0x59f111f1, 0xb605d019],
            [0x923f82a4, 0xaf194f9b],
            [0xab1c5ed5, 0xda6d8118],
            [0xd807aa98, 0xa3030242],
            [0x12835b01, 0x45706fbe],
            [0x243185be, 0x4ee4b28c],
            [0x550c7dc3, 0xd5ffb4e2],
            [0x72be5d74, 0xf27b896f],
            [0x80deb1fe, 0x3b1696b1],
            [0x9bdc06a7, 0x25c71235],
            [0xc19bf174, 0xcf692694],
            [0xe49b69c1, 0x9ef14ad2],
            [0xefbe4786, 0x384f25e3],
            [0x0fc19dc6, 0x8b8cd5b5],
            [0x240ca1cc, 0x77ac9c65],
            [0x2de92c6f, 0x592b0275],
            [0x4a7484aa, 0x6ea6e483],
            [0x5cb0a9dc, 0xbd41fbd4],
            [0x76f988da, 0x831153b5],
            [0x983e5152, 0xee66dfab],
            [0xa831c66d, 0x2db43210],
            [0xb00327c8, 0x98fb213f],
            [0xbf597fc7, 0xbeef0ee4],
            [0xc6e00bf3, 0x3da88fc2],
            [0xd5a79147, 0x930aa725],
            [0x06ca6351, 0xe003826f],
            [0x14292967, 0x0a0e6e70],
            [0x27b70a85, 0x46d22ffc],
            [0x2e1b2138, 0x5c26c926],
            [0x4d2c6dfc, 0x5ac42aed],
            [0x53380d13, 0x9d95b3df],
            [0x650a7354, 0x8baf63de],
            [0x766a0abb, 0x3c77b2a8],
            [0x81c2c92e, 0x47edaee6],
            [0x92722c85, 0x1482353b],
            [0xa2bfe8a1, 0x4cf10364],
            [0xa81a664b, 0xbc423001],
            [0xc24b8b70, 0xd0f89791],
            [0xc76c51a3, 0x0654be30],
            [0xd192e819, 0xd6ef5218],
            [0xd6990624, 0x5565a910],
            [0xf40e3585, 0x5771202a],
            [0x106aa070, 0x32bbd1b8],
            [0x19a4c116, 0xb8d2d0c8],
            [0x1e376c08, 0x5141ab53],
            [0x2748774c, 0xdf8eeb99],
            [0x34b0bcb5, 0xe19b48a8],
            [0x391c0cb3, 0xc5c95a63],
            [0x4ed8aa4a, 0xe3418acb],
            [0x5b9cca4f, 0x7763e373],
            [0x682e6ff3, 0xd6b2b8a3],
            [0x748f82ee, 0x5defb2fc],
            [0x78a5636f, 0x43172f60],
            [0x84c87814, 0xa1f0ab72],
            [0x8cc70208, 0x1a6439ec],
            [0x90befffa, 0x23631e28],
            [0xa4506ceb, 0xde82bde9],
            [0xbef9a3f7, 0xb2c67915],
            [0xc67178f2, 0xe372532b],
            [0xca273ece, 0xea26619c],
            [0xd186b8c7, 0x21c0c207],
            [0xeada7dd6, 0xcde0eb1e],
            [0xf57d4f7f, 0xee6ed178],
            [0x06f067aa, 0x72176fba],
            [0x0a637dc5, 0xa2c898a6],
            [0x113f9804, 0xbef90dae],
            [0x1b710b35, 0x131c471b],
            [0x28db77f5, 0x23047d84],
            [0x32caab7b, 0x40c72493],
            [0x3c9ebe0a, 0x15c9bebc],
            [0x431d67c4, 0x9c100d4c],
            [0x4cc5d4be, 0xcb3e42b6],
            [0x597f299c, 0xfc657e2a],
            [0x5fcb6fab, 0x3ad6faec],
            [0x6c44198c, 0x4a475817]
          ];

          // initial hash states
          _states = {};
          _states["SHA-512"] = [
            [0x6a09e667, 0xf3bcc908],
            [0xbb67ae85, 0x84caa73b],
            [0x3c6ef372, 0xfe94f82b],
            [0xa54ff53a, 0x5f1d36f1],
            [0x510e527f, 0xade682d1],
            [0x9b05688c, 0x2b3e6c1f],
            [0x1f83d9ab, 0xfb41bd6b],
            [0x5be0cd19, 0x137e2179]
          ];
          _states["SHA-384"] = [
            [0xcbbb9d5d, 0xc1059ed8],
            [0x629a292a, 0x367cd507],
            [0x9159015a, 0x3070dd17],
            [0x152fecd8, 0xf70e5939],
            [0x67332667, 0xffc00b31],
            [0x8eb44a87, 0x68581511],
            [0xdb0c2e0d, 0x64f98fa7],
            [0x47b5481d, 0xbefa4fa4]
          ];
          _states["SHA-512/256"] = [
            [0x22312194, 0xfc2bf72c],
            [0x9f555fa3, 0xc84c64c2],
            [0x2393b86b, 0x6f53b151],
            [0x96387719, 0x5940eabd],
            [0x96283ee2, 0xa88effe3],
            [0xbe5e1e25, 0x53863992],
            [0x2b0199fc, 0x2c85b8aa],
            [0x0eb72ddc, 0x81c52ca2]
          ];
          _states["SHA-512/224"] = [
            [0x8c3d37c8, 0x19544da2],
            [0x73e19966, 0x89dcd4d6],
            [0x1dfab7ae, 0x32ff9c82],
            [0x679dd514, 0x582f9fcf],
            [0x0f6d2b69, 0x7bd44da8],
            [0x77e36f73, 0x04c48942],
            [0x3f9d85a8, 0x6a1d36c8],
            [0x1112e6ad, 0x91d692a1]
          ];

          // now initialized
          _initialized = true;
        }

        /**
 * Updates a SHA-512 state with the given byte buffer.
 *
 * @param s the SHA-512 state to update.
 * @param w the array to use to store words.
 * @param bytes the byte buffer to update with.
 */
        function _update(s, w, bytes) {
          // consume 512 bit (128 byte) chunks
          var t1_hi, t1_lo;
          var t2_hi, t2_lo;
          var s0_hi, s0_lo;
          var s1_hi, s1_lo;
          var ch_hi, ch_lo;
          var maj_hi, maj_lo;
          var a_hi, a_lo;
          var b_hi, b_lo;
          var c_hi, c_lo;
          var d_hi, d_lo;
          var e_hi, e_lo;
          var f_hi, f_lo;
          var g_hi, g_lo;
          var h_hi, h_lo;
          var i, hi, lo, w2, w7, w15, w16;
          var len = bytes.length();
          while (len >= 128) {
            // the w array will be populated with sixteen 64-bit big-endian words
            // and then extended into 64 64-bit words according to SHA-512
            for (i = 0; i < 16; ++i) {
              w[i][0] = bytes.getInt32() >>> 0;
              w[i][1] = bytes.getInt32() >>> 0;
            }
            for (; i < 80; ++i) {
              // for word 2 words ago: ROTR 19(x) ^ ROTR 61(x) ^ SHR 6(x)
              w2 = w[i - 2];
              hi = w2[0];
              lo = w2[1];

              // high bits
              t1_hi =
                (((hi >>> 19) | (lo << 13)) ^ // ROTR 19
                ((lo >>> 29) | (hi << 3)) ^ // ROTR 61/(swap + ROTR 29)
                  (hi >>> 6)) >>>
                0; // SHR 6
              // low bits
              t1_lo =
                (((hi << 13) | (lo >>> 19)) ^ // ROTR 19
                ((lo << 3) | (hi >>> 29)) ^ // ROTR 61/(swap + ROTR 29)
                  ((hi << 26) | (lo >>> 6))) >>>
                0; // SHR 6

              // for word 15 words ago: ROTR 1(x) ^ ROTR 8(x) ^ SHR 7(x)
              w15 = w[i - 15];
              hi = w15[0];
              lo = w15[1];

              // high bits
              t2_hi =
                (((hi >>> 1) | (lo << 31)) ^ // ROTR 1
                ((hi >>> 8) | (lo << 24)) ^ // ROTR 8
                  (hi >>> 7)) >>>
                0; // SHR 7
              // low bits
              t2_lo =
                (((hi << 31) | (lo >>> 1)) ^ // ROTR 1
                ((hi << 24) | (lo >>> 8)) ^ // ROTR 8
                  ((hi << 25) | (lo >>> 7))) >>>
                0; // SHR 7

              // sum(t1, word 7 ago, t2, word 16 ago) modulo 2^64 (carry lo overflow)
              w7 = w[i - 7];
              w16 = w[i - 16];
              lo = t1_lo + w7[1] + t2_lo + w16[1];
              w[i][0] =
                (t1_hi +
                  w7[0] +
                  t2_hi +
                  w16[0] +
                  ((lo / 0x100000000) >>> 0)) >>>
                0;
              w[i][1] = lo >>> 0;
            }

            // initialize hash value for this chunk
            a_hi = s[0][0];
            a_lo = s[0][1];
            b_hi = s[1][0];
            b_lo = s[1][1];
            c_hi = s[2][0];
            c_lo = s[2][1];
            d_hi = s[3][0];
            d_lo = s[3][1];
            e_hi = s[4][0];
            e_lo = s[4][1];
            f_hi = s[5][0];
            f_lo = s[5][1];
            g_hi = s[6][0];
            g_lo = s[6][1];
            h_hi = s[7][0];
            h_lo = s[7][1];

            // round function
            for (i = 0; i < 80; ++i) {
              // Sum1(e) = ROTR 14(e) ^ ROTR 18(e) ^ ROTR 41(e)
              s1_hi =
                (((e_hi >>> 14) | (e_lo << 18)) ^ // ROTR 14
                ((e_hi >>> 18) | (e_lo << 14)) ^ // ROTR 18
                  ((e_lo >>> 9) | (e_hi << 23))) >>>
                0; // ROTR 41/(swap + ROTR 9)
              s1_lo =
                (((e_hi << 18) | (e_lo >>> 14)) ^ // ROTR 14
                ((e_hi << 14) | (e_lo >>> 18)) ^ // ROTR 18
                  ((e_lo << 23) | (e_hi >>> 9))) >>>
                0; // ROTR 41/(swap + ROTR 9)

              // Ch(e, f, g) (optimized the same way as SHA-1)
              ch_hi = (g_hi ^ (e_hi & (f_hi ^ g_hi))) >>> 0;
              ch_lo = (g_lo ^ (e_lo & (f_lo ^ g_lo))) >>> 0;

              // Sum0(a) = ROTR 28(a) ^ ROTR 34(a) ^ ROTR 39(a)
              s0_hi =
                (((a_hi >>> 28) | (a_lo << 4)) ^ // ROTR 28
                ((a_lo >>> 2) | (a_hi << 30)) ^ // ROTR 34/(swap + ROTR 2)
                  ((a_lo >>> 7) | (a_hi << 25))) >>>
                0; // ROTR 39/(swap + ROTR 7)
              s0_lo =
                (((a_hi << 4) | (a_lo >>> 28)) ^ // ROTR 28
                ((a_lo << 30) | (a_hi >>> 2)) ^ // ROTR 34/(swap + ROTR 2)
                  ((a_lo << 25) | (a_hi >>> 7))) >>>
                0; // ROTR 39/(swap + ROTR 7)

              // Maj(a, b, c) (optimized the same way as SHA-1)
              maj_hi = ((a_hi & b_hi) | (c_hi & (a_hi ^ b_hi))) >>> 0;
              maj_lo = ((a_lo & b_lo) | (c_lo & (a_lo ^ b_lo))) >>> 0;

              // main algorithm
              // t1 = (h + s1 + ch + _k[i] + _w[i]) modulo 2^64 (carry lo overflow)
              lo = h_lo + s1_lo + ch_lo + _k[i][1] + w[i][1];
              t1_hi =
                (h_hi +
                  s1_hi +
                  ch_hi +
                  _k[i][0] +
                  w[i][0] +
                  ((lo / 0x100000000) >>> 0)) >>>
                0;
              t1_lo = lo >>> 0;

              // t2 = s0 + maj modulo 2^64 (carry lo overflow)
              lo = s0_lo + maj_lo;
              t2_hi = (s0_hi + maj_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
              t2_lo = lo >>> 0;

              h_hi = g_hi;
              h_lo = g_lo;

              g_hi = f_hi;
              g_lo = f_lo;

              f_hi = e_hi;
              f_lo = e_lo;

              // e = (d + t1) modulo 2^64 (carry lo overflow)
              lo = d_lo + t1_lo;
              e_hi = (d_hi + t1_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
              e_lo = lo >>> 0;

              d_hi = c_hi;
              d_lo = c_lo;

              c_hi = b_hi;
              c_lo = b_lo;

              b_hi = a_hi;
              b_lo = a_lo;

              // a = (t1 + t2) modulo 2^64 (carry lo overflow)
              lo = t1_lo + t2_lo;
              a_hi = (t1_hi + t2_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
              a_lo = lo >>> 0;
            }

            // update hash state (additional modulo 2^64)
            lo = s[0][1] + a_lo;
            s[0][0] = (s[0][0] + a_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
            s[0][1] = lo >>> 0;

            lo = s[1][1] + b_lo;
            s[1][0] = (s[1][0] + b_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
            s[1][1] = lo >>> 0;

            lo = s[2][1] + c_lo;
            s[2][0] = (s[2][0] + c_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
            s[2][1] = lo >>> 0;

            lo = s[3][1] + d_lo;
            s[3][0] = (s[3][0] + d_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
            s[3][1] = lo >>> 0;

            lo = s[4][1] + e_lo;
            s[4][0] = (s[4][0] + e_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
            s[4][1] = lo >>> 0;

            lo = s[5][1] + f_lo;
            s[5][0] = (s[5][0] + f_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
            s[5][1] = lo >>> 0;

            lo = s[6][1] + g_lo;
            s[6][0] = (s[6][0] + g_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
            s[6][1] = lo >>> 0;

            lo = s[7][1] + h_lo;
            s[7][0] = (s[7][0] + h_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
            s[7][1] = lo >>> 0;

            len -= 128;
          }
        }

        /***/
      },
      /* 133 */
      /***/ function(module, exports, __webpack_require__) {
        /**
 * Javascript implementation of PKCS#7 v1.5.
 *
 * @author Stefan Siegl
 * @author Dave Longley
 *
 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
 * Copyright (c) 2012-2015 Digital Bazaar, Inc.
 *
 * Currently this implementation only supports ContentType of EnvelopedData,
 * EncryptedData, or SignedData at the root level. The top level elements may
 * contain only a ContentInfo of ContentType Data, i.e. plain data. Further
 * nesting is not (yet) supported.
 *
 * The Forge validators for PKCS #7's ASN.1 structures are available from
 * a separate file pkcs7asn1.js, since those are referenced from other
 * PKCS standards like PKCS #12.
 */
        var forge = __webpack_require__(1);
        __webpack_require__(15);
        __webpack_require__(11);
        __webpack_require__(30);
        __webpack_require__(16);
        __webpack_require__(18);
        __webpack_require__(76);
        __webpack_require__(9);
        __webpack_require__(3);
        __webpack_require__(47);

        // shortcut for ASN.1 API
        var asn1 = forge.asn1;

        // shortcut for PKCS#7 API
        var p7 = (module.exports = forge.pkcs7 = forge.pkcs7 || {});

        /**
 * Converts a PKCS#7 message from PEM format.
 *
 * @param pem the PEM-formatted PKCS#7 message.
 *
 * @return the PKCS#7 message.
 */
        p7.messageFromPem = function(pem) {
          var msg = forge.pem.decode(pem)[0];

          if (msg.type !== "PKCS7") {
            var error = new Error(
              "Could not convert PKCS#7 message from PEM; PEM " +
                'header type is not "PKCS#7".'
            );
            error.headerType = msg.type;
            throw error;
          }
          if (msg.procType && msg.procType.type === "ENCRYPTED") {
            throw new Error(
              "Could not convert PKCS#7 message from PEM; PEM is encrypted."
            );
          }

          // convert DER to ASN.1 object
          var obj = asn1.fromDer(msg.body);

          return p7.messageFromAsn1(obj);
        };

        /**
 * Converts a PKCS#7 message to PEM format.
 *
 * @param msg The PKCS#7 message object
 * @param maxline The maximum characters per line, defaults to 64.
 *
 * @return The PEM-formatted PKCS#7 message.
 */
        p7.messageToPem = function(msg, maxline) {
          // convert to ASN.1, then DER, then PEM-encode
          var pemObj = {
            type: "PKCS7",
            body: asn1.toDer(msg.toAsn1()).getBytes()
          };
          return forge.pem.encode(pemObj, { maxline: maxline });
        };

        /**
 * Converts a PKCS#7 message from an ASN.1 object.
 *
 * @param obj the ASN.1 representation of a ContentInfo.
 *
 * @return the PKCS#7 message.
 */
        p7.messageFromAsn1 = function(obj) {
          // validate root level ContentInfo and capture data
          var capture = {};
          var errors = [];
          if (
            !asn1.validate(obj, p7.asn1.contentInfoValidator, capture, errors)
          ) {
            var error = new Error(
              "Cannot read PKCS#7 message. " +
                "ASN.1 object is not an PKCS#7 ContentInfo."
            );
            error.errors = errors;
            throw error;
          }

          var contentType = asn1.derToOid(capture.contentType);
          var msg;

          switch (contentType) {
            case forge.pki.oids.envelopedData:
              msg = p7.createEnvelopedData();
              break;

            case forge.pki.oids.encryptedData:
              msg = p7.createEncryptedData();
              break;

            case forge.pki.oids.signedData:
              msg = p7.createSignedData();
              break;

            default:
              throw new Error(
                "Cannot read PKCS#7 message. ContentType with OID " +
                  contentType +
                  " is not (yet) supported."
              );
          }

          msg.fromAsn1(capture.content.value[0]);
          return msg;
        };

        p7.createSignedData = function() {
          var msg = null;
          msg = {
            type: forge.pki.oids.signedData,
            version: 1,
            certificates: [],
            crls: [],
            // TODO: add json-formatted signer stuff here?
            signers: [],
            // populated during sign()
            digestAlgorithmIdentifiers: [],
            contentInfo: null,
            signerInfos: [],

            fromAsn1: function(obj) {
              // validate SignedData content block and capture data.
              _fromAsn1(msg, obj, p7.asn1.signedDataValidator);
              msg.certificates = [];
              msg.crls = [];
              msg.digestAlgorithmIdentifiers = [];
              msg.contentInfo = null;
              msg.signerInfos = [];

              var certs = msg.rawCapture.certificates.value;
              for (var i = 0; i < certs.length; ++i) {
                msg.certificates.push(forge.pki.certificateFromAsn1(certs[i]));
              }

              // TODO: parse crls
            },

            toAsn1: function() {
              // degenerate case with no content
              if (!msg.contentInfo) {
                msg.sign();
              }

              var certs = [];
              for (var i = 0; i < msg.certificates.length; ++i) {
                certs.push(forge.pki.certificateToAsn1(msg.certificates[i]));
              }

              var crls = [];
              // TODO: implement CRLs

              // [0] SignedData
              var signedData = asn1.create(
                asn1.Class.CONTEXT_SPECIFIC,
                0,
                true,
                [
                  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
                    // Version
                    asn1.create(
                      asn1.Class.UNIVERSAL,
                      asn1.Type.INTEGER,
                      false,
                      asn1.integerToDer(msg.version).getBytes()
                    ),
                    // DigestAlgorithmIdentifiers
                    asn1.create(
                      asn1.Class.UNIVERSAL,
                      asn1.Type.SET,
                      true,
                      msg.digestAlgorithmIdentifiers
                    ),
                    // ContentInfo
                    msg.contentInfo
                  ])
                ]
              );
              if (certs.length > 0) {
                // [0] IMPLICIT ExtendedCertificatesAndCertificates OPTIONAL
                signedData.value[0].value.push(
                  asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, certs)
                );
              }
              if (crls.length > 0) {
                // [1] IMPLICIT CertificateRevocationLists OPTIONAL
                signedData.value[0].value.push(
                  asn1.create(asn1.Class.CONTEXT_SPECIFIC, 1, true, crls)
                );
              }
              // SignerInfos
              signedData.value[0].value.push(
                asn1.create(
                  asn1.Class.UNIVERSAL,
                  asn1.Type.SET,
                  true,
                  msg.signerInfos
                )
              );

              // ContentInfo
              return asn1.create(
                asn1.Class.UNIVERSAL,
                asn1.Type.SEQUENCE,
                true,
                [
                  // ContentType
                  asn1.create(
                    asn1.Class.UNIVERSAL,
                    asn1.Type.OID,
                    false,
                    asn1.oidToDer(msg.type).getBytes()
                  ),
                  // [0] SignedData
                  signedData
                ]
              );
            },

            /**
     * Add (another) entity to list of signers.
     *
     * Note: If authenticatedAttributes are provided, then, per RFC 2315,
     * they must include at least two attributes: content type and
     * message digest. The message digest attribute value will be
     * auto-calculated during signing and will be ignored if provided.
     *
     * Here's an example of providing these two attributes:
     *
     * forge.pkcs7.createSignedData();
     * p7.addSigner({
     *   issuer: cert.issuer.attributes,
     *   serialNumber: cert.serialNumber,
     *   key: privateKey,
     *   digestAlgorithm: forge.pki.oids.sha1,
     *   authenticatedAttributes: [{
     *     type: forge.pki.oids.contentType,
     *     value: forge.pki.oids.data
     *   }, {
     *     type: forge.pki.oids.messageDigest
     *   }]
     * });
     *
     * TODO: Support [subjectKeyIdentifier] as signer's ID.
     *
     * @param signer the signer information:
     *          key the signer's private key.
     *          [certificate] a certificate containing the public key
     *            associated with the signer's private key; use this option as
     *            an alternative to specifying signer.issuer and
     *            signer.serialNumber.
     *          [issuer] the issuer attributes (eg: cert.issuer.attributes).
     *          [serialNumber] the signer's certificate's serial number in
     *           hexadecimal (eg: cert.serialNumber).
     *          [digestAlgorithm] the message digest OID, as a string, to use
     *            (eg: forge.pki.oids.sha1).
     *          [authenticatedAttributes] an optional array of attributes
     *            to also sign along with the content.
     */
            addSigner: function(signer) {
              var issuer = signer.issuer;
              var serialNumber = signer.serialNumber;
              if (signer.certificate) {
                var cert = signer.certificate;
                if (typeof cert === "string") {
                  cert = forge.pki.certificateFromPem(cert);
                }
                issuer = cert.issuer.attributes;
                serialNumber = cert.serialNumber;
              }
              var key = signer.key;
              if (!key) {
                throw new Error(
                  "Could not add PKCS#7 signer; no private key specified."
                );
              }
              if (typeof key === "string") {
                key = forge.pki.privateKeyFromPem(key);
              }

              // ensure OID known for digest algorithm
              var digestAlgorithm =
                signer.digestAlgorithm || forge.pki.oids.sha1;
              switch (digestAlgorithm) {
                case forge.pki.oids.sha1:
                case forge.pki.oids.sha256:
                case forge.pki.oids.sha384:
                case forge.pki.oids.sha512:
                case forge.pki.oids.md5:
                  break;
                default:
                  throw new Error(
                    "Could not add PKCS#7 signer; unknown message digest algorithm: " +
                      digestAlgorithm
                  );
              }

              // if authenticatedAttributes is present, then the attributes
              // must contain at least PKCS #9 content-type and message-digest
              var authenticatedAttributes =
                signer.authenticatedAttributes || [];
              if (authenticatedAttributes.length > 0) {
                var contentType = false;
                var messageDigest = false;
                for (var i = 0; i < authenticatedAttributes.length; ++i) {
                  var attr = authenticatedAttributes[i];
                  if (
                    !contentType &&
                    attr.type === forge.pki.oids.contentType
                  ) {
                    contentType = true;
                    if (messageDigest) {
                      break;
                    }
                    continue;
                  }
                  if (
                    !messageDigest &&
                    attr.type === forge.pki.oids.messageDigest
                  ) {
                    messageDigest = true;
                    if (contentType) {
                      break;
                    }
                    continue;
                  }
                }

                if (!contentType || !messageDigest) {
                  throw new Error(
                    "Invalid signer.authenticatedAttributes. If " +
                      "signer.authenticatedAttributes is specified, then it must " +
                      "contain at least two attributes, PKCS #9 content-type and " +
                      "PKCS #9 message-digest."
                  );
                }
              }

              msg.signers.push({
                key: key,
                version: 1,
                issuer: issuer,
                serialNumber: serialNumber,
                digestAlgorithm: digestAlgorithm,
                signatureAlgorithm: forge.pki.oids.rsaEncryption,
                signature: null,
                authenticatedAttributes: authenticatedAttributes,
                unauthenticatedAttributes: []
              });
            },

            /**
     * Signs the content.
     */
            sign: function() {
              // auto-generate content info
              if (typeof msg.content !== "object" || msg.contentInfo === null) {
                // use Data ContentInfo
                msg.contentInfo = asn1.create(
                  asn1.Class.UNIVERSAL,
                  asn1.Type.SEQUENCE,
                  true,
                  [
                    // ContentType
                    asn1.create(
                      asn1.Class.UNIVERSAL,
                      asn1.Type.OID,
                      false,
                      asn1.oidToDer(forge.pki.oids.data).getBytes()
                    )
                  ]
                );

                // add actual content, if present
                if ("content" in msg) {
                  var content;
                  if (msg.content instanceof forge.util.ByteBuffer) {
                    content = msg.content.bytes();
                  } else if (typeof msg.content === "string") {
                    content = forge.util.encodeUtf8(msg.content);
                  }

                  msg.contentInfo.value.push(
                    // [0] EXPLICIT content
                    asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
                      asn1.create(
                        asn1.Class.UNIVERSAL,
                        asn1.Type.OCTETSTRING,
                        false,
                        content
                      )
                    ])
                  );
                }
              }

              // no signers, return early (degenerate case for certificate container)
              if (msg.signers.length === 0) {
                return;
              }

              // generate digest algorithm identifiers
              var mds = addDigestAlgorithmIds();

              // generate signerInfos
              addSignerInfos(mds);
            },

            verify: function() {
              throw new Error(
                "PKCS#7 signature verification not yet implemented."
              );
            },

            /**
     * Add a certificate.
     *
     * @param cert the certificate to add.
     */
            addCertificate: function(cert) {
              // convert from PEM
              if (typeof cert === "string") {
                cert = forge.pki.certificateFromPem(cert);
              }
              msg.certificates.push(cert);
            },

            /**
     * Add a certificate revokation list.
     *
     * @param crl the certificate revokation list to add.
     */
            addCertificateRevokationList: function(crl) {
              throw new Error("PKCS#7 CRL support not yet implemented.");
            }
          };
          return msg;

          function addDigestAlgorithmIds() {
            var mds = {};

            for (var i = 0; i < msg.signers.length; ++i) {
              var signer = msg.signers[i];
              var oid = signer.digestAlgorithm;
              if (!(oid in mds)) {
                // content digest
                mds[oid] = forge.md[forge.pki.oids[oid]].create();
              }
              if (signer.authenticatedAttributes.length === 0) {
                // no custom attributes to digest; use content message digest
                signer.md = mds[oid];
              } else {
                // custom attributes to be digested; use own message digest
                // TODO: optimize to just copy message digest state if that
                // feature is ever supported with message digests
                signer.md = forge.md[forge.pki.oids[oid]].create();
              }
            }

            // add unique digest algorithm identifiers
            msg.digestAlgorithmIdentifiers = [];
            for (var oid in mds) {
              msg.digestAlgorithmIdentifiers.push(
                // AlgorithmIdentifier
                asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
                  // algorithm
                  asn1.create(
                    asn1.Class.UNIVERSAL,
                    asn1.Type.OID,
                    false,
                    asn1.oidToDer(oid).getBytes()
                  ),
                  // parameters (null)
                  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, "")
                ])
              );
            }

            return mds;
          }

          function addSignerInfos(mds) {
            // Note: ContentInfo is a SEQUENCE with 2 values, second value is
            // the content field and is optional for a ContentInfo but required here
            // since signers are present
            if (msg.contentInfo.value.length < 2) {
              throw new Error(
                "Could not sign PKCS#7 message; there is no content to sign."
              );
            }

            // get ContentInfo content type
            var contentType = asn1.derToOid(msg.contentInfo.value[0].value);

            // get ContentInfo content
            var content = msg.contentInfo.value[1];
            // skip [0] EXPLICIT content wrapper
            content = content.value[0];

            // serialize content
            var bytes = asn1.toDer(content);

            // skip identifier and length per RFC 2315 9.3
            // skip identifier (1 byte)
            bytes.getByte();
            // read and discard length bytes
            asn1.getBerValueLength(bytes);
            bytes = bytes.getBytes();

            // digest content DER value bytes
            for (var oid in mds) {
              mds[oid].start().update(bytes);
            }

            // sign content
            var signingTime = new Date();
            for (var i = 0; i < msg.signers.length; ++i) {
              var signer = msg.signers[i];

              if (signer.authenticatedAttributes.length === 0) {
                // if ContentInfo content type is not "Data", then
                // authenticatedAttributes must be present per RFC 2315
                if (contentType !== forge.pki.oids.data) {
                  throw new Error(
                    "Invalid signer; authenticatedAttributes must be present " +
                      "when the ContentInfo content type is not PKCS#7 Data."
                  );
                }
              } else {
                // process authenticated attributes
                // [0] IMPLICIT
                signer.authenticatedAttributesAsn1 = asn1.create(
                  asn1.Class.CONTEXT_SPECIFIC,
                  0,
                  true,
                  []
                );

                // per RFC 2315, attributes are to be digested using a SET container
                // not the above [0] IMPLICIT container
                var attrsAsn1 = asn1.create(
                  asn1.Class.UNIVERSAL,
                  asn1.Type.SET,
                  true,
                  []
                );

                for (
                  var ai = 0;
                  ai < signer.authenticatedAttributes.length;
                  ++ai
                ) {
                  var attr = signer.authenticatedAttributes[ai];
                  if (attr.type === forge.pki.oids.messageDigest) {
                    // use content message digest as value
                    attr.value = mds[signer.digestAlgorithm].digest();
                  } else if (attr.type === forge.pki.oids.signingTime) {
                    // auto-populate signing time if not already set
                    if (!attr.value) {
                      attr.value = signingTime;
                    }
                  }

                  // convert to ASN.1 and push onto Attributes SET (for signing) and
                  // onto authenticatedAttributesAsn1 to complete SignedData ASN.1
                  // TODO: optimize away duplication
                  attrsAsn1.value.push(_attributeToAsn1(attr));
                  signer.authenticatedAttributesAsn1.value.push(
                    _attributeToAsn1(attr)
                  );
                }

                // DER-serialize and digest SET OF attributes only
                bytes = asn1.toDer(attrsAsn1).getBytes();
                signer.md.start().update(bytes);
              }

              // sign digest
              signer.signature = signer.key.sign(
                signer.md,
                "RSASSA-PKCS1-V1_5"
              );
            }

            // add signer info
            msg.signerInfos = _signersToAsn1(msg.signers);
          }
        };

        /**
 * Creates an empty PKCS#7 message of type EncryptedData.
 *
 * @return the message.
 */
        p7.createEncryptedData = function() {
          var msg = null;
          msg = {
            type: forge.pki.oids.encryptedData,
            version: 0,
            encryptedContent: {
              algorithm: forge.pki.oids["aes256-CBC"]
            },

            /**
     * Reads an EncryptedData content block (in ASN.1 format)
     *
     * @param obj The ASN.1 representation of the EncryptedData content block
     */
            fromAsn1: function(obj) {
              // Validate EncryptedData content block and capture data.
              _fromAsn1(msg, obj, p7.asn1.encryptedDataValidator);
            },

            /**
     * Decrypt encrypted content
     *
     * @param key The (symmetric) key as a byte buffer
     */
            decrypt: function(key) {
              if (key !== undefined) {
                msg.encryptedContent.key = key;
              }
              _decryptContent(msg);
            }
          };
          return msg;
        };

        /**
 * Creates an empty PKCS#7 message of type EnvelopedData.
 *
 * @return the message.
 */
        p7.createEnvelopedData = function() {
          var msg = null;
          msg = {
            type: forge.pki.oids.envelopedData,
            version: 0,
            recipients: [],
            encryptedContent: {
              algorithm: forge.pki.oids["aes256-CBC"]
            },

            /**
     * Reads an EnvelopedData content block (in ASN.1 format)
     *
     * @param obj the ASN.1 representation of the EnvelopedData content block.
     */
            fromAsn1: function(obj) {
              // validate EnvelopedData content block and capture data
              var capture = _fromAsn1(msg, obj, p7.asn1.envelopedDataValidator);
              msg.recipients = _recipientsFromAsn1(
                capture.recipientInfos.value
              );
            },

            toAsn1: function() {
              // ContentInfo
              return asn1.create(
                asn1.Class.UNIVERSAL,
                asn1.Type.SEQUENCE,
                true,
                [
                  // ContentType
                  asn1.create(
                    asn1.Class.UNIVERSAL,
                    asn1.Type.OID,
                    false,
                    asn1.oidToDer(msg.type).getBytes()
                  ),
                  // [0] EnvelopedData
                  asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
                    asn1.create(
                      asn1.Class.UNIVERSAL,
                      asn1.Type.SEQUENCE,
                      true,
                      [
                        // Version
                        asn1.create(
                          asn1.Class.UNIVERSAL,
                          asn1.Type.INTEGER,
                          false,
                          asn1.integerToDer(msg.version).getBytes()
                        ),
                        // RecipientInfos
                        asn1.create(
                          asn1.Class.UNIVERSAL,
                          asn1.Type.SET,
                          true,
                          _recipientsToAsn1(msg.recipients)
                        ),
                        // EncryptedContentInfo
                        asn1.create(
                          asn1.Class.UNIVERSAL,
                          asn1.Type.SEQUENCE,
                          true,
                          _encryptedContentToAsn1(msg.encryptedContent)
                        )
                      ]
                    )
                  ])
                ]
              );
            },

            /**
     * Find recipient by X.509 certificate's issuer.
     *
     * @param cert the certificate with the issuer to look for.
     *
     * @return the recipient object.
     */
            findRecipient: function(cert) {
              var sAttr = cert.issuer.attributes;

              for (var i = 0; i < msg.recipients.length; ++i) {
                var r = msg.recipients[i];
                var rAttr = r.issuer;

                if (r.serialNumber !== cert.serialNumber) {
                  continue;
                }

                if (rAttr.length !== sAttr.length) {
                  continue;
                }

                var match = true;
                for (var j = 0; j < sAttr.length; ++j) {
                  if (
                    rAttr[j].type !== sAttr[j].type ||
                    rAttr[j].value !== sAttr[j].value
                  ) {
                    match = false;
                    break;
                  }
                }

                if (match) {
                  return r;
                }
              }

              return null;
            },

            /**
     * Decrypt enveloped content
     *
     * @param recipient The recipient object related to the private key
     * @param privKey The (RSA) private key object
     */
            decrypt: function(recipient, privKey) {
              if (
                msg.encryptedContent.key === undefined &&
                recipient !== undefined &&
                privKey !== undefined
              ) {
                switch (recipient.encryptedContent.algorithm) {
                  case forge.pki.oids.rsaEncryption:
                  case forge.pki.oids.desCBC:
                    var key = privKey.decrypt(
                      recipient.encryptedContent.content
                    );
                    msg.encryptedContent.key = forge.util.createBuffer(key);
                    break;

                  default:
                    throw new Error(
                      "Unsupported asymmetric cipher, " +
                        "OID " +
                        recipient.encryptedContent.algorithm
                    );
                }
              }

              _decryptContent(msg);
            },

            /**
     * Add (another) entity to list of recipients.
     *
     * @param cert The certificate of the entity to add.
     */
            addRecipient: function(cert) {
              msg.recipients.push({
                version: 0,
                issuer: cert.issuer.attributes,
                serialNumber: cert.serialNumber,
                encryptedContent: {
                  // We simply assume rsaEncryption here, since forge.pki only
                  // supports RSA so far.  If the PKI module supports other
                  // ciphers one day, we need to modify this one as well.
                  algorithm: forge.pki.oids.rsaEncryption,
                  key: cert.publicKey
                }
              });
            },

            /**
     * Encrypt enveloped content.
     *
     * This function supports two optional arguments, cipher and key, which
     * can be used to influence symmetric encryption.  Unless cipher is
     * provided, the cipher specified in encryptedContent.algorithm is used
     * (defaults to AES-256-CBC).  If no key is provided, encryptedContent.key
     * is (re-)used.  If that one's not set, a random key will be generated
     * automatically.
     *
     * @param [key] The key to be used for symmetric encryption.
     * @param [cipher] The OID of the symmetric cipher to use.
     */
            encrypt: function(key, cipher) {
              // Part 1: Symmetric encryption
              if (msg.encryptedContent.content === undefined) {
                cipher = cipher || msg.encryptedContent.algorithm;
                key = key || msg.encryptedContent.key;

                var keyLen, ivLen, ciphFn;
                switch (cipher) {
                  case forge.pki.oids["aes128-CBC"]:
                    keyLen = 16;
                    ivLen = 16;
                    ciphFn = forge.aes.createEncryptionCipher;
                    break;

                  case forge.pki.oids["aes192-CBC"]:
                    keyLen = 24;
                    ivLen = 16;
                    ciphFn = forge.aes.createEncryptionCipher;
                    break;

                  case forge.pki.oids["aes256-CBC"]:
                    keyLen = 32;
                    ivLen = 16;
                    ciphFn = forge.aes.createEncryptionCipher;
                    break;

                  case forge.pki.oids["des-EDE3-CBC"]:
                    keyLen = 24;
                    ivLen = 8;
                    ciphFn = forge.des.createEncryptionCipher;
                    break;

                  default:
                    throw new Error(
                      "Unsupported symmetric cipher, OID " + cipher
                    );
                }

                if (key === undefined) {
                  key = forge.util.createBuffer(forge.random.getBytes(keyLen));
                } else if (key.length() != keyLen) {
                  throw new Error(
                    "Symmetric key has wrong length; " +
                      "got " +
                      key.length() +
                      " bytes, expected " +
                      keyLen +
                      "."
                  );
                }

                // Keep a copy of the key & IV in the object, so the caller can
                // use it for whatever reason.
                msg.encryptedContent.algorithm = cipher;
                msg.encryptedContent.key = key;
                msg.encryptedContent.parameter = forge.util.createBuffer(
                  forge.random.getBytes(ivLen)
                );

                var ciph = ciphFn(key);
                ciph.start(msg.encryptedContent.parameter.copy());
                ciph.update(msg.content);

                // The finish function does PKCS#7 padding by default, therefore
                // no action required by us.
                if (!ciph.finish()) {
                  throw new Error("Symmetric encryption failed.");
                }

                msg.encryptedContent.content = ciph.output;
              }

              // Part 2: asymmetric encryption for each recipient
              for (var i = 0; i < msg.recipients.length; ++i) {
                var recipient = msg.recipients[i];

                // Nothing to do, encryption already done.
                if (recipient.encryptedContent.content !== undefined) {
                  continue;
                }

                switch (recipient.encryptedContent.algorithm) {
                  case forge.pki.oids.rsaEncryption:
                    recipient.encryptedContent.content = recipient.encryptedContent.key.encrypt(
                      msg.encryptedContent.key.data
                    );
                    break;

                  default:
                    throw new Error(
                      "Unsupported asymmetric cipher, OID " +
                        recipient.encryptedContent.algorithm
                    );
                }
              }
            }
          };
          return msg;
        };

        /**
 * Converts a single recipient from an ASN.1 object.
 *
 * @param obj the ASN.1 RecipientInfo.
 *
 * @return the recipient object.
 */
        function _recipientFromAsn1(obj) {
          // validate EnvelopedData content block and capture data
          var capture = {};
          var errors = [];
          if (
            !asn1.validate(obj, p7.asn1.recipientInfoValidator, capture, errors)
          ) {
            var error = new Error(
              "Cannot read PKCS#7 RecipientInfo. " +
                "ASN.1 object is not an PKCS#7 RecipientInfo."
            );
            error.errors = errors;
            throw error;
          }

          return {
            version: capture.version.charCodeAt(0),
            issuer: forge.pki.RDNAttributesAsArray(capture.issuer),
            serialNumber: forge.util.createBuffer(capture.serial).toHex(),
            encryptedContent: {
              algorithm: asn1.derToOid(capture.encAlgorithm),
              parameter: capture.encParameter.value,
              content: capture.encKey
            }
          };
        }

        /**
 * Converts a single recipient object to an ASN.1 object.
 *
 * @param obj the recipient object.
 *
 * @return the ASN.1 RecipientInfo.
 */
        function _recipientToAsn1(obj) {
          return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
            // Version
            asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.INTEGER,
              false,
              asn1.integerToDer(obj.version).getBytes()
            ),
            // IssuerAndSerialNumber
            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
              // Name
              forge.pki.distinguishedNameToAsn1({ attributes: obj.issuer }),
              // Serial
              asn1.create(
                asn1.Class.UNIVERSAL,
                asn1.Type.INTEGER,
                false,
                forge.util.hexToBytes(obj.serialNumber)
              )
            ]),
            // KeyEncryptionAlgorithmIdentifier
            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
              // Algorithm
              asn1.create(
                asn1.Class.UNIVERSAL,
                asn1.Type.OID,
                false,
                asn1.oidToDer(obj.encryptedContent.algorithm).getBytes()
              ),
              // Parameter, force NULL, only RSA supported for now.
              asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, "")
            ]),
            // EncryptedKey
            asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.OCTETSTRING,
              false,
              obj.encryptedContent.content
            )
          ]);
        }

        /**
 * Map a set of RecipientInfo ASN.1 objects to recipient objects.
 *
 * @param infos an array of ASN.1 representations RecipientInfo (i.e. SET OF).
 *
 * @return an array of recipient objects.
 */
        function _recipientsFromAsn1(infos) {
          var ret = [];
          for (var i = 0; i < infos.length; ++i) {
            ret.push(_recipientFromAsn1(infos[i]));
          }
          return ret;
        }

        /**
 * Map an array of recipient objects to ASN.1 RecipientInfo objects.
 *
 * @param recipients an array of recipientInfo objects.
 *
 * @return an array of ASN.1 RecipientInfos.
 */
        function _recipientsToAsn1(recipients) {
          var ret = [];
          for (var i = 0; i < recipients.length; ++i) {
            ret.push(_recipientToAsn1(recipients[i]));
          }
          return ret;
        }

        /**
 * Converts a single signer from an ASN.1 object.
 *
 * @param obj the ASN.1 representation of a SignerInfo.
 *
 * @return the signer object.
 */
        function _signerFromAsn1(obj) {
          // validate EnvelopedData content block and capture data
          var capture = {};
          var errors = [];
          if (
            !asn1.validate(obj, p7.asn1.signerInfoValidator, capture, errors)
          ) {
            var error = new Error(
              "Cannot read PKCS#7 SignerInfo. " +
                "ASN.1 object is not an PKCS#7 SignerInfo."
            );
            error.errors = errors;
            throw error;
          }

          var rval = {
            version: capture.version.charCodeAt(0),
            issuer: forge.pki.RDNAttributesAsArray(capture.issuer),
            serialNumber: forge.util.createBuffer(capture.serial).toHex(),
            digestAlgorithm: asn1.derToOid(capture.digestAlgorithm),
            signatureAlgorithm: asn1.derToOid(capture.signatureAlgorithm),
            signature: capture.signature,
            authenticatedAttributes: [],
            unauthenticatedAttributes: []
          };

          // TODO: convert attributes
          var authenticatedAttributes = capture.authenticatedAttributes || [];
          var unauthenticatedAttributes =
            capture.unauthenticatedAttributes || [];

          return rval;
        }

        /**
 * Converts a single signerInfo object to an ASN.1 object.
 *
 * @param obj the signerInfo object.
 *
 * @return the ASN.1 representation of a SignerInfo.
 */
        function _signerToAsn1(obj) {
          // SignerInfo
          var rval = asn1.create(
            asn1.Class.UNIVERSAL,
            asn1.Type.SEQUENCE,
            true,
            [
              // version
              asn1.create(
                asn1.Class.UNIVERSAL,
                asn1.Type.INTEGER,
                false,
                asn1.integerToDer(obj.version).getBytes()
              ),
              // issuerAndSerialNumber
              asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
                // name
                forge.pki.distinguishedNameToAsn1({ attributes: obj.issuer }),
                // serial
                asn1.create(
                  asn1.Class.UNIVERSAL,
                  asn1.Type.INTEGER,
                  false,
                  forge.util.hexToBytes(obj.serialNumber)
                )
              ]),
              // digestAlgorithm
              asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
                // algorithm
                asn1.create(
                  asn1.Class.UNIVERSAL,
                  asn1.Type.OID,
                  false,
                  asn1.oidToDer(obj.digestAlgorithm).getBytes()
                ),
                // parameters (null)
                asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, "")
              ])
            ]
          );

          // authenticatedAttributes (OPTIONAL)
          if (obj.authenticatedAttributesAsn1) {
            // add ASN.1 previously generated during signing
            rval.value.push(obj.authenticatedAttributesAsn1);
          }

          // digestEncryptionAlgorithm
          rval.value.push(
            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
              // algorithm
              asn1.create(
                asn1.Class.UNIVERSAL,
                asn1.Type.OID,
                false,
                asn1.oidToDer(obj.signatureAlgorithm).getBytes()
              ),
              // parameters (null)
              asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, "")
            ])
          );

          // encryptedDigest
          rval.value.push(
            asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.OCTETSTRING,
              false,
              obj.signature
            )
          );

          // unauthenticatedAttributes (OPTIONAL)
          if (obj.unauthenticatedAttributes.length > 0) {
            // [1] IMPLICIT
            var attrsAsn1 = asn1.create(
              asn1.Class.CONTEXT_SPECIFIC,
              1,
              true,
              []
            );
            for (var i = 0; i < obj.unauthenticatedAttributes.length; ++i) {
              var attr = obj.unauthenticatedAttributes[i];
              attrsAsn1.values.push(_attributeToAsn1(attr));
            }
            rval.value.push(attrsAsn1);
          }

          return rval;
        }

        /**
 * Map a set of SignerInfo ASN.1 objects to an array of signer objects.
 *
 * @param signerInfoAsn1s an array of ASN.1 SignerInfos (i.e. SET OF).
 *
 * @return an array of signers objects.
 */
        function _signersFromAsn1(signerInfoAsn1s) {
          var ret = [];
          for (var i = 0; i < signerInfoAsn1s.length; ++i) {
            ret.push(_signerFromAsn1(signerInfoAsn1s[i]));
          }
          return ret;
        }

        /**
 * Map an array of signer objects to ASN.1 objects.
 *
 * @param signers an array of signer objects.
 *
 * @return an array of ASN.1 SignerInfos.
 */
        function _signersToAsn1(signers) {
          var ret = [];
          for (var i = 0; i < signers.length; ++i) {
            ret.push(_signerToAsn1(signers[i]));
          }
          return ret;
        }

        /**
 * Convert an attribute object to an ASN.1 Attribute.
 *
 * @param attr the attribute object.
 *
 * @return the ASN.1 Attribute.
 */
        function _attributeToAsn1(attr) {
          var value;

          // TODO: generalize to support more attributes
          if (attr.type === forge.pki.oids.contentType) {
            value = asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.OID,
              false,
              asn1.oidToDer(attr.value).getBytes()
            );
          } else if (attr.type === forge.pki.oids.messageDigest) {
            value = asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.OCTETSTRING,
              false,
              attr.value.bytes()
            );
          } else if (attr.type === forge.pki.oids.signingTime) {
            /* Note per RFC 2985: Dates between 1 January 1950 and 31 December 2049
      (inclusive) MUST be encoded as UTCTime. Any dates with year values
      before 1950 or after 2049 MUST be encoded as GeneralizedTime. [Further,]
      UTCTime values MUST be expressed in Greenwich Mean Time (Zulu) and MUST
      include seconds (i.e., times are YYMMDDHHMMSSZ), even where the
      number of seconds is zero.  Midnight (GMT) must be represented as
      "YYMMDD000000Z". */
            // TODO: make these module-level constants
            var jan_1_1950 = new Date("1950-01-01T00:00:00Z");
            var jan_1_2050 = new Date("2050-01-01T00:00:00Z");
            var date = attr.value;
            if (typeof date === "string") {
              // try to parse date
              var timestamp = Date.parse(date);
              if (!isNaN(timestamp)) {
                date = new Date(timestamp);
              } else if (date.length === 13) {
                // YYMMDDHHMMSSZ (13 chars for UTCTime)
                date = asn1.utcTimeToDate(date);
              } else {
                // assume generalized time
                date = asn1.generalizedTimeToDate(date);
              }
            }

            if (date >= jan_1_1950 && date < jan_1_2050) {
              value = asn1.create(
                asn1.Class.UNIVERSAL,
                asn1.Type.UTCTIME,
                false,
                asn1.dateToUtcTime(date)
              );
            } else {
              value = asn1.create(
                asn1.Class.UNIVERSAL,
                asn1.Type.GENERALIZEDTIME,
                false,
                asn1.dateToGeneralizedTime(date)
              );
            }
          }

          // TODO: expose as common API call
          // create a RelativeDistinguishedName set
          // each value in the set is an AttributeTypeAndValue first
          // containing the type (an OID) and second the value
          return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
            // AttributeType
            asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.OID,
              false,
              asn1.oidToDer(attr.type).getBytes()
            ),
            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, [
              // AttributeValue
              value
            ])
          ]);
        }

        /**
 * Map messages encrypted content to ASN.1 objects.
 *
 * @param ec The encryptedContent object of the message.
 *
 * @return ASN.1 representation of the encryptedContent object (SEQUENCE).
 */
        function _encryptedContentToAsn1(ec) {
          return [
            // ContentType, always Data for the moment
            asn1.create(
              asn1.Class.UNIVERSAL,
              asn1.Type.OID,
              false,
              asn1.oidToDer(forge.pki.oids.data).getBytes()
            ),
            // ContentEncryptionAlgorithmIdentifier
            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
              // Algorithm
              asn1.create(
                asn1.Class.UNIVERSAL,
                asn1.Type.OID,
                false,
                asn1.oidToDer(ec.algorithm).getBytes()
              ),
              // Parameters (IV)
              asn1.create(
                asn1.Class.UNIVERSAL,
                asn1.Type.OCTETSTRING,
                false,
                ec.parameter.getBytes()
              )
            ]),
            // [0] EncryptedContent
            asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
              asn1.create(
                asn1.Class.UNIVERSAL,
                asn1.Type.OCTETSTRING,
                false,
                ec.content.getBytes()
              )
            ])
          ];
        }

        /**
 * Reads the "common part" of an PKCS#7 content block (in ASN.1 format)
 *
 * This function reads the "common part" of the PKCS#7 content blocks
 * EncryptedData and EnvelopedData, i.e. version number and symmetrically
 * encrypted content block.
 *
 * The result of the ASN.1 validate and capture process is returned
 * to allow the caller to extract further data, e.g. the list of recipients
 * in case of a EnvelopedData object.
 *
 * @param msg the PKCS#7 object to read the data to.
 * @param obj the ASN.1 representation of the content block.
 * @param validator the ASN.1 structure validator object to use.
 *
 * @return the value map captured by validator object.
 */
        function _fromAsn1(msg, obj, validator) {
          var capture = {};
          var errors = [];
          if (!asn1.validate(obj, validator, capture, errors)) {
            var error = new Error(
              "Cannot read PKCS#7 message. " +
                "ASN.1 object is not a supported PKCS#7 message."
            );
            error.errors = error;
            throw error;
          }

          // Check contentType, so far we only support (raw) Data.
          var contentType = asn1.derToOid(capture.contentType);
          if (contentType !== forge.pki.oids.data) {
            throw new Error(
              "Unsupported PKCS#7 message. " +
                "Only wrapped ContentType Data supported."
            );
          }

          if (capture.encryptedContent) {
            var content = "";
            if (forge.util.isArray(capture.encryptedContent)) {
              for (var i = 0; i < capture.encryptedContent.length; ++i) {
                if (
                  capture.encryptedContent[i].type !== asn1.Type.OCTETSTRING
                ) {
                  throw new Error(
                    "Malformed PKCS#7 message, expecting encrypted " +
                      "content constructed of only OCTET STRING objects."
                  );
                }
                content += capture.encryptedContent[i].value;
              }
            } else {
              content = capture.encryptedContent;
            }
            msg.encryptedContent = {
              algorithm: asn1.derToOid(capture.encAlgorithm),
              parameter: forge.util.createBuffer(capture.encParameter.value),
              content: forge.util.createBuffer(content)
            };
          }

          if (capture.content) {
            var content = "";
            if (forge.util.isArray(capture.content)) {
              for (var i = 0; i < capture.content.length; ++i) {
                if (capture.content[i].type !== asn1.Type.OCTETSTRING) {
                  throw new Error(
                    "Malformed PKCS#7 message, expecting " +
                      "content constructed of only OCTET STRING objects."
                  );
                }
                content += capture.content[i].value;
              }
            } else {
              content = capture.content;
            }
            msg.content = forge.util.createBuffer(content);
          }

          msg.version = capture.version.charCodeAt(0);
          msg.rawCapture = capture;

          return capture;
        }

        /**
 * Decrypt the symmetrically encrypted content block of the PKCS#7 message.
 *
 * Decryption is skipped in case the PKCS#7 message object already has a
 * (decrypted) content attribute.  The algorithm, key and cipher parameters
 * (probably the iv) are taken from the encryptedContent attribute of the
 * message object.
 *
 * @param The PKCS#7 message object.
 */
        function _decryptContent(msg) {
          if (msg.encryptedContent.key === undefined) {
            throw new Error("Symmetric key not available.");
          }

          if (msg.content === undefined) {
            var ciph;

            switch (msg.encryptedContent.algorithm) {
              case forge.pki.oids["aes128-CBC"]:
              case forge.pki.oids["aes192-CBC"]:
              case forge.pki.oids["aes256-CBC"]:
                ciph = forge.aes.createDecryptionCipher(
                  msg.encryptedContent.key
                );
                break;

              case forge.pki.oids["desCBC"]:
              case forge.pki.oids["des-EDE3-CBC"]:
                ciph = forge.des.createDecryptionCipher(
                  msg.encryptedContent.key
                );
                break;

              default:
                throw new Error(
                  "Unsupported symmetric cipher, OID " +
                    msg.encryptedContent.algorithm
                );
            }
            ciph.start(msg.encryptedContent.parameter);
            ciph.update(msg.encryptedContent.content);

            if (!ciph.finish()) {
              throw new Error("Symmetric decryption failed.");
            }

            msg.content = ciph.output;
          }
        }

        /***/
      },
      /* 134 */
      /***/ function(module, exports, __webpack_require__) {
        /**
 * Functions to output keys in SSH-friendly formats.
 *
 * This is part of the Forge project which may be used under the terms of
 * either the BSD License or the GNU General Public License (GPL) Version 2.
 *
 * See: https://github.com/digitalbazaar/forge/blob/cbebca3780658703d925b61b2caffb1d263a6c1d/LICENSE
 *
 * @author https://github.com/shellac
 */
        var forge = __webpack_require__(1);
        __webpack_require__(15);
        __webpack_require__(21);
        __webpack_require__(44);
        __webpack_require__(22);
        __webpack_require__(3);

        var ssh = (module.exports = forge.ssh = forge.ssh || {});

        /**
 * Encodes (and optionally encrypts) a private RSA key as a Putty PPK file.
 *
 * @param privateKey the key.
 * @param passphrase a passphrase to protect the key (falsy for no encryption).
 * @param comment a comment to include in the key file.
 *
 * @return the PPK file as a string.
 */
        ssh.privateKeyToPutty = function(privateKey, passphrase, comment) {
          comment = comment || "";
          passphrase = passphrase || "";
          var algorithm = "ssh-rsa";
          var encryptionAlgorithm = passphrase === "" ? "none" : "aes256-cbc";

          var ppk = "PuTTY-User-Key-File-2: " + algorithm + "\r\n";
          ppk += "Encryption: " + encryptionAlgorithm + "\r\n";
          ppk += "Comment: " + comment + "\r\n";

          // public key into buffer for ppk
          var pubbuffer = forge.util.createBuffer();
          _addStringToBuffer(pubbuffer, algorithm);
          _addBigIntegerToBuffer(pubbuffer, privateKey.e);
          _addBigIntegerToBuffer(pubbuffer, privateKey.n);

          // write public key
          var pub = forge.util.encode64(pubbuffer.bytes(), 64);
          var length = Math.floor(pub.length / 66) + 1; // 66 = 64 + \r\n
          ppk += "Public-Lines: " + length + "\r\n";
          ppk += pub;

          // private key into a buffer
          var privbuffer = forge.util.createBuffer();
          _addBigIntegerToBuffer(privbuffer, privateKey.d);
          _addBigIntegerToBuffer(privbuffer, privateKey.p);
          _addBigIntegerToBuffer(privbuffer, privateKey.q);
          _addBigIntegerToBuffer(privbuffer, privateKey.qInv);

          // optionally encrypt the private key
          var priv;
          if (!passphrase) {
            // use the unencrypted buffer
            priv = forge.util.encode64(privbuffer.bytes(), 64);
          } else {
            // encrypt RSA key using passphrase
            var encLen = privbuffer.length() + 16 - 1;
            encLen -= encLen % 16;

            // pad private key with sha1-d data -- needs to be a multiple of 16
            var padding = _sha1(privbuffer.bytes());

            padding.truncate(padding.length() - encLen + privbuffer.length());
            privbuffer.putBuffer(padding);

            var aeskey = forge.util.createBuffer();
            aeskey.putBuffer(_sha1("\x00\x00\x00\x00", passphrase));
            aeskey.putBuffer(_sha1("\x00\x00\x00\x01", passphrase));

            // encrypt some bytes using CBC mode
            // key is 40 bytes, so truncate *by* 8 bytes
            var cipher = forge.aes.createEncryptionCipher(
              aeskey.truncate(8),
              "CBC"
            );
            cipher.start(forge.util.createBuffer().fillWithByte(0, 16));
            cipher.update(privbuffer.copy());
            cipher.finish();
            var encrypted = cipher.output;

            // Note: this appears to differ from Putty -- is forge wrong, or putty?
            // due to padding we finish as an exact multiple of 16
            encrypted.truncate(16); // all padding

            priv = forge.util.encode64(encrypted.bytes(), 64);
          }

          // output private key
          length = Math.floor(priv.length / 66) + 1; // 64 + \r\n
          ppk += "\r\nPrivate-Lines: " + length + "\r\n";
          ppk += priv;

          // MAC
          var mackey = _sha1("putty-private-key-file-mac-key", passphrase);

          var macbuffer = forge.util.createBuffer();
          _addStringToBuffer(macbuffer, algorithm);
          _addStringToBuffer(macbuffer, encryptionAlgorithm);
          _addStringToBuffer(macbuffer, comment);
          macbuffer.putInt32(pubbuffer.length());
          macbuffer.putBuffer(pubbuffer);
          macbuffer.putInt32(privbuffer.length());
          macbuffer.putBuffer(privbuffer);

          var hmac = forge.hmac.create();
          hmac.start("sha1", mackey);
          hmac.update(macbuffer.bytes());

          ppk += "\r\nPrivate-MAC: " + hmac.digest().toHex() + "\r\n";

          return ppk;
        };

        /**
 * Encodes a public RSA key as an OpenSSH file.
 *
 * @param key the key.
 * @param comment a comment.
 *
 * @return the public key in OpenSSH format.
 */
        ssh.publicKeyToOpenSSH = function(key, comment) {
          var type = "ssh-rsa";
          comment = comment || "";

          var buffer = forge.util.createBuffer();
          _addStringToBuffer(buffer, type);
          _addBigIntegerToBuffer(buffer, key.e);
          _addBigIntegerToBuffer(buffer, key.n);

          return (
            type + " " + forge.util.encode64(buffer.bytes()) + " " + comment
          );
        };

        /**
 * Encodes a private RSA key as an OpenSSH file.
 *
 * @param key the key.
 * @param passphrase a passphrase to protect the key (falsy for no encryption).
 *
 * @return the public key in OpenSSH format.
 */
        ssh.privateKeyToOpenSSH = function(privateKey, passphrase) {
          if (!passphrase) {
            return forge.pki.privateKeyToPem(privateKey);
          }
          // OpenSSH private key is just a legacy format, it seems
          return forge.pki.encryptRsaPrivateKey(privateKey, passphrase, {
            legacy: true,
            algorithm: "aes128"
          });
        };

        /**
 * Gets the SSH fingerprint for the given public key.
 *
 * @param options the options to use.
 *          [md] the message digest object to use (defaults to forge.md.md5).
 *          [encoding] an alternative output encoding, such as 'hex'
 *            (defaults to none, outputs a byte buffer).
 *          [delimiter] the delimiter to use between bytes for 'hex' encoded
 *            output, eg: ':' (defaults to none).
 *
 * @return the fingerprint as a byte buffer or other encoding based on options.
 */
        ssh.getPublicKeyFingerprint = function(key, options) {
          options = options || {};
          var md = options.md || forge.md.md5.create();

          var type = "ssh-rsa";
          var buffer = forge.util.createBuffer();
          _addStringToBuffer(buffer, type);
          _addBigIntegerToBuffer(buffer, key.e);
          _addBigIntegerToBuffer(buffer, key.n);

          // hash public key bytes
          md.start();
          md.update(buffer.getBytes());
          var digest = md.digest();
          if (options.encoding === "hex") {
            var hex = digest.toHex();
            if (options.delimiter) {
              return hex.match(/.{2}/g).join(options.delimiter);
            }
            return hex;
          } else if (options.encoding === "binary") {
            return digest.getBytes();
          } else if (options.encoding) {
            throw new Error('Unknown encoding "' + options.encoding + '".');
          }
          return digest;
        };

        /**
 * Adds len(val) then val to a buffer.
 *
 * @param buffer the buffer to add to.
 * @param val a big integer.
 */
        function _addBigIntegerToBuffer(buffer, val) {
          var hexVal = val.toString(16);
          // ensure 2s complement +ve
          if (hexVal[0] >= "8") {
            hexVal = "00" + hexVal;
          }
          var bytes = forge.util.hexToBytes(hexVal);
          buffer.putInt32(bytes.length);
          buffer.putBytes(bytes);
        }

        /**
 * Adds len(val) then val to a buffer.
 *
 * @param buffer the buffer to add to.
 * @param val a string.
 */
        function _addStringToBuffer(buffer, val) {
          buffer.putInt32(val.length);
          buffer.putString(val);
        }

        /**
 * Hashes the arguments into one value using SHA-1.
 *
 * @return the sha1 hash of the provided arguments.
 */
        function _sha1() {
          var sha = forge.md.sha1.create();
          var num = arguments.length;
          for (var i = 0; i < num; ++i) {
            sha.update(arguments[i]);
          }
          return sha.digest();
        }

        /***/
      },
      /* 135 */
      /***/ function(module, exports, __webpack_require__) {
        /**
 * Support for concurrent task management and synchronization in web
 * applications.
 *
 * @author Dave Longley
 * @author David I. Lehn <dlehn@digitalbazaar.com>
 *
 * Copyright (c) 2009-2013 Digital Bazaar, Inc.
 */
        var forge = __webpack_require__(1);
        __webpack_require__(78);
        __webpack_require__(79);
        __webpack_require__(3);

        // logging category
        var cat = "forge.task";

        // verbose level
        // 0: off, 1: a little, 2: a whole lot
        // Verbose debug logging is surrounded by a level check to avoid the
        // performance issues with even calling the logging code regardless if it
        // is actually logged.  For performance reasons this should not be set to 2
        // for production use.
        // ex: if(sVL >= 2) forge.log.verbose(....)
        var sVL = 0;

        // track tasks for debugging
        var sTasks = {};
        var sNextTaskId = 0;
        // debug access
        forge.debug.set(cat, "tasks", sTasks);

        // a map of task type to task queue
        var sTaskQueues = {};
        // debug access
        forge.debug.set(cat, "queues", sTaskQueues);

        // name for unnamed tasks
        var sNoTaskName = "?";

        // maximum number of doNext() recursions before a context swap occurs
        // FIXME: might need to tweak this based on the browser
        var sMaxRecursions = 30;

        // time slice for doing tasks before a context swap occurs
        // FIXME: might need to tweak this based on the browser
        var sTimeSlice = 20;

        /**
 * Task states.
 *
 * READY: ready to start processing
 * RUNNING: task or a subtask is running
 * BLOCKED: task is waiting to acquire N permits to continue
 * SLEEPING: task is sleeping for a period of time
 * DONE: task is done
 * ERROR: task has an error
 */
        var READY = "ready";
        var RUNNING = "running";
        var BLOCKED = "blocked";
        var SLEEPING = "sleeping";
        var DONE = "done";
        var ERROR = "error";

        /**
 * Task actions.  Used to control state transitions.
 *
 * STOP: stop processing
 * START: start processing tasks
 * BLOCK: block task from continuing until 1 or more permits are released
 * UNBLOCK: release one or more permits
 * SLEEP: sleep for a period of time
 * WAKEUP: wakeup early from SLEEPING state
 * CANCEL: cancel further tasks
 * FAIL: a failure occured
 */
        var STOP = "stop";
        var START = "start";
        var BLOCK = "block";
        var UNBLOCK = "unblock";
        var SLEEP = "sleep";
        var WAKEUP = "wakeup";
        var CANCEL = "cancel";
        var FAIL = "fail";

        /**
 * State transition table.
 *
 * nextState = sStateTable[currentState][action]
 */
        var sStateTable = {};

        sStateTable[READY] = {};
        sStateTable[READY][STOP] = READY;
        sStateTable[READY][START] = RUNNING;
        sStateTable[READY][CANCEL] = DONE;
        sStateTable[READY][FAIL] = ERROR;

        sStateTable[RUNNING] = {};
        sStateTable[RUNNING][STOP] = READY;
        sStateTable[RUNNING][START] = RUNNING;
        sStateTable[RUNNING][BLOCK] = BLOCKED;
        sStateTable[RUNNING][UNBLOCK] = RUNNING;
        sStateTable[RUNNING][SLEEP] = SLEEPING;
        sStateTable[RUNNING][WAKEUP] = RUNNING;
        sStateTable[RUNNING][CANCEL] = DONE;
        sStateTable[RUNNING][FAIL] = ERROR;

        sStateTable[BLOCKED] = {};
        sStateTable[BLOCKED][STOP] = BLOCKED;
        sStateTable[BLOCKED][START] = BLOCKED;
        sStateTable[BLOCKED][BLOCK] = BLOCKED;
        sStateTable[BLOCKED][UNBLOCK] = BLOCKED;
        sStateTable[BLOCKED][SLEEP] = BLOCKED;
        sStateTable[BLOCKED][WAKEUP] = BLOCKED;
        sStateTable[BLOCKED][CANCEL] = DONE;
        sStateTable[BLOCKED][FAIL] = ERROR;

        sStateTable[SLEEPING] = {};
        sStateTable[SLEEPING][STOP] = SLEEPING;
        sStateTable[SLEEPING][START] = SLEEPING;
        sStateTable[SLEEPING][BLOCK] = SLEEPING;
        sStateTable[SLEEPING][UNBLOCK] = SLEEPING;
        sStateTable[SLEEPING][SLEEP] = SLEEPING;
        sStateTable[SLEEPING][WAKEUP] = SLEEPING;
        sStateTable[SLEEPING][CANCEL] = DONE;
        sStateTable[SLEEPING][FAIL] = ERROR;

        sStateTable[DONE] = {};
        sStateTable[DONE][STOP] = DONE;
        sStateTable[DONE][START] = DONE;
        sStateTable[DONE][BLOCK] = DONE;
        sStateTable[DONE][UNBLOCK] = DONE;
        sStateTable[DONE][SLEEP] = DONE;
        sStateTable[DONE][WAKEUP] = DONE;
        sStateTable[DONE][CANCEL] = DONE;
        sStateTable[DONE][FAIL] = ERROR;

        sStateTable[ERROR] = {};
        sStateTable[ERROR][STOP] = ERROR;
        sStateTable[ERROR][START] = ERROR;
        sStateTable[ERROR][BLOCK] = ERROR;
        sStateTable[ERROR][UNBLOCK] = ERROR;
        sStateTable[ERROR][SLEEP] = ERROR;
        sStateTable[ERROR][WAKEUP] = ERROR;
        sStateTable[ERROR][CANCEL] = ERROR;
        sStateTable[ERROR][FAIL] = ERROR;

        /**
 * Creates a new task.
 *
 * @param options options for this task
 *   run: the run function for the task (required)
 *   name: the run function for the task (optional)
 *   parent: parent of this task (optional)
 *
 * @return the empty task.
 */
        var Task = function(options) {
          // task id
          this.id = -1;

          // task name
          this.name = options.name || sNoTaskName;

          // task has no parent
          this.parent = options.parent || null;

          // save run function
          this.run = options.run;

          // create a queue of subtasks to run
          this.subtasks = [];

          // error flag
          this.error = false;

          // state of the task
          this.state = READY;

          // number of times the task has been blocked (also the number
          // of permits needed to be released to continue running)
          this.blocks = 0;

          // timeout id when sleeping
          this.timeoutId = null;

          // no swap time yet
          this.swapTime = null;

          // no user data
          this.userData = null;

          // initialize task
          // FIXME: deal with overflow
          this.id = sNextTaskId++;
          sTasks[this.id] = this;
          if (sVL >= 1) {
            forge.log.verbose(cat, "[%s][%s] init", this.id, this.name, this);
          }
        };

        /**
 * Logs debug information on this task and the system state.
 */
        Task.prototype.debug = function(msg) {
          msg = msg || "";
          forge.log.debug(
            cat,
            msg,
            "[%s][%s] task:",
            this.id,
            this.name,
            this,
            "subtasks:",
            this.subtasks.length,
            "queue:",
            sTaskQueues
          );
        };

        /**
 * Adds a subtask to run after task.doNext() or task.fail() is called.
 *
 * @param name human readable name for this task (optional).
 * @param subrun a function to run that takes the current task as
 *          its first parameter.
 *
 * @return the current task (useful for chaining next() calls).
 */
        Task.prototype.next = function(name, subrun) {
          // juggle parameters if it looks like no name is given
          if (typeof name === "function") {
            subrun = name;

            // inherit parent's name
            name = this.name;
          }
          // create subtask, set parent to this task, propagate callbacks
          var subtask = new Task({
            run: subrun,
            name: name,
            parent: this
          });
          // start subtasks running
          subtask.state = RUNNING;
          subtask.type = this.type;
          subtask.successCallback = this.successCallback || null;
          subtask.failureCallback = this.failureCallback || null;

          // queue a new subtask
          this.subtasks.push(subtask);

          return this;
        };

        /**
 * Adds subtasks to run in parallel after task.doNext() or task.fail()
 * is called.
 *
 * @param name human readable name for this task (optional).
 * @param subrun functions to run that take the current task as
 *          their first parameter.
 *
 * @return the current task (useful for chaining next() calls).
 */
        Task.prototype.parallel = function(name, subrun) {
          // juggle parameters if it looks like no name is given
          if (forge.util.isArray(name)) {
            subrun = name;

            // inherit parent's name
            name = this.name;
          }
          // Wrap parallel tasks in a regular task so they are started at the
          // proper time.
          return this.next(name, function(task) {
            // block waiting for subtasks
            var ptask = task;
            ptask.block(subrun.length);

            // we pass the iterator from the loop below as a parameter
            // to a function because it is otherwise included in the
            // closure and changes as the loop changes -- causing i
            // to always be set to its highest value
            var startParallelTask = function(pname, pi) {
              forge.task.start({
                type: pname,
                run: function(task) {
                  subrun[pi](task);
                },
                success: function(task) {
                  ptask.unblock();
                },
                failure: function(task) {
                  ptask.unblock();
                }
              });
            };

            for (var i = 0; i < subrun.length; i++) {
              // Type must be unique so task starts in parallel:
              //    name + private string + task id + sub-task index
              // start tasks in parallel and unblock when the finish
              var pname = name + "__parallel-" + task.id + "-" + i;
              var pi = i;
              startParallelTask(pname, pi);
            }
          });
        };

        /**
 * Stops a running task.
 */
        Task.prototype.stop = function() {
          this.state = sStateTable[this.state][STOP];
        };

        /**
 * Starts running a task.
 */
        Task.prototype.start = function() {
          this.error = false;
          this.state = sStateTable[this.state][START];

          // try to restart
          if (this.state === RUNNING) {
            this.start = new Date();
            this.run(this);
            runNext(this, 0);
          }
        };

        /**
 * Blocks a task until it one or more permits have been released. The
 * task will not resume until the requested number of permits have
 * been released with call(s) to unblock().
 *
 * @param n number of permits to wait for(default: 1).
 */
        Task.prototype.block = function(n) {
          n = typeof n === "undefined" ? 1 : n;
          this.blocks += n;
          if (this.blocks > 0) {
            this.state = sStateTable[this.state][BLOCK];
          }
        };

        /**
 * Releases a permit to unblock a task. If a task was blocked by
 * requesting N permits via block(), then it will only continue
 * running once enough permits have been released via unblock() calls.
 *
 * If multiple processes need to synchronize with a single task then
 * use a condition variable (see forge.task.createCondition). It is
 * an error to unblock a task more times than it has been blocked.
 *
 * @param n number of permits to release (default: 1).
 *
 * @return the current block count (task is unblocked when count is 0)
 */
        Task.prototype.unblock = function(n) {
          n = typeof n === "undefined" ? 1 : n;
          this.blocks -= n;
          if (this.blocks === 0 && this.state !== DONE) {
            this.state = RUNNING;
            runNext(this, 0);
          }
          return this.blocks;
        };

        /**
 * Sleep for a period of time before resuming tasks.
 *
 * @param n number of milliseconds to sleep (default: 0).
 */
        Task.prototype.sleep = function(n) {
          n = typeof n === "undefined" ? 0 : n;
          this.state = sStateTable[this.state][SLEEP];
          var self = this;
          this.timeoutId = setTimeout(function() {
            self.timeoutId = null;
            self.state = RUNNING;
            runNext(self, 0);
          }, n);
        };

        /**
 * Waits on a condition variable until notified. The next task will
 * not be scheduled until notification. A condition variable can be
 * created with forge.task.createCondition().
 *
 * Once cond.notify() is called, the task will continue.
 *
 * @param cond the condition variable to wait on.
 */
        Task.prototype.wait = function(cond) {
          cond.wait(this);
        };

        /**
 * If sleeping, wakeup and continue running tasks.
 */
        Task.prototype.wakeup = function() {
          if (this.state === SLEEPING) {
            cancelTimeout(this.timeoutId);
            this.timeoutId = null;
            this.state = RUNNING;
            runNext(this, 0);
          }
        };

        /**
 * Cancel all remaining subtasks of this task.
 */
        Task.prototype.cancel = function() {
          this.state = sStateTable[this.state][CANCEL];
          // remove permits needed
          this.permitsNeeded = 0;
          // cancel timeouts
          if (this.timeoutId !== null) {
            cancelTimeout(this.timeoutId);
            this.timeoutId = null;
          }
          // remove subtasks
          this.subtasks = [];
        };

        /**
 * Finishes this task with failure and sets error flag. The entire
 * task will be aborted unless the next task that should execute
 * is passed as a parameter. This allows levels of subtasks to be
 * skipped. For instance, to abort only this tasks's subtasks, then
 * call fail(task.parent). To abort this task's subtasks and its
 * parent's subtasks, call fail(task.parent.parent). To abort
 * all tasks and simply call the task callback, call fail() or
 * fail(null).
 *
 * The task callback (success or failure) will always, eventually, be
 * called.
 *
 * @param next the task to continue at, or null to abort entirely.
 */
        Task.prototype.fail = function(next) {
          // set error flag
          this.error = true;

          // finish task
          finish(this, true);

          if (next) {
            // propagate task info
            next.error = this.error;
            next.swapTime = this.swapTime;
            next.userData = this.userData;

            // do next task as specified
            runNext(next, 0);
          } else {
            if (this.parent !== null) {
              // finish root task (ensures it is removed from task queue)
              var parent = this.parent;
              while (parent.parent !== null) {
                // propagate task info
                parent.error = this.error;
                parent.swapTime = this.swapTime;
                parent.userData = this.userData;
                parent = parent.parent;
              }
              finish(parent, true);
            }

            // call failure callback if one exists
            if (this.failureCallback) {
              this.failureCallback(this);
            }
          }
        };

        /**
 * Asynchronously start a task.
 *
 * @param task the task to start.
 */
        var start = function(task) {
          task.error = false;
          task.state = sStateTable[task.state][START];
          setTimeout(function() {
            if (task.state === RUNNING) {
              task.swapTime = +new Date();
              task.run(task);
              runNext(task, 0);
            }
          }, 0);
        };

        /**
 * Run the next subtask or finish this task.
 *
 * @param task the task to process.
 * @param recurse the recursion count.
 */
        var runNext = function(task, recurse) {
          // get time since last context swap (ms), if enough time has passed set
          // swap to true to indicate that doNext was performed asynchronously
          // also, if recurse is too high do asynchronously
          var swap =
            recurse > sMaxRecursions ||
            +new Date() - task.swapTime > sTimeSlice;

          var doNext = function(recurse) {
            recurse++;
            if (task.state === RUNNING) {
              if (swap) {
                // update swap time
                task.swapTime = +new Date();
              }

              if (task.subtasks.length > 0) {
                // run next subtask
                var subtask = task.subtasks.shift();
                subtask.error = task.error;
                subtask.swapTime = task.swapTime;
                subtask.userData = task.userData;
                subtask.run(subtask);
                if (!subtask.error) {
                  runNext(subtask, recurse);
                }
              } else {
                finish(task);

                if (!task.error) {
                  // chain back up and run parent
                  if (task.parent !== null) {
                    // propagate task info
                    task.parent.error = task.error;
                    task.parent.swapTime = task.swapTime;
                    task.parent.userData = task.userData;

                    // no subtasks left, call run next subtask on parent
                    runNext(task.parent, recurse);
                  }
                }
              }
            }
          };

          if (swap) {
            // we're swapping, so run asynchronously
            setTimeout(doNext, 0);
          } else {
            // not swapping, so run synchronously
            doNext(recurse);
          }
        };

        /**
 * Finishes a task and looks for the next task in the queue to start.
 *
 * @param task the task to finish.
 * @param suppressCallbacks true to suppress callbacks.
 */
        var finish = function(task, suppressCallbacks) {
          // subtask is now done
          task.state = DONE;

          delete sTasks[task.id];
          if (sVL >= 1) {
            forge.log.verbose(cat, "[%s][%s] finish", task.id, task.name, task);
          }

          // only do queue processing for root tasks
          if (task.parent === null) {
            // report error if queue is missing
            if (!(task.type in sTaskQueues)) {
              forge.log.error(
                cat,
                "[%s][%s] task queue missing [%s]",
                task.id,
                task.name,
                task.type
              );
            } else if (sTaskQueues[task.type].length === 0) {
              // report error if queue is empty
              forge.log.error(
                cat,
                "[%s][%s] task queue empty [%s]",
                task.id,
                task.name,
                task.type
              );
            } else if (sTaskQueues[task.type][0] !== task) {
              // report error if this task isn't the first in the queue
              forge.log.error(
                cat,
                "[%s][%s] task not first in queue [%s]",
                task.id,
                task.name,
                task.type
              );
            } else {
              // remove ourselves from the queue
              sTaskQueues[task.type].shift();
              // clean up queue if it is empty
              if (sTaskQueues[task.type].length === 0) {
                if (sVL >= 1) {
                  forge.log.verbose(
                    cat,
                    "[%s][%s] delete queue [%s]",
                    task.id,
                    task.name,
                    task.type
                  );
                }
                /* Note: Only a task can delete a queue of its own type. This
         is used as a way to synchronize tasks. If a queue for a certain
         task type exists, then a task of that type is running.
         */
                delete sTaskQueues[task.type];
              } else {
                // dequeue the next task and start it
                if (sVL >= 1) {
                  forge.log.verbose(
                    cat,
                    "[%s][%s] queue start next [%s] remain:%s",
                    task.id,
                    task.name,
                    task.type,
                    sTaskQueues[task.type].length
                  );
                }
                sTaskQueues[task.type][0].start();
              }
            }

            if (!suppressCallbacks) {
              // call final callback if one exists
              if (task.error && task.failureCallback) {
                task.failureCallback(task);
              } else if (!task.error && task.successCallback) {
                task.successCallback(task);
              }
            }
          }
        };

        /* Tasks API */
        module.exports = forge.task = forge.task || {};

        /**
 * Starts a new task that will run the passed function asynchronously.
 *
 * In order to finish the task, either task.doNext() or task.fail()
 * *must* be called.
 *
 * The task must have a type (a string identifier) that can be used to
 * synchronize it with other tasks of the same type. That type can also
 * be used to cancel tasks that haven't started yet.
 *
 * To start a task, the following object must be provided as a parameter
 * (each function takes a task object as its first parameter):
 *
 * {
 *   type: the type of task.
 *   run: the function to run to execute the task.
 *   success: a callback to call when the task succeeds (optional).
 *   failure: a callback to call when the task fails (optional).
 * }
 *
 * @param options the object as described above.
 */
        forge.task.start = function(options) {
          // create a new task
          var task = new Task({
            run: options.run,
            name: options.name || sNoTaskName
          });
          task.type = options.type;
          task.successCallback = options.success || null;
          task.failureCallback = options.failure || null;

          // append the task onto the appropriate queue
          if (!(task.type in sTaskQueues)) {
            if (sVL >= 1) {
              forge.log.verbose(
                cat,
                "[%s][%s] create queue [%s]",
                task.id,
                task.name,
                task.type
              );
            }
            // create the queue with the new task
            sTaskQueues[task.type] = [task];
            start(task);
          } else {
            // push the task onto the queue, it will be run after a task
            // with the same type completes
            sTaskQueues[options.type].push(task);
          }
        };

        /**
 * Cancels all tasks of the given type that haven't started yet.
 *
 * @param type the type of task to cancel.
 */
        forge.task.cancel = function(type) {
          // find the task queue
          if (type in sTaskQueues) {
            // empty all but the current task from the queue
            sTaskQueues[type] = [sTaskQueues[type][0]];
          }
        };

        /**
 * Creates a condition variable to synchronize tasks. To make a task wait
 * on the condition variable, call task.wait(condition). To notify all
 * tasks that are waiting, call condition.notify().
 *
 * @return the condition variable.
 */
        forge.task.createCondition = function() {
          var cond = {
            // all tasks that are blocked
            tasks: {}
          };

          /**
   * Causes the given task to block until notify is called. If the task
   * is already waiting on this condition then this is a no-op.
   *
   * @param task the task to cause to wait.
   */
          cond.wait = function(task) {
            // only block once
            if (!(task.id in cond.tasks)) {
              task.block();
              cond.tasks[task.id] = task;
            }
          };

          /**
   * Notifies all waiting tasks to wake up.
   */
          cond.notify = function() {
            // since unblock() will run the next task from here, make sure to
            // clear the condition's blocked task list before unblocking
            var tmp = cond.tasks;
            cond.tasks = {};
            for (var id in tmp) {
              tmp[id].unblock();
            }
          };

          return cond;
        };

        /***/
      },
      /* 136 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(process) {
          /**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

          exports = module.exports = __webpack_require__(137);
          exports.log = log;
          exports.formatArgs = formatArgs;
          exports.save = save;
          exports.load = load;
          exports.useColors = useColors;
          exports.storage =
            "undefined" != typeof chrome && "undefined" != typeof chrome.storage
              ? chrome.storage.local
              : localstorage();

          /**
 * Colors.
 */

          exports.colors = [
            "lightseagreen",
            "forestgreen",
            "goldenrod",
            "dodgerblue",
            "darkorchid",
            "crimson"
          ];

          /**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

          function useColors() {
            // NB: In an Electron preload script, document will be defined but not fully
            // initialized. Since we know we're in Chrome, we'll just detect this case
            // explicitly
            if (
              typeof window !== "undefined" &&
              window.process &&
              window.process.type === "renderer"
            ) {
              return true;
            }

            // is webkit? http://stackoverflow.com/a/16459606/376773
            // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
            return (
              (typeof document !== "undefined" &&
                document.documentElement &&
                document.documentElement.style &&
                document.documentElement.style.WebkitAppearance) ||
              // is firebug? http://stackoverflow.com/a/398120/376773
              (typeof window !== "undefined" &&
                window.console &&
                (window.console.firebug ||
                  (window.console.exception && window.console.table))) ||
              // is firefox >= v31?
              // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
              (typeof navigator !== "undefined" &&
                navigator.userAgent &&
                navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) &&
                parseInt(RegExp.$1, 10) >= 31) ||
              // double check webkit in userAgent just in case we are in a worker
              (typeof navigator !== "undefined" &&
                navigator.userAgent &&
                navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))
            );
          }

          /**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

          exports.formatters.j = function(v) {
            try {
              return JSON.stringify(v);
            } catch (err) {
              return "[UnexpectedJSONParseError]: " + err.message;
            }
          };

          /**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

          function formatArgs(args) {
            var useColors = this.useColors;

            args[0] =
              (useColors ? "%c" : "") +
              this.namespace +
              (useColors ? " %c" : " ") +
              args[0] +
              (useColors ? "%c " : " ") +
              "+" +
              exports.humanize(this.diff);

            if (!useColors) return;

            var c = "color: " + this.color;
            args.splice(1, 0, c, "color: inherit");

            // the final "%c" is somewhat tricky, because there could be other
            // arguments passed either before or after the %c, so we need to
            // figure out the correct index to insert the CSS into
            var index = 0;
            var lastC = 0;
            args[0].replace(/%[a-zA-Z%]/g, function(match) {
              if ("%%" === match) return;
              index++;
              if ("%c" === match) {
                // we only are interested in the *last* %c
                // (the user may have provided their own)
                lastC = index;
              }
            });

            args.splice(lastC, 0, c);
          }

          /**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

          function log() {
            // this hackery is required for IE8/9, where
            // the `console.log` function doesn't have 'apply'
            return (
              "object" === typeof console &&
              console.log &&
              Function.prototype.apply.call(console.log, console, arguments)
            );
          }

          /**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

          function save(namespaces) {
            try {
              if (null == namespaces) {
                exports.storage.removeItem("debug");
              } else {
                exports.storage.debug = namespaces;
              }
            } catch (e) {}
          }

          /**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

          function load() {
            var r;
            try {
              r = exports.storage.debug;
            } catch (e) {}

            // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
            if (!r && typeof process !== "undefined" && "env" in process) {
              r = process.env.DEBUG;
            }

            return r;
          }

          /**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

          exports.enable(load());

          /**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

          function localstorage() {
            try {
              return window.localStorage;
            } catch (e) {}
          }

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(6)));

        /***/
      },
      /* 137 */
      /***/ function(module, exports, __webpack_require__) {
        /**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

        exports = module.exports = createDebug.debug = createDebug[
          "default"
        ] = createDebug;
        exports.coerce = coerce;
        exports.disable = disable;
        exports.enable = enable;
        exports.enabled = enabled;
        exports.humanize = __webpack_require__(49);

        /**
 * The currently active debug mode names, and names to skip.
 */

        exports.names = [];
        exports.skips = [];

        /**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
 */

        exports.formatters = {};

        /**
 * Previous log timestamp.
 */

        var prevTime;

        /**
 * Select a color.
 * @param {String} namespace
 * @return {Number}
 * @api private
 */

        function selectColor(namespace) {
          var hash = 0,
            i;

          for (i in namespace) {
            hash = (hash << 5) - hash + namespace.charCodeAt(i);
            hash |= 0; // Convert to 32bit integer
          }

          return exports.colors[Math.abs(hash) % exports.colors.length];
        }

        /**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

        function createDebug(namespace) {
          function debug() {
            // disabled?
            if (!debug.enabled) return;

            var self = debug;

            // set `diff` timestamp
            var curr = +new Date();
            var ms = curr - (prevTime || curr);
            self.diff = ms;
            self.prev = prevTime;
            self.curr = curr;
            prevTime = curr;

            // turn the `arguments` into a proper Array
            var args = new Array(arguments.length);
            for (var i = 0; i < args.length; i++) {
              args[i] = arguments[i];
            }

            args[0] = exports.coerce(args[0]);

            if ("string" !== typeof args[0]) {
              // anything else let's inspect with %O
              args.unshift("%O");
            }

            // apply any `formatters` transformations
            var index = 0;
            args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
              // if we encounter an escaped % then don't increase the array index
              if (match === "%%") return match;
              index++;
              var formatter = exports.formatters[format];
              if ("function" === typeof formatter) {
                var val = args[index];
                match = formatter.call(self, val);

                // now we need to remove `args[index]` since it's inlined in the `format`
                args.splice(index, 1);
                index--;
              }
              return match;
            });

            // apply env-specific formatting (colors, etc.)
            exports.formatArgs.call(self, args);

            var logFn = debug.log || exports.log || console.log.bind(console);
            logFn.apply(self, args);
          }

          debug.namespace = namespace;
          debug.enabled = exports.enabled(namespace);
          debug.useColors = exports.useColors();
          debug.color = selectColor(namespace);

          // env-specific initialization logic for debug instances
          if ("function" === typeof exports.init) {
            exports.init(debug);
          }

          return debug;
        }

        /**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

        function enable(namespaces) {
          exports.save(namespaces);

          exports.names = [];
          exports.skips = [];

          var split = (typeof namespaces === "string" ? namespaces : "").split(
            /[\s,]+/
          );
          var len = split.length;

          for (var i = 0; i < len; i++) {
            if (!split[i]) continue; // ignore empty strings
            namespaces = split[i].replace(/\*/g, ".*?");
            if (namespaces[0] === "-") {
              exports.skips.push(new RegExp("^" + namespaces.substr(1) + "$"));
            } else {
              exports.names.push(new RegExp("^" + namespaces + "$"));
            }
          }
        }

        /**
 * Disable debug output.
 *
 * @api public
 */

        function disable() {
          exports.enable("");
        }

        /**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

        function enabled(name) {
          var i, len;
          for (i = 0, len = exports.skips.length; i < len; i++) {
            if (exports.skips[i].test(name)) {
              return false;
            }
          }
          for (i = 0, len = exports.names.length; i < len; i++) {
            if (exports.names[i].test(name)) {
              return true;
            }
          }
          return false;
        }

        /**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

        function coerce(val) {
          if (val instanceof Error) return val.stack || val.message;
          return val;
        }

        /***/
      },
      /* 138 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = {
          decode: __webpack_require__(80),
          verify: __webpack_require__(223),
          sign: __webpack_require__(224),
          JsonWebTokenError: __webpack_require__(42),
          NotBeforeError: __webpack_require__(120),
          TokenExpiredError: __webpack_require__(121)
        };

        /***/
      },
      /* 139 */
      /***/ function(module, exports, __webpack_require__) {
        /*global module*/
        var base64url = __webpack_require__(32);
        var DataStream = __webpack_require__(81);
        var jwa = __webpack_require__(86);
        var Stream = __webpack_require__(19);
        var toString = __webpack_require__(119);
        var util = __webpack_require__(34);

        function jwsSecuredInput(header, payload, encoding) {
          encoding = encoding || "utf8";
          var encodedHeader = base64url(toString(header), "binary");
          var encodedPayload = base64url(toString(payload), encoding);
          return util.format("%s.%s", encodedHeader, encodedPayload);
        }

        function jwsSign(opts) {
          var header = opts.header;
          var payload = opts.payload;
          var secretOrKey = opts.secret || opts.privateKey;
          var encoding = opts.encoding;
          var algo = jwa(header.alg);
          var securedInput = jwsSecuredInput(header, payload, encoding);
          var signature = algo.sign(securedInput, secretOrKey);
          return util.format("%s.%s", securedInput, signature);
        }

        function SignStream(opts) {
          var secret = opts.secret || opts.privateKey || opts.key;
          var secretStream = new DataStream(secret);
          this.readable = true;
          this.header = opts.header;
          this.encoding = opts.encoding;
          this.secret = this.privateKey = this.key = secretStream;
          this.payload = new DataStream(opts.payload);
          this.secret.once(
            "close",
            function() {
              if (!this.payload.writable && this.readable) this.sign();
            }.bind(this)
          );

          this.payload.once(
            "close",
            function() {
              if (!this.secret.writable && this.readable) this.sign();
            }.bind(this)
          );
        }
        util.inherits(SignStream, Stream);

        SignStream.prototype.sign = function sign() {
          try {
            var signature = jwsSign({
              header: this.header,
              payload: this.payload.buffer,
              secret: this.secret.buffer,
              encoding: this.encoding
            });
            this.emit("done", signature);
            this.emit("data", signature);
            this.emit("end");
            this.readable = false;
            return signature;
          } catch (e) {
            this.readable = false;
            this.emit("error", e);
            this.emit("close");
          }
        };

        SignStream.sign = jwsSign;

        module.exports = SignStream;

        /***/
      },
      /* 140 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";
        /* WEBPACK VAR INJECTION */ (function(Buffer) {
          var pad_string_1 = __webpack_require__(141);
          function encode(input, encoding) {
            if (encoding === void 0) {
              encoding = "utf8";
            }
            if (Buffer.isBuffer(input)) {
              return fromBase64(input.toString("base64"));
            }
            return fromBase64(new Buffer(input, encoding).toString("base64"));
          }
          function decode(base64url, encoding) {
            if (encoding === void 0) {
              encoding = "utf8";
            }
            return new Buffer(toBase64(base64url), "base64").toString(encoding);
          }
          function toBase64(base64url) {
            base64url = base64url.toString();
            return pad_string_1
              .default(base64url)
              .replace(/\-/g, "+")
              .replace(/_/g, "/");
          }
          function fromBase64(base64) {
            return base64
              .replace(/=/g, "")
              .replace(/\+/g, "-")
              .replace(/\//g, "_");
          }
          function toBuffer(base64url) {
            return new Buffer(toBase64(base64url), "base64");
          }
          var base64url = encode;
          base64url.encode = encode;
          base64url.decode = decode;
          base64url.toBase64 = toBase64;
          base64url.fromBase64 = fromBase64;
          base64url.toBuffer = toBuffer;
          Object.defineProperty(exports, "__esModule", { value: true });
          exports.default = base64url;

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(0).Buffer));

        /***/
      },
      /* 141 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";
        /* WEBPACK VAR INJECTION */ (function(Buffer) {
          function padString(input) {
            var segmentLength = 4;
            var stringLength = input.length;
            var diff = stringLength % segmentLength;
            if (!diff) {
              return input;
            }
            var position = stringLength;
            var padLength = segmentLength - diff;
            var paddedStringLength = stringLength + padLength;
            var buffer = new Buffer(paddedStringLength);
            buffer.write(input);
            while (padLength--) {
              buffer.write("=", position++);
            }
            return buffer.toString();
          }
          Object.defineProperty(exports, "__esModule", { value: true });
          exports.default = padString;

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(0).Buffer));

        /***/
      },
      /* 142 */
      /***/ function(module, exports) {
        /* (ignored) */
        /***/
      },
      /* 143 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        /*<replacement>*/

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }

        var Buffer = __webpack_require__(13).Buffer;
        /*</replacement>*/

        function copyBuffer(src, target, offset) {
          src.copy(target, offset);
        }

        module.exports = (function() {
          function BufferList() {
            _classCallCheck(this, BufferList);

            this.head = null;
            this.tail = null;
            this.length = 0;
          }

          BufferList.prototype.push = function push(v) {
            var entry = { data: v, next: null };
            if (this.length > 0) this.tail.next = entry;
            else this.head = entry;
            this.tail = entry;
            ++this.length;
          };

          BufferList.prototype.unshift = function unshift(v) {
            var entry = { data: v, next: this.head };
            if (this.length === 0) this.tail = entry;
            this.head = entry;
            ++this.length;
          };

          BufferList.prototype.shift = function shift() {
            if (this.length === 0) return;
            var ret = this.head.data;
            if (this.length === 1) this.head = this.tail = null;
            else this.head = this.head.next;
            --this.length;
            return ret;
          };

          BufferList.prototype.clear = function clear() {
            this.head = this.tail = null;
            this.length = 0;
          };

          BufferList.prototype.join = function join(s) {
            if (this.length === 0) return "";
            var p = this.head;
            var ret = "" + p.data;
            while ((p = p.next)) {
              ret += s + p.data;
            }
            return ret;
          };

          BufferList.prototype.concat = function concat(n) {
            if (this.length === 0) return Buffer.alloc(0);
            if (this.length === 1) return this.head.data;
            var ret = Buffer.allocUnsafe(n >>> 0);
            var p = this.head;
            var i = 0;
            while (p) {
              copyBuffer(p.data, ret, i);
              i += p.data.length;
              p = p.next;
            }
            return ret;
          };

          return BufferList;
        })();

        /***/
      },
      /* 144 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(global) {
          /**
 * Module exports.
 */

          module.exports = deprecate;

          /**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

          function deprecate(fn, msg) {
            if (config("noDeprecation")) {
              return fn;
            }

            var warned = false;
            function deprecated() {
              if (!warned) {
                if (config("throwDeprecation")) {
                  throw new Error(msg);
                } else if (config("traceDeprecation")) {
                  console.trace(msg);
                } else {
                  console.warn(msg);
                }
                warned = true;
              }
              return fn.apply(this, arguments);
            }

            return deprecated;
          }

          /**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

          function config(name) {
            // accessing global.localStorage can trigger a DOMException in sandboxed iframes
            try {
              if (!global.localStorage) return false;
            } catch (_) {
              return false;
            }
            var val = global.localStorage[name];
            if (null == val) return false;
            return String(val).toLowerCase() === "true";
          }

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(8)));

        /***/
      },
      /* 145 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";
        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.

        // a passthrough stream.
        // basically just the most minimal sort of Transform stream.
        // Every written chunk gets output as-is.

        module.exports = PassThrough;

        var Transform = __webpack_require__(85);

        /*<replacement>*/
        var util = __webpack_require__(23);
        util.inherits = __webpack_require__(2);
        /*</replacement>*/

        util.inherits(PassThrough, Transform);

        function PassThrough(options) {
          if (!(this instanceof PassThrough)) return new PassThrough(options);

          Transform.call(this, options);
        }

        PassThrough.prototype._transform = function(chunk, encoding, cb) {
          cb(null, chunk);
        };

        /***/
      },
      /* 146 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(54);

        /***/
      },
      /* 147 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(17);

        /***/
      },
      /* 148 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(53).Transform;

        /***/
      },
      /* 149 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(53).PassThrough;

        /***/
      },
      /* 150 */
      /***/ function(module, exports) {
        module.exports = function isBuffer(arg) {
          return (
            arg &&
            typeof arg === "object" &&
            typeof arg.copy === "function" &&
            typeof arg.fill === "function" &&
            typeof arg.readUInt8 === "function"
          );
        };

        /***/
      },
      /* 151 */
      /***/ function(module, exports) {
        if (typeof Object.create === "function") {
          // implementation from standard node.js 'util' module
          module.exports = function inherits(ctor, superCtor) {
            ctor.super_ = superCtor;
            ctor.prototype = Object.create(superCtor.prototype, {
              constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
          };
        } else {
          // old school shim for old browsers
          module.exports = function inherits(ctor, superCtor) {
            ctor.super_ = superCtor;
            var TempCtor = function() {};
            TempCtor.prototype = superCtor.prototype;
            ctor.prototype = new TempCtor();
            ctor.prototype.constructor = ctor;
          };
        }

        /***/
      },
      /* 152 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";
        /*jshint node:true */

        var Buffer = __webpack_require__(0).Buffer; // browserify
        var SlowBuffer = __webpack_require__(0).SlowBuffer;

        module.exports = bufferEq;

        function bufferEq(a, b) {
          // shortcutting on type is necessary for correctness
          if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
            return false;
          }

          // buffer sizes should be well-known information, so despite this
          // shortcutting, it doesn't leak any information about the *contents* of the
          // buffers.
          if (a.length !== b.length) {
            return false;
          }

          var c = 0;
          for (var i = 0; i < a.length; i++) {
            /*jshint bitwise:false */
            c |= a[i] ^ b[i]; // XOR
          }
          return c === 0;
        }

        bufferEq.install = function() {
          Buffer.prototype.equal = SlowBuffer.prototype.equal = function equal(
            that
          ) {
            return bufferEq(this, that);
          };
        };

        var origBufEqual = Buffer.prototype.equal;
        var origSlowBufEqual = SlowBuffer.prototype.equal;
        bufferEq.restore = function() {
          Buffer.prototype.equal = origBufEqual;
          SlowBuffer.prototype.equal = origSlowBufEqual;
        };

        /***/
      },
      /* 153 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = __webpack_require__(
          24
        );
        exports.createHash = exports.Hash = __webpack_require__(25);
        exports.createHmac = exports.Hmac = __webpack_require__(89);

        var algos = __webpack_require__(161);
        var algoKeys = Object.keys(algos);
        var hashes = [
          "sha1",
          "sha224",
          "sha256",
          "sha384",
          "sha512",
          "md5",
          "rmd160"
        ].concat(algoKeys);
        exports.getHashes = function() {
          return hashes;
        };

        var p = __webpack_require__(91);
        exports.pbkdf2 = p.pbkdf2;
        exports.pbkdf2Sync = p.pbkdf2Sync;

        var aes = __webpack_require__(163);

        exports.Cipher = aes.Cipher;
        exports.createCipher = aes.createCipher;
        exports.Cipheriv = aes.Cipheriv;
        exports.createCipheriv = aes.createCipheriv;
        exports.Decipher = aes.Decipher;
        exports.createDecipher = aes.createDecipher;
        exports.Decipheriv = aes.Decipheriv;
        exports.createDecipheriv = aes.createDecipheriv;
        exports.getCiphers = aes.getCiphers;
        exports.listCiphers = aes.listCiphers;

        var dh = __webpack_require__(174);

        exports.DiffieHellmanGroup = dh.DiffieHellmanGroup;
        exports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup;
        exports.getDiffieHellman = dh.getDiffieHellman;
        exports.createDiffieHellman = dh.createDiffieHellman;
        exports.DiffieHellman = dh.DiffieHellman;

        var sign = __webpack_require__(178);

        exports.createSign = sign.createSign;
        exports.Sign = sign.Sign;
        exports.createVerify = sign.createVerify;
        exports.Verify = sign.Verify;

        exports.createECDH = __webpack_require__(216);

        var publicEncrypt = __webpack_require__(217);

        exports.publicEncrypt = publicEncrypt.publicEncrypt;
        exports.privateEncrypt = publicEncrypt.privateEncrypt;
        exports.publicDecrypt = publicEncrypt.publicDecrypt;
        exports.privateDecrypt = publicEncrypt.privateDecrypt;

        // the least I can do is make error messages for the rest of the node.js/crypto api.
        // ;[
        //   'createCredentials'
        // ].forEach(function (name) {
        //   exports[name] = function () {
        //     throw new Error([
        //       'sorry, ' + name + ' is not implemented yet',
        //       'we accept pull requests',
        //       'https://github.com/crypto-browserify/crypto-browserify'
        //     ].join('\n'))
        //   }
        // })

        exports.createCredentials = function() {
          throw new Error(
            [
              "sorry, createCredentials is not implemented yet",
              "we accept pull requests",
              "https://github.com/crypto-browserify/crypto-browserify"
            ].join("\n")
          );
        };

        exports.constants = {
          DH_CHECK_P_NOT_SAFE_PRIME: 2,
          DH_CHECK_P_NOT_PRIME: 1,
          DH_UNABLE_TO_CHECK_GENERATOR: 4,
          DH_NOT_SUITABLE_GENERATOR: 8,
          NPN_ENABLED: 1,
          ALPN_ENABLED: 1,
          RSA_PKCS1_PADDING: 1,
          RSA_SSLV23_PADDING: 2,
          RSA_NO_PADDING: 3,
          RSA_PKCS1_OAEP_PADDING: 4,
          RSA_X931_PADDING: 5,
          RSA_PKCS1_PSS_PADDING: 6,
          POINT_CONVERSION_COMPRESSED: 2,
          POINT_CONVERSION_UNCOMPRESSED: 4,
          POINT_CONVERSION_HYBRID: 6
        };

        /***/
      },
      /* 154 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";
        /* WEBPACK VAR INJECTION */ (function(Buffer) {
          var intSize = 4;
          var zeroBuffer = new Buffer(intSize);
          zeroBuffer.fill(0);

          var charSize = 8;
          var hashSize = 16;

          function toArray(buf) {
            if (buf.length % intSize !== 0) {
              var len = buf.length + (intSize - buf.length % intSize);
              buf = Buffer.concat([buf, zeroBuffer], len);
            }

            var arr = new Array(buf.length >>> 2);
            for (var i = 0, j = 0; i < buf.length; i += intSize, j++) {
              arr[j] = buf.readInt32LE(i);
            }

            return arr;
          }

          module.exports = function hash(buf, fn) {
            var arr = fn(toArray(buf), buf.length * charSize);
            buf = new Buffer(hashSize);
            for (var i = 0; i < arr.length; i++) {
              buf.writeInt32LE(arr[i], i << 2, true);
            }
            return buf;
          };

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(0).Buffer));

        /***/
      },
      /* 155 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";
        /* WEBPACK VAR INJECTION */ (function(Buffer) {
          var Transform = __webpack_require__(19).Transform;
          var inherits = __webpack_require__(2);

          function HashBase(blockSize) {
            Transform.call(this);

            this._block = new Buffer(blockSize);
            this._blockSize = blockSize;
            this._blockOffset = 0;
            this._length = [0, 0, 0, 0];

            this._finalized = false;
          }

          inherits(HashBase, Transform);

          HashBase.prototype._transform = function(chunk, encoding, callback) {
            var error = null;
            try {
              if (encoding !== "buffer") chunk = new Buffer(chunk, encoding);
              this.update(chunk);
            } catch (err) {
              error = err;
            }

            callback(error);
          };

          HashBase.prototype._flush = function(callback) {
            var error = null;
            try {
              this.push(this._digest());
            } catch (err) {
              error = err;
            }

            callback(error);
          };

          HashBase.prototype.update = function(data, encoding) {
            if (!Buffer.isBuffer(data) && typeof data !== "string")
              throw new TypeError("Data must be a string or a buffer");
            if (this._finalized) throw new Error("Digest already called");
            if (!Buffer.isBuffer(data))
              data = new Buffer(data, encoding || "binary");

            // consume data
            var block = this._block;
            var offset = 0;
            while (
              this._blockOffset + data.length - offset >=
              this._blockSize
            ) {
              for (var i = this._blockOffset; i < this._blockSize; )
                block[i++] = data[offset++];
              this._update();
              this._blockOffset = 0;
            }
            while (offset < data.length)
              block[this._blockOffset++] = data[offset++];

            // update length
            for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
              this._length[j] += carry;
              carry = (this._length[j] / 0x0100000000) | 0;
              if (carry > 0) this._length[j] -= 0x0100000000 * carry;
            }

            return this;
          };

          HashBase.prototype._update = function(data) {
            throw new Error("_update is not implemented");
          };

          HashBase.prototype.digest = function(encoding) {
            if (this._finalized) throw new Error("Digest already called");
            this._finalized = true;

            var digest = this._digest();
            if (encoding !== undefined) digest = digest.toString(encoding);
            return digest;
          };

          HashBase.prototype._digest = function() {
            throw new Error("_digest is not implemented");
          };

          module.exports = HashBase;

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(0).Buffer));

        /***/
      },
      /* 156 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(Buffer) {
          /*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */

          var inherits = __webpack_require__(2);
          var Hash = __webpack_require__(20);

          var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0];

          var W = new Array(80);

          function Sha() {
            this.init();
            this._w = W;

            Hash.call(this, 64, 56);
          }

          inherits(Sha, Hash);

          Sha.prototype.init = function() {
            this._a = 0x67452301;
            this._b = 0xefcdab89;
            this._c = 0x98badcfe;
            this._d = 0x10325476;
            this._e = 0xc3d2e1f0;

            return this;
          };

          function rotl5(num) {
            return (num << 5) | (num >>> 27);
          }

          function rotl30(num) {
            return (num << 30) | (num >>> 2);
          }

          function ft(s, b, c, d) {
            if (s === 0) return (b & c) | (~b & d);
            if (s === 2) return (b & c) | (b & d) | (c & d);
            return b ^ c ^ d;
          }

          Sha.prototype._update = function(M) {
            var W = this._w;

            var a = this._a | 0;
            var b = this._b | 0;
            var c = this._c | 0;
            var d = this._d | 0;
            var e = this._e | 0;

            for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4);
            for (; i < 80; ++i)
              W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];

            for (var j = 0; j < 80; ++j) {
              var s = ~~(j / 20);
              var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0;

              e = d;
              d = c;
              c = rotl30(b);
              b = a;
              a = t;
            }

            this._a = (a + this._a) | 0;
            this._b = (b + this._b) | 0;
            this._c = (c + this._c) | 0;
            this._d = (d + this._d) | 0;
            this._e = (e + this._e) | 0;
          };

          Sha.prototype._hash = function() {
            var H = new Buffer(20);

            H.writeInt32BE(this._a | 0, 0);
            H.writeInt32BE(this._b | 0, 4);
            H.writeInt32BE(this._c | 0, 8);
            H.writeInt32BE(this._d | 0, 12);
            H.writeInt32BE(this._e | 0, 16);

            return H;
          };

          module.exports = Sha;

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(0).Buffer));

        /***/
      },
      /* 157 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(Buffer) {
          /*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

          var inherits = __webpack_require__(2);
          var Hash = __webpack_require__(20);

          var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0];

          var W = new Array(80);

          function Sha1() {
            this.init();
            this._w = W;

            Hash.call(this, 64, 56);
          }

          inherits(Sha1, Hash);

          Sha1.prototype.init = function() {
            this._a = 0x67452301;
            this._b = 0xefcdab89;
            this._c = 0x98badcfe;
            this._d = 0x10325476;
            this._e = 0xc3d2e1f0;

            return this;
          };

          function rotl1(num) {
            return (num << 1) | (num >>> 31);
          }

          function rotl5(num) {
            return (num << 5) | (num >>> 27);
          }

          function rotl30(num) {
            return (num << 30) | (num >>> 2);
          }

          function ft(s, b, c, d) {
            if (s === 0) return (b & c) | (~b & d);
            if (s === 2) return (b & c) | (b & d) | (c & d);
            return b ^ c ^ d;
          }

          Sha1.prototype._update = function(M) {
            var W = this._w;

            var a = this._a | 0;
            var b = this._b | 0;
            var c = this._c | 0;
            var d = this._d | 0;
            var e = this._e | 0;

            for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4);
            for (; i < 80; ++i)
              W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]);

            for (var j = 0; j < 80; ++j) {
              var s = ~~(j / 20);
              var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0;

              e = d;
              d = c;
              c = rotl30(b);
              b = a;
              a = t;
            }

            this._a = (a + this._a) | 0;
            this._b = (b + this._b) | 0;
            this._c = (c + this._c) | 0;
            this._d = (d + this._d) | 0;
            this._e = (e + this._e) | 0;
          };

          Sha1.prototype._hash = function() {
            var H = new Buffer(20);

            H.writeInt32BE(this._a | 0, 0);
            H.writeInt32BE(this._b | 0, 4);
            H.writeInt32BE(this._c | 0, 8);
            H.writeInt32BE(this._d | 0, 12);
            H.writeInt32BE(this._e | 0, 16);

            return H;
          };

          module.exports = Sha1;

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(0).Buffer));

        /***/
      },
      /* 158 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(Buffer) {
          /**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

          var inherits = __webpack_require__(2);
          var Sha256 = __webpack_require__(87);
          var Hash = __webpack_require__(20);

          var W = new Array(64);

          function Sha224() {
            this.init();

            this._w = W; // new Array(64)

            Hash.call(this, 64, 56);
          }

          inherits(Sha224, Sha256);

          Sha224.prototype.init = function() {
            this._a = 0xc1059ed8;
            this._b = 0x367cd507;
            this._c = 0x3070dd17;
            this._d = 0xf70e5939;
            this._e = 0xffc00b31;
            this._f = 0x68581511;
            this._g = 0x64f98fa7;
            this._h = 0xbefa4fa4;

            return this;
          };

          Sha224.prototype._hash = function() {
            var H = new Buffer(28);

            H.writeInt32BE(this._a, 0);
            H.writeInt32BE(this._b, 4);
            H.writeInt32BE(this._c, 8);
            H.writeInt32BE(this._d, 12);
            H.writeInt32BE(this._e, 16);
            H.writeInt32BE(this._f, 20);
            H.writeInt32BE(this._g, 24);

            return H;
          };

          module.exports = Sha224;

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(0).Buffer));

        /***/
      },
      /* 159 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(Buffer) {
          var inherits = __webpack_require__(2);
          var SHA512 = __webpack_require__(88);
          var Hash = __webpack_require__(20);

          var W = new Array(160);

          function Sha384() {
            this.init();
            this._w = W;

            Hash.call(this, 128, 112);
          }

          inherits(Sha384, SHA512);

          Sha384.prototype.init = function() {
            this._ah = 0xcbbb9d5d;
            this._bh = 0x629a292a;
            this._ch = 0x9159015a;
            this._dh = 0x152fecd8;
            this._eh = 0x67332667;
            this._fh = 0x8eb44a87;
            this._gh = 0xdb0c2e0d;
            this._hh = 0x47b5481d;

            this._al = 0xc1059ed8;
            this._bl = 0x367cd507;
            this._cl = 0x3070dd17;
            this._dl = 0xf70e5939;
            this._el = 0xffc00b31;
            this._fl = 0x68581511;
            this._gl = 0x64f98fa7;
            this._hl = 0xbefa4fa4;

            return this;
          };

          Sha384.prototype._hash = function() {
            var H = new Buffer(48);

            function writeInt64BE(h, l, offset) {
              H.writeInt32BE(h, offset);
              H.writeInt32BE(l, offset + 4);
            }

            writeInt64BE(this._ah, this._al, 0);
            writeInt64BE(this._bh, this._bl, 8);
            writeInt64BE(this._ch, this._cl, 16);
            writeInt64BE(this._dh, this._dl, 24);
            writeInt64BE(this._eh, this._el, 32);
            writeInt64BE(this._fh, this._fl, 40);

            return H;
          };

          module.exports = Sha384;

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(0).Buffer));

        /***/
      },
      /* 160 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var inherits = __webpack_require__(2);
        var Buffer = __webpack_require__(13).Buffer;

        var Base = __webpack_require__(14);

        var ZEROS = Buffer.alloc(128);
        var blocksize = 64;

        function Hmac(alg, key) {
          Base.call(this, "digest");
          if (typeof key === "string") {
            key = Buffer.from(key);
          }

          this._alg = alg;
          this._key = key;

          if (key.length > blocksize) {
            key = alg(key);
          } else if (key.length < blocksize) {
            key = Buffer.concat([key, ZEROS], blocksize);
          }

          var ipad = (this._ipad = Buffer.allocUnsafe(blocksize));
          var opad = (this._opad = Buffer.allocUnsafe(blocksize));

          for (var i = 0; i < blocksize; i++) {
            ipad[i] = key[i] ^ 0x36;
            opad[i] = key[i] ^ 0x5c;
          }

          this._hash = [ipad];
        }

        inherits(Hmac, Base);

        Hmac.prototype._update = function(data) {
          this._hash.push(data);
        };

        Hmac.prototype._final = function() {
          var h = this._alg(Buffer.concat(this._hash));
          return this._alg(Buffer.concat([this._opad, h]));
        };
        module.exports = Hmac;

        /***/
      },
      /* 161 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(90);

        /***/
      },
      /* 162 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(global, process) {
          var checkParameters = __webpack_require__(92);
          var defaultEncoding = __webpack_require__(93);
          var sync = __webpack_require__(94);
          var Buffer = __webpack_require__(13).Buffer;

          var ZERO_BUF;
          var subtle = global.crypto && global.crypto.subtle;
          var toBrowser = {
            sha: "SHA-1",
            "sha-1": "SHA-1",
            sha1: "SHA-1",
            sha256: "SHA-256",
            "sha-256": "SHA-256",
            sha384: "SHA-384",
            "sha-384": "SHA-384",
            "sha-512": "SHA-512",
            sha512: "SHA-512"
          };
          var checks = [];
          function checkNative(algo) {
            if (global.process && !global.process.browser) {
              return Promise.resolve(false);
            }
            if (!subtle || !subtle.importKey || !subtle.deriveBits) {
              return Promise.resolve(false);
            }
            if (checks[algo] !== undefined) {
              return checks[algo];
            }
            ZERO_BUF = ZERO_BUF || Buffer.alloc(8);
            var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo)
              .then(function() {
                return true;
              })
              .catch(function() {
                return false;
              });
            checks[algo] = prom;
            return prom;
          }
          function browserPbkdf2(password, salt, iterations, length, algo) {
            return subtle
              .importKey("raw", password, { name: "PBKDF2" }, false, [
                "deriveBits"
              ])
              .then(function(key) {
                return subtle.deriveBits(
                  {
                    name: "PBKDF2",
                    salt: salt,
                    iterations: iterations,
                    hash: {
                      name: algo
                    }
                  },
                  key,
                  length << 3
                );
              })
              .then(function(res) {
                return Buffer.from(res);
              });
          }
          function resolvePromise(promise, callback) {
            promise.then(
              function(out) {
                process.nextTick(function() {
                  callback(null, out);
                });
              },
              function(e) {
                process.nextTick(function() {
                  callback(e);
                });
              }
            );
          }
          module.exports = function(
            password,
            salt,
            iterations,
            keylen,
            digest,
            callback
          ) {
            if (!Buffer.isBuffer(password))
              password = Buffer.from(password, defaultEncoding);
            if (!Buffer.isBuffer(salt))
              salt = Buffer.from(salt, defaultEncoding);

            checkParameters(iterations, keylen);
            if (typeof digest === "function") {
              callback = digest;
              digest = undefined;
            }
            if (typeof callback !== "function")
              throw new Error("No callback provided to pbkdf2");

            digest = digest || "sha1";
            var algo = toBrowser[digest.toLowerCase()];
            if (!algo || typeof global.Promise !== "function") {
              return process.nextTick(function() {
                var out;
                try {
                  out = sync(password, salt, iterations, keylen, digest);
                } catch (e) {
                  return callback(e);
                }
                callback(null, out);
              });
            }
            resolvePromise(
              checkNative(algo).then(function(resp) {
                if (resp) {
                  return browserPbkdf2(
                    password,
                    salt,
                    iterations,
                    keylen,
                    algo
                  );
                } else {
                  return sync(password, salt, iterations, keylen, digest);
                }
              }),
              callback
            );
          };

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(8), __webpack_require__(6)));

        /***/
      },
      /* 163 */
      /***/ function(module, exports, __webpack_require__) {
        var ebtk = __webpack_require__(36);
        var aes = __webpack_require__(58);
        var DES = __webpack_require__(167);
        var desModes = __webpack_require__(173);
        var aesModes = __webpack_require__(38);
        function createCipher(suite, password) {
          var keyLen, ivLen;
          suite = suite.toLowerCase();
          if (aesModes[suite]) {
            keyLen = aesModes[suite].key;
            ivLen = aesModes[suite].iv;
          } else if (desModes[suite]) {
            keyLen = desModes[suite].key * 8;
            ivLen = desModes[suite].iv;
          } else {
            throw new TypeError("invalid suite type");
          }
          var keys = ebtk(password, false, keyLen, ivLen);
          return createCipheriv(suite, keys.key, keys.iv);
        }
        function createDecipher(suite, password) {
          var keyLen, ivLen;
          suite = suite.toLowerCase();
          if (aesModes[suite]) {
            keyLen = aesModes[suite].key;
            ivLen = aesModes[suite].iv;
          } else if (desModes[suite]) {
            keyLen = desModes[suite].key * 8;
            ivLen = desModes[suite].iv;
          } else {
            throw new TypeError("invalid suite type");
          }
          var keys = ebtk(password, false, keyLen, ivLen);
          return createDecipheriv(suite, keys.key, keys.iv);
        }

        function createCipheriv(suite, key, iv) {
          suite = suite.toLowerCase();
          if (aesModes[suite]) {
            return aes.createCipheriv(suite, key, iv);
          } else if (desModes[suite]) {
            return new DES({
              key: key,
              iv: iv,
              mode: suite
            });
          } else {
            throw new TypeError("invalid suite type");
          }
        }
        function createDecipheriv(suite, key, iv) {
          suite = suite.toLowerCase();
          if (aesModes[suite]) {
            return aes.createDecipheriv(suite, key, iv);
          } else if (desModes[suite]) {
            return new DES({
              key: key,
              iv: iv,
              mode: suite,
              decrypt: true
            });
          } else {
            throw new TypeError("invalid suite type");
          }
        }
        exports.createCipher = exports.Cipher = createCipher;
        exports.createCipheriv = exports.Cipheriv = createCipheriv;
        exports.createDecipher = exports.Decipher = createDecipher;
        exports.createDecipheriv = exports.Decipheriv = createDecipheriv;
        function getCiphers() {
          return Object.keys(desModes).concat(aes.getCiphers());
        }
        exports.listCiphers = exports.getCiphers = getCiphers;

        /***/
      },
      /* 164 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(Buffer) {
          var aes = __webpack_require__(37);
          var Transform = __webpack_require__(14);
          var inherits = __webpack_require__(2);
          var modes = __webpack_require__(38);
          var ebtk = __webpack_require__(36);
          var StreamCipher = __webpack_require__(95);
          var AuthCipher = __webpack_require__(96);
          inherits(Cipher, Transform);
          function Cipher(mode, key, iv) {
            if (!(this instanceof Cipher)) {
              return new Cipher(mode, key, iv);
            }
            Transform.call(this);
            this._cache = new Splitter();
            this._cipher = new aes.AES(key);
            this._prev = new Buffer(iv.length);
            iv.copy(this._prev);
            this._mode = mode;
            this._autopadding = true;
          }
          Cipher.prototype._update = function(data) {
            this._cache.add(data);
            var chunk;
            var thing;
            var out = [];
            while ((chunk = this._cache.get())) {
              thing = this._mode.encrypt(this, chunk);
              out.push(thing);
            }
            return Buffer.concat(out);
          };
          Cipher.prototype._final = function() {
            var chunk = this._cache.flush();
            if (this._autopadding) {
              chunk = this._mode.encrypt(this, chunk);
              this._cipher.scrub();
              return chunk;
            } else if (
              chunk.toString("hex") !== "10101010101010101010101010101010"
            ) {
              this._cipher.scrub();
              throw new Error("data not multiple of block length");
            }
          };
          Cipher.prototype.setAutoPadding = function(setTo) {
            this._autopadding = !!setTo;
            return this;
          };

          function Splitter() {
            if (!(this instanceof Splitter)) {
              return new Splitter();
            }
            this.cache = new Buffer("");
          }
          Splitter.prototype.add = function(data) {
            this.cache = Buffer.concat([this.cache, data]);
          };

          Splitter.prototype.get = function() {
            if (this.cache.length > 15) {
              var out = this.cache.slice(0, 16);
              this.cache = this.cache.slice(16);
              return out;
            }
            return null;
          };
          Splitter.prototype.flush = function() {
            var len = 16 - this.cache.length;
            var padBuff = new Buffer(len);

            var i = -1;
            while (++i < len) {
              padBuff.writeUInt8(len, i);
            }
            var out = Buffer.concat([this.cache, padBuff]);
            return out;
          };
          var modelist = {
            ECB: __webpack_require__(97),
            CBC: __webpack_require__(98),
            CFB: __webpack_require__(99),
            CFB8: __webpack_require__(100),
            CFB1: __webpack_require__(101),
            OFB: __webpack_require__(102),
            CTR: __webpack_require__(39),
            GCM: __webpack_require__(39)
          };

          function createCipheriv(suite, password, iv) {
            var config = modes[suite.toLowerCase()];
            if (!config) {
              throw new TypeError("invalid suite type");
            }
            if (typeof iv === "string") {
              iv = new Buffer(iv);
            }
            if (typeof password === "string") {
              password = new Buffer(password);
            }
            if (password.length !== config.key / 8) {
              throw new TypeError("invalid key length " + password.length);
            }
            if (iv.length !== config.iv) {
              throw new TypeError("invalid iv length " + iv.length);
            }
            if (config.type === "stream") {
              return new StreamCipher(modelist[config.mode], password, iv);
            } else if (config.type === "auth") {
              return new AuthCipher(modelist[config.mode], password, iv);
            }
            return new Cipher(modelist[config.mode], password, iv);
          }
          function createCipher(suite, password) {
            var config = modes[suite.toLowerCase()];
            if (!config) {
              throw new TypeError("invalid suite type");
            }
            var keys = ebtk(password, false, config.key, config.iv);
            return createCipheriv(suite, keys.key, keys.iv);
          }

          exports.createCipheriv = createCipheriv;
          exports.createCipher = createCipher;

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(0).Buffer));

        /***/
      },
      /* 165 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(Buffer) {
          var zeros = new Buffer(16);
          zeros.fill(0);
          module.exports = GHASH;
          function GHASH(key) {
            this.h = key;
            this.state = new Buffer(16);
            this.state.fill(0);
            this.cache = new Buffer("");
          }
          // from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
          // by Juho Vähä-Herttua
          GHASH.prototype.ghash = function(block) {
            var i = -1;
            while (++i < block.length) {
              this.state[i] ^= block[i];
            }
            this._multiply();
          };

          GHASH.prototype._multiply = function() {
            var Vi = toArray(this.h);
            var Zi = [0, 0, 0, 0];
            var j, xi, lsb_Vi;
            var i = -1;
            while (++i < 128) {
              xi = (this.state[~~(i / 8)] & (1 << (7 - i % 8))) !== 0;
              if (xi) {
                // Z_i+1 = Z_i ^ V_i
                Zi = xor(Zi, Vi);
              }

              // Store the value of LSB(V_i)
              lsb_Vi = (Vi[3] & 1) !== 0;

              // V_i+1 = V_i >> 1
              for (j = 3; j > 0; j--) {
                Vi[j] = (Vi[j] >>> 1) | ((Vi[j - 1] & 1) << 31);
              }
              Vi[0] = Vi[0] >>> 1;

              // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
              if (lsb_Vi) {
                Vi[0] = Vi[0] ^ (0xe1 << 24);
              }
            }
            this.state = fromArray(Zi);
          };
          GHASH.prototype.update = function(buf) {
            this.cache = Buffer.concat([this.cache, buf]);
            var chunk;
            while (this.cache.length >= 16) {
              chunk = this.cache.slice(0, 16);
              this.cache = this.cache.slice(16);
              this.ghash(chunk);
            }
          };
          GHASH.prototype.final = function(abl, bl) {
            if (this.cache.length) {
              this.ghash(Buffer.concat([this.cache, zeros], 16));
            }
            this.ghash(fromArray([0, abl, 0, bl]));
            return this.state;
          };

          function toArray(buf) {
            return [
              buf.readUInt32BE(0),
              buf.readUInt32BE(4),
              buf.readUInt32BE(8),
              buf.readUInt32BE(12)
            ];
          }
          function fromArray(out) {
            out = out.map(fixup_uint32);
            var buf = new Buffer(16);
            buf.writeUInt32BE(out[0], 0);
            buf.writeUInt32BE(out[1], 4);
            buf.writeUInt32BE(out[2], 8);
            buf.writeUInt32BE(out[3], 12);
            return buf;
          }
          var uint_max = Math.pow(2, 32);
          function fixup_uint32(x) {
            var ret, x_pos;
            ret =
              x > uint_max || x < 0
                ? (
                    (x_pos = Math.abs(x) % uint_max),
                    x < 0 ? uint_max - x_pos : x_pos
                  )
                : x;
            return ret;
          }
          function xor(a, b) {
            return [a[0] ^ b[0], a[1] ^ b[1], a[2] ^ b[2], a[3] ^ b[3]];
          }

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(0).Buffer));

        /***/
      },
      /* 166 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(Buffer) {
          var aes = __webpack_require__(37);
          var Transform = __webpack_require__(14);
          var inherits = __webpack_require__(2);
          var modes = __webpack_require__(38);
          var StreamCipher = __webpack_require__(95);
          var AuthCipher = __webpack_require__(96);
          var ebtk = __webpack_require__(36);

          inherits(Decipher, Transform);
          function Decipher(mode, key, iv) {
            if (!(this instanceof Decipher)) {
              return new Decipher(mode, key, iv);
            }
            Transform.call(this);
            this._cache = new Splitter();
            this._last = void 0;
            this._cipher = new aes.AES(key);
            this._prev = new Buffer(iv.length);
            iv.copy(this._prev);
            this._mode = mode;
            this._autopadding = true;
          }
          Decipher.prototype._update = function(data) {
            this._cache.add(data);
            var chunk;
            var thing;
            var out = [];
            while ((chunk = this._cache.get(this._autopadding))) {
              thing = this._mode.decrypt(this, chunk);
              out.push(thing);
            }
            return Buffer.concat(out);
          };
          Decipher.prototype._final = function() {
            var chunk = this._cache.flush();
            if (this._autopadding) {
              return unpad(this._mode.decrypt(this, chunk));
            } else if (chunk) {
              throw new Error("data not multiple of block length");
            }
          };
          Decipher.prototype.setAutoPadding = function(setTo) {
            this._autopadding = !!setTo;
            return this;
          };
          function Splitter() {
            if (!(this instanceof Splitter)) {
              return new Splitter();
            }
            this.cache = new Buffer("");
          }
          Splitter.prototype.add = function(data) {
            this.cache = Buffer.concat([this.cache, data]);
          };

          Splitter.prototype.get = function(autoPadding) {
            var out;
            if (autoPadding) {
              if (this.cache.length > 16) {
                out = this.cache.slice(0, 16);
                this.cache = this.cache.slice(16);
                return out;
              }
            } else {
              if (this.cache.length >= 16) {
                out = this.cache.slice(0, 16);
                this.cache = this.cache.slice(16);
                return out;
              }
            }
            return null;
          };
          Splitter.prototype.flush = function() {
            if (this.cache.length) {
              return this.cache;
            }
          };
          function unpad(last) {
            var padded = last[15];
            var i = -1;
            while (++i < padded) {
              if (last[i + (16 - padded)] !== padded) {
                throw new Error("unable to decrypt data");
              }
            }
            if (padded === 16) {
              return;
            }
            return last.slice(0, 16 - padded);
          }

          var modelist = {
            ECB: __webpack_require__(97),
            CBC: __webpack_require__(98),
            CFB: __webpack_require__(99),
            CFB8: __webpack_require__(100),
            CFB1: __webpack_require__(101),
            OFB: __webpack_require__(102),
            CTR: __webpack_require__(39),
            GCM: __webpack_require__(39)
          };

          function createDecipheriv(suite, password, iv) {
            var config = modes[suite.toLowerCase()];
            if (!config) {
              throw new TypeError("invalid suite type");
            }
            if (typeof iv === "string") {
              iv = new Buffer(iv);
            }
            if (typeof password === "string") {
              password = new Buffer(password);
            }
            if (password.length !== config.key / 8) {
              throw new TypeError("invalid key length " + password.length);
            }
            if (iv.length !== config.iv) {
              throw new TypeError("invalid iv length " + iv.length);
            }
            if (config.type === "stream") {
              return new StreamCipher(
                modelist[config.mode],
                password,
                iv,
                true
              );
            } else if (config.type === "auth") {
              return new AuthCipher(modelist[config.mode], password, iv, true);
            }
            return new Decipher(modelist[config.mode], password, iv);
          }

          function createDecipher(suite, password) {
            var config = modes[suite.toLowerCase()];
            if (!config) {
              throw new TypeError("invalid suite type");
            }
            var keys = ebtk(password, false, config.key, config.iv);
            return createDecipheriv(suite, keys.key, keys.iv);
          }
          exports.createDecipher = createDecipher;
          exports.createDecipheriv = createDecipheriv;

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(0).Buffer));

        /***/
      },
      /* 167 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(Buffer) {
          var CipherBase = __webpack_require__(14);
          var des = __webpack_require__(59);
          var inherits = __webpack_require__(2);

          var modes = {
            "des-ede3-cbc": des.CBC.instantiate(des.EDE),
            "des-ede3": des.EDE,
            "des-ede-cbc": des.CBC.instantiate(des.EDE),
            "des-ede": des.EDE,
            "des-cbc": des.CBC.instantiate(des.DES),
            "des-ecb": des.DES
          };
          modes.des = modes["des-cbc"];
          modes.des3 = modes["des-ede3-cbc"];
          module.exports = DES;
          inherits(DES, CipherBase);
          function DES(opts) {
            CipherBase.call(this);
            var modeName = opts.mode.toLowerCase();
            var mode = modes[modeName];
            var type;
            if (opts.decrypt) {
              type = "decrypt";
            } else {
              type = "encrypt";
            }
            var key = opts.key;
            if (modeName === "des-ede" || modeName === "des-ede-cbc") {
              key = Buffer.concat([key, key.slice(0, 8)]);
            }
            var iv = opts.iv;
            this._des = mode.create({
              key: key,
              iv: iv,
              type: type
            });
          }
          DES.prototype._update = function(data) {
            return new Buffer(this._des.update(data));
          };
          DES.prototype._final = function() {
            return new Buffer(this._des.final());
          };

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(0).Buffer));

        /***/
      },
      /* 168 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        exports.readUInt32BE = function readUInt32BE(bytes, off) {
          var res =
            (bytes[0 + off] << 24) |
            (bytes[1 + off] << 16) |
            (bytes[2 + off] << 8) |
            bytes[3 + off];
          return res >>> 0;
        };

        exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
          bytes[0 + off] = value >>> 24;
          bytes[1 + off] = (value >>> 16) & 0xff;
          bytes[2 + off] = (value >>> 8) & 0xff;
          bytes[3 + off] = value & 0xff;
        };

        exports.ip = function ip(inL, inR, out, off) {
          var outL = 0;
          var outR = 0;

          for (var i = 6; i >= 0; i -= 2) {
            for (var j = 0; j <= 24; j += 8) {
              outL <<= 1;
              outL |= (inR >>> (j + i)) & 1;
            }
            for (var j = 0; j <= 24; j += 8) {
              outL <<= 1;
              outL |= (inL >>> (j + i)) & 1;
            }
          }

          for (var i = 6; i >= 0; i -= 2) {
            for (var j = 1; j <= 25; j += 8) {
              outR <<= 1;
              outR |= (inR >>> (j + i)) & 1;
            }
            for (var j = 1; j <= 25; j += 8) {
              outR <<= 1;
              outR |= (inL >>> (j + i)) & 1;
            }
          }

          out[off + 0] = outL >>> 0;
          out[off + 1] = outR >>> 0;
        };

        exports.rip = function rip(inL, inR, out, off) {
          var outL = 0;
          var outR = 0;

          for (var i = 0; i < 4; i++) {
            for (var j = 24; j >= 0; j -= 8) {
              outL <<= 1;
              outL |= (inR >>> (j + i)) & 1;
              outL <<= 1;
              outL |= (inL >>> (j + i)) & 1;
            }
          }
          for (var i = 4; i < 8; i++) {
            for (var j = 24; j >= 0; j -= 8) {
              outR <<= 1;
              outR |= (inR >>> (j + i)) & 1;
              outR <<= 1;
              outR |= (inL >>> (j + i)) & 1;
            }
          }

          out[off + 0] = outL >>> 0;
          out[off + 1] = outR >>> 0;
        };

        exports.pc1 = function pc1(inL, inR, out, off) {
          var outL = 0;
          var outR = 0;

          // 7, 15, 23, 31, 39, 47, 55, 63
          // 6, 14, 22, 30, 39, 47, 55, 63
          // 5, 13, 21, 29, 39, 47, 55, 63
          // 4, 12, 20, 28
          for (var i = 7; i >= 5; i--) {
            for (var j = 0; j <= 24; j += 8) {
              outL <<= 1;
              outL |= (inR >> (j + i)) & 1;
            }
            for (var j = 0; j <= 24; j += 8) {
              outL <<= 1;
              outL |= (inL >> (j + i)) & 1;
            }
          }
          for (var j = 0; j <= 24; j += 8) {
            outL <<= 1;
            outL |= (inR >> (j + i)) & 1;
          }

          // 1, 9, 17, 25, 33, 41, 49, 57
          // 2, 10, 18, 26, 34, 42, 50, 58
          // 3, 11, 19, 27, 35, 43, 51, 59
          // 36, 44, 52, 60
          for (var i = 1; i <= 3; i++) {
            for (var j = 0; j <= 24; j += 8) {
              outR <<= 1;
              outR |= (inR >> (j + i)) & 1;
            }
            for (var j = 0; j <= 24; j += 8) {
              outR <<= 1;
              outR |= (inL >> (j + i)) & 1;
            }
          }
          for (var j = 0; j <= 24; j += 8) {
            outR <<= 1;
            outR |= (inL >> (j + i)) & 1;
          }

          out[off + 0] = outL >>> 0;
          out[off + 1] = outR >>> 0;
        };

        exports.r28shl = function r28shl(num, shift) {
          return ((num << shift) & 0xfffffff) | (num >>> (28 - shift));
        };

        var pc2table = [
          // inL => outL
          14,
          11,
          17,
          4,
          27,
          23,
          25,
          0,
          13,
          22,
          7,
          18,
          5,
          9,
          16,
          24,
          2,
          20,
          12,
          21,
          1,
          8,
          15,
          26,

          // inR => outR
          15,
          4,
          25,
          19,
          9,
          1,
          26,
          16,
          5,
          11,
          23,
          8,
          12,
          7,
          17,
          0,
          22,
          3,
          10,
          14,
          6,
          20,
          27,
          24
        ];

        exports.pc2 = function pc2(inL, inR, out, off) {
          var outL = 0;
          var outR = 0;

          var len = pc2table.length >>> 1;
          for (var i = 0; i < len; i++) {
            outL <<= 1;
            outL |= (inL >>> pc2table[i]) & 0x1;
          }
          for (var i = len; i < pc2table.length; i++) {
            outR <<= 1;
            outR |= (inR >>> pc2table[i]) & 0x1;
          }

          out[off + 0] = outL >>> 0;
          out[off + 1] = outR >>> 0;
        };

        exports.expand = function expand(r, out, off) {
          var outL = 0;
          var outR = 0;

          outL = ((r & 1) << 5) | (r >>> 27);
          for (var i = 23; i >= 15; i -= 4) {
            outL <<= 6;
            outL |= (r >>> i) & 0x3f;
          }
          for (var i = 11; i >= 3; i -= 4) {
            outR |= (r >>> i) & 0x3f;
            outR <<= 6;
          }
          outR |= ((r & 0x1f) << 1) | (r >>> 31);

          out[off + 0] = outL >>> 0;
          out[off + 1] = outR >>> 0;
        };

        var sTable = [
          14,
          0,
          4,
          15,
          13,
          7,
          1,
          4,
          2,
          14,
          15,
          2,
          11,
          13,
          8,
          1,
          3,
          10,
          10,
          6,
          6,
          12,
          12,
          11,
          5,
          9,
          9,
          5,
          0,
          3,
          7,
          8,
          4,
          15,
          1,
          12,
          14,
          8,
          8,
          2,
          13,
          4,
          6,
          9,
          2,
          1,
          11,
          7,
          15,
          5,
          12,
          11,
          9,
          3,
          7,
          14,
          3,
          10,
          10,
          0,
          5,
          6,
          0,
          13,

          15,
          3,
          1,
          13,
          8,
          4,
          14,
          7,
          6,
          15,
          11,
          2,
          3,
          8,
          4,
          14,
          9,
          12,
          7,
          0,
          2,
          1,
          13,
          10,
          12,
          6,
          0,
          9,
          5,
          11,
          10,
          5,
          0,
          13,
          14,
          8,
          7,
          10,
          11,
          1,
          10,
          3,
          4,
          15,
          13,
          4,
          1,
          2,
          5,
          11,
          8,
          6,
          12,
          7,
          6,
          12,
          9,
          0,
          3,
          5,
          2,
          14,
          15,
          9,

          10,
          13,
          0,
          7,
          9,
          0,
          14,
          9,
          6,
          3,
          3,
          4,
          15,
          6,
          5,
          10,
          1,
          2,
          13,
          8,
          12,
          5,
          7,
          14,
          11,
          12,
          4,
          11,
          2,
          15,
          8,
          1,
          13,
          1,
          6,
          10,
          4,
          13,
          9,
          0,
          8,
          6,
          15,
          9,
          3,
          8,
          0,
          7,
          11,
          4,
          1,
          15,
          2,
          14,
          12,
          3,
          5,
          11,
          10,
          5,
          14,
          2,
          7,
          12,

          7,
          13,
          13,
          8,
          14,
          11,
          3,
          5,
          0,
          6,
          6,
          15,
          9,
          0,
          10,
          3,
          1,
          4,
          2,
          7,
          8,
          2,
          5,
          12,
          11,
          1,
          12,
          10,
          4,
          14,
          15,
          9,
          10,
          3,
          6,
          15,
          9,
          0,
          0,
          6,
          12,
          10,
          11,
          1,
          7,
          13,
          13,
          8,
          15,
          9,
          1,
          4,
          3,
          5,
          14,
          11,
          5,
          12,
          2,
          7,
          8,
          2,
          4,
          14,

          2,
          14,
          12,
          11,
          4,
          2,
          1,
          12,
          7,
          4,
          10,
          7,
          11,
          13,
          6,
          1,
          8,
          5,
          5,
          0,
          3,
          15,
          15,
          10,
          13,
          3,
          0,
          9,
          14,
          8,
          9,
          6,
          4,
          11,
          2,
          8,
          1,
          12,
          11,
          7,
          10,
          1,
          13,
          14,
          7,
          2,
          8,
          13,
          15,
          6,
          9,
          15,
          12,
          0,
          5,
          9,
          6,
          10,
          3,
          4,
          0,
          5,
          14,
          3,

          12,
          10,
          1,
          15,
          10,
          4,
          15,
          2,
          9,
          7,
          2,
          12,
          6,
          9,
          8,
          5,
          0,
          6,
          13,
          1,
          3,
          13,
          4,
          14,
          14,
          0,
          7,
          11,
          5,
          3,
          11,
          8,
          9,
          4,
          14,
          3,
          15,
          2,
          5,
          12,
          2,
          9,
          8,
          5,
          12,
          15,
          3,
          10,
          7,
          11,
          0,
          14,
          4,
          1,
          10,
          7,
          1,
          6,
          13,
          0,
          11,
          8,
          6,
          13,

          4,
          13,
          11,
          0,
          2,
          11,
          14,
          7,
          15,
          4,
          0,
          9,
          8,
          1,
          13,
          10,
          3,
          14,
          12,
          3,
          9,
          5,
          7,
          12,
          5,
          2,
          10,
          15,
          6,
          8,
          1,
          6,
          1,
          6,
          4,
          11,
          11,
          13,
          13,
          8,
          12,
          1,
          3,
          4,
          7,
          10,
          14,
          7,
          10,
          9,
          15,
          5,
          6,
          0,
          8,
          15,
          0,
          14,
          5,
          2,
          9,
          3,
          2,
          12,

          13,
          1,
          2,
          15,
          8,
          13,
          4,
          8,
          6,
          10,
          15,
          3,
          11,
          7,
          1,
          4,
          10,
          12,
          9,
          5,
          3,
          6,
          14,
          11,
          5,
          0,
          0,
          14,
          12,
          9,
          7,
          2,
          7,
          2,
          11,
          1,
          4,
          14,
          1,
          7,
          9,
          4,
          12,
          10,
          14,
          8,
          2,
          13,
          0,
          15,
          6,
          12,
          10,
          9,
          13,
          0,
          15,
          3,
          3,
          5,
          5,
          6,
          8,
          11
        ];

        exports.substitute = function substitute(inL, inR) {
          var out = 0;
          for (var i = 0; i < 4; i++) {
            var b = (inL >>> (18 - i * 6)) & 0x3f;
            var sb = sTable[i * 0x40 + b];

            out <<= 4;
            out |= sb;
          }
          for (var i = 0; i < 4; i++) {
            var b = (inR >>> (18 - i * 6)) & 0x3f;
            var sb = sTable[4 * 0x40 + i * 0x40 + b];

            out <<= 4;
            out |= sb;
          }
          return out >>> 0;
        };

        var permuteTable = [
          16,
          25,
          12,
          11,
          3,
          20,
          4,
          15,
          31,
          17,
          9,
          6,
          27,
          14,
          1,
          22,
          30,
          24,
          8,
          18,
          0,
          5,
          29,
          23,
          13,
          19,
          2,
          26,
          10,
          21,
          28,
          7
        ];

        exports.permute = function permute(num) {
          var out = 0;
          for (var i = 0; i < permuteTable.length; i++) {
            out <<= 1;
            out |= (num >>> permuteTable[i]) & 0x1;
          }
          return out >>> 0;
        };

        exports.padSplit = function padSplit(num, size, group) {
          var str = num.toString(2);
          while (str.length < size) str = "0" + str;

          var out = [];
          for (var i = 0; i < size; i += group)
            out.push(str.slice(i, i + group));
          return out.join(" ");
        };

        /***/
      },
      /* 169 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var assert = __webpack_require__(7);

        function Cipher(options) {
          this.options = options;

          this.type = this.options.type;
          this.blockSize = 8;
          this._init();

          this.buffer = new Array(this.blockSize);
          this.bufferOff = 0;
        }
        module.exports = Cipher;

        Cipher.prototype._init = function _init() {
          // Might be overrided
        };

        Cipher.prototype.update = function update(data) {
          if (data.length === 0) return [];

          if (this.type === "decrypt") return this._updateDecrypt(data);
          else return this._updateEncrypt(data);
        };

        Cipher.prototype._buffer = function _buffer(data, off) {
          // Append data to buffer
          var min = Math.min(
            this.buffer.length - this.bufferOff,
            data.length - off
          );
          for (var i = 0; i < min; i++)
            this.buffer[this.bufferOff + i] = data[off + i];
          this.bufferOff += min;

          // Shift next
          return min;
        };

        Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
          this._update(this.buffer, 0, out, off);
          this.bufferOff = 0;
          return this.blockSize;
        };

        Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
          var inputOff = 0;
          var outputOff = 0;

          var count = ((this.bufferOff + data.length) / this.blockSize) | 0;
          var out = new Array(count * this.blockSize);

          if (this.bufferOff !== 0) {
            inputOff += this._buffer(data, inputOff);

            if (this.bufferOff === this.buffer.length)
              outputOff += this._flushBuffer(out, outputOff);
          }

          // Write blocks
          var max = data.length - (data.length - inputOff) % this.blockSize;
          for (; inputOff < max; inputOff += this.blockSize) {
            this._update(data, inputOff, out, outputOff);
            outputOff += this.blockSize;
          }

          // Queue rest
          for (; inputOff < data.length; inputOff++, this.bufferOff++)
            this.buffer[this.bufferOff] = data[inputOff];

          return out;
        };

        Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
          var inputOff = 0;
          var outputOff = 0;

          var count =
            Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
          var out = new Array(count * this.blockSize);

          // TODO(indutny): optimize it, this is far from optimal
          for (; count > 0; count--) {
            inputOff += this._buffer(data, inputOff);
            outputOff += this._flushBuffer(out, outputOff);
          }

          // Buffer rest of the input
          inputOff += this._buffer(data, inputOff);

          return out;
        };

        Cipher.prototype.final = function final(buffer) {
          var first;
          if (buffer) first = this.update(buffer);

          var last;
          if (this.type === "encrypt") last = this._finalEncrypt();
          else last = this._finalDecrypt();

          if (first) return first.concat(last);
          else return last;
        };

        Cipher.prototype._pad = function _pad(buffer, off) {
          if (off === 0) return false;

          while (off < buffer.length) buffer[off++] = 0;

          return true;
        };

        Cipher.prototype._finalEncrypt = function _finalEncrypt() {
          if (!this._pad(this.buffer, this.bufferOff)) return [];

          var out = new Array(this.blockSize);
          this._update(this.buffer, 0, out, 0);
          return out;
        };

        Cipher.prototype._unpad = function _unpad(buffer) {
          return buffer;
        };

        Cipher.prototype._finalDecrypt = function _finalDecrypt() {
          assert.equal(
            this.bufferOff,
            this.blockSize,
            "Not enough data to decrypt"
          );
          var out = new Array(this.blockSize);
          this._flushBuffer(out, 0);

          return this._unpad(out);
        };

        /***/
      },
      /* 170 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var assert = __webpack_require__(7);
        var inherits = __webpack_require__(2);

        var des = __webpack_require__(59);
        var utils = des.utils;
        var Cipher = des.Cipher;

        function DESState() {
          this.tmp = new Array(2);
          this.keys = null;
        }

        function DES(options) {
          Cipher.call(this, options);

          var state = new DESState();
          this._desState = state;

          this.deriveKeys(state, options.key);
        }
        inherits(DES, Cipher);
        module.exports = DES;

        DES.create = function create(options) {
          return new DES(options);
        };

        var shiftTable = [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1];

        DES.prototype.deriveKeys = function deriveKeys(state, key) {
          state.keys = new Array(16 * 2);

          assert.equal(key.length, this.blockSize, "Invalid key length");

          var kL = utils.readUInt32BE(key, 0);
          var kR = utils.readUInt32BE(key, 4);

          utils.pc1(kL, kR, state.tmp, 0);
          kL = state.tmp[0];
          kR = state.tmp[1];
          for (var i = 0; i < state.keys.length; i += 2) {
            var shift = shiftTable[i >>> 1];
            kL = utils.r28shl(kL, shift);
            kR = utils.r28shl(kR, shift);
            utils.pc2(kL, kR, state.keys, i);
          }
        };

        DES.prototype._update = function _update(inp, inOff, out, outOff) {
          var state = this._desState;

          var l = utils.readUInt32BE(inp, inOff);
          var r = utils.readUInt32BE(inp, inOff + 4);

          // Initial Permutation
          utils.ip(l, r, state.tmp, 0);
          l = state.tmp[0];
          r = state.tmp[1];

          if (this.type === "encrypt") this._encrypt(state, l, r, state.tmp, 0);
          else this._decrypt(state, l, r, state.tmp, 0);

          l = state.tmp[0];
          r = state.tmp[1];

          utils.writeUInt32BE(out, l, outOff);
          utils.writeUInt32BE(out, r, outOff + 4);
        };

        DES.prototype._pad = function _pad(buffer, off) {
          var value = buffer.length - off;
          for (var i = off; i < buffer.length; i++) buffer[i] = value;

          return true;
        };

        DES.prototype._unpad = function _unpad(buffer) {
          var pad = buffer[buffer.length - 1];
          for (var i = buffer.length - pad; i < buffer.length; i++)
            assert.equal(buffer[i], pad);

          return buffer.slice(0, buffer.length - pad);
        };

        DES.prototype._encrypt = function _encrypt(
          state,
          lStart,
          rStart,
          out,
          off
        ) {
          var l = lStart;
          var r = rStart;

          // Apply f() x16 times
          for (var i = 0; i < state.keys.length; i += 2) {
            var keyL = state.keys[i];
            var keyR = state.keys[i + 1];

            // f(r, k)
            utils.expand(r, state.tmp, 0);

            keyL ^= state.tmp[0];
            keyR ^= state.tmp[1];
            var s = utils.substitute(keyL, keyR);
            var f = utils.permute(s);

            var t = r;
            r = (l ^ f) >>> 0;
            l = t;
          }

          // Reverse Initial Permutation
          utils.rip(r, l, out, off);
        };

        DES.prototype._decrypt = function _decrypt(
          state,
          lStart,
          rStart,
          out,
          off
        ) {
          var l = rStart;
          var r = lStart;

          // Apply f() x16 times
          for (var i = state.keys.length - 2; i >= 0; i -= 2) {
            var keyL = state.keys[i];
            var keyR = state.keys[i + 1];

            // f(r, k)
            utils.expand(l, state.tmp, 0);

            keyL ^= state.tmp[0];
            keyR ^= state.tmp[1];
            var s = utils.substitute(keyL, keyR);
            var f = utils.permute(s);

            var t = l;
            l = (r ^ f) >>> 0;
            r = t;
          }

          // Reverse Initial Permutation
          utils.rip(l, r, out, off);
        };

        /***/
      },
      /* 171 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var assert = __webpack_require__(7);
        var inherits = __webpack_require__(2);

        var proto = {};

        function CBCState(iv) {
          assert.equal(iv.length, 8, "Invalid IV length");

          this.iv = new Array(8);
          for (var i = 0; i < this.iv.length; i++) this.iv[i] = iv[i];
        }

        function instantiate(Base) {
          function CBC(options) {
            Base.call(this, options);
            this._cbcInit();
          }
          inherits(CBC, Base);

          var keys = Object.keys(proto);
          for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            CBC.prototype[key] = proto[key];
          }

          CBC.create = function create(options) {
            return new CBC(options);
          };

          return CBC;
        }

        exports.instantiate = instantiate;

        proto._cbcInit = function _cbcInit() {
          var state = new CBCState(this.options.iv);
          this._cbcState = state;
        };

        proto._update = function _update(inp, inOff, out, outOff) {
          var state = this._cbcState;
          var superProto = this.constructor.super_.prototype;

          var iv = state.iv;
          if (this.type === "encrypt") {
            for (var i = 0; i < this.blockSize; i++) iv[i] ^= inp[inOff + i];

            superProto._update.call(this, iv, 0, out, outOff);

            for (var i = 0; i < this.blockSize; i++) iv[i] = out[outOff + i];
          } else {
            superProto._update.call(this, inp, inOff, out, outOff);

            for (var i = 0; i < this.blockSize; i++) out[outOff + i] ^= iv[i];

            for (var i = 0; i < this.blockSize; i++) iv[i] = inp[inOff + i];
          }
        };

        /***/
      },
      /* 172 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var assert = __webpack_require__(7);
        var inherits = __webpack_require__(2);

        var des = __webpack_require__(59);
        var Cipher = des.Cipher;
        var DES = des.DES;

        function EDEState(type, key) {
          assert.equal(key.length, 24, "Invalid key length");

          var k1 = key.slice(0, 8);
          var k2 = key.slice(8, 16);
          var k3 = key.slice(16, 24);

          if (type === "encrypt") {
            this.ciphers = [
              DES.create({ type: "encrypt", key: k1 }),
              DES.create({ type: "decrypt", key: k2 }),
              DES.create({ type: "encrypt", key: k3 })
            ];
          } else {
            this.ciphers = [
              DES.create({ type: "decrypt", key: k3 }),
              DES.create({ type: "encrypt", key: k2 }),
              DES.create({ type: "decrypt", key: k1 })
            ];
          }
        }

        function EDE(options) {
          Cipher.call(this, options);

          var state = new EDEState(this.type, this.options.key);
          this._edeState = state;
        }
        inherits(EDE, Cipher);

        module.exports = EDE;

        EDE.create = function create(options) {
          return new EDE(options);
        };

        EDE.prototype._update = function _update(inp, inOff, out, outOff) {
          var state = this._edeState;

          state.ciphers[0]._update(inp, inOff, out, outOff);
          state.ciphers[1]._update(out, outOff, out, outOff);
          state.ciphers[2]._update(out, outOff, out, outOff);
        };

        EDE.prototype._pad = DES.prototype._pad;
        EDE.prototype._unpad = DES.prototype._unpad;

        /***/
      },
      /* 173 */
      /***/ function(module, exports) {
        exports["des-ecb"] = {
          key: 8,
          iv: 0
        };
        exports["des-cbc"] = exports.des = {
          key: 8,
          iv: 8
        };
        exports["des-ede3-cbc"] = exports.des3 = {
          key: 24,
          iv: 8
        };
        exports["des-ede3"] = {
          key: 24,
          iv: 0
        };
        exports["des-ede-cbc"] = {
          key: 16,
          iv: 8
        };
        exports["des-ede"] = {
          key: 16,
          iv: 0
        };

        /***/
      },
      /* 174 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(Buffer) {
          var generatePrime = __webpack_require__(103);
          var primes = __webpack_require__(176);

          var DH = __webpack_require__(177);

          function getDiffieHellman(mod) {
            var prime = new Buffer(primes[mod].prime, "hex");
            var gen = new Buffer(primes[mod].gen, "hex");

            return new DH(prime, gen);
          }

          var ENCODINGS = {
            binary: true,
            hex: true,
            base64: true
          };

          function createDiffieHellman(prime, enc, generator, genc) {
            if (Buffer.isBuffer(enc) || ENCODINGS[enc] === undefined) {
              return createDiffieHellman(prime, "binary", enc, generator);
            }

            enc = enc || "binary";
            genc = genc || "binary";
            generator = generator || new Buffer([2]);

            if (!Buffer.isBuffer(generator)) {
              generator = new Buffer(generator, genc);
            }

            if (typeof prime === "number") {
              return new DH(generatePrime(prime, generator), generator, true);
            }

            if (!Buffer.isBuffer(prime)) {
              prime = new Buffer(prime, enc);
            }

            return new DH(prime, generator, true);
          }

          exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman;
          exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman;

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(0).Buffer));

        /***/
      },
      /* 175 */
      /***/ function(module, exports) {
        /* (ignored) */
        /***/
      },
      /* 176 */
      /***/ function(module, exports) {
        module.exports = {
          modp1: {
            gen: "02",
            prime:
              "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
          },
          modp2: {
            gen: "02",
            prime:
              "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
          },
          modp5: {
            gen: "02",
            prime:
              "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
          },
          modp14: {
            gen: "02",
            prime:
              "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
          },
          modp15: {
            gen: "02",
            prime:
              "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
          },
          modp16: {
            gen: "02",
            prime:
              "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
          },
          modp17: {
            gen: "02",
            prime:
              "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
          },
          modp18: {
            gen: "02",
            prime:
              "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
          }
        };

        /***/
      },
      /* 177 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(Buffer) {
          var BN = __webpack_require__(4);
          var MillerRabin = __webpack_require__(105);
          var millerRabin = new MillerRabin();
          var TWENTYFOUR = new BN(24);
          var ELEVEN = new BN(11);
          var TEN = new BN(10);
          var THREE = new BN(3);
          var SEVEN = new BN(7);
          var primes = __webpack_require__(103);
          var randomBytes = __webpack_require__(24);
          module.exports = DH;

          function setPublicKey(pub, enc) {
            enc = enc || "utf8";
            if (!Buffer.isBuffer(pub)) {
              pub = new Buffer(pub, enc);
            }
            this._pub = new BN(pub);
            return this;
          }

          function setPrivateKey(priv, enc) {
            enc = enc || "utf8";
            if (!Buffer.isBuffer(priv)) {
              priv = new Buffer(priv, enc);
            }
            this._priv = new BN(priv);
            return this;
          }

          var primeCache = {};
          function checkPrime(prime, generator) {
            var gen = generator.toString("hex");
            var hex = [gen, prime.toString(16)].join("_");
            if (hex in primeCache) {
              return primeCache[hex];
            }
            var error = 0;

            if (
              prime.isEven() ||
              !primes.simpleSieve ||
              !primes.fermatTest(prime) ||
              !millerRabin.test(prime)
            ) {
              //not a prime so +1
              error += 1;

              if (gen === "02" || gen === "05") {
                // we'd be able to check the generator
                // it would fail so +8
                error += 8;
              } else {
                //we wouldn't be able to test the generator
                // so +4
                error += 4;
              }
              primeCache[hex] = error;
              return error;
            }
            if (!millerRabin.test(prime.shrn(1))) {
              //not a safe prime
              error += 2;
            }
            var rem;
            switch (gen) {
              case "02":
                if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
                  // unsuidable generator
                  error += 8;
                }
                break;
              case "05":
                rem = prime.mod(TEN);
                if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
                  // prime mod 10 needs to equal 3 or 7
                  error += 8;
                }
                break;
              default:
                error += 4;
            }
            primeCache[hex] = error;
            return error;
          }

          function DH(prime, generator, malleable) {
            this.setGenerator(generator);
            this.__prime = new BN(prime);
            this._prime = BN.mont(this.__prime);
            this._primeLen = prime.length;
            this._pub = undefined;
            this._priv = undefined;
            this._primeCode = undefined;
            if (malleable) {
              this.setPublicKey = setPublicKey;
              this.setPrivateKey = setPrivateKey;
            } else {
              this._primeCode = 8;
            }
          }
          Object.defineProperty(DH.prototype, "verifyError", {
            enumerable: true,
            get: function() {
              if (typeof this._primeCode !== "number") {
                this._primeCode = checkPrime(this.__prime, this.__gen);
              }
              return this._primeCode;
            }
          });
          DH.prototype.generateKeys = function() {
            if (!this._priv) {
              this._priv = new BN(randomBytes(this._primeLen));
            }
            this._pub = this._gen
              .toRed(this._prime)
              .redPow(this._priv)
              .fromRed();
            return this.getPublicKey();
          };

          DH.prototype.computeSecret = function(other) {
            other = new BN(other);
            other = other.toRed(this._prime);
            var secret = other.redPow(this._priv).fromRed();
            var out = new Buffer(secret.toArray());
            var prime = this.getPrime();
            if (out.length < prime.length) {
              var front = new Buffer(prime.length - out.length);
              front.fill(0);
              out = Buffer.concat([front, out]);
            }
            return out;
          };

          DH.prototype.getPublicKey = function getPublicKey(enc) {
            return formatReturnValue(this._pub, enc);
          };

          DH.prototype.getPrivateKey = function getPrivateKey(enc) {
            return formatReturnValue(this._priv, enc);
          };

          DH.prototype.getPrime = function(enc) {
            return formatReturnValue(this.__prime, enc);
          };

          DH.prototype.getGenerator = function(enc) {
            return formatReturnValue(this._gen, enc);
          };

          DH.prototype.setGenerator = function(gen, enc) {
            enc = enc || "utf8";
            if (!Buffer.isBuffer(gen)) {
              gen = new Buffer(gen, enc);
            }
            this.__gen = gen;
            this._gen = new BN(gen);
            return this;
          };

          function formatReturnValue(bn, enc) {
            var buf = new Buffer(bn.toArray());
            if (!enc) {
              return buf;
            } else {
              return buf.toString(enc);
            }
          }

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(0).Buffer));

        /***/
      },
      /* 178 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(Buffer) {
          var createHash = __webpack_require__(25);
          var stream = __webpack_require__(19);
          var inherits = __webpack_require__(2);
          var sign = __webpack_require__(179);
          var verify = __webpack_require__(215);

          var algorithms = __webpack_require__(90);
          Object.keys(algorithms).forEach(function(key) {
            algorithms[key].id = new Buffer(algorithms[key].id, "hex");
            algorithms[key.toLowerCase()] = algorithms[key];
          });

          function Sign(algorithm) {
            stream.Writable.call(this);

            var data = algorithms[algorithm];
            if (!data) throw new Error("Unknown message digest");

            this._hashType = data.hash;
            this._hash = createHash(data.hash);
            this._tag = data.id;
            this._signType = data.sign;
          }
          inherits(Sign, stream.Writable);

          Sign.prototype._write = function _write(data, _, done) {
            this._hash.update(data);
            done();
          };

          Sign.prototype.update = function update(data, enc) {
            if (typeof data === "string") data = new Buffer(data, enc);

            this._hash.update(data);
            return this;
          };

          Sign.prototype.sign = function signMethod(key, enc) {
            this.end();
            var hash = this._hash.digest();
            var sig = sign(
              hash,
              key,
              this._hashType,
              this._signType,
              this._tag
            );

            return enc ? sig.toString(enc) : sig;
          };

          function Verify(algorithm) {
            stream.Writable.call(this);

            var data = algorithms[algorithm];
            if (!data) throw new Error("Unknown message digest");

            this._hash = createHash(data.hash);
            this._tag = data.id;
            this._signType = data.sign;
          }
          inherits(Verify, stream.Writable);

          Verify.prototype._write = function _write(data, _, done) {
            this._hash.update(data);
            done();
          };

          Verify.prototype.update = function update(data, enc) {
            if (typeof data === "string") data = new Buffer(data, enc);

            this._hash.update(data);
            return this;
          };

          Verify.prototype.verify = function verifyMethod(key, sig, enc) {
            if (typeof sig === "string") sig = new Buffer(sig, enc);

            this.end();
            var hash = this._hash.digest();
            return verify(sig, hash, key, this._signType, this._tag);
          };

          function createSign(algorithm) {
            return new Sign(algorithm);
          }

          function createVerify(algorithm) {
            return new Verify(algorithm);
          }

          module.exports = {
            Sign: createSign,
            Verify: createVerify,
            createSign: createSign,
            createVerify: createVerify
          };

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(0).Buffer));

        /***/
      },
      /* 179 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(Buffer) {
          // much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
          var createHmac = __webpack_require__(89);
          var crt = __webpack_require__(60);
          var EC = __webpack_require__(5).ec;
          var BN = __webpack_require__(4);
          var parseKeys = __webpack_require__(41);
          var curves = __webpack_require__(115);

          function sign(hash, key, hashType, signType, tag) {
            var priv = parseKeys(key);
            if (priv.curve) {
              // rsa keys can be interpreted as ecdsa ones in openssl
              if (signType !== "ecdsa" && signType !== "ecdsa/rsa")
                throw new Error("wrong private key type");
              return ecSign(hash, priv);
            } else if (priv.type === "dsa") {
              if (signType !== "dsa") throw new Error("wrong private key type");
              return dsaSign(hash, priv, hashType);
            } else {
              if (signType !== "rsa" && signType !== "ecdsa/rsa")
                throw new Error("wrong private key type");
            }
            hash = Buffer.concat([tag, hash]);
            var len = priv.modulus.byteLength();
            var pad = [0, 1];
            while (hash.length + pad.length + 1 < len) pad.push(0xff);
            pad.push(0x00);
            var i = -1;
            while (++i < hash.length) pad.push(hash[i]);

            var out = crt(pad, priv);
            return out;
          }

          function ecSign(hash, priv) {
            var curveId = curves[priv.curve.join(".")];
            if (!curveId)
              throw new Error("unknown curve " + priv.curve.join("."));

            var curve = new EC(curveId);
            var key = curve.keyFromPrivate(priv.privateKey);
            var out = key.sign(hash);

            return new Buffer(out.toDER());
          }

          function dsaSign(hash, priv, algo) {
            var x = priv.params.priv_key;
            var p = priv.params.p;
            var q = priv.params.q;
            var g = priv.params.g;
            var r = new BN(0);
            var k;
            var H = bits2int(hash, q).mod(q);
            var s = false;
            var kv = getKey(x, q, hash, algo);
            while (s === false) {
              k = makeKey(q, kv, algo);
              r = makeR(g, k, p, q);
              s = k.invm(q).imul(H.add(x.mul(r))).mod(q);
              if (s.cmpn(0) === 0) {
                s = false;
                r = new BN(0);
              }
            }
            return toDER(r, s);
          }

          function toDER(r, s) {
            r = r.toArray();
            s = s.toArray();

            // Pad values
            if (r[0] & 0x80) r = [0].concat(r);
            if (s[0] & 0x80) s = [0].concat(s);

            var total = r.length + s.length + 4;
            var res = [0x30, total, 0x02, r.length];
            res = res.concat(r, [0x02, s.length], s);
            return new Buffer(res);
          }

          function getKey(x, q, hash, algo) {
            x = new Buffer(x.toArray());
            if (x.length < q.byteLength()) {
              var zeros = new Buffer(q.byteLength() - x.length);
              zeros.fill(0);
              x = Buffer.concat([zeros, x]);
            }
            var hlen = hash.length;
            var hbits = bits2octets(hash, q);
            var v = new Buffer(hlen);
            v.fill(1);
            var k = new Buffer(hlen);
            k.fill(0);
            k = createHmac(algo, k)
              .update(v)
              .update(new Buffer([0]))
              .update(x)
              .update(hbits)
              .digest();
            v = createHmac(algo, k).update(v).digest();
            k = createHmac(algo, k)
              .update(v)
              .update(new Buffer([1]))
              .update(x)
              .update(hbits)
              .digest();
            v = createHmac(algo, k).update(v).digest();
            return { k: k, v: v };
          }

          function bits2int(obits, q) {
            var bits = new BN(obits);
            var shift = (obits.length << 3) - q.bitLength();
            if (shift > 0) bits.ishrn(shift);
            return bits;
          }

          function bits2octets(bits, q) {
            bits = bits2int(bits, q);
            bits = bits.mod(q);
            var out = new Buffer(bits.toArray());
            if (out.length < q.byteLength()) {
              var zeros = new Buffer(q.byteLength() - out.length);
              zeros.fill(0);
              out = Buffer.concat([zeros, out]);
            }
            return out;
          }

          function makeKey(q, kv, algo) {
            var t;
            var k;

            do {
              t = new Buffer(0);

              while (t.length * 8 < q.bitLength()) {
                kv.v = createHmac(algo, kv.k).update(kv.v).digest();
                t = Buffer.concat([t, kv.v]);
              }

              k = bits2int(t, q);
              kv.k = createHmac(algo, kv.k)
                .update(kv.v)
                .update(new Buffer([0]))
                .digest();
              kv.v = createHmac(algo, kv.k).update(kv.v).digest();
            } while (k.cmp(q) !== -1);

            return k;
          }

          function makeR(g, k, p, q) {
            return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q);
          }

          module.exports = sign;
          module.exports.getKey = getKey;
          module.exports.makeKey = makeKey;

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(0).Buffer));

        /***/
      },
      /* 180 */
      /***/ function(module, exports) {
        module.exports = {
          _from: "elliptic@^6.0.0",
          _id: "elliptic@6.4.0",
          _inBundle: false,
          _integrity: "sha1-ysmvh2LIWDYYcAPI3+GT5eLq5d8=",
          _location: "/webpack/elliptic",
          _phantomChildren: {},
          _requested: {
            type: "range",
            registry: true,
            raw: "elliptic@^6.0.0",
            name: "elliptic",
            escapedName: "elliptic",
            rawSpec: "^6.0.0",
            saveSpec: null,
            fetchSpec: "^6.0.0"
          },
          _requiredBy: ["/webpack/browserify-sign", "/webpack/create-ecdh"],
          _resolved: "https://registry.npmjs.org/elliptic/-/elliptic-6.4.0.tgz",
          _shasum: "cac9af8762c85836187003c8dfe193e5e2eae5df",
          _spec: "elliptic@^6.0.0",
          _where:
            "/usr/local/lib/node_modules/webpack/node_modules/browserify-sign",
          author: { name: "Fedor Indutny", email: "fedor@indutny.com" },
          bugs: { url: "https://github.com/indutny/elliptic/issues" },
          bundleDependencies: false,
          dependencies: {
            "bn.js": "^4.4.0",
            brorand: "^1.0.1",
            "hash.js": "^1.0.0",
            "hmac-drbg": "^1.0.0",
            inherits: "^2.0.1",
            "minimalistic-assert": "^1.0.0",
            "minimalistic-crypto-utils": "^1.0.0"
          },
          deprecated: false,
          description: "EC cryptography",
          devDependencies: {
            brfs: "^1.4.3",
            coveralls: "^2.11.3",
            grunt: "^0.4.5",
            "grunt-browserify": "^5.0.0",
            "grunt-cli": "^1.2.0",
            "grunt-contrib-connect": "^1.0.0",
            "grunt-contrib-copy": "^1.0.0",
            "grunt-contrib-uglify": "^1.0.1",
            "grunt-mocha-istanbul": "^3.0.1",
            "grunt-saucelabs": "^8.6.2",
            istanbul: "^0.4.2",
            jscs: "^2.9.0",
            jshint: "^2.6.0",
            mocha: "^2.1.0"
          },
          files: ["lib"],
          homepage: "https://github.com/indutny/elliptic",
          keywords: ["EC", "Elliptic", "curve", "Cryptography"],
          license: "MIT",
          main: "lib/elliptic.js",
          name: "elliptic",
          repository: {
            type: "git",
            url: "git+ssh://git@github.com/indutny/elliptic.git"
          },
          scripts: {
            jscs:
              "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
            jshint:
              "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
            lint: "npm run jscs && npm run jshint",
            test: "npm run lint && npm run unit",
            unit: "istanbul test _mocha --reporter=spec test/index.js",
            version: "grunt dist && git add dist/"
          },
          version: "6.4.0"
        };

        /***/
      },
      /* 181 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var utils = exports;
        var BN = __webpack_require__(4);
        var minAssert = __webpack_require__(7);
        var minUtils = __webpack_require__(107);

        utils.assert = minAssert;
        utils.toArray = minUtils.toArray;
        utils.zero2 = minUtils.zero2;
        utils.toHex = minUtils.toHex;
        utils.encode = minUtils.encode;

        // Represent num in a w-NAF form
        function getNAF(num, w) {
          var naf = [];
          var ws = 1 << (w + 1);
          var k = num.clone();
          while (k.cmpn(1) >= 0) {
            var z;
            if (k.isOdd()) {
              var mod = k.andln(ws - 1);
              if (mod > (ws >> 1) - 1) z = (ws >> 1) - mod;
              else z = mod;
              k.isubn(z);
            } else {
              z = 0;
            }
            naf.push(z);

            // Optimization, shift by word if possible
            var shift = k.cmpn(0) !== 0 && k.andln(ws - 1) === 0 ? w + 1 : 1;
            for (var i = 1; i < shift; i++) naf.push(0);
            k.iushrn(shift);
          }

          return naf;
        }
        utils.getNAF = getNAF;

        // Represent k1, k2 in a Joint Sparse Form
        function getJSF(k1, k2) {
          var jsf = [[], []];

          k1 = k1.clone();
          k2 = k2.clone();
          var d1 = 0;
          var d2 = 0;
          while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
            // First phase
            var m14 = (k1.andln(3) + d1) & 3;
            var m24 = (k2.andln(3) + d2) & 3;
            if (m14 === 3) m14 = -1;
            if (m24 === 3) m24 = -1;
            var u1;
            if ((m14 & 1) === 0) {
              u1 = 0;
            } else {
              var m8 = (k1.andln(7) + d1) & 7;
              if ((m8 === 3 || m8 === 5) && m24 === 2) u1 = -m14;
              else u1 = m14;
            }
            jsf[0].push(u1);

            var u2;
            if ((m24 & 1) === 0) {
              u2 = 0;
            } else {
              var m8 = (k2.andln(7) + d2) & 7;
              if ((m8 === 3 || m8 === 5) && m14 === 2) u2 = -m24;
              else u2 = m24;
            }
            jsf[1].push(u2);

            // Second phase
            if (2 * d1 === u1 + 1) d1 = 1 - d1;
            if (2 * d2 === u2 + 1) d2 = 1 - d2;
            k1.iushrn(1);
            k2.iushrn(1);
          }

          return jsf;
        }
        utils.getJSF = getJSF;

        function cachedProperty(obj, name, computer) {
          var key = "_" + name;
          obj.prototype[name] = function cachedProperty() {
            return this[key] !== undefined
              ? this[key]
              : (this[key] = computer.call(this));
          };
        }
        utils.cachedProperty = cachedProperty;

        function parseBytes(bytes) {
          return typeof bytes === "string"
            ? utils.toArray(bytes, "hex")
            : bytes;
        }
        utils.parseBytes = parseBytes;

        function intFromLE(bytes) {
          return new BN(bytes, "hex", "le");
        }
        utils.intFromLE = intFromLE;

        /***/
      },
      /* 182 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var BN = __webpack_require__(4);
        var elliptic = __webpack_require__(5);
        var utils = elliptic.utils;
        var getNAF = utils.getNAF;
        var getJSF = utils.getJSF;
        var assert = utils.assert;

        function BaseCurve(type, conf) {
          this.type = type;
          this.p = new BN(conf.p, 16);

          // Use Montgomery, when there is no fast reduction for the prime
          this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);

          // Useful for many curves
          this.zero = new BN(0).toRed(this.red);
          this.one = new BN(1).toRed(this.red);
          this.two = new BN(2).toRed(this.red);

          // Curve configuration, optional
          this.n = conf.n && new BN(conf.n, 16);
          this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

          // Temporary arrays
          this._wnafT1 = new Array(4);
          this._wnafT2 = new Array(4);
          this._wnafT3 = new Array(4);
          this._wnafT4 = new Array(4);

          // Generalized Greg Maxwell's trick
          var adjustCount = this.n && this.p.div(this.n);
          if (!adjustCount || adjustCount.cmpn(100) > 0) {
            this.redN = null;
          } else {
            this._maxwellTrick = true;
            this.redN = this.n.toRed(this.red);
          }
        }
        module.exports = BaseCurve;

        BaseCurve.prototype.point = function point() {
          throw new Error("Not implemented");
        };

        BaseCurve.prototype.validate = function validate() {
          throw new Error("Not implemented");
        };

        BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
          assert(p.precomputed);
          var doubles = p._getDoubles();

          var naf = getNAF(k, 1);
          var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
          I /= 3;

          // Translate into more windowed form
          var repr = [];
          for (var j = 0; j < naf.length; j += doubles.step) {
            var nafW = 0;
            for (var k = j + doubles.step - 1; k >= j; k--)
              nafW = (nafW << 1) + naf[k];
            repr.push(nafW);
          }

          var a = this.jpoint(null, null, null);
          var b = this.jpoint(null, null, null);
          for (var i = I; i > 0; i--) {
            for (var j = 0; j < repr.length; j++) {
              var nafW = repr[j];
              if (nafW === i) b = b.mixedAdd(doubles.points[j]);
              else if (nafW === -i) b = b.mixedAdd(doubles.points[j].neg());
            }
            a = a.add(b);
          }
          return a.toP();
        };

        BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
          var w = 4;

          // Precompute window
          var nafPoints = p._getNAFPoints(w);
          w = nafPoints.wnd;
          var wnd = nafPoints.points;

          // Get NAF form
          var naf = getNAF(k, w);

          // Add `this`*(N+1) for every w-NAF index
          var acc = this.jpoint(null, null, null);
          for (var i = naf.length - 1; i >= 0; i--) {
            // Count zeroes
            for (var k = 0; i >= 0 && naf[i] === 0; i--) k++;
            if (i >= 0) k++;
            acc = acc.dblp(k);

            if (i < 0) break;
            var z = naf[i];
            assert(z !== 0);
            if (p.type === "affine") {
              // J +- P
              if (z > 0) acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
              else acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
            } else {
              // J +- J
              if (z > 0) acc = acc.add(wnd[(z - 1) >> 1]);
              else acc = acc.add(wnd[(-z - 1) >> 1].neg());
            }
          }
          return p.type === "affine" ? acc.toP() : acc;
        };

        BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(
          defW,
          points,
          coeffs,
          len,
          jacobianResult
        ) {
          var wndWidth = this._wnafT1;
          var wnd = this._wnafT2;
          var naf = this._wnafT3;

          // Fill all arrays
          var max = 0;
          for (var i = 0; i < len; i++) {
            var p = points[i];
            var nafPoints = p._getNAFPoints(defW);
            wndWidth[i] = nafPoints.wnd;
            wnd[i] = nafPoints.points;
          }

          // Comb small window NAFs
          for (var i = len - 1; i >= 1; i -= 2) {
            var a = i - 1;
            var b = i;
            if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
              naf[a] = getNAF(coeffs[a], wndWidth[a]);
              naf[b] = getNAF(coeffs[b], wndWidth[b]);
              max = Math.max(naf[a].length, max);
              max = Math.max(naf[b].length, max);
              continue;
            }

            var comb = [
              points[a] /* 1 */,
              null /* 3 */,
              null /* 5 */,
              points[b] /* 7 */
            ];

            // Try to avoid Projective points, if possible
            if (points[a].y.cmp(points[b].y) === 0) {
              comb[1] = points[a].add(points[b]);
              comb[2] = points[a].toJ().mixedAdd(points[b].neg());
            } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
              comb[1] = points[a].toJ().mixedAdd(points[b]);
              comb[2] = points[a].add(points[b].neg());
            } else {
              comb[1] = points[a].toJ().mixedAdd(points[b]);
              comb[2] = points[a].toJ().mixedAdd(points[b].neg());
            }

            var index = [
              -3 /* -1 -1 */,
              -1 /* -1 0 */,
              -5 /* -1 1 */,
              -7 /* 0 -1 */,
              0 /* 0 0 */,
              7 /* 0 1 */,
              5 /* 1 -1 */,
              1 /* 1 0 */,
              3 /* 1 1 */
            ];

            var jsf = getJSF(coeffs[a], coeffs[b]);
            max = Math.max(jsf[0].length, max);
            naf[a] = new Array(max);
            naf[b] = new Array(max);
            for (var j = 0; j < max; j++) {
              var ja = jsf[0][j] | 0;
              var jb = jsf[1][j] | 0;

              naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
              naf[b][j] = 0;
              wnd[a] = comb;
            }
          }

          var acc = this.jpoint(null, null, null);
          var tmp = this._wnafT4;
          for (var i = max; i >= 0; i--) {
            var k = 0;

            while (i >= 0) {
              var zero = true;
              for (var j = 0; j < len; j++) {
                tmp[j] = naf[j][i] | 0;
                if (tmp[j] !== 0) zero = false;
              }
              if (!zero) break;
              k++;
              i--;
            }
            if (i >= 0) k++;
            acc = acc.dblp(k);
            if (i < 0) break;

            for (var j = 0; j < len; j++) {
              var z = tmp[j];
              var p;
              if (z === 0) continue;
              else if (z > 0) p = wnd[j][(z - 1) >> 1];
              else if (z < 0) p = wnd[j][(-z - 1) >> 1].neg();

              if (p.type === "affine") acc = acc.mixedAdd(p);
              else acc = acc.add(p);
            }
          }
          // Zeroify references
          for (var i = 0; i < len; i++) wnd[i] = null;

          if (jacobianResult) return acc;
          else return acc.toP();
        };

        function BasePoint(curve, type) {
          this.curve = curve;
          this.type = type;
          this.precomputed = null;
        }
        BaseCurve.BasePoint = BasePoint;

        BasePoint.prototype.eq = function eq(/*other*/) {
          throw new Error("Not implemented");
        };

        BasePoint.prototype.validate = function validate() {
          return this.curve.validate(this);
        };

        BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
          bytes = utils.toArray(bytes, enc);

          var len = this.p.byteLength();

          // uncompressed, hybrid-odd, hybrid-even
          if (
            (bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
            bytes.length - 1 === 2 * len
          ) {
            if (bytes[0] === 0x06) assert(bytes[bytes.length - 1] % 2 === 0);
            else if (bytes[0] === 0x07)
              assert(bytes[bytes.length - 1] % 2 === 1);

            var res = this.point(
              bytes.slice(1, 1 + len),
              bytes.slice(1 + len, 1 + 2 * len)
            );

            return res;
          } else if (
            (bytes[0] === 0x02 || bytes[0] === 0x03) &&
            bytes.length - 1 === len
          ) {
            return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
          }
          throw new Error("Unknown point format");
        };

        BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
          return this.encode(enc, true);
        };

        BasePoint.prototype._encode = function _encode(compact) {
          var len = this.curve.p.byteLength();
          var x = this.getX().toArray("be", len);

          if (compact) return [this.getY().isEven() ? 0x02 : 0x03].concat(x);

          return [0x04].concat(x, this.getY().toArray("be", len));
        };

        BasePoint.prototype.encode = function encode(enc, compact) {
          return utils.encode(this._encode(compact), enc);
        };

        BasePoint.prototype.precompute = function precompute(power) {
          if (this.precomputed) return this;

          var precomputed = {
            doubles: null,
            naf: null,
            beta: null
          };
          precomputed.naf = this._getNAFPoints(8);
          precomputed.doubles = this._getDoubles(4, power);
          precomputed.beta = this._getBeta();
          this.precomputed = precomputed;

          return this;
        };

        BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
          if (!this.precomputed) return false;

          var doubles = this.precomputed.doubles;
          if (!doubles) return false;

          return (
            doubles.points.length >=
            Math.ceil((k.bitLength() + 1) / doubles.step)
          );
        };

        BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
          if (this.precomputed && this.precomputed.doubles)
            return this.precomputed.doubles;

          var doubles = [this];
          var acc = this;
          for (var i = 0; i < power; i += step) {
            for (var j = 0; j < step; j++) acc = acc.dbl();
            doubles.push(acc);
          }
          return {
            step: step,
            points: doubles
          };
        };

        BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
          if (this.precomputed && this.precomputed.naf)
            return this.precomputed.naf;

          var res = [this];
          var max = (1 << wnd) - 1;
          var dbl = max === 1 ? null : this.dbl();
          for (var i = 1; i < max; i++) res[i] = res[i - 1].add(dbl);
          return {
            wnd: wnd,
            points: res
          };
        };

        BasePoint.prototype._getBeta = function _getBeta() {
          return null;
        };

        BasePoint.prototype.dblp = function dblp(k) {
          var r = this;
          for (var i = 0; i < k; i++) r = r.dbl();
          return r;
        };

        /***/
      },
      /* 183 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var curve = __webpack_require__(40);
        var elliptic = __webpack_require__(5);
        var BN = __webpack_require__(4);
        var inherits = __webpack_require__(2);
        var Base = curve.base;

        var assert = elliptic.utils.assert;

        function ShortCurve(conf) {
          Base.call(this, "short", conf);

          this.a = new BN(conf.a, 16).toRed(this.red);
          this.b = new BN(conf.b, 16).toRed(this.red);
          this.tinv = this.two.redInvm();

          this.zeroA = this.a.fromRed().cmpn(0) === 0;
          this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

          // If the curve is endomorphic, precalculate beta and lambda
          this.endo = this._getEndomorphism(conf);
          this._endoWnafT1 = new Array(4);
          this._endoWnafT2 = new Array(4);
        }
        inherits(ShortCurve, Base);
        module.exports = ShortCurve;

        ShortCurve.prototype._getEndomorphism = function _getEndomorphism(
          conf
        ) {
          // No efficient endomorphism
          if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1) return;

          // Compute beta and lambda, that lambda * P = (beta * Px; Py)
          var beta;
          var lambda;
          if (conf.beta) {
            beta = new BN(conf.beta, 16).toRed(this.red);
          } else {
            var betas = this._getEndoRoots(this.p);
            // Choose the smallest beta
            beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
            beta = beta.toRed(this.red);
          }
          if (conf.lambda) {
            lambda = new BN(conf.lambda, 16);
          } else {
            // Choose the lambda that is matching selected beta
            var lambdas = this._getEndoRoots(this.n);
            if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
              lambda = lambdas[0];
            } else {
              lambda = lambdas[1];
              assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
            }
          }

          // Get basis vectors, used for balanced length-two representation
          var basis;
          if (conf.basis) {
            basis = conf.basis.map(function(vec) {
              return {
                a: new BN(vec.a, 16),
                b: new BN(vec.b, 16)
              };
            });
          } else {
            basis = this._getEndoBasis(lambda);
          }

          return {
            beta: beta,
            lambda: lambda,
            basis: basis
          };
        };

        ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
          // Find roots of for x^2 + x + 1 in F
          // Root = (-1 +- Sqrt(-3)) / 2
          //
          var red = num === this.p ? this.red : BN.mont(num);
          var tinv = new BN(2).toRed(red).redInvm();
          var ntinv = tinv.redNeg();

          var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);

          var l1 = ntinv.redAdd(s).fromRed();
          var l2 = ntinv.redSub(s).fromRed();
          return [l1, l2];
        };

        ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
          // aprxSqrt >= sqrt(this.n)
          var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

          // 3.74
          // Run EGCD, until r(L + 1) < aprxSqrt
          var u = lambda;
          var v = this.n.clone();
          var x1 = new BN(1);
          var y1 = new BN(0);
          var x2 = new BN(0);
          var y2 = new BN(1);

          // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
          var a0;
          var b0;
          // First vector
          var a1;
          var b1;
          // Second vector
          var a2;
          var b2;

          var prevR;
          var i = 0;
          var r;
          var x;
          while (u.cmpn(0) !== 0) {
            var q = v.div(u);
            r = v.sub(q.mul(u));
            x = x2.sub(q.mul(x1));
            var y = y2.sub(q.mul(y1));

            if (!a1 && r.cmp(aprxSqrt) < 0) {
              a0 = prevR.neg();
              b0 = x1;
              a1 = r.neg();
              b1 = x;
            } else if (a1 && ++i === 2) {
              break;
            }
            prevR = r;

            v = u;
            u = r;
            x2 = x1;
            x1 = x;
            y2 = y1;
            y1 = y;
          }
          a2 = r.neg();
          b2 = x;

          var len1 = a1.sqr().add(b1.sqr());
          var len2 = a2.sqr().add(b2.sqr());
          if (len2.cmp(len1) >= 0) {
            a2 = a0;
            b2 = b0;
          }

          // Normalize signs
          if (a1.negative) {
            a1 = a1.neg();
            b1 = b1.neg();
          }
          if (a2.negative) {
            a2 = a2.neg();
            b2 = b2.neg();
          }

          return [{ a: a1, b: b1 }, { a: a2, b: b2 }];
        };

        ShortCurve.prototype._endoSplit = function _endoSplit(k) {
          var basis = this.endo.basis;
          var v1 = basis[0];
          var v2 = basis[1];

          var c1 = v2.b.mul(k).divRound(this.n);
          var c2 = v1.b.neg().mul(k).divRound(this.n);

          var p1 = c1.mul(v1.a);
          var p2 = c2.mul(v2.a);
          var q1 = c1.mul(v1.b);
          var q2 = c2.mul(v2.b);

          // Calculate answer
          var k1 = k.sub(p1).sub(p2);
          var k2 = q1.add(q2).neg();
          return { k1: k1, k2: k2 };
        };

        ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
          x = new BN(x, 16);
          if (!x.red) x = x.toRed(this.red);

          var y2 = x
            .redSqr()
            .redMul(x)
            .redIAdd(x.redMul(this.a))
            .redIAdd(this.b);
          var y = y2.redSqrt();
          if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
            throw new Error("invalid point");

          // XXX Is there any way to tell if the number is odd without converting it
          // to non-red form?
          var isOdd = y.fromRed().isOdd();
          if ((odd && !isOdd) || (!odd && isOdd)) y = y.redNeg();

          return this.point(x, y);
        };

        ShortCurve.prototype.validate = function validate(point) {
          if (point.inf) return true;

          var x = point.x;
          var y = point.y;

          var ax = this.a.redMul(x);
          var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
          return y.redSqr().redISub(rhs).cmpn(0) === 0;
        };

        ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(
          points,
          coeffs,
          jacobianResult
        ) {
          var npoints = this._endoWnafT1;
          var ncoeffs = this._endoWnafT2;
          for (var i = 0; i < points.length; i++) {
            var split = this._endoSplit(coeffs[i]);
            var p = points[i];
            var beta = p._getBeta();

            if (split.k1.negative) {
              split.k1.ineg();
              p = p.neg(true);
            }
            if (split.k2.negative) {
              split.k2.ineg();
              beta = beta.neg(true);
            }

            npoints[i * 2] = p;
            npoints[i * 2 + 1] = beta;
            ncoeffs[i * 2] = split.k1;
            ncoeffs[i * 2 + 1] = split.k2;
          }
          var res = this._wnafMulAdd(
            1,
            npoints,
            ncoeffs,
            i * 2,
            jacobianResult
          );

          // Clean-up references to points and coefficients
          for (var j = 0; j < i * 2; j++) {
            npoints[j] = null;
            ncoeffs[j] = null;
          }
          return res;
        };

        function Point(curve, x, y, isRed) {
          Base.BasePoint.call(this, curve, "affine");
          if (x === null && y === null) {
            this.x = null;
            this.y = null;
            this.inf = true;
          } else {
            this.x = new BN(x, 16);
            this.y = new BN(y, 16);
            // Force redgomery representation when loading from JSON
            if (isRed) {
              this.x.forceRed(this.curve.red);
              this.y.forceRed(this.curve.red);
            }
            if (!this.x.red) this.x = this.x.toRed(this.curve.red);
            if (!this.y.red) this.y = this.y.toRed(this.curve.red);
            this.inf = false;
          }
        }
        inherits(Point, Base.BasePoint);

        ShortCurve.prototype.point = function point(x, y, isRed) {
          return new Point(this, x, y, isRed);
        };

        ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
          return Point.fromJSON(this, obj, red);
        };

        Point.prototype._getBeta = function _getBeta() {
          if (!this.curve.endo) return;

          var pre = this.precomputed;
          if (pre && pre.beta) return pre.beta;

          var beta = this.curve.point(
            this.x.redMul(this.curve.endo.beta),
            this.y
          );
          if (pre) {
            var curve = this.curve;
            var endoMul = function(p) {
              return curve.point(p.x.redMul(curve.endo.beta), p.y);
            };
            pre.beta = beta;
            beta.precomputed = {
              beta: null,
              naf: pre.naf && {
                wnd: pre.naf.wnd,
                points: pre.naf.points.map(endoMul)
              },
              doubles: pre.doubles && {
                step: pre.doubles.step,
                points: pre.doubles.points.map(endoMul)
              }
            };
          }
          return beta;
        };

        Point.prototype.toJSON = function toJSON() {
          if (!this.precomputed) return [this.x, this.y];

          return [
            this.x,
            this.y,
            this.precomputed && {
              doubles: this.precomputed.doubles && {
                step: this.precomputed.doubles.step,
                points: this.precomputed.doubles.points.slice(1)
              },
              naf: this.precomputed.naf && {
                wnd: this.precomputed.naf.wnd,
                points: this.precomputed.naf.points.slice(1)
              }
            }
          ];
        };

        Point.fromJSON = function fromJSON(curve, obj, red) {
          if (typeof obj === "string") obj = JSON.parse(obj);
          var res = curve.point(obj[0], obj[1], red);
          if (!obj[2]) return res;

          function obj2point(obj) {
            return curve.point(obj[0], obj[1], red);
          }

          var pre = obj[2];
          res.precomputed = {
            beta: null,
            doubles: pre.doubles && {
              step: pre.doubles.step,
              points: [res].concat(pre.doubles.points.map(obj2point))
            },
            naf: pre.naf && {
              wnd: pre.naf.wnd,
              points: [res].concat(pre.naf.points.map(obj2point))
            }
          };
          return res;
        };

        Point.prototype.inspect = function inspect() {
          if (this.isInfinity()) return "<EC Point Infinity>";
          return (
            "<EC Point x: " +
            this.x.fromRed().toString(16, 2) +
            " y: " +
            this.y.fromRed().toString(16, 2) +
            ">"
          );
        };

        Point.prototype.isInfinity = function isInfinity() {
          return this.inf;
        };

        Point.prototype.add = function add(p) {
          // O + P = P
          if (this.inf) return p;

          // P + O = P
          if (p.inf) return this;

          // P + P = 2P
          if (this.eq(p)) return this.dbl();

          // P + (-P) = O
          if (this.neg().eq(p)) return this.curve.point(null, null);

          // P + Q = O
          if (this.x.cmp(p.x) === 0) return this.curve.point(null, null);

          var c = this.y.redSub(p.y);
          if (c.cmpn(0) !== 0) c = c.redMul(this.x.redSub(p.x).redInvm());
          var nx = c.redSqr().redISub(this.x).redISub(p.x);
          var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
          return this.curve.point(nx, ny);
        };

        Point.prototype.dbl = function dbl() {
          if (this.inf) return this;

          // 2P = O
          var ys1 = this.y.redAdd(this.y);
          if (ys1.cmpn(0) === 0) return this.curve.point(null, null);

          var a = this.curve.a;

          var x2 = this.x.redSqr();
          var dyinv = ys1.redInvm();
          var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

          var nx = c.redSqr().redISub(this.x.redAdd(this.x));
          var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
          return this.curve.point(nx, ny);
        };

        Point.prototype.getX = function getX() {
          return this.x.fromRed();
        };

        Point.prototype.getY = function getY() {
          return this.y.fromRed();
        };

        Point.prototype.mul = function mul(k) {
          k = new BN(k, 16);

          if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);
          else if (this.curve.endo)
            return this.curve._endoWnafMulAdd([this], [k]);
          else return this.curve._wnafMul(this, k);
        };

        Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
          var points = [this, p2];
          var coeffs = [k1, k2];
          if (this.curve.endo)
            return this.curve._endoWnafMulAdd(points, coeffs);
          else return this.curve._wnafMulAdd(1, points, coeffs, 2);
        };

        Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
          var points = [this, p2];
          var coeffs = [k1, k2];
          if (this.curve.endo)
            return this.curve._endoWnafMulAdd(points, coeffs, true);
          else return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
        };

        Point.prototype.eq = function eq(p) {
          return (
            this === p ||
            (this.inf === p.inf &&
              (this.inf || (this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0)))
          );
        };

        Point.prototype.neg = function neg(_precompute) {
          if (this.inf) return this;

          var res = this.curve.point(this.x, this.y.redNeg());
          if (_precompute && this.precomputed) {
            var pre = this.precomputed;
            var negate = function(p) {
              return p.neg();
            };
            res.precomputed = {
              naf: pre.naf && {
                wnd: pre.naf.wnd,
                points: pre.naf.points.map(negate)
              },
              doubles: pre.doubles && {
                step: pre.doubles.step,
                points: pre.doubles.points.map(negate)
              }
            };
          }
          return res;
        };

        Point.prototype.toJ = function toJ() {
          if (this.inf) return this.curve.jpoint(null, null, null);

          var res = this.curve.jpoint(this.x, this.y, this.curve.one);
          return res;
        };

        function JPoint(curve, x, y, z) {
          Base.BasePoint.call(this, curve, "jacobian");
          if (x === null && y === null && z === null) {
            this.x = this.curve.one;
            this.y = this.curve.one;
            this.z = new BN(0);
          } else {
            this.x = new BN(x, 16);
            this.y = new BN(y, 16);
            this.z = new BN(z, 16);
          }
          if (!this.x.red) this.x = this.x.toRed(this.curve.red);
          if (!this.y.red) this.y = this.y.toRed(this.curve.red);
          if (!this.z.red) this.z = this.z.toRed(this.curve.red);

          this.zOne = this.z === this.curve.one;
        }
        inherits(JPoint, Base.BasePoint);

        ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
          return new JPoint(this, x, y, z);
        };

        JPoint.prototype.toP = function toP() {
          if (this.isInfinity()) return this.curve.point(null, null);

          var zinv = this.z.redInvm();
          var zinv2 = zinv.redSqr();
          var ax = this.x.redMul(zinv2);
          var ay = this.y.redMul(zinv2).redMul(zinv);

          return this.curve.point(ax, ay);
        };

        JPoint.prototype.neg = function neg() {
          return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
        };

        JPoint.prototype.add = function add(p) {
          // O + P = P
          if (this.isInfinity()) return p;

          // P + O = P
          if (p.isInfinity()) return this;

          // 12M + 4S + 7A
          var pz2 = p.z.redSqr();
          var z2 = this.z.redSqr();
          var u1 = this.x.redMul(pz2);
          var u2 = p.x.redMul(z2);
          var s1 = this.y.redMul(pz2.redMul(p.z));
          var s2 = p.y.redMul(z2.redMul(this.z));

          var h = u1.redSub(u2);
          var r = s1.redSub(s2);
          if (h.cmpn(0) === 0) {
            if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);
            else return this.dbl();
          }

          var h2 = h.redSqr();
          var h3 = h2.redMul(h);
          var v = u1.redMul(h2);

          var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
          var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
          var nz = this.z.redMul(p.z).redMul(h);

          return this.curve.jpoint(nx, ny, nz);
        };

        JPoint.prototype.mixedAdd = function mixedAdd(p) {
          // O + P = P
          if (this.isInfinity()) return p.toJ();

          // P + O = P
          if (p.isInfinity()) return this;

          // 8M + 3S + 7A
          var z2 = this.z.redSqr();
          var u1 = this.x;
          var u2 = p.x.redMul(z2);
          var s1 = this.y;
          var s2 = p.y.redMul(z2).redMul(this.z);

          var h = u1.redSub(u2);
          var r = s1.redSub(s2);
          if (h.cmpn(0) === 0) {
            if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);
            else return this.dbl();
          }

          var h2 = h.redSqr();
          var h3 = h2.redMul(h);
          var v = u1.redMul(h2);

          var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
          var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
          var nz = this.z.redMul(h);

          return this.curve.jpoint(nx, ny, nz);
        };

        JPoint.prototype.dblp = function dblp(pow) {
          if (pow === 0) return this;
          if (this.isInfinity()) return this;
          if (!pow) return this.dbl();

          if (this.curve.zeroA || this.curve.threeA) {
            var r = this;
            for (var i = 0; i < pow; i++) r = r.dbl();
            return r;
          }

          // 1M + 2S + 1A + N * (4S + 5M + 8A)
          // N = 1 => 6M + 6S + 9A
          var a = this.curve.a;
          var tinv = this.curve.tinv;

          var jx = this.x;
          var jy = this.y;
          var jz = this.z;
          var jz4 = jz.redSqr().redSqr();

          // Reuse results
          var jyd = jy.redAdd(jy);
          for (var i = 0; i < pow; i++) {
            var jx2 = jx.redSqr();
            var jyd2 = jyd.redSqr();
            var jyd4 = jyd2.redSqr();
            var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

            var t1 = jx.redMul(jyd2);
            var nx = c.redSqr().redISub(t1.redAdd(t1));
            var t2 = t1.redISub(nx);
            var dny = c.redMul(t2);
            dny = dny.redIAdd(dny).redISub(jyd4);
            var nz = jyd.redMul(jz);
            if (i + 1 < pow) jz4 = jz4.redMul(jyd4);

            jx = nx;
            jz = nz;
            jyd = dny;
          }

          return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
        };

        JPoint.prototype.dbl = function dbl() {
          if (this.isInfinity()) return this;

          if (this.curve.zeroA) return this._zeroDbl();
          else if (this.curve.threeA) return this._threeDbl();
          else return this._dbl();
        };

        JPoint.prototype._zeroDbl = function _zeroDbl() {
          var nx;
          var ny;
          var nz;
          // Z = 1
          if (this.zOne) {
            // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
            //     #doubling-mdbl-2007-bl
            // 1M + 5S + 14A

            // XX = X1^2
            var xx = this.x.redSqr();
            // YY = Y1^2
            var yy = this.y.redSqr();
            // YYYY = YY^2
            var yyyy = yy.redSqr();
            // S = 2 * ((X1 + YY)^2 - XX - YYYY)
            var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
            s = s.redIAdd(s);
            // M = 3 * XX + a; a = 0
            var m = xx.redAdd(xx).redIAdd(xx);
            // T = M ^ 2 - 2*S
            var t = m.redSqr().redISub(s).redISub(s);

            // 8 * YYYY
            var yyyy8 = yyyy.redIAdd(yyyy);
            yyyy8 = yyyy8.redIAdd(yyyy8);
            yyyy8 = yyyy8.redIAdd(yyyy8);

            // X3 = T
            nx = t;
            // Y3 = M * (S - T) - 8 * YYYY
            ny = m.redMul(s.redISub(t)).redISub(yyyy8);
            // Z3 = 2*Y1
            nz = this.y.redAdd(this.y);
          } else {
            // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
            //     #doubling-dbl-2009-l
            // 2M + 5S + 13A

            // A = X1^2
            var a = this.x.redSqr();
            // B = Y1^2
            var b = this.y.redSqr();
            // C = B^2
            var c = b.redSqr();
            // D = 2 * ((X1 + B)^2 - A - C)
            var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
            d = d.redIAdd(d);
            // E = 3 * A
            var e = a.redAdd(a).redIAdd(a);
            // F = E^2
            var f = e.redSqr();

            // 8 * C
            var c8 = c.redIAdd(c);
            c8 = c8.redIAdd(c8);
            c8 = c8.redIAdd(c8);

            // X3 = F - 2 * D
            nx = f.redISub(d).redISub(d);
            // Y3 = E * (D - X3) - 8 * C
            ny = e.redMul(d.redISub(nx)).redISub(c8);
            // Z3 = 2 * Y1 * Z1
            nz = this.y.redMul(this.z);
            nz = nz.redIAdd(nz);
          }

          return this.curve.jpoint(nx, ny, nz);
        };

        JPoint.prototype._threeDbl = function _threeDbl() {
          var nx;
          var ny;
          var nz;
          // Z = 1
          if (this.zOne) {
            // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
            //     #doubling-mdbl-2007-bl
            // 1M + 5S + 15A

            // XX = X1^2
            var xx = this.x.redSqr();
            // YY = Y1^2
            var yy = this.y.redSqr();
            // YYYY = YY^2
            var yyyy = yy.redSqr();
            // S = 2 * ((X1 + YY)^2 - XX - YYYY)
            var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
            s = s.redIAdd(s);
            // M = 3 * XX + a
            var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
            // T = M^2 - 2 * S
            var t = m.redSqr().redISub(s).redISub(s);
            // X3 = T
            nx = t;
            // Y3 = M * (S - T) - 8 * YYYY
            var yyyy8 = yyyy.redIAdd(yyyy);
            yyyy8 = yyyy8.redIAdd(yyyy8);
            yyyy8 = yyyy8.redIAdd(yyyy8);
            ny = m.redMul(s.redISub(t)).redISub(yyyy8);
            // Z3 = 2 * Y1
            nz = this.y.redAdd(this.y);
          } else {
            // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
            // 3M + 5S

            // delta = Z1^2
            var delta = this.z.redSqr();
            // gamma = Y1^2
            var gamma = this.y.redSqr();
            // beta = X1 * gamma
            var beta = this.x.redMul(gamma);
            // alpha = 3 * (X1 - delta) * (X1 + delta)
            var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
            alpha = alpha.redAdd(alpha).redIAdd(alpha);
            // X3 = alpha^2 - 8 * beta
            var beta4 = beta.redIAdd(beta);
            beta4 = beta4.redIAdd(beta4);
            var beta8 = beta4.redAdd(beta4);
            nx = alpha.redSqr().redISub(beta8);
            // Z3 = (Y1 + Z1)^2 - gamma - delta
            nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
            // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
            var ggamma8 = gamma.redSqr();
            ggamma8 = ggamma8.redIAdd(ggamma8);
            ggamma8 = ggamma8.redIAdd(ggamma8);
            ggamma8 = ggamma8.redIAdd(ggamma8);
            ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
          }

          return this.curve.jpoint(nx, ny, nz);
        };

        JPoint.prototype._dbl = function _dbl() {
          var a = this.curve.a;

          // 4M + 6S + 10A
          var jx = this.x;
          var jy = this.y;
          var jz = this.z;
          var jz4 = jz.redSqr().redSqr();

          var jx2 = jx.redSqr();
          var jy2 = jy.redSqr();

          var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

          var jxd4 = jx.redAdd(jx);
          jxd4 = jxd4.redIAdd(jxd4);
          var t1 = jxd4.redMul(jy2);
          var nx = c.redSqr().redISub(t1.redAdd(t1));
          var t2 = t1.redISub(nx);

          var jyd8 = jy2.redSqr();
          jyd8 = jyd8.redIAdd(jyd8);
          jyd8 = jyd8.redIAdd(jyd8);
          jyd8 = jyd8.redIAdd(jyd8);
          var ny = c.redMul(t2).redISub(jyd8);
          var nz = jy.redAdd(jy).redMul(jz);

          return this.curve.jpoint(nx, ny, nz);
        };

        JPoint.prototype.trpl = function trpl() {
          if (!this.curve.zeroA) return this.dbl().add(this);

          // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
          // 5M + 10S + ...

          // XX = X1^2
          var xx = this.x.redSqr();
          // YY = Y1^2
          var yy = this.y.redSqr();
          // ZZ = Z1^2
          var zz = this.z.redSqr();
          // YYYY = YY^2
          var yyyy = yy.redSqr();
          // M = 3 * XX + a * ZZ2; a = 0
          var m = xx.redAdd(xx).redIAdd(xx);
          // MM = M^2
          var mm = m.redSqr();
          // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
          var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
          e = e.redIAdd(e);
          e = e.redAdd(e).redIAdd(e);
          e = e.redISub(mm);
          // EE = E^2
          var ee = e.redSqr();
          // T = 16*YYYY
          var t = yyyy.redIAdd(yyyy);
          t = t.redIAdd(t);
          t = t.redIAdd(t);
          t = t.redIAdd(t);
          // U = (M + E)^2 - MM - EE - T
          var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
          // X3 = 4 * (X1 * EE - 4 * YY * U)
          var yyu4 = yy.redMul(u);
          yyu4 = yyu4.redIAdd(yyu4);
          yyu4 = yyu4.redIAdd(yyu4);
          var nx = this.x.redMul(ee).redISub(yyu4);
          nx = nx.redIAdd(nx);
          nx = nx.redIAdd(nx);
          // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
          var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
          ny = ny.redIAdd(ny);
          ny = ny.redIAdd(ny);
          ny = ny.redIAdd(ny);
          // Z3 = (Z1 + E)^2 - ZZ - EE
          var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

          return this.curve.jpoint(nx, ny, nz);
        };

        JPoint.prototype.mul = function mul(k, kbase) {
          k = new BN(k, kbase);

          return this.curve._wnafMul(this, k);
        };

        JPoint.prototype.eq = function eq(p) {
          if (p.type === "affine") return this.eq(p.toJ());

          if (this === p) return true;

          // x1 * z2^2 == x2 * z1^2
          var z2 = this.z.redSqr();
          var pz2 = p.z.redSqr();
          if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
            return false;

          // y1 * z2^3 == y2 * z1^3
          var z3 = z2.redMul(this.z);
          var pz3 = pz2.redMul(p.z);
          return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
        };

        JPoint.prototype.eqXToP = function eqXToP(x) {
          var zs = this.z.redSqr();
          var rx = x.toRed(this.curve.red).redMul(zs);
          if (this.x.cmp(rx) === 0) return true;

          var xc = x.clone();
          var t = this.curve.redN.redMul(zs);
          for (;;) {
            xc.iadd(this.curve.n);
            if (xc.cmp(this.curve.p) >= 0) return false;

            rx.redIAdd(t);
            if (this.x.cmp(rx) === 0) return true;
          }
          return false;
        };

        JPoint.prototype.inspect = function inspect() {
          if (this.isInfinity()) return "<EC JPoint Infinity>";
          return (
            "<EC JPoint x: " +
            this.x.toString(16, 2) +
            " y: " +
            this.y.toString(16, 2) +
            " z: " +
            this.z.toString(16, 2) +
            ">"
          );
        };

        JPoint.prototype.isInfinity = function isInfinity() {
          // XXX This code assumes that zero is always zero in red
          return this.z.cmpn(0) === 0;
        };

        /***/
      },
      /* 184 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var curve = __webpack_require__(40);
        var BN = __webpack_require__(4);
        var inherits = __webpack_require__(2);
        var Base = curve.base;

        var elliptic = __webpack_require__(5);
        var utils = elliptic.utils;

        function MontCurve(conf) {
          Base.call(this, "mont", conf);

          this.a = new BN(conf.a, 16).toRed(this.red);
          this.b = new BN(conf.b, 16).toRed(this.red);
          this.i4 = new BN(4).toRed(this.red).redInvm();
          this.two = new BN(2).toRed(this.red);
          this.a24 = this.i4.redMul(this.a.redAdd(this.two));
        }
        inherits(MontCurve, Base);
        module.exports = MontCurve;

        MontCurve.prototype.validate = function validate(point) {
          var x = point.normalize().x;
          var x2 = x.redSqr();
          var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
          var y = rhs.redSqrt();

          return y.redSqr().cmp(rhs) === 0;
        };

        function Point(curve, x, z) {
          Base.BasePoint.call(this, curve, "projective");
          if (x === null && z === null) {
            this.x = this.curve.one;
            this.z = this.curve.zero;
          } else {
            this.x = new BN(x, 16);
            this.z = new BN(z, 16);
            if (!this.x.red) this.x = this.x.toRed(this.curve.red);
            if (!this.z.red) this.z = this.z.toRed(this.curve.red);
          }
        }
        inherits(Point, Base.BasePoint);

        MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
          return this.point(utils.toArray(bytes, enc), 1);
        };

        MontCurve.prototype.point = function point(x, z) {
          return new Point(this, x, z);
        };

        MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
          return Point.fromJSON(this, obj);
        };

        Point.prototype.precompute = function precompute() {
          // No-op
        };

        Point.prototype._encode = function _encode() {
          return this.getX().toArray("be", this.curve.p.byteLength());
        };

        Point.fromJSON = function fromJSON(curve, obj) {
          return new Point(curve, obj[0], obj[1] || curve.one);
        };

        Point.prototype.inspect = function inspect() {
          if (this.isInfinity()) return "<EC Point Infinity>";
          return (
            "<EC Point x: " +
            this.x.fromRed().toString(16, 2) +
            " z: " +
            this.z.fromRed().toString(16, 2) +
            ">"
          );
        };

        Point.prototype.isInfinity = function isInfinity() {
          // XXX This code assumes that zero is always zero in red
          return this.z.cmpn(0) === 0;
        };

        Point.prototype.dbl = function dbl() {
          // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
          // 2M + 2S + 4A

          // A = X1 + Z1
          var a = this.x.redAdd(this.z);
          // AA = A^2
          var aa = a.redSqr();
          // B = X1 - Z1
          var b = this.x.redSub(this.z);
          // BB = B^2
          var bb = b.redSqr();
          // C = AA - BB
          var c = aa.redSub(bb);
          // X3 = AA * BB
          var nx = aa.redMul(bb);
          // Z3 = C * (BB + A24 * C)
          var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
          return this.curve.point(nx, nz);
        };

        Point.prototype.add = function add() {
          throw new Error("Not supported on Montgomery curve");
        };

        Point.prototype.diffAdd = function diffAdd(p, diff) {
          // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
          // 4M + 2S + 6A

          // A = X2 + Z2
          var a = this.x.redAdd(this.z);
          // B = X2 - Z2
          var b = this.x.redSub(this.z);
          // C = X3 + Z3
          var c = p.x.redAdd(p.z);
          // D = X3 - Z3
          var d = p.x.redSub(p.z);
          // DA = D * A
          var da = d.redMul(a);
          // CB = C * B
          var cb = c.redMul(b);
          // X5 = Z1 * (DA + CB)^2
          var nx = diff.z.redMul(da.redAdd(cb).redSqr());
          // Z5 = X1 * (DA - CB)^2
          var nz = diff.x.redMul(da.redISub(cb).redSqr());
          return this.curve.point(nx, nz);
        };

        Point.prototype.mul = function mul(k) {
          var t = k.clone();
          var a = this; // (N / 2) * Q + Q
          var b = this.curve.point(null, null); // (N / 2) * Q
          var c = this; // Q

          for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
            bits.push(t.andln(1));

          for (var i = bits.length - 1; i >= 0; i--) {
            if (bits[i] === 0) {
              // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
              a = a.diffAdd(b, c);
              // N * Q = 2 * ((N / 2) * Q + Q))
              b = b.dbl();
            } else {
              // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
              b = a.diffAdd(b, c);
              // N * Q + Q = 2 * ((N / 2) * Q + Q)
              a = a.dbl();
            }
          }
          return b;
        };

        Point.prototype.mulAdd = function mulAdd() {
          throw new Error("Not supported on Montgomery curve");
        };

        Point.prototype.jumlAdd = function jumlAdd() {
          throw new Error("Not supported on Montgomery curve");
        };

        Point.prototype.eq = function eq(other) {
          return this.getX().cmp(other.getX()) === 0;
        };

        Point.prototype.normalize = function normalize() {
          this.x = this.x.redMul(this.z.redInvm());
          this.z = this.curve.one;
          return this;
        };

        Point.prototype.getX = function getX() {
          // Normalize coordinates
          this.normalize();

          return this.x.fromRed();
        };

        /***/
      },
      /* 185 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var curve = __webpack_require__(40);
        var elliptic = __webpack_require__(5);
        var BN = __webpack_require__(4);
        var inherits = __webpack_require__(2);
        var Base = curve.base;

        var assert = elliptic.utils.assert;

        function EdwardsCurve(conf) {
          // NOTE: Important as we are creating point in Base.call()
          this.twisted = (conf.a | 0) !== 1;
          this.mOneA = this.twisted && (conf.a | 0) === -1;
          this.extended = this.mOneA;

          Base.call(this, "edwards", conf);

          this.a = new BN(conf.a, 16).umod(this.red.m);
          this.a = this.a.toRed(this.red);
          this.c = new BN(conf.c, 16).toRed(this.red);
          this.c2 = this.c.redSqr();
          this.d = new BN(conf.d, 16).toRed(this.red);
          this.dd = this.d.redAdd(this.d);

          assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
          this.oneC = (conf.c | 0) === 1;
        }
        inherits(EdwardsCurve, Base);
        module.exports = EdwardsCurve;

        EdwardsCurve.prototype._mulA = function _mulA(num) {
          if (this.mOneA) return num.redNeg();
          else return this.a.redMul(num);
        };

        EdwardsCurve.prototype._mulC = function _mulC(num) {
          if (this.oneC) return num;
          else return this.c.redMul(num);
        };

        // Just for compatibility with Short curve
        EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
          return this.point(x, y, z, t);
        };

        EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
          x = new BN(x, 16);
          if (!x.red) x = x.toRed(this.red);

          var x2 = x.redSqr();
          var rhs = this.c2.redSub(this.a.redMul(x2));
          var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

          var y2 = rhs.redMul(lhs.redInvm());
          var y = y2.redSqrt();
          if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
            throw new Error("invalid point");

          var isOdd = y.fromRed().isOdd();
          if ((odd && !isOdd) || (!odd && isOdd)) y = y.redNeg();

          return this.point(x, y);
        };

        EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
          y = new BN(y, 16);
          if (!y.red) y = y.toRed(this.red);

          // x^2 = (y^2 - 1) / (d y^2 + 1)
          var y2 = y.redSqr();
          var lhs = y2.redSub(this.one);
          var rhs = y2.redMul(this.d).redAdd(this.one);
          var x2 = lhs.redMul(rhs.redInvm());

          if (x2.cmp(this.zero) === 0) {
            if (odd) throw new Error("invalid point");
            else return this.point(this.zero, y);
          }

          var x = x2.redSqrt();
          if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
            throw new Error("invalid point");

          if (x.isOdd() !== odd) x = x.redNeg();

          return this.point(x, y);
        };

        EdwardsCurve.prototype.validate = function validate(point) {
          if (point.isInfinity()) return true;

          // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
          point.normalize();

          var x2 = point.x.redSqr();
          var y2 = point.y.redSqr();
          var lhs = x2.redMul(this.a).redAdd(y2);
          var rhs = this.c2.redMul(
            this.one.redAdd(this.d.redMul(x2).redMul(y2))
          );

          return lhs.cmp(rhs) === 0;
        };

        function Point(curve, x, y, z, t) {
          Base.BasePoint.call(this, curve, "projective");
          if (x === null && y === null && z === null) {
            this.x = this.curve.zero;
            this.y = this.curve.one;
            this.z = this.curve.one;
            this.t = this.curve.zero;
            this.zOne = true;
          } else {
            this.x = new BN(x, 16);
            this.y = new BN(y, 16);
            this.z = z ? new BN(z, 16) : this.curve.one;
            this.t = t && new BN(t, 16);
            if (!this.x.red) this.x = this.x.toRed(this.curve.red);
            if (!this.y.red) this.y = this.y.toRed(this.curve.red);
            if (!this.z.red) this.z = this.z.toRed(this.curve.red);
            if (this.t && !this.t.red) this.t = this.t.toRed(this.curve.red);
            this.zOne = this.z === this.curve.one;

            // Use extended coordinates
            if (this.curve.extended && !this.t) {
              this.t = this.x.redMul(this.y);
              if (!this.zOne) this.t = this.t.redMul(this.z.redInvm());
            }
          }
        }
        inherits(Point, Base.BasePoint);

        EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
          return Point.fromJSON(this, obj);
        };

        EdwardsCurve.prototype.point = function point(x, y, z, t) {
          return new Point(this, x, y, z, t);
        };

        Point.fromJSON = function fromJSON(curve, obj) {
          return new Point(curve, obj[0], obj[1], obj[2]);
        };

        Point.prototype.inspect = function inspect() {
          if (this.isInfinity()) return "<EC Point Infinity>";
          return (
            "<EC Point x: " +
            this.x.fromRed().toString(16, 2) +
            " y: " +
            this.y.fromRed().toString(16, 2) +
            " z: " +
            this.z.fromRed().toString(16, 2) +
            ">"
          );
        };

        Point.prototype.isInfinity = function isInfinity() {
          // XXX This code assumes that zero is always zero in red
          return this.x.cmpn(0) === 0 && this.y.cmp(this.z) === 0;
        };

        Point.prototype._extDbl = function _extDbl() {
          // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
          //     #doubling-dbl-2008-hwcd
          // 4M + 4S

          // A = X1^2
          var a = this.x.redSqr();
          // B = Y1^2
          var b = this.y.redSqr();
          // C = 2 * Z1^2
          var c = this.z.redSqr();
          c = c.redIAdd(c);
          // D = a * A
          var d = this.curve._mulA(a);
          // E = (X1 + Y1)^2 - A - B
          var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
          // G = D + B
          var g = d.redAdd(b);
          // F = G - C
          var f = g.redSub(c);
          // H = D - B
          var h = d.redSub(b);
          // X3 = E * F
          var nx = e.redMul(f);
          // Y3 = G * H
          var ny = g.redMul(h);
          // T3 = E * H
          var nt = e.redMul(h);
          // Z3 = F * G
          var nz = f.redMul(g);
          return this.curve.point(nx, ny, nz, nt);
        };

        Point.prototype._projDbl = function _projDbl() {
          // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
          //     #doubling-dbl-2008-bbjlp
          //     #doubling-dbl-2007-bl
          // and others
          // Generally 3M + 4S or 2M + 4S

          // B = (X1 + Y1)^2
          var b = this.x.redAdd(this.y).redSqr();
          // C = X1^2
          var c = this.x.redSqr();
          // D = Y1^2
          var d = this.y.redSqr();

          var nx;
          var ny;
          var nz;
          if (this.curve.twisted) {
            // E = a * C
            var e = this.curve._mulA(c);
            // F = E + D
            var f = e.redAdd(d);
            if (this.zOne) {
              // X3 = (B - C - D) * (F - 2)
              nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
              // Y3 = F * (E - D)
              ny = f.redMul(e.redSub(d));
              // Z3 = F^2 - 2 * F
              nz = f.redSqr().redSub(f).redSub(f);
            } else {
              // H = Z1^2
              var h = this.z.redSqr();
              // J = F - 2 * H
              var j = f.redSub(h).redISub(h);
              // X3 = (B-C-D)*J
              nx = b.redSub(c).redISub(d).redMul(j);
              // Y3 = F * (E - D)
              ny = f.redMul(e.redSub(d));
              // Z3 = F * J
              nz = f.redMul(j);
            }
          } else {
            // E = C + D
            var e = c.redAdd(d);
            // H = (c * Z1)^2
            var h = this.curve._mulC(this.c.redMul(this.z)).redSqr();
            // J = E - 2 * H
            var j = e.redSub(h).redSub(h);
            // X3 = c * (B - E) * J
            nx = this.curve._mulC(b.redISub(e)).redMul(j);
            // Y3 = c * E * (C - D)
            ny = this.curve._mulC(e).redMul(c.redISub(d));
            // Z3 = E * J
            nz = e.redMul(j);
          }
          return this.curve.point(nx, ny, nz);
        };

        Point.prototype.dbl = function dbl() {
          if (this.isInfinity()) return this;

          // Double in extended coordinates
          if (this.curve.extended) return this._extDbl();
          else return this._projDbl();
        };

        Point.prototype._extAdd = function _extAdd(p) {
          // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
          //     #addition-add-2008-hwcd-3
          // 8M

          // A = (Y1 - X1) * (Y2 - X2)
          var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
          // B = (Y1 + X1) * (Y2 + X2)
          var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
          // C = T1 * k * T2
          var c = this.t.redMul(this.curve.dd).redMul(p.t);
          // D = Z1 * 2 * Z2
          var d = this.z.redMul(p.z.redAdd(p.z));
          // E = B - A
          var e = b.redSub(a);
          // F = D - C
          var f = d.redSub(c);
          // G = D + C
          var g = d.redAdd(c);
          // H = B + A
          var h = b.redAdd(a);
          // X3 = E * F
          var nx = e.redMul(f);
          // Y3 = G * H
          var ny = g.redMul(h);
          // T3 = E * H
          var nt = e.redMul(h);
          // Z3 = F * G
          var nz = f.redMul(g);
          return this.curve.point(nx, ny, nz, nt);
        };

        Point.prototype._projAdd = function _projAdd(p) {
          // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
          //     #addition-add-2008-bbjlp
          //     #addition-add-2007-bl
          // 10M + 1S

          // A = Z1 * Z2
          var a = this.z.redMul(p.z);
          // B = A^2
          var b = a.redSqr();
          // C = X1 * X2
          var c = this.x.redMul(p.x);
          // D = Y1 * Y2
          var d = this.y.redMul(p.y);
          // E = d * C * D
          var e = this.curve.d.redMul(c).redMul(d);
          // F = B - E
          var f = b.redSub(e);
          // G = B + E
          var g = b.redAdd(e);
          // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
          var tmp = this.x
            .redAdd(this.y)
            .redMul(p.x.redAdd(p.y))
            .redISub(c)
            .redISub(d);
          var nx = a.redMul(f).redMul(tmp);
          var ny;
          var nz;
          if (this.curve.twisted) {
            // Y3 = A * G * (D - a * C)
            ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
            // Z3 = F * G
            nz = f.redMul(g);
          } else {
            // Y3 = A * G * (D - C)
            ny = a.redMul(g).redMul(d.redSub(c));
            // Z3 = c * F * G
            nz = this.curve._mulC(f).redMul(g);
          }
          return this.curve.point(nx, ny, nz);
        };

        Point.prototype.add = function add(p) {
          if (this.isInfinity()) return p;
          if (p.isInfinity()) return this;

          if (this.curve.extended) return this._extAdd(p);
          else return this._projAdd(p);
        };

        Point.prototype.mul = function mul(k) {
          if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);
          else return this.curve._wnafMul(this, k);
        };

        Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
          return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, false);
        };

        Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
          return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, true);
        };

        Point.prototype.normalize = function normalize() {
          if (this.zOne) return this;

          // Normalize coordinates
          var zi = this.z.redInvm();
          this.x = this.x.redMul(zi);
          this.y = this.y.redMul(zi);
          if (this.t) this.t = this.t.redMul(zi);
          this.z = this.curve.one;
          this.zOne = true;
          return this;
        };

        Point.prototype.neg = function neg() {
          return this.curve.point(
            this.x.redNeg(),
            this.y,
            this.z,
            this.t && this.t.redNeg()
          );
        };

        Point.prototype.getX = function getX() {
          this.normalize();
          return this.x.fromRed();
        };

        Point.prototype.getY = function getY() {
          this.normalize();
          return this.y.fromRed();
        };

        Point.prototype.eq = function eq(other) {
          return (
            this === other ||
            (this.getX().cmp(other.getX()) === 0 &&
              this.getY().cmp(other.getY()) === 0)
          );
        };

        Point.prototype.eqXToP = function eqXToP(x) {
          var rx = x.toRed(this.curve.red).redMul(this.z);
          if (this.x.cmp(rx) === 0) return true;

          var xc = x.clone();
          var t = this.curve.redN.redMul(this.z);
          for (;;) {
            xc.iadd(this.curve.n);
            if (xc.cmp(this.curve.p) >= 0) return false;

            rx.redIAdd(t);
            if (this.x.cmp(rx) === 0) return true;
          }
          return false;
        };

        // Compatibility with BaseCurve
        Point.prototype.toP = Point.prototype.normalize;
        Point.prototype.mixedAdd = Point.prototype.add;

        /***/
      },
      /* 186 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var curves = exports;

        var hash = __webpack_require__(61);
        var elliptic = __webpack_require__(5);

        var assert = elliptic.utils.assert;

        function PresetCurve(options) {
          if (options.type === "short")
            this.curve = new elliptic.curve.short(options);
          else if (options.type === "edwards")
            this.curve = new elliptic.curve.edwards(options);
          else this.curve = new elliptic.curve.mont(options);
          this.g = this.curve.g;
          this.n = this.curve.n;
          this.hash = options.hash;

          assert(this.g.validate(), "Invalid curve");
          assert(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
        }
        curves.PresetCurve = PresetCurve;

        function defineCurve(name, options) {
          Object.defineProperty(curves, name, {
            configurable: true,
            enumerable: true,
            get: function() {
              var curve = new PresetCurve(options);
              Object.defineProperty(curves, name, {
                configurable: true,
                enumerable: true,
                value: curve
              });
              return curve;
            }
          });
        }

        defineCurve("p192", {
          type: "short",
          prime: "p192",
          p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
          a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
          b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
          n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
          hash: hash.sha256,
          gRed: false,
          g: [
            "188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012",
            "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"
          ]
        });

        defineCurve("p224", {
          type: "short",
          prime: "p224",
          p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
          a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
          b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
          n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
          hash: hash.sha256,
          gRed: false,
          g: [
            "b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21",
            "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"
          ]
        });

        defineCurve("p256", {
          type: "short",
          prime: null,
          p:
            "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
          a:
            "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
          b:
            "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
          n:
            "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
          hash: hash.sha256,
          gRed: false,
          g: [
            "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296",
            "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"
          ]
        });

        defineCurve("p384", {
          type: "short",
          prime: null,
          p:
            "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff " +
            "fffffffe ffffffff 00000000 00000000 ffffffff",
          a:
            "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff " +
            "fffffffe ffffffff 00000000 00000000 fffffffc",
          b:
            "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f " +
            "5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
          n:
            "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 " +
            "f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
          hash: hash.sha384,
          gRed: false,
          g: [
            "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 " +
              "5502f25d bf55296c 3a545e38 72760ab7",
            "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 " +
              "0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"
          ]
        });

        defineCurve("p521", {
          type: "short",
          prime: null,
          p:
            "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff " +
            "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff " +
            "ffffffff ffffffff ffffffff ffffffff ffffffff",
          a:
            "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff " +
            "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff " +
            "ffffffff ffffffff ffffffff ffffffff fffffffc",
          b:
            "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b " +
            "99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd " +
            "3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
          n:
            "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff " +
            "ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 " +
            "f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
          hash: hash.sha512,
          gRed: false,
          g: [
            "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 " +
              "053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 " +
              "a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
            "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 " +
              "579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 " +
              "3fad0761 353c7086 a272c240 88be9476 9fd16650"
          ]
        });

        defineCurve("curve25519", {
          type: "mont",
          prime: "p25519",
          p:
            "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
          a: "76d06",
          b: "1",
          n:
            "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
          hash: hash.sha256,
          gRed: false,
          g: ["9"]
        });

        defineCurve("ed25519", {
          type: "edwards",
          prime: "p25519",
          p:
            "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
          a: "-1",
          c: "1",
          // -121665 * (121666^(-1)) (mod P)
          d:
            "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
          n:
            "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
          hash: hash.sha256,
          gRed: false,
          g: [
            "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a",

            // 4/5
            "6666666666666666666666666666666666666666666666666666666666666658"
          ]
        });

        var pre;
        try {
          pre = __webpack_require__(193);
        } catch (e) {
          pre = undefined;
        }

        defineCurve("secp256k1", {
          type: "short",
          prime: "k256",
          p:
            "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
          a: "0",
          b: "7",
          n:
            "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
          h: "1",
          hash: hash.sha256,

          // Precomputed endomorphism
          beta:
            "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
          lambda:
            "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
          basis: [
            {
              a: "3086d221a7d46bcde86c90e49284eb15",
              b: "-e4437ed6010e88286f547fa90abfe4c3"
            },
            {
              a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
              b: "3086d221a7d46bcde86c90e49284eb15"
            }
          ],

          gRed: false,
          g: [
            "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
            "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",
            pre
          ]
        });

        /***/
      },
      /* 187 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        exports.sha1 = __webpack_require__(188);
        exports.sha224 = __webpack_require__(189);
        exports.sha256 = __webpack_require__(109);
        exports.sha384 = __webpack_require__(190);
        exports.sha512 = __webpack_require__(110);

        /***/
      },
      /* 188 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var utils = __webpack_require__(10);
        var common = __webpack_require__(27);
        var shaCommon = __webpack_require__(108);

        var rotl32 = utils.rotl32;
        var sum32 = utils.sum32;
        var sum32_5 = utils.sum32_5;
        var ft_1 = shaCommon.ft_1;
        var BlockHash = common.BlockHash;

        var sha1_K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];

        function SHA1() {
          if (!(this instanceof SHA1)) return new SHA1();

          BlockHash.call(this);
          this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];
          this.W = new Array(80);
        }

        utils.inherits(SHA1, BlockHash);
        module.exports = SHA1;

        SHA1.blockSize = 512;
        SHA1.outSize = 160;
        SHA1.hmacStrength = 80;
        SHA1.padLength = 64;

        SHA1.prototype._update = function _update(msg, start) {
          var W = this.W;

          for (var i = 0; i < 16; i++) W[i] = msg[start + i];

          for (; i < W.length; i++)
            W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

          var a = this.h[0];
          var b = this.h[1];
          var c = this.h[2];
          var d = this.h[3];
          var e = this.h[4];

          for (i = 0; i < W.length; i++) {
            var s = ~~(i / 20);
            var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
            e = d;
            d = c;
            c = rotl32(b, 30);
            b = a;
            a = t;
          }

          this.h[0] = sum32(this.h[0], a);
          this.h[1] = sum32(this.h[1], b);
          this.h[2] = sum32(this.h[2], c);
          this.h[3] = sum32(this.h[3], d);
          this.h[4] = sum32(this.h[4], e);
        };

        SHA1.prototype._digest = function digest(enc) {
          if (enc === "hex") return utils.toHex32(this.h, "big");
          else return utils.split32(this.h, "big");
        };

        /***/
      },
      /* 189 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var utils = __webpack_require__(10);
        var SHA256 = __webpack_require__(109);

        function SHA224() {
          if (!(this instanceof SHA224)) return new SHA224();

          SHA256.call(this);
          this.h = [
            0xc1059ed8,
            0x367cd507,
            0x3070dd17,
            0xf70e5939,
            0xffc00b31,
            0x68581511,
            0x64f98fa7,
            0xbefa4fa4
          ];
        }
        utils.inherits(SHA224, SHA256);
        module.exports = SHA224;

        SHA224.blockSize = 512;
        SHA224.outSize = 224;
        SHA224.hmacStrength = 192;
        SHA224.padLength = 64;

        SHA224.prototype._digest = function digest(enc) {
          // Just truncate output
          if (enc === "hex") return utils.toHex32(this.h.slice(0, 7), "big");
          else return utils.split32(this.h.slice(0, 7), "big");
        };

        /***/
      },
      /* 190 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var utils = __webpack_require__(10);

        var SHA512 = __webpack_require__(110);

        function SHA384() {
          if (!(this instanceof SHA384)) return new SHA384();

          SHA512.call(this);
          this.h = [
            0xcbbb9d5d,
            0xc1059ed8,
            0x629a292a,
            0x367cd507,
            0x9159015a,
            0x3070dd17,
            0x152fecd8,
            0xf70e5939,
            0x67332667,
            0xffc00b31,
            0x8eb44a87,
            0x68581511,
            0xdb0c2e0d,
            0x64f98fa7,
            0x47b5481d,
            0xbefa4fa4
          ];
        }
        utils.inherits(SHA384, SHA512);
        module.exports = SHA384;

        SHA384.blockSize = 1024;
        SHA384.outSize = 384;
        SHA384.hmacStrength = 192;
        SHA384.padLength = 128;

        SHA384.prototype._digest = function digest(enc) {
          if (enc === "hex") return utils.toHex32(this.h.slice(0, 12), "big");
          else return utils.split32(this.h.slice(0, 12), "big");
        };

        /***/
      },
      /* 191 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var utils = __webpack_require__(10);
        var common = __webpack_require__(27);

        var rotl32 = utils.rotl32;
        var sum32 = utils.sum32;
        var sum32_3 = utils.sum32_3;
        var sum32_4 = utils.sum32_4;
        var BlockHash = common.BlockHash;

        function RIPEMD160() {
          if (!(this instanceof RIPEMD160)) return new RIPEMD160();

          BlockHash.call(this);

          this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];
          this.endian = "little";
        }
        utils.inherits(RIPEMD160, BlockHash);
        exports.ripemd160 = RIPEMD160;

        RIPEMD160.blockSize = 512;
        RIPEMD160.outSize = 160;
        RIPEMD160.hmacStrength = 192;
        RIPEMD160.padLength = 64;

        RIPEMD160.prototype._update = function update(msg, start) {
          var A = this.h[0];
          var B = this.h[1];
          var C = this.h[2];
          var D = this.h[3];
          var E = this.h[4];
          var Ah = A;
          var Bh = B;
          var Ch = C;
          var Dh = D;
          var Eh = E;
          for (var j = 0; j < 80; j++) {
            var T = sum32(
              rotl32(sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)), s[j]),
              E
            );
            A = E;
            E = D;
            D = rotl32(C, 10);
            C = B;
            B = T;
            T = sum32(
              rotl32(
                sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
                sh[j]
              ),
              Eh
            );
            Ah = Eh;
            Eh = Dh;
            Dh = rotl32(Ch, 10);
            Ch = Bh;
            Bh = T;
          }
          T = sum32_3(this.h[1], C, Dh);
          this.h[1] = sum32_3(this.h[2], D, Eh);
          this.h[2] = sum32_3(this.h[3], E, Ah);
          this.h[3] = sum32_3(this.h[4], A, Bh);
          this.h[4] = sum32_3(this.h[0], B, Ch);
          this.h[0] = T;
        };

        RIPEMD160.prototype._digest = function digest(enc) {
          if (enc === "hex") return utils.toHex32(this.h, "little");
          else return utils.split32(this.h, "little");
        };

        function f(j, x, y, z) {
          if (j <= 15) return x ^ y ^ z;
          else if (j <= 31) return (x & y) | (~x & z);
          else if (j <= 47) return (x | ~y) ^ z;
          else if (j <= 63) return (x & z) | (y & ~z);
          else return x ^ (y | ~z);
        }

        function K(j) {
          if (j <= 15) return 0x00000000;
          else if (j <= 31) return 0x5a827999;
          else if (j <= 47) return 0x6ed9eba1;
          else if (j <= 63) return 0x8f1bbcdc;
          else return 0xa953fd4e;
        }

        function Kh(j) {
          if (j <= 15) return 0x50a28be6;
          else if (j <= 31) return 0x5c4dd124;
          else if (j <= 47) return 0x6d703ef3;
          else if (j <= 63) return 0x7a6d76e9;
          else return 0x00000000;
        }

        var r = [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          7,
          4,
          13,
          1,
          10,
          6,
          15,
          3,
          12,
          0,
          9,
          5,
          2,
          14,
          11,
          8,
          3,
          10,
          14,
          4,
          9,
          15,
          8,
          1,
          2,
          7,
          0,
          6,
          13,
          11,
          5,
          12,
          1,
          9,
          11,
          10,
          0,
          8,
          12,
          4,
          13,
          3,
          7,
          15,
          14,
          5,
          6,
          2,
          4,
          0,
          5,
          9,
          7,
          12,
          2,
          10,
          14,
          1,
          3,
          8,
          11,
          6,
          15,
          13
        ];

        var rh = [
          5,
          14,
          7,
          0,
          9,
          2,
          11,
          4,
          13,
          6,
          15,
          8,
          1,
          10,
          3,
          12,
          6,
          11,
          3,
          7,
          0,
          13,
          5,
          10,
          14,
          15,
          8,
          12,
          4,
          9,
          1,
          2,
          15,
          5,
          1,
          3,
          7,
          14,
          6,
          9,
          11,
          8,
          12,
          2,
          10,
          0,
          4,
          13,
          8,
          6,
          4,
          1,
          3,
          11,
          15,
          0,
          5,
          12,
          2,
          13,
          9,
          7,
          10,
          14,
          12,
          15,
          10,
          4,
          1,
          5,
          8,
          7,
          6,
          2,
          13,
          14,
          0,
          3,
          9,
          11
        ];

        var s = [
          11,
          14,
          15,
          12,
          5,
          8,
          7,
          9,
          11,
          13,
          14,
          15,
          6,
          7,
          9,
          8,
          7,
          6,
          8,
          13,
          11,
          9,
          7,
          15,
          7,
          12,
          15,
          9,
          11,
          7,
          13,
          12,
          11,
          13,
          6,
          7,
          14,
          9,
          13,
          15,
          14,
          8,
          13,
          6,
          5,
          12,
          7,
          5,
          11,
          12,
          14,
          15,
          14,
          15,
          9,
          8,
          9,
          14,
          5,
          6,
          8,
          6,
          5,
          12,
          9,
          15,
          5,
          11,
          6,
          8,
          13,
          12,
          5,
          12,
          13,
          14,
          11,
          8,
          5,
          6
        ];

        var sh = [
          8,
          9,
          9,
          11,
          13,
          15,
          15,
          5,
          7,
          7,
          8,
          11,
          14,
          14,
          12,
          6,
          9,
          13,
          15,
          7,
          12,
          8,
          9,
          11,
          7,
          7,
          12,
          7,
          6,
          15,
          13,
          11,
          9,
          7,
          15,
          11,
          8,
          6,
          6,
          14,
          12,
          13,
          5,
          14,
          13,
          13,
          7,
          5,
          15,
          5,
          8,
          11,
          14,
          14,
          6,
          14,
          6,
          9,
          12,
          9,
          12,
          5,
          15,
          8,
          8,
          5,
          12,
          9,
          12,
          5,
          14,
          6,
          8,
          13,
          6,
          5,
          15,
          13,
          11,
          11
        ];

        /***/
      },
      /* 192 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var utils = __webpack_require__(10);
        var assert = __webpack_require__(7);

        function Hmac(hash, key, enc) {
          if (!(this instanceof Hmac)) return new Hmac(hash, key, enc);
          this.Hash = hash;
          this.blockSize = hash.blockSize / 8;
          this.outSize = hash.outSize / 8;
          this.inner = null;
          this.outer = null;

          this._init(utils.toArray(key, enc));
        }
        module.exports = Hmac;

        Hmac.prototype._init = function init(key) {
          // Shorten key, if needed
          if (key.length > this.blockSize)
            key = new this.Hash().update(key).digest();
          assert(key.length <= this.blockSize);

          // Add padding to key
          for (var i = key.length; i < this.blockSize; i++) key.push(0);

          for (i = 0; i < key.length; i++) key[i] ^= 0x36;
          this.inner = new this.Hash().update(key);

          // 0x36 ^ 0x5c = 0x6a
          for (i = 0; i < key.length; i++) key[i] ^= 0x6a;
          this.outer = new this.Hash().update(key);
        };

        Hmac.prototype.update = function update(msg, enc) {
          this.inner.update(msg, enc);
          return this;
        };

        Hmac.prototype.digest = function digest(enc) {
          this.outer.update(this.inner.digest());
          return this.outer.digest(enc);
        };

        /***/
      },
      /* 193 */
      /***/ function(module, exports) {
        module.exports = {
          doubles: {
            step: 4,
            points: [
              [
                "e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a",
                "f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"
              ],
              [
                "8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508",
                "11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"
              ],
              [
                "175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739",
                "d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"
              ],
              [
                "363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640",
                "4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"
              ],
              [
                "8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c",
                "4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"
              ],
              [
                "723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda",
                "96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"
              ],
              [
                "eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa",
                "5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"
              ],
              [
                "100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0",
                "cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"
              ],
              [
                "e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d",
                "9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"
              ],
              [
                "feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d",
                "e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"
              ],
              [
                "da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1",
                "9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"
              ],
              [
                "53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0",
                "5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"
              ],
              [
                "8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047",
                "10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"
              ],
              [
                "385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862",
                "283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"
              ],
              [
                "6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7",
                "7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"
              ],
              [
                "3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd",
                "56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"
              ],
              [
                "85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83",
                "7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"
              ],
              [
                "948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a",
                "53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"
              ],
              [
                "6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8",
                "bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"
              ],
              [
                "e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d",
                "4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"
              ],
              [
                "e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725",
                "7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"
              ],
              [
                "213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754",
                "4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"
              ],
              [
                "4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c",
                "17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"
              ],
              [
                "fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6",
                "6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"
              ],
              [
                "76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39",
                "c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"
              ],
              [
                "c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891",
                "893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"
              ],
              [
                "d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b",
                "febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"
              ],
              [
                "b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03",
                "2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"
              ],
              [
                "e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d",
                "eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"
              ],
              [
                "a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070",
                "7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"
              ],
              [
                "90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4",
                "e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"
              ],
              [
                "8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da",
                "662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"
              ],
              [
                "e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11",
                "1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"
              ],
              [
                "8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e",
                "efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"
              ],
              [
                "e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41",
                "2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"
              ],
              [
                "b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef",
                "67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"
              ],
              [
                "d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8",
                "db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"
              ],
              [
                "324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d",
                "648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"
              ],
              [
                "4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96",
                "35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"
              ],
              [
                "9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd",
                "ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"
              ],
              [
                "6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5",
                "9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"
              ],
              [
                "a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266",
                "40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"
              ],
              [
                "7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71",
                "34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"
              ],
              [
                "928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac",
                "c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"
              ],
              [
                "85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751",
                "1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"
              ],
              [
                "ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e",
                "493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"
              ],
              [
                "827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241",
                "c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"
              ],
              [
                "eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3",
                "be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"
              ],
              [
                "e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f",
                "4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"
              ],
              [
                "1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19",
                "aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"
              ],
              [
                "146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be",
                "b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"
              ],
              [
                "fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9",
                "6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"
              ],
              [
                "da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2",
                "8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"
              ],
              [
                "a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13",
                "7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"
              ],
              [
                "174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c",
                "ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"
              ],
              [
                "959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba",
                "2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"
              ],
              [
                "d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151",
                "e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"
              ],
              [
                "64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073",
                "d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"
              ],
              [
                "8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458",
                "38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"
              ],
              [
                "13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b",
                "69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"
              ],
              [
                "bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366",
                "d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"
              ],
              [
                "8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa",
                "40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"
              ],
              [
                "8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0",
                "620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"
              ],
              [
                "dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787",
                "7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"
              ],
              [
                "f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e",
                "ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"
              ]
            ]
          },
          naf: {
            wnd: 7,
            points: [
              [
                "f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9",
                "388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"
              ],
              [
                "2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4",
                "d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"
              ],
              [
                "5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc",
                "6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"
              ],
              [
                "acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe",
                "cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"
              ],
              [
                "774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb",
                "d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"
              ],
              [
                "f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8",
                "ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"
              ],
              [
                "d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e",
                "581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"
              ],
              [
                "defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34",
                "4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"
              ],
              [
                "2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c",
                "85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"
              ],
              [
                "352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5",
                "321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"
              ],
              [
                "2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f",
                "2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"
              ],
              [
                "9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714",
                "73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"
              ],
              [
                "daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729",
                "a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"
              ],
              [
                "c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db",
                "2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"
              ],
              [
                "6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4",
                "e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"
              ],
              [
                "1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5",
                "b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"
              ],
              [
                "605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479",
                "2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"
              ],
              [
                "62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d",
                "80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"
              ],
              [
                "80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f",
                "1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"
              ],
              [
                "7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb",
                "d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"
              ],
              [
                "d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9",
                "eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"
              ],
              [
                "49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963",
                "758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"
              ],
              [
                "77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74",
                "958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"
              ],
              [
                "f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530",
                "e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"
              ],
              [
                "463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b",
                "5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"
              ],
              [
                "f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247",
                "cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"
              ],
              [
                "caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1",
                "cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"
              ],
              [
                "2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120",
                "4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"
              ],
              [
                "7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435",
                "91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"
              ],
              [
                "754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18",
                "673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"
              ],
              [
                "e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8",
                "59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"
              ],
              [
                "186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb",
                "3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"
              ],
              [
                "df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f",
                "55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"
              ],
              [
                "5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143",
                "efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"
              ],
              [
                "290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba",
                "e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"
              ],
              [
                "af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45",
                "f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"
              ],
              [
                "766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a",
                "744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"
              ],
              [
                "59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e",
                "c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"
              ],
              [
                "f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8",
                "e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"
              ],
              [
                "7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c",
                "30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"
              ],
              [
                "948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519",
                "e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"
              ],
              [
                "7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab",
                "100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"
              ],
              [
                "3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca",
                "ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"
              ],
              [
                "d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf",
                "8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"
              ],
              [
                "1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610",
                "68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"
              ],
              [
                "733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4",
                "f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"
              ],
              [
                "15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c",
                "d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"
              ],
              [
                "a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940",
                "edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"
              ],
              [
                "e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980",
                "a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"
              ],
              [
                "311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3",
                "66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"
              ],
              [
                "34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf",
                "9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"
              ],
              [
                "f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63",
                "4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"
              ],
              [
                "d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448",
                "fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"
              ],
              [
                "32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf",
                "5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"
              ],
              [
                "7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5",
                "8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"
              ],
              [
                "ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6",
                "8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"
              ],
              [
                "16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5",
                "5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"
              ],
              [
                "eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99",
                "f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"
              ],
              [
                "78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51",
                "f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"
              ],
              [
                "494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5",
                "42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"
              ],
              [
                "a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5",
                "204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"
              ],
              [
                "c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997",
                "4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"
              ],
              [
                "841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881",
                "73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"
              ],
              [
                "5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5",
                "39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"
              ],
              [
                "36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66",
                "d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"
              ],
              [
                "336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726",
                "ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"
              ],
              [
                "8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede",
                "6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"
              ],
              [
                "1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94",
                "60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"
              ],
              [
                "85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31",
                "3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"
              ],
              [
                "29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51",
                "b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"
              ],
              [
                "a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252",
                "ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"
              ],
              [
                "4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5",
                "cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"
              ],
              [
                "d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b",
                "6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"
              ],
              [
                "ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4",
                "322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"
              ],
              [
                "af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f",
                "6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"
              ],
              [
                "e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889",
                "2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"
              ],
              [
                "591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246",
                "b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"
              ],
              [
                "11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984",
                "998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"
              ],
              [
                "3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a",
                "b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"
              ],
              [
                "cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030",
                "bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"
              ],
              [
                "c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197",
                "6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"
              ],
              [
                "c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593",
                "c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"
              ],
              [
                "a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef",
                "21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"
              ],
              [
                "347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38",
                "60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"
              ],
              [
                "da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a",
                "49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"
              ],
              [
                "c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111",
                "5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"
              ],
              [
                "4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502",
                "7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"
              ],
              [
                "3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea",
                "be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"
              ],
              [
                "cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26",
                "8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"
              ],
              [
                "b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986",
                "39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"
              ],
              [
                "d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e",
                "62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"
              ],
              [
                "48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4",
                "25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"
              ],
              [
                "dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda",
                "ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"
              ],
              [
                "6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859",
                "cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"
              ],
              [
                "e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f",
                "f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"
              ],
              [
                "eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c",
                "6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"
              ],
              [
                "13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942",
                "fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"
              ],
              [
                "ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a",
                "1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"
              ],
              [
                "b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80",
                "5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"
              ],
              [
                "ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d",
                "438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"
              ],
              [
                "8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1",
                "cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"
              ],
              [
                "52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63",
                "c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"
              ],
              [
                "e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352",
                "6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"
              ],
              [
                "7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193",
                "ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"
              ],
              [
                "5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00",
                "9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"
              ],
              [
                "32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58",
                "ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"
              ],
              [
                "e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7",
                "d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"
              ],
              [
                "8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8",
                "c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"
              ],
              [
                "4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e",
                "67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"
              ],
              [
                "3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d",
                "cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"
              ],
              [
                "674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b",
                "299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"
              ],
              [
                "d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f",
                "f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"
              ],
              [
                "30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6",
                "462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"
              ],
              [
                "be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297",
                "62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"
              ],
              [
                "93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a",
                "7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"
              ],
              [
                "b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c",
                "ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"
              ],
              [
                "d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52",
                "4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"
              ],
              [
                "d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb",
                "bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"
              ],
              [
                "463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065",
                "bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"
              ],
              [
                "7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917",
                "603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"
              ],
              [
                "74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9",
                "cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"
              ],
              [
                "30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3",
                "553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"
              ],
              [
                "9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57",
                "712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"
              ],
              [
                "176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66",
                "ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"
              ],
              [
                "75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8",
                "9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"
              ],
              [
                "809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721",
                "9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"
              ],
              [
                "1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180",
                "4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"
              ]
            ]
          }
        };

        /***/
      },
      /* 194 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var BN = __webpack_require__(4);
        var HmacDRBG = __webpack_require__(195);
        var elliptic = __webpack_require__(5);
        var utils = elliptic.utils;
        var assert = utils.assert;

        var KeyPair = __webpack_require__(196);
        var Signature = __webpack_require__(197);

        function EC(options) {
          if (!(this instanceof EC)) return new EC(options);

          // Shortcut `elliptic.ec(curve-name)`
          if (typeof options === "string") {
            assert(
              elliptic.curves.hasOwnProperty(options),
              "Unknown curve " + options
            );

            options = elliptic.curves[options];
          }

          // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
          if (options instanceof elliptic.curves.PresetCurve)
            options = { curve: options };

          this.curve = options.curve.curve;
          this.n = this.curve.n;
          this.nh = this.n.ushrn(1);
          this.g = this.curve.g;

          // Point on curve
          this.g = options.curve.g;
          this.g.precompute(options.curve.n.bitLength() + 1);

          // Hash for function for DRBG
          this.hash = options.hash || options.curve.hash;
        }
        module.exports = EC;

        EC.prototype.keyPair = function keyPair(options) {
          return new KeyPair(this, options);
        };

        EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
          return KeyPair.fromPrivate(this, priv, enc);
        };

        EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
          return KeyPair.fromPublic(this, pub, enc);
        };

        EC.prototype.genKeyPair = function genKeyPair(options) {
          if (!options) options = {};

          // Instantiate Hmac_DRBG
          var drbg = new HmacDRBG({
            hash: this.hash,
            pers: options.pers,
            persEnc: options.persEnc || "utf8",
            entropy: options.entropy || elliptic.rand(this.hash.hmacStrength),
            entropyEnc: (options.entropy && options.entropyEnc) || "utf8",
            nonce: this.n.toArray()
          });

          var bytes = this.n.byteLength();
          var ns2 = this.n.sub(new BN(2));
          do {
            var priv = new BN(drbg.generate(bytes));
            if (priv.cmp(ns2) > 0) continue;

            priv.iaddn(1);
            return this.keyFromPrivate(priv);
          } while (true);
        };

        EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
          var delta = msg.byteLength() * 8 - this.n.bitLength();
          if (delta > 0) msg = msg.ushrn(delta);
          if (!truncOnly && msg.cmp(this.n) >= 0) return msg.sub(this.n);
          else return msg;
        };

        EC.prototype.sign = function sign(msg, key, enc, options) {
          if (typeof enc === "object") {
            options = enc;
            enc = null;
          }
          if (!options) options = {};

          key = this.keyFromPrivate(key, enc);
          msg = this._truncateToN(new BN(msg, 16));

          // Zero-extend key to provide enough entropy
          var bytes = this.n.byteLength();
          var bkey = key.getPrivate().toArray("be", bytes);

          // Zero-extend nonce to have the same byte size as N
          var nonce = msg.toArray("be", bytes);

          // Instantiate Hmac_DRBG
          var drbg = new HmacDRBG({
            hash: this.hash,
            entropy: bkey,
            nonce: nonce,
            pers: options.pers,
            persEnc: options.persEnc || "utf8"
          });

          // Number of bytes to generate
          var ns1 = this.n.sub(new BN(1));

          for (var iter = 0; true; iter++) {
            var k = options.k
              ? options.k(iter)
              : new BN(drbg.generate(this.n.byteLength()));
            k = this._truncateToN(k, true);
            if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0) continue;

            var kp = this.g.mul(k);
            if (kp.isInfinity()) continue;

            var kpX = kp.getX();
            var r = kpX.umod(this.n);
            if (r.cmpn(0) === 0) continue;

            var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
            s = s.umod(this.n);
            if (s.cmpn(0) === 0) continue;

            var recoveryParam =
              (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0);

            // Use complement of `s`, if it is > `n / 2`
            if (options.canonical && s.cmp(this.nh) > 0) {
              s = this.n.sub(s);
              recoveryParam ^= 1;
            }

            return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
          }
        };

        EC.prototype.verify = function verify(msg, signature, key, enc) {
          msg = this._truncateToN(new BN(msg, 16));
          key = this.keyFromPublic(key, enc);
          signature = new Signature(signature, "hex");

          // Perform primitive values validation
          var r = signature.r;
          var s = signature.s;
          if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0) return false;
          if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0) return false;

          // Validate signature
          var sinv = s.invm(this.n);
          var u1 = sinv.mul(msg).umod(this.n);
          var u2 = sinv.mul(r).umod(this.n);

          if (!this.curve._maxwellTrick) {
            var p = this.g.mulAdd(u1, key.getPublic(), u2);
            if (p.isInfinity()) return false;

            return p.getX().umod(this.n).cmp(r) === 0;
          }

          // NOTE: Greg Maxwell's trick, inspired by:
          // https://git.io/vad3K

          var p = this.g.jmulAdd(u1, key.getPublic(), u2);
          if (p.isInfinity()) return false;

          // Compare `p.x` of Jacobian point with `r`,
          // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
          // inverse of `p.z^2`
          return p.eqXToP(r);
        };

        EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
          assert((3 & j) === j, "The recovery param is more than two bits");
          signature = new Signature(signature, enc);

          var n = this.n;
          var e = new BN(msg);
          var r = signature.r;
          var s = signature.s;

          // A set LSB signifies that the y-coordinate is odd
          var isYOdd = j & 1;
          var isSecondKey = j >> 1;
          if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
            throw new Error("Unable to find sencond key candinate");

          // 1.1. Let x = r + jn.
          if (isSecondKey)
            r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
          else r = this.curve.pointFromX(r, isYOdd);

          var rInv = signature.r.invm(n);
          var s1 = n.sub(e).mul(rInv).umod(n);
          var s2 = s.mul(rInv).umod(n);

          // 1.6.1 Compute Q = r^-1 (sR -  eG)
          //               Q = r^-1 (sR + -eG)
          return this.g.mulAdd(s1, r, s2);
        };

        EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
          signature = new Signature(signature, enc);
          if (signature.recoveryParam !== null) return signature.recoveryParam;

          for (var i = 0; i < 4; i++) {
            var Qprime;
            try {
              Qprime = this.recoverPubKey(e, signature, i);
            } catch (e) {
              continue;
            }

            if (Qprime.eq(Q)) return i;
          }
          throw new Error("Unable to find valid recovery factor");
        };

        /***/
      },
      /* 195 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var hash = __webpack_require__(61);
        var utils = __webpack_require__(107);
        var assert = __webpack_require__(7);

        function HmacDRBG(options) {
          if (!(this instanceof HmacDRBG)) return new HmacDRBG(options);
          this.hash = options.hash;
          this.predResist = !!options.predResist;

          this.outLen = this.hash.outSize;
          this.minEntropy = options.minEntropy || this.hash.hmacStrength;

          this._reseed = null;
          this.reseedInterval = null;
          this.K = null;
          this.V = null;

          var entropy = utils.toArray(
            options.entropy,
            options.entropyEnc || "hex"
          );
          var nonce = utils.toArray(options.nonce, options.nonceEnc || "hex");
          var pers = utils.toArray(options.pers, options.persEnc || "hex");
          assert(
            entropy.length >= this.minEntropy / 8,
            "Not enough entropy. Minimum is: " + this.minEntropy + " bits"
          );
          this._init(entropy, nonce, pers);
        }
        module.exports = HmacDRBG;

        HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
          var seed = entropy.concat(nonce).concat(pers);

          this.K = new Array(this.outLen / 8);
          this.V = new Array(this.outLen / 8);
          for (var i = 0; i < this.V.length; i++) {
            this.K[i] = 0x00;
            this.V[i] = 0x01;
          }

          this._update(seed);
          this._reseed = 1;
          this.reseedInterval = 0x1000000000000; // 2^48
        };

        HmacDRBG.prototype._hmac = function hmac() {
          return new hash.hmac(this.hash, this.K);
        };

        HmacDRBG.prototype._update = function update(seed) {
          var kmac = this._hmac().update(this.V).update([0x00]);
          if (seed) kmac = kmac.update(seed);
          this.K = kmac.digest();
          this.V = this._hmac().update(this.V).digest();
          if (!seed) return;

          this.K = this._hmac()
            .update(this.V)
            .update([0x01])
            .update(seed)
            .digest();
          this.V = this._hmac().update(this.V).digest();
        };

        HmacDRBG.prototype.reseed = function reseed(
          entropy,
          entropyEnc,
          add,
          addEnc
        ) {
          // Optional entropy enc
          if (typeof entropyEnc !== "string") {
            addEnc = add;
            add = entropyEnc;
            entropyEnc = null;
          }

          entropy = utils.toArray(entropy, entropyEnc);
          add = utils.toArray(add, addEnc);

          assert(
            entropy.length >= this.minEntropy / 8,
            "Not enough entropy. Minimum is: " + this.minEntropy + " bits"
          );

          this._update(entropy.concat(add || []));
          this._reseed = 1;
        };

        HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
          if (this._reseed > this.reseedInterval)
            throw new Error("Reseed is required");

          // Optional encoding
          if (typeof enc !== "string") {
            addEnc = add;
            add = enc;
            enc = null;
          }

          // Optional additional data
          if (add) {
            add = utils.toArray(add, addEnc || "hex");
            this._update(add);
          }

          var temp = [];
          while (temp.length < len) {
            this.V = this._hmac().update(this.V).digest();
            temp = temp.concat(this.V);
          }

          var res = temp.slice(0, len);
          this._update(add);
          this._reseed++;
          return utils.encode(res, enc);
        };

        /***/
      },
      /* 196 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var BN = __webpack_require__(4);
        var elliptic = __webpack_require__(5);
        var utils = elliptic.utils;
        var assert = utils.assert;

        function KeyPair(ec, options) {
          this.ec = ec;
          this.priv = null;
          this.pub = null;

          // KeyPair(ec, { priv: ..., pub: ... })
          if (options.priv) this._importPrivate(options.priv, options.privEnc);
          if (options.pub) this._importPublic(options.pub, options.pubEnc);
        }
        module.exports = KeyPair;

        KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
          if (pub instanceof KeyPair) return pub;

          return new KeyPair(ec, {
            pub: pub,
            pubEnc: enc
          });
        };

        KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
          if (priv instanceof KeyPair) return priv;

          return new KeyPair(ec, {
            priv: priv,
            privEnc: enc
          });
        };

        KeyPair.prototype.validate = function validate() {
          var pub = this.getPublic();

          if (pub.isInfinity())
            return { result: false, reason: "Invalid public key" };
          if (!pub.validate())
            return { result: false, reason: "Public key is not a point" };
          if (!pub.mul(this.ec.curve.n).isInfinity())
            return { result: false, reason: "Public key * N != O" };

          return { result: true, reason: null };
        };

        KeyPair.prototype.getPublic = function getPublic(compact, enc) {
          // compact is optional argument
          if (typeof compact === "string") {
            enc = compact;
            compact = null;
          }

          if (!this.pub) this.pub = this.ec.g.mul(this.priv);

          if (!enc) return this.pub;

          return this.pub.encode(enc, compact);
        };

        KeyPair.prototype.getPrivate = function getPrivate(enc) {
          if (enc === "hex") return this.priv.toString(16, 2);
          else return this.priv;
        };

        KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
          this.priv = new BN(key, enc || 16);

          // Ensure that the priv won't be bigger than n, otherwise we may fail
          // in fixed multiplication method
          this.priv = this.priv.umod(this.ec.curve.n);
        };

        KeyPair.prototype._importPublic = function _importPublic(key, enc) {
          if (key.x || key.y) {
            // Montgomery points only have an `x` coordinate.
            // Weierstrass/Edwards points on the other hand have both `x` and
            // `y` coordinates.
            if (this.ec.curve.type === "mont") {
              assert(key.x, "Need x coordinate");
            } else if (
              this.ec.curve.type === "short" ||
              this.ec.curve.type === "edwards"
            ) {
              assert(key.x && key.y, "Need both x and y coordinate");
            }
            this.pub = this.ec.curve.point(key.x, key.y);
            return;
          }
          this.pub = this.ec.curve.decodePoint(key, enc);
        };

        // ECDH
        KeyPair.prototype.derive = function derive(pub) {
          return pub.mul(this.priv).getX();
        };

        // ECDSA
        KeyPair.prototype.sign = function sign(msg, enc, options) {
          return this.ec.sign(msg, this, enc, options);
        };

        KeyPair.prototype.verify = function verify(msg, signature) {
          return this.ec.verify(msg, signature, this);
        };

        KeyPair.prototype.inspect = function inspect() {
          return (
            "<Key priv: " +
            (this.priv && this.priv.toString(16, 2)) +
            " pub: " +
            (this.pub && this.pub.inspect()) +
            " >"
          );
        };

        /***/
      },
      /* 197 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var BN = __webpack_require__(4);

        var elliptic = __webpack_require__(5);
        var utils = elliptic.utils;
        var assert = utils.assert;

        function Signature(options, enc) {
          if (options instanceof Signature) return options;

          if (this._importDER(options, enc)) return;

          assert(options.r && options.s, "Signature without r or s");
          this.r = new BN(options.r, 16);
          this.s = new BN(options.s, 16);
          if (options.recoveryParam === undefined) this.recoveryParam = null;
          else this.recoveryParam = options.recoveryParam;
        }
        module.exports = Signature;

        function Position() {
          this.place = 0;
        }

        function getLength(buf, p) {
          var initial = buf[p.place++];
          if (!(initial & 0x80)) {
            return initial;
          }
          var octetLen = initial & 0xf;
          var val = 0;
          for (var i = 0, off = p.place; i < octetLen; i++, off++) {
            val <<= 8;
            val |= buf[off];
          }
          p.place = off;
          return val;
        }

        function rmPadding(buf) {
          var i = 0;
          var len = buf.length - 1;
          while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
            i++;
          }
          if (i === 0) {
            return buf;
          }
          return buf.slice(i);
        }

        Signature.prototype._importDER = function _importDER(data, enc) {
          data = utils.toArray(data, enc);
          var p = new Position();
          if (data[p.place++] !== 0x30) {
            return false;
          }
          var len = getLength(data, p);
          if (len + p.place !== data.length) {
            return false;
          }
          if (data[p.place++] !== 0x02) {
            return false;
          }
          var rlen = getLength(data, p);
          var r = data.slice(p.place, rlen + p.place);
          p.place += rlen;
          if (data[p.place++] !== 0x02) {
            return false;
          }
          var slen = getLength(data, p);
          if (data.length !== slen + p.place) {
            return false;
          }
          var s = data.slice(p.place, slen + p.place);
          if (r[0] === 0 && r[1] & 0x80) {
            r = r.slice(1);
          }
          if (s[0] === 0 && s[1] & 0x80) {
            s = s.slice(1);
          }

          this.r = new BN(r);
          this.s = new BN(s);
          this.recoveryParam = null;

          return true;
        };

        function constructLength(arr, len) {
          if (len < 0x80) {
            arr.push(len);
            return;
          }
          var octets = 1 + ((Math.log(len) / Math.LN2) >>> 3);
          arr.push(octets | 0x80);
          while (--octets) {
            arr.push((len >>> (octets << 3)) & 0xff);
          }
          arr.push(len);
        }

        Signature.prototype.toDER = function toDER(enc) {
          var r = this.r.toArray();
          var s = this.s.toArray();

          // Pad values
          if (r[0] & 0x80) r = [0].concat(r);
          // Pad values
          if (s[0] & 0x80) s = [0].concat(s);

          r = rmPadding(r);
          s = rmPadding(s);

          while (!s[0] && !(s[1] & 0x80)) {
            s = s.slice(1);
          }
          var arr = [0x02];
          constructLength(arr, r.length);
          arr = arr.concat(r);
          arr.push(0x02);
          constructLength(arr, s.length);
          var backHalf = arr.concat(s);
          var res = [0x30];
          constructLength(res, backHalf.length);
          res = res.concat(backHalf);
          return utils.encode(res, enc);
        };

        /***/
      },
      /* 198 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var hash = __webpack_require__(61);
        var elliptic = __webpack_require__(5);
        var utils = elliptic.utils;
        var assert = utils.assert;
        var parseBytes = utils.parseBytes;
        var KeyPair = __webpack_require__(199);
        var Signature = __webpack_require__(200);

        function EDDSA(curve) {
          assert(curve === "ed25519", "only tested with ed25519 so far");

          if (!(this instanceof EDDSA)) return new EDDSA(curve);

          var curve = elliptic.curves[curve].curve;
          this.curve = curve;
          this.g = curve.g;
          this.g.precompute(curve.n.bitLength() + 1);

          this.pointClass = curve.point().constructor;
          this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
          this.hash = hash.sha512;
        }

        module.exports = EDDSA;

        /**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/
        EDDSA.prototype.sign = function sign(message, secret) {
          message = parseBytes(message);
          var key = this.keyFromSecret(secret);
          var r = this.hashInt(key.messagePrefix(), message);
          var R = this.g.mul(r);
          var Rencoded = this.encodePoint(R);
          var s_ = this.hashInt(Rencoded, key.pubBytes(), message).mul(
            key.priv()
          );
          var S = r.add(s_).umod(this.curve.n);
          return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
        };

        /**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/
        EDDSA.prototype.verify = function verify(message, sig, pub) {
          message = parseBytes(message);
          sig = this.makeSignature(sig);
          var key = this.keyFromPublic(pub);
          var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
          var SG = this.g.mul(sig.S());
          var RplusAh = sig.R().add(key.pub().mul(h));
          return RplusAh.eq(SG);
        };

        EDDSA.prototype.hashInt = function hashInt() {
          var hash = this.hash();
          for (var i = 0; i < arguments.length; i++) hash.update(arguments[i]);
          return utils.intFromLE(hash.digest()).umod(this.curve.n);
        };

        EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
          return KeyPair.fromPublic(this, pub);
        };

        EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
          return KeyPair.fromSecret(this, secret);
        };

        EDDSA.prototype.makeSignature = function makeSignature(sig) {
          if (sig instanceof Signature) return sig;
          return new Signature(this, sig);
        };

        /**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/
        EDDSA.prototype.encodePoint = function encodePoint(point) {
          var enc = point.getY().toArray("le", this.encodingLength);
          enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
          return enc;
        };

        EDDSA.prototype.decodePoint = function decodePoint(bytes) {
          bytes = utils.parseBytes(bytes);

          var lastIx = bytes.length - 1;
          var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
          var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

          var y = utils.intFromLE(normed);
          return this.curve.pointFromY(y, xIsOdd);
        };

        EDDSA.prototype.encodeInt = function encodeInt(num) {
          return num.toArray("le", this.encodingLength);
        };

        EDDSA.prototype.decodeInt = function decodeInt(bytes) {
          return utils.intFromLE(bytes);
        };

        EDDSA.prototype.isPoint = function isPoint(val) {
          return val instanceof this.pointClass;
        };

        /***/
      },
      /* 199 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var elliptic = __webpack_require__(5);
        var utils = elliptic.utils;
        var assert = utils.assert;
        var parseBytes = utils.parseBytes;
        var cachedProperty = utils.cachedProperty;

        /**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/
        function KeyPair(eddsa, params) {
          this.eddsa = eddsa;
          this._secret = parseBytes(params.secret);
          if (eddsa.isPoint(params.pub)) this._pub = params.pub;
          else this._pubBytes = parseBytes(params.pub);
        }

        KeyPair.fromPublic = function fromPublic(eddsa, pub) {
          if (pub instanceof KeyPair) return pub;
          return new KeyPair(eddsa, { pub: pub });
        };

        KeyPair.fromSecret = function fromSecret(eddsa, secret) {
          if (secret instanceof KeyPair) return secret;
          return new KeyPair(eddsa, { secret: secret });
        };

        KeyPair.prototype.secret = function secret() {
          return this._secret;
        };

        cachedProperty(KeyPair, "pubBytes", function pubBytes() {
          return this.eddsa.encodePoint(this.pub());
        });

        cachedProperty(KeyPair, "pub", function pub() {
          if (this._pubBytes) return this.eddsa.decodePoint(this._pubBytes);
          return this.eddsa.g.mul(this.priv());
        });

        cachedProperty(KeyPair, "privBytes", function privBytes() {
          var eddsa = this.eddsa;
          var hash = this.hash();
          var lastIx = eddsa.encodingLength - 1;

          var a = hash.slice(0, eddsa.encodingLength);
          a[0] &= 248;
          a[lastIx] &= 127;
          a[lastIx] |= 64;

          return a;
        });

        cachedProperty(KeyPair, "priv", function priv() {
          return this.eddsa.decodeInt(this.privBytes());
        });

        cachedProperty(KeyPair, "hash", function hash() {
          return this.eddsa.hash().update(this.secret()).digest();
        });

        cachedProperty(KeyPair, "messagePrefix", function messagePrefix() {
          return this.hash().slice(this.eddsa.encodingLength);
        });

        KeyPair.prototype.sign = function sign(message) {
          assert(this._secret, "KeyPair can only verify");
          return this.eddsa.sign(message, this);
        };

        KeyPair.prototype.verify = function verify(message, sig) {
          return this.eddsa.verify(message, sig, this);
        };

        KeyPair.prototype.getSecret = function getSecret(enc) {
          assert(this._secret, "KeyPair is public only");
          return utils.encode(this.secret(), enc);
        };

        KeyPair.prototype.getPublic = function getPublic(enc) {
          return utils.encode(this.pubBytes(), enc);
        };

        module.exports = KeyPair;

        /***/
      },
      /* 200 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var BN = __webpack_require__(4);
        var elliptic = __webpack_require__(5);
        var utils = elliptic.utils;
        var assert = utils.assert;
        var cachedProperty = utils.cachedProperty;
        var parseBytes = utils.parseBytes;

        /**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/
        function Signature(eddsa, sig) {
          this.eddsa = eddsa;

          if (typeof sig !== "object") sig = parseBytes(sig);

          if (Array.isArray(sig)) {
            sig = {
              R: sig.slice(0, eddsa.encodingLength),
              S: sig.slice(eddsa.encodingLength)
            };
          }

          assert(sig.R && sig.S, "Signature without R or S");

          if (eddsa.isPoint(sig.R)) this._R = sig.R;
          if (sig.S instanceof BN) this._S = sig.S;

          this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
          this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
        }

        cachedProperty(Signature, "S", function S() {
          return this.eddsa.decodeInt(this.Sencoded());
        });

        cachedProperty(Signature, "R", function R() {
          return this.eddsa.decodePoint(this.Rencoded());
        });

        cachedProperty(Signature, "Rencoded", function Rencoded() {
          return this.eddsa.encodePoint(this.R());
        });

        cachedProperty(Signature, "Sencoded", function Sencoded() {
          return this.eddsa.encodeInt(this.S());
        });

        Signature.prototype.toBytes = function toBytes() {
          return this.Rencoded().concat(this.Sencoded());
        };

        Signature.prototype.toHex = function toHex() {
          return utils.encode(this.toBytes(), "hex").toUpperCase();
        };

        module.exports = Signature;

        /***/
      },
      /* 201 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";
        // from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
        // Fedor, you are amazing.

        var asn1 = __webpack_require__(28);

        exports.certificate = __webpack_require__(212);

        var RSAPrivateKey = asn1.define("RSAPrivateKey", function() {
          this.seq().obj(
            this.key("version").int(),
            this.key("modulus").int(),
            this.key("publicExponent").int(),
            this.key("privateExponent").int(),
            this.key("prime1").int(),
            this.key("prime2").int(),
            this.key("exponent1").int(),
            this.key("exponent2").int(),
            this.key("coefficient").int()
          );
        });
        exports.RSAPrivateKey = RSAPrivateKey;

        var RSAPublicKey = asn1.define("RSAPublicKey", function() {
          this.seq().obj(
            this.key("modulus").int(),
            this.key("publicExponent").int()
          );
        });
        exports.RSAPublicKey = RSAPublicKey;

        var PublicKey = asn1.define("SubjectPublicKeyInfo", function() {
          this.seq().obj(
            this.key("algorithm").use(AlgorithmIdentifier),
            this.key("subjectPublicKey").bitstr()
          );
        });
        exports.PublicKey = PublicKey;

        var AlgorithmIdentifier = asn1.define(
          "AlgorithmIdentifier",
          function() {
            this.seq().obj(
              this.key("algorithm").objid(),
              this.key("none").null_().optional(),
              this.key("curve").objid().optional(),
              this.key("params")
                .seq()
                .obj(
                  this.key("p").int(),
                  this.key("q").int(),
                  this.key("g").int()
                )
                .optional()
            );
          }
        );

        var PrivateKeyInfo = asn1.define("PrivateKeyInfo", function() {
          this.seq().obj(
            this.key("version").int(),
            this.key("algorithm").use(AlgorithmIdentifier),
            this.key("subjectPrivateKey").octstr()
          );
        });
        exports.PrivateKey = PrivateKeyInfo;
        var EncryptedPrivateKeyInfo = asn1.define(
          "EncryptedPrivateKeyInfo",
          function() {
            this.seq().obj(
              this.key("algorithm")
                .seq()
                .obj(
                  this.key("id").objid(),
                  this.key("decrypt")
                    .seq()
                    .obj(
                      this.key("kde")
                        .seq()
                        .obj(
                          this.key("id").objid(),
                          this.key("kdeparams")
                            .seq()
                            .obj(
                              this.key("salt").octstr(),
                              this.key("iters").int()
                            )
                        ),
                      this.key("cipher")
                        .seq()
                        .obj(this.key("algo").objid(), this.key("iv").octstr())
                    )
                ),
              this.key("subjectPrivateKey").octstr()
            );
          }
        );

        exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo;

        var DSAPrivateKey = asn1.define("DSAPrivateKey", function() {
          this.seq().obj(
            this.key("version").int(),
            this.key("p").int(),
            this.key("q").int(),
            this.key("g").int(),
            this.key("pub_key").int(),
            this.key("priv_key").int()
          );
        });
        exports.DSAPrivateKey = DSAPrivateKey;

        exports.DSAparam = asn1.define("DSAparam", function() {
          this.int();
        });

        var ECPrivateKey = asn1.define("ECPrivateKey", function() {
          this.seq().obj(
            this.key("version").int(),
            this.key("privateKey").octstr(),
            this.key("parameters").optional().explicit(0).use(ECParameters),
            this.key("publicKey").optional().explicit(1).bitstr()
          );
        });
        exports.ECPrivateKey = ECPrivateKey;

        var ECParameters = asn1.define("ECParameters", function() {
          this.choice({
            namedCurve: this.objid()
          });
        });

        exports.signature = asn1.define("signature", function() {
          this.seq().obj(this.key("r").int(), this.key("s").int());
        });

        /***/
      },
      /* 202 */
      /***/ function(module, exports, __webpack_require__) {
        var asn1 = __webpack_require__(28);
        var inherits = __webpack_require__(2);

        var api = exports;

        api.define = function define(name, body) {
          return new Entity(name, body);
        };

        function Entity(name, body) {
          this.name = name;
          this.body = body;

          this.decoders = {};
          this.encoders = {};
        }

        Entity.prototype._createNamed = function createNamed(base) {
          var named;
          try {
            named = __webpack_require__(203).runInThisContext(
              "(function " +
                this.name +
                "(entity) {\n" +
                "  this._initNamed(entity);\n" +
                "})"
            );
          } catch (e) {
            named = function(entity) {
              this._initNamed(entity);
            };
          }
          inherits(named, base);
          named.prototype._initNamed = function initnamed(entity) {
            base.call(this, entity);
          };

          return new named(this);
        };

        Entity.prototype._getDecoder = function _getDecoder(enc) {
          enc = enc || "der";
          // Lazily create decoder
          if (!this.decoders.hasOwnProperty(enc))
            this.decoders[enc] = this._createNamed(asn1.decoders[enc]);
          return this.decoders[enc];
        };

        Entity.prototype.decode = function decode(data, enc, options) {
          return this._getDecoder(enc).decode(data, options);
        };

        Entity.prototype._getEncoder = function _getEncoder(enc) {
          enc = enc || "der";
          // Lazily create encoder
          if (!this.encoders.hasOwnProperty(enc))
            this.encoders[enc] = this._createNamed(asn1.encoders[enc]);
          return this.encoders[enc];
        };

        Entity.prototype.encode = function encode(
          data,
          enc,
          /* internal */ reporter
        ) {
          return this._getEncoder(enc).encode(data, reporter);
        };

        /***/
      },
      /* 203 */
      /***/ function(module, exports, __webpack_require__) {
        var indexOf = __webpack_require__(204);

        var Object_keys = function(obj) {
          if (Object.keys) return Object.keys(obj);
          else {
            var res = [];
            for (var key in obj) res.push(key);
            return res;
          }
        };

        var forEach = function(xs, fn) {
          if (xs.forEach) return xs.forEach(fn);
          else
            for (var i = 0; i < xs.length; i++) {
              fn(xs[i], i, xs);
            }
        };

        var defineProp = (function() {
          try {
            Object.defineProperty({}, "_", {});
            return function(obj, name, value) {
              Object.defineProperty(obj, name, {
                writable: true,
                enumerable: false,
                configurable: true,
                value: value
              });
            };
          } catch (e) {
            return function(obj, name, value) {
              obj[name] = value;
            };
          }
        })();

        var globals = [
          "Array",
          "Boolean",
          "Date",
          "Error",
          "EvalError",
          "Function",
          "Infinity",
          "JSON",
          "Math",
          "NaN",
          "Number",
          "Object",
          "RangeError",
          "ReferenceError",
          "RegExp",
          "String",
          "SyntaxError",
          "TypeError",
          "URIError",
          "decodeURI",
          "decodeURIComponent",
          "encodeURI",
          "encodeURIComponent",
          "escape",
          "eval",
          "isFinite",
          "isNaN",
          "parseFloat",
          "parseInt",
          "undefined",
          "unescape"
        ];

        function Context() {}
        Context.prototype = {};

        var Script = (exports.Script = function NodeScript(code) {
          if (!(this instanceof Script)) return new Script(code);
          this.code = code;
        });

        Script.prototype.runInContext = function(context) {
          if (!(context instanceof Context)) {
            throw new TypeError("needs a 'context' argument.");
          }

          var iframe = document.createElement("iframe");
          if (!iframe.style) iframe.style = {};
          iframe.style.display = "none";

          document.body.appendChild(iframe);

          var win = iframe.contentWindow;
          var wEval = win.eval,
            wExecScript = win.execScript;

          if (!wEval && wExecScript) {
            // win.eval() magically appears when this is called in IE:
            wExecScript.call(win, "null");
            wEval = win.eval;
          }

          forEach(Object_keys(context), function(key) {
            win[key] = context[key];
          });
          forEach(globals, function(key) {
            if (context[key]) {
              win[key] = context[key];
            }
          });

          var winKeys = Object_keys(win);

          var res = wEval.call(win, this.code);

          forEach(Object_keys(win), function(key) {
            // Avoid copying circular objects like `top` and `window` by only
            // updating existing context properties or new properties in the `win`
            // that was only introduced after the eval.
            if (key in context || indexOf(winKeys, key) === -1) {
              context[key] = win[key];
            }
          });

          forEach(globals, function(key) {
            if (!(key in context)) {
              defineProp(context, key, win[key]);
            }
          });

          document.body.removeChild(iframe);

          return res;
        };

        Script.prototype.runInThisContext = function() {
          return eval(this.code); // maybe...
        };

        Script.prototype.runInNewContext = function(context) {
          var ctx = Script.createContext(context);
          var res = this.runInContext(ctx);

          forEach(Object_keys(ctx), function(key) {
            context[key] = ctx[key];
          });

          return res;
        };

        forEach(Object_keys(Script.prototype), function(name) {
          exports[name] = Script[name] = function(code) {
            var s = Script(code);
            return s[name].apply(s, [].slice.call(arguments, 1));
          };
        });

        exports.createScript = function(code) {
          return exports.Script(code);
        };

        exports.createContext = Script.createContext = function(context) {
          var copy = new Context();
          if (typeof context === "object") {
            forEach(Object_keys(context), function(key) {
              copy[key] = context[key];
            });
          }
          return copy;
        };

        /***/
      },
      /* 204 */
      /***/ function(module, exports) {
        var indexOf = [].indexOf;

        module.exports = function(arr, obj) {
          if (indexOf) return arr.indexOf(obj);
          for (var i = 0; i < arr.length; ++i) {
            if (arr[i] === obj) return i;
          }
          return -1;
        };

        /***/
      },
      /* 205 */
      /***/ function(module, exports, __webpack_require__) {
        var inherits = __webpack_require__(2);

        function Reporter(options) {
          this._reporterState = {
            obj: null,
            path: [],
            options: options || {},
            errors: []
          };
        }
        exports.Reporter = Reporter;

        Reporter.prototype.isError = function isError(obj) {
          return obj instanceof ReporterError;
        };

        Reporter.prototype.save = function save() {
          var state = this._reporterState;

          return { obj: state.obj, pathLen: state.path.length };
        };

        Reporter.prototype.restore = function restore(data) {
          var state = this._reporterState;

          state.obj = data.obj;
          state.path = state.path.slice(0, data.pathLen);
        };

        Reporter.prototype.enterKey = function enterKey(key) {
          return this._reporterState.path.push(key);
        };

        Reporter.prototype.exitKey = function exitKey(index) {
          var state = this._reporterState;

          state.path = state.path.slice(0, index - 1);
        };

        Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
          var state = this._reporterState;

          this.exitKey(index);
          if (state.obj !== null) state.obj[key] = value;
        };

        Reporter.prototype.path = function path() {
          return this._reporterState.path.join("/");
        };

        Reporter.prototype.enterObject = function enterObject() {
          var state = this._reporterState;

          var prev = state.obj;
          state.obj = {};
          return prev;
        };

        Reporter.prototype.leaveObject = function leaveObject(prev) {
          var state = this._reporterState;

          var now = state.obj;
          state.obj = prev;
          return now;
        };

        Reporter.prototype.error = function error(msg) {
          var err;
          var state = this._reporterState;

          var inherited = msg instanceof ReporterError;
          if (inherited) {
            err = msg;
          } else {
            err = new ReporterError(
              state.path
                .map(function(elem) {
                  return "[" + JSON.stringify(elem) + "]";
                })
                .join(""),
              msg.message || msg,
              msg.stack
            );
          }

          if (!state.options.partial) throw err;

          if (!inherited) state.errors.push(err);

          return err;
        };

        Reporter.prototype.wrapResult = function wrapResult(result) {
          var state = this._reporterState;
          if (!state.options.partial) return result;

          return {
            result: this.isError(result) ? null : result,
            errors: state.errors
          };
        };

        function ReporterError(path, msg) {
          this.path = path;
          this.rethrow(msg);
        }
        inherits(ReporterError, Error);

        ReporterError.prototype.rethrow = function rethrow(msg) {
          this.message = msg + " at: " + (this.path || "(shallow)");
          if (Error.captureStackTrace)
            Error.captureStackTrace(this, ReporterError);

          if (!this.stack) {
            try {
              // IE only adds stack when thrown
              throw new Error(this.message);
            } catch (e) {
              this.stack = e.stack;
            }
          }
          return this;
        };

        /***/
      },
      /* 206 */
      /***/ function(module, exports, __webpack_require__) {
        var Reporter = __webpack_require__(29).Reporter;
        var EncoderBuffer = __webpack_require__(29).EncoderBuffer;
        var DecoderBuffer = __webpack_require__(29).DecoderBuffer;
        var assert = __webpack_require__(7);

        // Supported tags
        var tags = [
          "seq",
          "seqof",
          "set",
          "setof",
          "objid",
          "bool",
          "gentime",
          "utctime",
          "null_",
          "enum",
          "int",
          "objDesc",
          "bitstr",
          "bmpstr",
          "charstr",
          "genstr",
          "graphstr",
          "ia5str",
          "iso646str",
          "numstr",
          "octstr",
          "printstr",
          "t61str",
          "unistr",
          "utf8str",
          "videostr"
        ];

        // Public methods list
        var methods = [
          "key",
          "obj",
          "use",
          "optional",
          "explicit",
          "implicit",
          "def",
          "choice",
          "any",
          "contains"
        ].concat(tags);

        // Overrided methods list
        var overrided = [
          "_peekTag",
          "_decodeTag",
          "_use",
          "_decodeStr",
          "_decodeObjid",
          "_decodeTime",
          "_decodeNull",
          "_decodeInt",
          "_decodeBool",
          "_decodeList",

          "_encodeComposite",
          "_encodeStr",
          "_encodeObjid",
          "_encodeTime",
          "_encodeNull",
          "_encodeInt",
          "_encodeBool"
        ];

        function Node(enc, parent) {
          var state = {};
          this._baseState = state;

          state.enc = enc;

          state.parent = parent || null;
          state.children = null;

          // State
          state.tag = null;
          state.args = null;
          state.reverseArgs = null;
          state.choice = null;
          state.optional = false;
          state.any = false;
          state.obj = false;
          state.use = null;
          state.useDecoder = null;
          state.key = null;
          state["default"] = null;
          state.explicit = null;
          state.implicit = null;
          state.contains = null;

          // Should create new instance on each method
          if (!state.parent) {
            state.children = [];
            this._wrap();
          }
        }
        module.exports = Node;

        var stateProps = [
          "enc",
          "parent",
          "children",
          "tag",
          "args",
          "reverseArgs",
          "choice",
          "optional",
          "any",
          "obj",
          "use",
          "alteredUse",
          "key",
          "default",
          "explicit",
          "implicit",
          "contains"
        ];

        Node.prototype.clone = function clone() {
          var state = this._baseState;
          var cstate = {};
          stateProps.forEach(function(prop) {
            cstate[prop] = state[prop];
          });
          var res = new this.constructor(cstate.parent);
          res._baseState = cstate;
          return res;
        };

        Node.prototype._wrap = function wrap() {
          var state = this._baseState;
          methods.forEach(function(method) {
            this[method] = function _wrappedMethod() {
              var clone = new this.constructor(this);
              state.children.push(clone);
              return clone[method].apply(clone, arguments);
            };
          }, this);
        };

        Node.prototype._init = function init(body) {
          var state = this._baseState;

          assert(state.parent === null);
          body.call(this);

          // Filter children
          state.children = state.children.filter(function(child) {
            return child._baseState.parent === this;
          }, this);
          assert.equal(
            state.children.length,
            1,
            "Root node can have only one child"
          );
        };

        Node.prototype._useArgs = function useArgs(args) {
          var state = this._baseState;

          // Filter children and args
          var children = args.filter(function(arg) {
            return arg instanceof this.constructor;
          }, this);
          args = args.filter(function(arg) {
            return !(arg instanceof this.constructor);
          }, this);

          if (children.length !== 0) {
            assert(state.children === null);
            state.children = children;

            // Replace parent to maintain backward link
            children.forEach(function(child) {
              child._baseState.parent = this;
            }, this);
          }
          if (args.length !== 0) {
            assert(state.args === null);
            state.args = args;
            state.reverseArgs = args.map(function(arg) {
              if (typeof arg !== "object" || arg.constructor !== Object)
                return arg;

              var res = {};
              Object.keys(arg).forEach(function(key) {
                if (key == (key | 0)) key |= 0;
                var value = arg[key];
                res[value] = key;
              });
              return res;
            });
          }
        };

        //
        // Overrided methods
        //

        overrided.forEach(function(method) {
          Node.prototype[method] = function _overrided() {
            var state = this._baseState;
            throw new Error(
              method + " not implemented for encoding: " + state.enc
            );
          };
        });

        //
        // Public methods
        //

        tags.forEach(function(tag) {
          Node.prototype[tag] = function _tagMethod() {
            var state = this._baseState;
            var args = Array.prototype.slice.call(arguments);

            assert(state.tag === null);
            state.tag = tag;

            this._useArgs(args);

            return this;
          };
        });

        Node.prototype.use = function use(item) {
          assert(item);
          var state = this._baseState;

          assert(state.use === null);
          state.use = item;

          return this;
        };

        Node.prototype.optional = function optional() {
          var state = this._baseState;

          state.optional = true;

          return this;
        };

        Node.prototype.def = function def(val) {
          var state = this._baseState;

          assert(state["default"] === null);
          state["default"] = val;
          state.optional = true;

          return this;
        };

        Node.prototype.explicit = function explicit(num) {
          var state = this._baseState;

          assert(state.explicit === null && state.implicit === null);
          state.explicit = num;

          return this;
        };

        Node.prototype.implicit = function implicit(num) {
          var state = this._baseState;

          assert(state.explicit === null && state.implicit === null);
          state.implicit = num;

          return this;
        };

        Node.prototype.obj = function obj() {
          var state = this._baseState;
          var args = Array.prototype.slice.call(arguments);

          state.obj = true;

          if (args.length !== 0) this._useArgs(args);

          return this;
        };

        Node.prototype.key = function key(newKey) {
          var state = this._baseState;

          assert(state.key === null);
          state.key = newKey;

          return this;
        };

        Node.prototype.any = function any() {
          var state = this._baseState;

          state.any = true;

          return this;
        };

        Node.prototype.choice = function choice(obj) {
          var state = this._baseState;

          assert(state.choice === null);
          state.choice = obj;
          this._useArgs(
            Object.keys(obj).map(function(key) {
              return obj[key];
            })
          );

          return this;
        };

        Node.prototype.contains = function contains(item) {
          var state = this._baseState;

          assert(state.use === null);
          state.contains = item;

          return this;
        };

        //
        // Decoding
        //

        Node.prototype._decode = function decode(input, options) {
          var state = this._baseState;

          // Decode root node
          if (state.parent === null)
            return input.wrapResult(state.children[0]._decode(input, options));

          var result = state["default"];
          var present = true;

          var prevKey = null;
          if (state.key !== null) prevKey = input.enterKey(state.key);

          // Check if tag is there
          if (state.optional) {
            var tag = null;
            if (state.explicit !== null) tag = state.explicit;
            else if (state.implicit !== null) tag = state.implicit;
            else if (state.tag !== null) tag = state.tag;

            if (tag === null && !state.any) {
              // Trial and Error
              var save = input.save();
              try {
                if (state.choice === null)
                  this._decodeGeneric(state.tag, input, options);
                else this._decodeChoice(input, options);
                present = true;
              } catch (e) {
                present = false;
              }
              input.restore(save);
            } else {
              present = this._peekTag(input, tag, state.any);

              if (input.isError(present)) return present;
            }
          }

          // Push object on stack
          var prevObj;
          if (state.obj && present) prevObj = input.enterObject();

          if (present) {
            // Unwrap explicit values
            if (state.explicit !== null) {
              var explicit = this._decodeTag(input, state.explicit);
              if (input.isError(explicit)) return explicit;
              input = explicit;
            }

            var start = input.offset;

            // Unwrap implicit and normal values
            if (state.use === null && state.choice === null) {
              if (state.any) var save = input.save();
              var body = this._decodeTag(
                input,
                state.implicit !== null ? state.implicit : state.tag,
                state.any
              );
              if (input.isError(body)) return body;

              if (state.any) result = input.raw(save);
              else input = body;
            }

            if (options && options.track && state.tag !== null)
              options.track(input.path(), start, input.length, "tagged");

            if (options && options.track && state.tag !== null)
              options.track(
                input.path(),
                input.offset,
                input.length,
                "content"
              );

            // Select proper method for tag
            if (state.any) result = result;
            else if (state.choice === null)
              result = this._decodeGeneric(state.tag, input, options);
            else result = this._decodeChoice(input, options);

            if (input.isError(result)) return result;

            // Decode children
            if (
              !state.any &&
              state.choice === null &&
              state.children !== null
            ) {
              state.children.forEach(function decodeChildren(child) {
                // NOTE: We are ignoring errors here, to let parser continue with other
                // parts of encoded data
                child._decode(input, options);
              });
            }

            // Decode contained/encoded by schema, only in bit or octet strings
            if (
              state.contains &&
              (state.tag === "octstr" || state.tag === "bitstr")
            ) {
              var data = new DecoderBuffer(result);
              result = this._getUse(
                state.contains,
                input._reporterState.obj
              )._decode(data, options);
            }
          }

          // Pop object
          if (state.obj && present) result = input.leaveObject(prevObj);

          // Set key
          if (state.key !== null && (result !== null || present === true))
            input.leaveKey(prevKey, state.key, result);
          else if (prevKey !== null) input.exitKey(prevKey);

          return result;
        };

        Node.prototype._decodeGeneric = function decodeGeneric(
          tag,
          input,
          options
        ) {
          var state = this._baseState;

          if (tag === "seq" || tag === "set") return null;
          if (tag === "seqof" || tag === "setof")
            return this._decodeList(input, tag, state.args[0], options);
          else if (/str$/.test(tag))
            return this._decodeStr(input, tag, options);
          else if (tag === "objid" && state.args)
            return this._decodeObjid(
              input,
              state.args[0],
              state.args[1],
              options
            );
          else if (tag === "objid")
            return this._decodeObjid(input, null, null, options);
          else if (tag === "gentime" || tag === "utctime")
            return this._decodeTime(input, tag, options);
          else if (tag === "null_") return this._decodeNull(input, options);
          else if (tag === "bool") return this._decodeBool(input, options);
          else if (tag === "objDesc")
            return this._decodeStr(input, tag, options);
          else if (tag === "int" || tag === "enum")
            return this._decodeInt(input, state.args && state.args[0], options);

          if (state.use !== null) {
            return this._getUse(state.use, input._reporterState.obj)._decode(
              input,
              options
            );
          } else {
            return input.error("unknown tag: " + tag);
          }
        };

        Node.prototype._getUse = function _getUse(entity, obj) {
          var state = this._baseState;
          // Create altered use decoder if implicit is set
          state.useDecoder = this._use(entity, obj);
          assert(state.useDecoder._baseState.parent === null);
          state.useDecoder = state.useDecoder._baseState.children[0];
          if (state.implicit !== state.useDecoder._baseState.implicit) {
            state.useDecoder = state.useDecoder.clone();
            state.useDecoder._baseState.implicit = state.implicit;
          }
          return state.useDecoder;
        };

        Node.prototype._decodeChoice = function decodeChoice(input, options) {
          var state = this._baseState;
          var result = null;
          var match = false;

          Object.keys(state.choice).some(function(key) {
            var save = input.save();
            var node = state.choice[key];
            try {
              var value = node._decode(input, options);
              if (input.isError(value)) return false;

              result = { type: key, value: value };
              match = true;
            } catch (e) {
              input.restore(save);
              return false;
            }
            return true;
          }, this);

          if (!match) return input.error("Choice not matched");

          return result;
        };

        //
        // Encoding
        //

        Node.prototype._createEncoderBuffer = function createEncoderBuffer(
          data
        ) {
          return new EncoderBuffer(data, this.reporter);
        };

        Node.prototype._encode = function encode(data, reporter, parent) {
          var state = this._baseState;
          if (state["default"] !== null && state["default"] === data) return;

          var result = this._encodeValue(data, reporter, parent);
          if (result === undefined) return;

          if (this._skipDefault(result, reporter, parent)) return;

          return result;
        };

        Node.prototype._encodeValue = function encode(data, reporter, parent) {
          var state = this._baseState;

          // Decode root node
          if (state.parent === null)
            return state.children[0]._encode(data, reporter || new Reporter());

          var result = null;

          // Set reporter to share it with a child class
          this.reporter = reporter;

          // Check if data is there
          if (state.optional && data === undefined) {
            if (state["default"] !== null) data = state["default"];
            else return;
          }

          // Encode children first
          var content = null;
          var primitive = false;
          if (state.any) {
            // Anything that was given is translated to buffer
            result = this._createEncoderBuffer(data);
          } else if (state.choice) {
            result = this._encodeChoice(data, reporter);
          } else if (state.contains) {
            content = this._getUse(state.contains, parent)._encode(
              data,
              reporter
            );
            primitive = true;
          } else if (state.children) {
            content = state.children
              .map(function(child) {
                if (child._baseState.tag === "null_")
                  return child._encode(null, reporter, data);

                if (child._baseState.key === null)
                  return reporter.error("Child should have a key");
                var prevKey = reporter.enterKey(child._baseState.key);

                if (typeof data !== "object")
                  return reporter.error(
                    "Child expected, but input is not object"
                  );

                var res = child._encode(
                  data[child._baseState.key],
                  reporter,
                  data
                );
                reporter.leaveKey(prevKey);

                return res;
              }, this)
              .filter(function(child) {
                return child;
              });
            content = this._createEncoderBuffer(content);
          } else {
            if (state.tag === "seqof" || state.tag === "setof") {
              // TODO(indutny): this should be thrown on DSL level
              if (!(state.args && state.args.length === 1))
                return reporter.error("Too many args for : " + state.tag);

              if (!Array.isArray(data))
                return reporter.error("seqof/setof, but data is not Array");

              var child = this.clone();
              child._baseState.implicit = null;
              content = this._createEncoderBuffer(
                data.map(function(item) {
                  var state = this._baseState;

                  return this._getUse(state.args[0], data)._encode(
                    item,
                    reporter
                  );
                }, child)
              );
            } else if (state.use !== null) {
              result = this._getUse(state.use, parent)._encode(data, reporter);
            } else {
              content = this._encodePrimitive(state.tag, data);
              primitive = true;
            }
          }

          // Encode data itself
          var result;
          if (!state.any && state.choice === null) {
            var tag = state.implicit !== null ? state.implicit : state.tag;
            var cls = state.implicit === null ? "universal" : "context";

            if (tag === null) {
              if (state.use === null)
                reporter.error("Tag could be ommited only for .use()");
            } else {
              if (state.use === null)
                result = this._encodeComposite(tag, primitive, cls, content);
            }
          }

          // Wrap in explicit
          if (state.explicit !== null)
            result = this._encodeComposite(
              state.explicit,
              false,
              "context",
              result
            );

          return result;
        };

        Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
          var state = this._baseState;

          var node = state.choice[data.type];
          if (!node) {
            assert(
              false,
              data.type +
                " not found in " +
                JSON.stringify(Object.keys(state.choice))
            );
          }
          return node._encode(data.value, reporter);
        };

        Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
          var state = this._baseState;

          if (/str$/.test(tag)) return this._encodeStr(data, tag);
          else if (tag === "objid" && state.args)
            return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
          else if (tag === "objid") return this._encodeObjid(data, null, null);
          else if (tag === "gentime" || tag === "utctime")
            return this._encodeTime(data, tag);
          else if (tag === "null_") return this._encodeNull();
          else if (tag === "int" || tag === "enum")
            return this._encodeInt(data, state.args && state.reverseArgs[0]);
          else if (tag === "bool") return this._encodeBool(data);
          else if (tag === "objDesc") return this._encodeStr(data, tag);
          else throw new Error("Unsupported tag: " + tag);
        };

        Node.prototype._isNumstr = function isNumstr(str) {
          return /^[0-9 ]*$/.test(str);
        };

        Node.prototype._isPrintstr = function isPrintstr(str) {
          return /^[A-Za-z0-9 '\(\)\+,\-\.\/:=\?]*$/.test(str);
        };

        /***/
      },
      /* 207 */
      /***/ function(module, exports, __webpack_require__) {
        var constants = __webpack_require__(112);

        exports.tagClass = {
          0: "universal",
          1: "application",
          2: "context",
          3: "private"
        };
        exports.tagClassByName = constants._reverse(exports.tagClass);

        exports.tag = {
          0x00: "end",
          0x01: "bool",
          0x02: "int",
          0x03: "bitstr",
          0x04: "octstr",
          0x05: "null_",
          0x06: "objid",
          0x07: "objDesc",
          0x08: "external",
          0x09: "real",
          0x0a: "enum",
          0x0b: "embed",
          0x0c: "utf8str",
          0x0d: "relativeOid",
          0x10: "seq",
          0x11: "set",
          0x12: "numstr",
          0x13: "printstr",
          0x14: "t61str",
          0x15: "videostr",
          0x16: "ia5str",
          0x17: "utctime",
          0x18: "gentime",
          0x19: "graphstr",
          0x1a: "iso646str",
          0x1b: "genstr",
          0x1c: "unistr",
          0x1d: "charstr",
          0x1e: "bmpstr"
        };
        exports.tagByName = constants._reverse(exports.tag);

        /***/
      },
      /* 208 */
      /***/ function(module, exports, __webpack_require__) {
        var decoders = exports;

        decoders.der = __webpack_require__(113);
        decoders.pem = __webpack_require__(209);

        /***/
      },
      /* 209 */
      /***/ function(module, exports, __webpack_require__) {
        var inherits = __webpack_require__(2);
        var Buffer = __webpack_require__(0).Buffer;

        var DERDecoder = __webpack_require__(113);

        function PEMDecoder(entity) {
          DERDecoder.call(this, entity);
          this.enc = "pem";
        }
        inherits(PEMDecoder, DERDecoder);
        module.exports = PEMDecoder;

        PEMDecoder.prototype.decode = function decode(data, options) {
          var lines = data.toString().split(/[\r\n]+/g);

          var label = options.label.toUpperCase();

          var re = /^-----(BEGIN|END) ([^-]+)-----$/;
          var start = -1;
          var end = -1;
          for (var i = 0; i < lines.length; i++) {
            var match = lines[i].match(re);
            if (match === null) continue;

            if (match[2] !== label) continue;

            if (start === -1) {
              if (match[1] !== "BEGIN") break;
              start = i;
            } else {
              if (match[1] !== "END") break;
              end = i;
              break;
            }
          }
          if (start === -1 || end === -1)
            throw new Error("PEM section not found for: " + label);

          var base64 = lines.slice(start + 1, end).join("");
          // Remove excessive symbols
          base64.replace(/[^a-z0-9\+\/=]+/gi, "");

          var input = new Buffer(base64, "base64");
          return DERDecoder.prototype.decode.call(this, input, options);
        };

        /***/
      },
      /* 210 */
      /***/ function(module, exports, __webpack_require__) {
        var encoders = exports;

        encoders.der = __webpack_require__(114);
        encoders.pem = __webpack_require__(211);

        /***/
      },
      /* 211 */
      /***/ function(module, exports, __webpack_require__) {
        var inherits = __webpack_require__(2);

        var DEREncoder = __webpack_require__(114);

        function PEMEncoder(entity) {
          DEREncoder.call(this, entity);
          this.enc = "pem";
        }
        inherits(PEMEncoder, DEREncoder);
        module.exports = PEMEncoder;

        PEMEncoder.prototype.encode = function encode(data, options) {
          var buf = DEREncoder.prototype.encode.call(this, data);

          var p = buf.toString("base64");
          var out = ["-----BEGIN " + options.label + "-----"];
          for (var i = 0; i < p.length; i += 64) out.push(p.slice(i, i + 64));
          out.push("-----END " + options.label + "-----");
          return out.join("\n");
        };

        /***/
      },
      /* 212 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";
        // from https://github.com/Rantanen/node-dtls/blob/25a7dc861bda38cfeac93a723500eea4f0ac2e86/Certificate.js
        // thanks to @Rantanen

        var asn = __webpack_require__(28);

        var Time = asn.define("Time", function() {
          this.choice({
            utcTime: this.utctime(),
            generalTime: this.gentime()
          });
        });

        var AttributeTypeValue = asn.define("AttributeTypeValue", function() {
          this.seq().obj(this.key("type").objid(), this.key("value").any());
        });

        var AlgorithmIdentifier = asn.define("AlgorithmIdentifier", function() {
          this.seq().obj(
            this.key("algorithm").objid(),
            this.key("parameters").optional()
          );
        });

        var SubjectPublicKeyInfo = asn.define(
          "SubjectPublicKeyInfo",
          function() {
            this.seq().obj(
              this.key("algorithm").use(AlgorithmIdentifier),
              this.key("subjectPublicKey").bitstr()
            );
          }
        );

        var RelativeDistinguishedName = asn.define(
          "RelativeDistinguishedName",
          function() {
            this.setof(AttributeTypeValue);
          }
        );

        var RDNSequence = asn.define("RDNSequence", function() {
          this.seqof(RelativeDistinguishedName);
        });

        var Name = asn.define("Name", function() {
          this.choice({
            rdnSequence: this.use(RDNSequence)
          });
        });

        var Validity = asn.define("Validity", function() {
          this.seq().obj(
            this.key("notBefore").use(Time),
            this.key("notAfter").use(Time)
          );
        });

        var Extension = asn.define("Extension", function() {
          this.seq().obj(
            this.key("extnID").objid(),
            this.key("critical").bool().def(false),
            this.key("extnValue").octstr()
          );
        });

        var TBSCertificate = asn.define("TBSCertificate", function() {
          this.seq().obj(
            this.key("version").explicit(0).int(),
            this.key("serialNumber").int(),
            this.key("signature").use(AlgorithmIdentifier),
            this.key("issuer").use(Name),
            this.key("validity").use(Validity),
            this.key("subject").use(Name),
            this.key("subjectPublicKeyInfo").use(SubjectPublicKeyInfo),
            this.key("issuerUniqueID").implicit(1).bitstr().optional(),
            this.key("subjectUniqueID").implicit(2).bitstr().optional(),
            this.key("extensions").explicit(3).seqof(Extension).optional()
          );
        });

        var X509Certificate = asn.define("X509Certificate", function() {
          this.seq().obj(
            this.key("tbsCertificate").use(TBSCertificate),
            this.key("signatureAlgorithm").use(AlgorithmIdentifier),
            this.key("signatureValue").bitstr()
          );
        });

        module.exports = X509Certificate;

        /***/
      },
      /* 213 */
      /***/ function(module, exports) {
        module.exports = {
          "2.16.840.1.101.3.4.1.1": "aes-128-ecb",
          "2.16.840.1.101.3.4.1.2": "aes-128-cbc",
          "2.16.840.1.101.3.4.1.3": "aes-128-ofb",
          "2.16.840.1.101.3.4.1.4": "aes-128-cfb",
          "2.16.840.1.101.3.4.1.21": "aes-192-ecb",
          "2.16.840.1.101.3.4.1.22": "aes-192-cbc",
          "2.16.840.1.101.3.4.1.23": "aes-192-ofb",
          "2.16.840.1.101.3.4.1.24": "aes-192-cfb",
          "2.16.840.1.101.3.4.1.41": "aes-256-ecb",
          "2.16.840.1.101.3.4.1.42": "aes-256-cbc",
          "2.16.840.1.101.3.4.1.43": "aes-256-ofb",
          "2.16.840.1.101.3.4.1.44": "aes-256-cfb"
        };

        /***/
      },
      /* 214 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(Buffer) {
          // adapted from https://github.com/apatil/pemstrip
          var findProc = /Proc-Type: 4,ENCRYPTED\n\r?DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)\n\r?\n\r?([0-9A-z\n\r\+\/\=]+)\n\r?/m;
          var startRegex = /^-----BEGIN ((?:.* KEY)|CERTIFICATE)-----\n/m;
          var fullRegex = /^-----BEGIN ((?:.* KEY)|CERTIFICATE)-----\n\r?([0-9A-z\n\r\+\/\=]+)\n\r?-----END \1-----$/m;
          var evp = __webpack_require__(36);
          var ciphers = __webpack_require__(58);
          module.exports = function(okey, password) {
            var key = okey.toString();
            var match = key.match(findProc);
            var decrypted;
            if (!match) {
              var match2 = key.match(fullRegex);
              decrypted = new Buffer(match2[2].replace(/\r?\n/g, ""), "base64");
            } else {
              var suite = "aes" + match[1];
              var iv = new Buffer(match[2], "hex");
              var cipherText = new Buffer(
                match[3].replace(/\r?\n/g, ""),
                "base64"
              );
              var cipherKey = evp(
                password,
                iv.slice(0, 8),
                parseInt(match[1], 10)
              ).key;
              var out = [];
              var cipher = ciphers.createDecipheriv(suite, cipherKey, iv);
              out.push(cipher.update(cipherText));
              out.push(cipher.final());
              decrypted = Buffer.concat(out);
            }
            var tag = key.match(startRegex)[1];
            return {
              tag: tag,
              data: decrypted
            };
          };

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(0).Buffer));

        /***/
      },
      /* 215 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(Buffer) {
          // much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
          var BN = __webpack_require__(4);
          var EC = __webpack_require__(5).ec;
          var parseKeys = __webpack_require__(41);
          var curves = __webpack_require__(115);

          function verify(sig, hash, key, signType, tag) {
            var pub = parseKeys(key);
            if (pub.type === "ec") {
              // rsa keys can be interpreted as ecdsa ones in openssl
              if (signType !== "ecdsa" && signType !== "ecdsa/rsa")
                throw new Error("wrong public key type");
              return ecVerify(sig, hash, pub);
            } else if (pub.type === "dsa") {
              if (signType !== "dsa") throw new Error("wrong public key type");
              return dsaVerify(sig, hash, pub);
            } else {
              if (signType !== "rsa" && signType !== "ecdsa/rsa")
                throw new Error("wrong public key type");
            }
            hash = Buffer.concat([tag, hash]);
            var len = pub.modulus.byteLength();
            var pad = [1];
            var padNum = 0;
            while (hash.length + pad.length + 2 < len) {
              pad.push(0xff);
              padNum++;
            }
            pad.push(0x00);
            var i = -1;
            while (++i < hash.length) {
              pad.push(hash[i]);
            }
            pad = new Buffer(pad);
            var red = BN.mont(pub.modulus);
            sig = new BN(sig).toRed(red);

            sig = sig.redPow(new BN(pub.publicExponent));
            sig = new Buffer(sig.fromRed().toArray());
            var out = padNum < 8 ? 1 : 0;
            len = Math.min(sig.length, pad.length);
            if (sig.length !== pad.length) out = 1;

            i = -1;
            while (++i < len) out |= sig[i] ^ pad[i];
            return out === 0;
          }

          function ecVerify(sig, hash, pub) {
            var curveId = curves[pub.data.algorithm.curve.join(".")];
            if (!curveId)
              throw new Error(
                "unknown curve " + pub.data.algorithm.curve.join(".")
              );

            var curve = new EC(curveId);
            var pubkey = pub.data.subjectPrivateKey.data;

            return curve.verify(hash, sig, pubkey);
          }

          function dsaVerify(sig, hash, pub) {
            var p = pub.data.p;
            var q = pub.data.q;
            var g = pub.data.g;
            var y = pub.data.pub_key;
            var unpacked = parseKeys.signature.decode(sig, "der");
            var s = unpacked.s;
            var r = unpacked.r;
            checkValue(s, q);
            checkValue(r, q);
            var montp = BN.mont(p);
            var w = s.invm(q);
            var v = g
              .toRed(montp)
              .redPow(new BN(hash).mul(w).mod(q))
              .fromRed()
              .mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed())
              .mod(p)
              .mod(q);
            return v.cmp(r) === 0;
          }

          function checkValue(b, q) {
            if (b.cmpn(0) <= 0) throw new Error("invalid sig");
            if (b.cmp(q) >= q) throw new Error("invalid sig");
          }

          module.exports = verify;

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(0).Buffer));

        /***/
      },
      /* 216 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(Buffer) {
          var elliptic = __webpack_require__(5);
          var BN = __webpack_require__(4);

          module.exports = function createECDH(curve) {
            return new ECDH(curve);
          };

          var aliases = {
            secp256k1: {
              name: "secp256k1",
              byteLength: 32
            },
            secp224r1: {
              name: "p224",
              byteLength: 28
            },
            prime256v1: {
              name: "p256",
              byteLength: 32
            },
            prime192v1: {
              name: "p192",
              byteLength: 24
            },
            ed25519: {
              name: "ed25519",
              byteLength: 32
            },
            secp384r1: {
              name: "p384",
              byteLength: 48
            },
            secp521r1: {
              name: "p521",
              byteLength: 66
            }
          };

          aliases.p224 = aliases.secp224r1;
          aliases.p256 = aliases.secp256r1 = aliases.prime256v1;
          aliases.p192 = aliases.secp192r1 = aliases.prime192v1;
          aliases.p384 = aliases.secp384r1;
          aliases.p521 = aliases.secp521r1;

          function ECDH(curve) {
            this.curveType = aliases[curve];
            if (!this.curveType) {
              this.curveType = {
                name: curve
              };
            }
            this.curve = new elliptic.ec(this.curveType.name);
            this.keys = void 0;
          }

          ECDH.prototype.generateKeys = function(enc, format) {
            this.keys = this.curve.genKeyPair();
            return this.getPublicKey(enc, format);
          };

          ECDH.prototype.computeSecret = function(other, inenc, enc) {
            inenc = inenc || "utf8";
            if (!Buffer.isBuffer(other)) {
              other = new Buffer(other, inenc);
            }
            var otherPub = this.curve.keyFromPublic(other).getPublic();
            var out = otherPub.mul(this.keys.getPrivate()).getX();
            return formatReturnValue(out, enc, this.curveType.byteLength);
          };

          ECDH.prototype.getPublicKey = function(enc, format) {
            var key = this.keys.getPublic(format === "compressed", true);
            if (format === "hybrid") {
              if (key[key.length - 1] % 2) {
                key[0] = 7;
              } else {
                key[0] = 6;
              }
            }
            return formatReturnValue(key, enc);
          };

          ECDH.prototype.getPrivateKey = function(enc) {
            return formatReturnValue(this.keys.getPrivate(), enc);
          };

          ECDH.prototype.setPublicKey = function(pub, enc) {
            enc = enc || "utf8";
            if (!Buffer.isBuffer(pub)) {
              pub = new Buffer(pub, enc);
            }
            this.keys._importPublic(pub);
            return this;
          };

          ECDH.prototype.setPrivateKey = function(priv, enc) {
            enc = enc || "utf8";
            if (!Buffer.isBuffer(priv)) {
              priv = new Buffer(priv, enc);
            }
            var _priv = new BN(priv);
            _priv = _priv.toString(16);
            this.keys._importPrivate(_priv);
            return this;
          };

          function formatReturnValue(bn, enc, len) {
            if (!Array.isArray(bn)) {
              bn = bn.toArray();
            }
            var buf = new Buffer(bn);
            if (len && buf.length < len) {
              var zeros = new Buffer(len - buf.length);
              zeros.fill(0);
              buf = Buffer.concat([zeros, buf]);
            }
            if (!enc) {
              return buf;
            } else {
              return buf.toString(enc);
            }
          }

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(0).Buffer));

        /***/
      },
      /* 217 */
      /***/ function(module, exports, __webpack_require__) {
        exports.publicEncrypt = __webpack_require__(218);
        exports.privateDecrypt = __webpack_require__(219);

        exports.privateEncrypt = function privateEncrypt(key, buf) {
          return exports.publicEncrypt(key, buf, true);
        };

        exports.publicDecrypt = function publicDecrypt(key, buf) {
          return exports.privateDecrypt(key, buf, true);
        };

        /***/
      },
      /* 218 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(Buffer) {
          var parseKeys = __webpack_require__(41);
          var randomBytes = __webpack_require__(24);
          var createHash = __webpack_require__(25);
          var mgf = __webpack_require__(116);
          var xor = __webpack_require__(117);
          var bn = __webpack_require__(4);
          var withPublic = __webpack_require__(118);
          var crt = __webpack_require__(60);

          var constants = {
            RSA_PKCS1_OAEP_PADDING: 4,
            RSA_PKCS1_PADDIN: 1,
            RSA_NO_PADDING: 3
          };

          module.exports = function publicEncrypt(public_key, msg, reverse) {
            var padding;
            if (public_key.padding) {
              padding = public_key.padding;
            } else if (reverse) {
              padding = 1;
            } else {
              padding = 4;
            }
            var key = parseKeys(public_key);
            var paddedMsg;
            if (padding === 4) {
              paddedMsg = oaep(key, msg);
            } else if (padding === 1) {
              paddedMsg = pkcs1(key, msg, reverse);
            } else if (padding === 3) {
              paddedMsg = new bn(msg);
              if (paddedMsg.cmp(key.modulus) >= 0) {
                throw new Error("data too long for modulus");
              }
            } else {
              throw new Error("unknown padding");
            }
            if (reverse) {
              return crt(paddedMsg, key);
            } else {
              return withPublic(paddedMsg, key);
            }
          };

          function oaep(key, msg) {
            var k = key.modulus.byteLength();
            var mLen = msg.length;
            var iHash = createHash("sha1").update(new Buffer("")).digest();
            var hLen = iHash.length;
            var hLen2 = 2 * hLen;
            if (mLen > k - hLen2 - 2) {
              throw new Error("message too long");
            }
            var ps = new Buffer(k - mLen - hLen2 - 2);
            ps.fill(0);
            var dblen = k - hLen - 1;
            var seed = randomBytes(hLen);
            var maskedDb = xor(
              Buffer.concat([iHash, ps, new Buffer([1]), msg], dblen),
              mgf(seed, dblen)
            );
            var maskedSeed = xor(seed, mgf(maskedDb, hLen));
            return new bn(
              Buffer.concat([new Buffer([0]), maskedSeed, maskedDb], k)
            );
          }
          function pkcs1(key, msg, reverse) {
            var mLen = msg.length;
            var k = key.modulus.byteLength();
            if (mLen > k - 11) {
              throw new Error("message too long");
            }
            var ps;
            if (reverse) {
              ps = new Buffer(k - mLen - 3);
              ps.fill(0xff);
            } else {
              ps = nonZero(k - mLen - 3);
            }
            return new bn(
              Buffer.concat(
                [new Buffer([0, reverse ? 1 : 2]), ps, new Buffer([0]), msg],
                k
              )
            );
          }
          function nonZero(len, crypto) {
            var out = new Buffer(len);
            var i = 0;
            var cache = randomBytes(len * 2);
            var cur = 0;
            var num;
            while (i < len) {
              if (cur === cache.length) {
                cache = randomBytes(len * 2);
                cur = 0;
              }
              num = cache[cur++];
              if (num) {
                out[i++] = num;
              }
            }
            return out;
          }
          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(0).Buffer));

        /***/
      },
      /* 219 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(Buffer) {
          var parseKeys = __webpack_require__(41);
          var mgf = __webpack_require__(116);
          var xor = __webpack_require__(117);
          var bn = __webpack_require__(4);
          var crt = __webpack_require__(60);
          var createHash = __webpack_require__(25);
          var withPublic = __webpack_require__(118);
          module.exports = function privateDecrypt(private_key, enc, reverse) {
            var padding;
            if (private_key.padding) {
              padding = private_key.padding;
            } else if (reverse) {
              padding = 1;
            } else {
              padding = 4;
            }

            var key = parseKeys(private_key);
            var k = key.modulus.byteLength();
            if (enc.length > k || new bn(enc).cmp(key.modulus) >= 0) {
              throw new Error("decryption error");
            }
            var msg;
            if (reverse) {
              msg = withPublic(new bn(enc), key);
            } else {
              msg = crt(enc, key);
            }
            var zBuffer = new Buffer(k - msg.length);
            zBuffer.fill(0);
            msg = Buffer.concat([zBuffer, msg], k);
            if (padding === 4) {
              return oaep(key, msg);
            } else if (padding === 1) {
              return pkcs1(key, msg, reverse);
            } else if (padding === 3) {
              return msg;
            } else {
              throw new Error("unknown padding");
            }
          };

          function oaep(key, msg) {
            var n = key.modulus;
            var k = key.modulus.byteLength();
            var mLen = msg.length;
            var iHash = createHash("sha1").update(new Buffer("")).digest();
            var hLen = iHash.length;
            var hLen2 = 2 * hLen;
            if (msg[0] !== 0) {
              throw new Error("decryption error");
            }
            var maskedSeed = msg.slice(1, hLen + 1);
            var maskedDb = msg.slice(hLen + 1);
            var seed = xor(maskedSeed, mgf(maskedDb, hLen));
            var db = xor(maskedDb, mgf(seed, k - hLen - 1));
            if (compare(iHash, db.slice(0, hLen))) {
              throw new Error("decryption error");
            }
            var i = hLen;
            while (db[i] === 0) {
              i++;
            }
            if (db[i++] !== 1) {
              throw new Error("decryption error");
            }
            return db.slice(i);
          }

          function pkcs1(key, msg, reverse) {
            var p1 = msg.slice(0, 2);
            var i = 2;
            var status = 0;
            while (msg[i++] !== 0) {
              if (i >= msg.length) {
                status++;
                break;
              }
            }
            var ps = msg.slice(2, i - 1);
            var p2 = msg.slice(i - 1, i);

            if (
              (p1.toString("hex") !== "0002" && !reverse) ||
              (p1.toString("hex") !== "0001" && reverse)
            ) {
              status++;
            }
            if (ps.length < 8) {
              status++;
            }
            if (status) {
              throw new Error("decryption error");
            }
            return msg.slice(i);
          }
          function compare(a, b) {
            a = new Buffer(a);
            b = new Buffer(b);
            var dif = 0;
            var len = a.length;
            if (a.length !== b.length) {
              dif++;
              len = Math.min(a.length, b.length);
            }
            var i = -1;
            while (++i < len) {
              dif += a[i] ^ b[i];
            }
            return dif;
          }
          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(0).Buffer));

        /***/
      },
      /* 220 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var base64Url = __webpack_require__(32).fromBase64;
        var Buffer = __webpack_require__(51).Buffer;

        var getParamBytesForAlg = __webpack_require__(221);

        var MAX_OCTET = 0x80,
          CLASS_UNIVERSAL = 0,
          PRIMITIVE_BIT = 0x20,
          TAG_SEQ = 0x10,
          TAG_INT = 0x02,
          ENCODED_TAG_SEQ = TAG_SEQ | PRIMITIVE_BIT | (CLASS_UNIVERSAL << 6),
          ENCODED_TAG_INT = TAG_INT | (CLASS_UNIVERSAL << 6);

        function signatureAsBuffer(signature) {
          if (Buffer.isBuffer(signature)) {
            return signature;
          } else if ("string" === typeof signature) {
            return Buffer.from(signature, "base64");
          }

          throw new TypeError(
            "ECDSA signature must be a Base64 string or a Buffer"
          );
        }

        function derToJose(signature, alg) {
          signature = signatureAsBuffer(signature);
          var paramBytes = getParamBytesForAlg(alg);

          // the DER encoded param should at most be the param size, plus a padding
          // zero, since due to being a signed integer
          var maxEncodedParamLength = paramBytes + 1;

          var inputLength = signature.length;

          var offset = 0;
          if (signature[offset++] !== ENCODED_TAG_SEQ) {
            throw new Error('Could not find expected "seq"');
          }

          var seqLength = signature[offset++];
          if (seqLength === (MAX_OCTET | 1)) {
            seqLength = signature[offset++];
          }

          if (inputLength - offset < seqLength) {
            throw new Error(
              '"seq" specified length of "' +
                seqLength +
                '", only "' +
                (inputLength - offset) +
                '" remaining'
            );
          }

          if (signature[offset++] !== ENCODED_TAG_INT) {
            throw new Error('Could not find expected "int" for "r"');
          }

          var rLength = signature[offset++];

          if (inputLength - offset - 2 < rLength) {
            throw new Error(
              '"r" specified length of "' +
                rLength +
                '", only "' +
                (inputLength - offset - 2) +
                '" available'
            );
          }

          if (maxEncodedParamLength < rLength) {
            throw new Error(
              '"r" specified length of "' +
                rLength +
                '", max of "' +
                maxEncodedParamLength +
                '" is acceptable'
            );
          }

          var rOffset = offset;
          offset += rLength;

          if (signature[offset++] !== ENCODED_TAG_INT) {
            throw new Error('Could not find expected "int" for "s"');
          }

          var sLength = signature[offset++];

          if (inputLength - offset !== sLength) {
            throw new Error(
              '"s" specified length of "' +
                sLength +
                '", expected "' +
                (inputLength - offset) +
                '"'
            );
          }

          if (maxEncodedParamLength < sLength) {
            throw new Error(
              '"s" specified length of "' +
                sLength +
                '", max of "' +
                maxEncodedParamLength +
                '" is acceptable'
            );
          }

          var sOffset = offset;
          offset += sLength;

          if (offset !== inputLength) {
            throw new Error(
              'Expected to consume entire buffer, but "' +
                (inputLength - offset) +
                '" bytes remain'
            );
          }

          var rPadding = paramBytes - rLength,
            sPadding = paramBytes - sLength;

          var dst = Buffer.allocUnsafe(rPadding + rLength + sPadding + sLength);

          for (offset = 0; offset < rPadding; ++offset) {
            dst[offset] = 0;
          }
          signature.copy(
            dst,
            offset,
            rOffset + Math.max(-rPadding, 0),
            rOffset + rLength
          );

          offset = paramBytes;

          for (var o = offset; offset < o + sPadding; ++offset) {
            dst[offset] = 0;
          }
          signature.copy(
            dst,
            offset,
            sOffset + Math.max(-sPadding, 0),
            sOffset + sLength
          );

          dst = dst.toString("base64");
          dst = base64Url(dst);

          return dst;
        }

        function countPadding(buf, start, stop) {
          var padding = 0;
          while (start + padding < stop && buf[start + padding] === 0) {
            ++padding;
          }

          var needsSign = buf[start + padding] >= MAX_OCTET;
          if (needsSign) {
            --padding;
          }

          return padding;
        }

        function joseToDer(signature, alg) {
          signature = signatureAsBuffer(signature);
          var paramBytes = getParamBytesForAlg(alg);

          var signatureBytes = signature.length;
          if (signatureBytes !== paramBytes * 2) {
            throw new TypeError(
              '"' +
                alg +
                '" signatures must be "' +
                paramBytes * 2 +
                '" bytes, saw "' +
                signatureBytes +
                '"'
            );
          }

          var rPadding = countPadding(signature, 0, paramBytes);
          var sPadding = countPadding(signature, paramBytes, signature.length);
          var rLength = paramBytes - rPadding;
          var sLength = paramBytes - sPadding;

          var rsBytes = 1 + 1 + rLength + 1 + 1 + sLength;

          var shortLength = rsBytes < MAX_OCTET;

          var dst = Buffer.allocUnsafe((shortLength ? 2 : 3) + rsBytes);

          var offset = 0;
          dst[offset++] = ENCODED_TAG_SEQ;
          if (shortLength) {
            // Bit 8 has value "0"
            // bits 7-1 give the length.
            dst[offset++] = rsBytes;
          } else {
            // Bit 8 of first octet has value "1"
            // bits 7-1 give the number of additional length octets.
            dst[offset++] = MAX_OCTET | 1;
            // length, base 256
            dst[offset++] = rsBytes & 0xff;
          }
          dst[offset++] = ENCODED_TAG_INT;
          dst[offset++] = rLength;
          if (rPadding < 0) {
            dst[offset++] = 0;
            offset += signature.copy(dst, offset, 0, paramBytes);
          } else {
            offset += signature.copy(dst, offset, rPadding, paramBytes);
          }
          dst[offset++] = ENCODED_TAG_INT;
          dst[offset++] = sLength;
          if (sPadding < 0) {
            dst[offset++] = 0;
            signature.copy(dst, offset, paramBytes);
          } else {
            signature.copy(dst, offset, paramBytes + sPadding);
          }

          return dst;
        }

        module.exports = {
          derToJose: derToJose,
          joseToDer: joseToDer
        };

        /***/
      },
      /* 221 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        function getParamSize(keySize) {
          var result = ((keySize / 8) | 0) + (keySize % 8 === 0 ? 0 : 1);
          return result;
        }

        var paramBytesForAlg = {
          ES256: getParamSize(256),
          ES384: getParamSize(384),
          ES512: getParamSize(521)
        };

        function getParamBytesForAlg(alg) {
          var paramBytes = paramBytesForAlg[alg];
          if (paramBytes) {
            return paramBytes;
          }

          throw new Error('Unknown algorithm "' + alg + '"');
        }

        module.exports = getParamBytesForAlg;

        /***/
      },
      /* 222 */
      /***/ function(module, exports, __webpack_require__) {
        /*global module*/
        var base64url = __webpack_require__(32);
        var DataStream = __webpack_require__(81);
        var jwa = __webpack_require__(86);
        var Stream = __webpack_require__(19);
        var toString = __webpack_require__(119);
        var util = __webpack_require__(34);
        var JWS_REGEX = /^[a-zA-Z0-9\-_]+?\.[a-zA-Z0-9\-_]+?\.([a-zA-Z0-9\-_]+)?$/;

        function isObject(thing) {
          return Object.prototype.toString.call(thing) === "[object Object]";
        }

        function safeJsonParse(thing) {
          if (isObject(thing)) return thing;
          try {
            return JSON.parse(thing);
          } catch (e) {
            return undefined;
          }
        }

        function headerFromJWS(jwsSig) {
          var encodedHeader = jwsSig.split(".", 1)[0];
          return safeJsonParse(base64url.decode(encodedHeader, "binary"));
        }

        function securedInputFromJWS(jwsSig) {
          return jwsSig.split(".", 2).join(".");
        }

        function signatureFromJWS(jwsSig) {
          return jwsSig.split(".")[2];
        }

        function payloadFromJWS(jwsSig, encoding) {
          encoding = encoding || "utf8";
          var payload = jwsSig.split(".")[1];
          return base64url.decode(payload, encoding);
        }

        function isValidJws(string) {
          return JWS_REGEX.test(string) && !!headerFromJWS(string);
        }

        function jwsVerify(jwsSig, algorithm, secretOrKey) {
          if (!algorithm) {
            var err = new Error("Missing algorithm parameter for jws.verify");
            err.code = "MISSING_ALGORITHM";
            throw err;
          }
          jwsSig = toString(jwsSig);
          var signature = signatureFromJWS(jwsSig);
          var securedInput = securedInputFromJWS(jwsSig);
          var algo = jwa(algorithm);
          return algo.verify(securedInput, signature, secretOrKey);
        }

        function jwsDecode(jwsSig, opts) {
          opts = opts || {};
          jwsSig = toString(jwsSig);

          if (!isValidJws(jwsSig)) return null;

          var header = headerFromJWS(jwsSig);

          if (!header) return null;

          var payload = payloadFromJWS(jwsSig);
          if (header.typ === "JWT" || opts.json)
            payload = JSON.parse(payload, opts.encoding);

          return {
            header: header,
            payload: payload,
            signature: signatureFromJWS(jwsSig)
          };
        }

        function VerifyStream(opts) {
          opts = opts || {};
          var secretOrKey = opts.secret || opts.publicKey || opts.key;
          var secretStream = new DataStream(secretOrKey);
          this.readable = true;
          this.algorithm = opts.algorithm;
          this.encoding = opts.encoding;
          this.secret = this.publicKey = this.key = secretStream;
          this.signature = new DataStream(opts.signature);
          this.secret.once(
            "close",
            function() {
              if (!this.signature.writable && this.readable) this.verify();
            }.bind(this)
          );

          this.signature.once(
            "close",
            function() {
              if (!this.secret.writable && this.readable) this.verify();
            }.bind(this)
          );
        }
        util.inherits(VerifyStream, Stream);
        VerifyStream.prototype.verify = function verify() {
          try {
            var valid = jwsVerify(
              this.signature.buffer,
              this.algorithm,
              this.key.buffer
            );
            var obj = jwsDecode(this.signature.buffer, this.encoding);
            this.emit("done", valid, obj);
            this.emit("data", valid);
            this.emit("end");
            this.readable = false;
            return valid;
          } catch (e) {
            this.readable = false;
            this.emit("error", e);
            this.emit("close");
          }
        };

        VerifyStream.decode = jwsDecode;
        VerifyStream.isValid = isValidJws;
        VerifyStream.verify = jwsVerify;

        module.exports = VerifyStream;

        /***/
      },
      /* 223 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(process) {
          var JsonWebTokenError = __webpack_require__(42);
          var NotBeforeError = __webpack_require__(120);
          var TokenExpiredError = __webpack_require__(121);
          var decode = __webpack_require__(80);
          var jws = __webpack_require__(50);
          var ms = __webpack_require__(49);
          var xtend = __webpack_require__(122);

          module.exports = function(
            jwtString,
            secretOrPublicKey,
            options,
            callback
          ) {
            if (typeof options === "function" && !callback) {
              callback = options;
              options = {};
            }

            if (!options) {
              options = {};
            }

            //clone this object since we are going to mutate it.
            options = xtend(options);
            var done;

            if (callback) {
              done = function() {
                var args = Array.prototype.slice.call(arguments, 0);
                return process.nextTick(function() {
                  callback.apply(null, args);
                });
              };
            } else {
              done = function(err, data) {
                if (err) throw err;
                return data;
              };
            }

            if (
              options.clockTimestamp &&
              typeof options.clockTimestamp !== "number"
            ) {
              return done(
                new JsonWebTokenError("clockTimestamp must be a number")
              );
            }

            var clockTimestamp =
              options.clockTimestamp || Math.floor(Date.now() / 1000);

            if (!jwtString) {
              return done(new JsonWebTokenError("jwt must be provided"));
            }

            if (typeof jwtString !== "string") {
              return done(new JsonWebTokenError("jwt must be a string"));
            }

            var parts = jwtString.split(".");

            if (parts.length !== 3) {
              return done(new JsonWebTokenError("jwt malformed"));
            }

            var hasSignature = parts[2].trim() !== "";

            if (!hasSignature && secretOrPublicKey) {
              return done(new JsonWebTokenError("jwt signature is required"));
            }

            if (hasSignature && !secretOrPublicKey) {
              return done(
                new JsonWebTokenError("secret or public key must be provided")
              );
            }

            if (!hasSignature && !options.algorithms) {
              options.algorithms = ["none"];
            }

            if (!options.algorithms) {
              options.algorithms =
                ~secretOrPublicKey.toString().indexOf("BEGIN CERTIFICATE") ||
                ~secretOrPublicKey.toString().indexOf("BEGIN PUBLIC KEY")
                  ? ["RS256", "RS384", "RS512", "ES256", "ES384", "ES512"]
                  : ~secretOrPublicKey
                      .toString()
                      .indexOf("BEGIN RSA PUBLIC KEY")
                    ? ["RS256", "RS384", "RS512"]
                    : ["HS256", "HS384", "HS512"];
            }

            var decodedToken;
            try {
              decodedToken = jws.decode(jwtString);
            } catch (err) {
              return done(err);
            }

            if (!decodedToken) {
              return done(new JsonWebTokenError("invalid token"));
            }

            var header = decodedToken.header;

            if (!~options.algorithms.indexOf(header.alg)) {
              return done(new JsonWebTokenError("invalid algorithm"));
            }

            var valid;

            try {
              valid = jws.verify(jwtString, header.alg, secretOrPublicKey);
            } catch (e) {
              return done(e);
            }

            if (!valid) return done(new JsonWebTokenError("invalid signature"));

            var payload;

            try {
              payload = decode(jwtString);
            } catch (err) {
              return done(err);
            }

            if (
              typeof payload.nbf !== "undefined" &&
              !options.ignoreNotBefore
            ) {
              if (typeof payload.nbf !== "number") {
                return done(new JsonWebTokenError("invalid nbf value"));
              }
              if (
                payload.nbf >
                clockTimestamp + (options.clockTolerance || 0)
              ) {
                return done(
                  new NotBeforeError(
                    "jwt not active",
                    new Date(payload.nbf * 1000)
                  )
                );
              }
            }

            if (
              typeof payload.exp !== "undefined" &&
              !options.ignoreExpiration
            ) {
              if (typeof payload.exp !== "number") {
                return done(new JsonWebTokenError("invalid exp value"));
              }
              if (
                clockTimestamp >=
                payload.exp + (options.clockTolerance || 0)
              ) {
                return done(
                  new TokenExpiredError(
                    "jwt expired",
                    new Date(payload.exp * 1000)
                  )
                );
              }
            }

            if (options.audience) {
              var audiences = Array.isArray(options.audience)
                ? options.audience
                : [options.audience];
              var target = Array.isArray(payload.aud)
                ? payload.aud
                : [payload.aud];

              var match = target.some(function(aud) {
                return audiences.indexOf(aud) != -1;
              });

              if (!match)
                return done(
                  new JsonWebTokenError(
                    "jwt audience invalid. expected: " + audiences.join(" or ")
                  )
                );
            }

            if (options.issuer) {
              var invalid_issuer =
                (typeof options.issuer === "string" &&
                  payload.iss !== options.issuer) ||
                (Array.isArray(options.issuer) &&
                  options.issuer.indexOf(payload.iss) === -1);

              if (invalid_issuer) {
                return done(
                  new JsonWebTokenError(
                    "jwt issuer invalid. expected: " + options.issuer
                  )
                );
              }
            }

            if (options.subject) {
              if (payload.sub !== options.subject) {
                return done(
                  new JsonWebTokenError(
                    "jwt subject invalid. expected: " + options.subject
                  )
                );
              }
            }

            if (options.jwtid) {
              if (payload.jti !== options.jwtid) {
                return done(
                  new JsonWebTokenError(
                    "jwt jwtid invalid. expected: " + options.jwtid
                  )
                );
              }
            }

            if (options.maxAge) {
              var maxAge = ms(options.maxAge);
              if (typeof payload.iat !== "number") {
                return done(
                  new JsonWebTokenError("iat required when maxAge is specified")
                );
              }
              // We have to compare against either options.clockTimestamp or the currentDate _with_ millis
              // to not change behaviour (version 7.2.1). Should be resolve somehow for next major.
              var nowOrClockTimestamp =
                (options.clockTimestamp || 0) * 1000 || Date.now();
              if (
                nowOrClockTimestamp - payload.iat * 1000 >
                maxAge + (options.clockTolerance || 0) * 1000
              ) {
                return done(
                  new TokenExpiredError(
                    "maxAge exceeded",
                    new Date(payload.iat * 1000 + maxAge)
                  )
                );
              }
            }

            return done(null, payload);
          };

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(6)));

        /***/
      },
      /* 224 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(Buffer) {
          var Joi = __webpack_require__(225);
          var timespan = __webpack_require__(226);
          var xtend = __webpack_require__(122);
          var jws = __webpack_require__(50);
          var once = __webpack_require__(227);

          var sign_options_schema = Joi.object().keys({
            expiresIn: [Joi.number().integer(), Joi.string()],
            notBefore: [Joi.number().integer(), Joi.string()],
            audience: [Joi.string(), Joi.array()],
            algorithm: Joi.string().valid(
              "RS256",
              "RS384",
              "RS512",
              "ES256",
              "ES384",
              "ES512",
              "HS256",
              "HS384",
              "HS512",
              "none"
            ),
            header: Joi.object(),
            encoding: Joi.string(),
            issuer: Joi.string(),
            subject: Joi.string(),
            jwtid: Joi.string(),
            noTimestamp: Joi.boolean(),
            keyid: Joi.string()
          });

          var registered_claims_schema = Joi.object()
            .keys({
              iat: Joi.number(),
              exp: Joi.number(),
              nbf: Joi.number()
            })
            .unknown();

          var options_to_payload = {
            audience: "aud",
            issuer: "iss",
            subject: "sub",
            jwtid: "jti"
          };

          var options_for_objects = [
            "expiresIn",
            "notBefore",
            "noTimestamp",
            "audience",
            "issuer",
            "subject",
            "jwtid"
          ];

          module.exports = function(
            payload,
            secretOrPrivateKey,
            options,
            callback
          ) {
            if (typeof options === "function") {
              callback = options;
              options = {};
            } else {
              options = options || {};
            }

            var isObjectPayload =
              typeof payload === "object" && !Buffer.isBuffer(payload);

            var header = xtend(
              {
                alg: options.algorithm || "HS256",
                typ: isObjectPayload ? "JWT" : undefined,
                kid: options.keyid
              },
              options.header
            );

            function failure(err) {
              if (callback) {
                return callback(err);
              }
              throw err;
            }

            if (!secretOrPrivateKey) {
              return failure(new Error("secretOrPrivateKey must have a value"));
            }

            if (typeof payload === "undefined") {
              return failure(new Error("payload is required"));
            } else if (isObjectPayload) {
              var payload_validation_result = registered_claims_schema.validate(
                payload
              );

              if (payload_validation_result.error) {
                return failure(payload_validation_result.error);
              }

              payload = xtend(payload);
            } else {
              var invalid_options = options_for_objects.filter(function(opt) {
                return typeof options[opt] !== "undefined";
              });

              if (invalid_options.length > 0) {
                return failure(
                  new Error(
                    "invalid " +
                      invalid_options.join(",") +
                      " option for " +
                      typeof payload +
                      " payload"
                  )
                );
              }
            }

            if (
              typeof payload.exp !== "undefined" &&
              typeof options.expiresIn !== "undefined"
            ) {
              return failure(
                new Error(
                  'Bad "options.expiresIn" option the payload already has an "exp" property.'
                )
              );
            }

            if (
              typeof payload.nbf !== "undefined" &&
              typeof options.notBefore !== "undefined"
            ) {
              return failure(
                new Error(
                  'Bad "options.notBefore" option the payload already has an "nbf" property.'
                )
              );
            }

            var validation_result = sign_options_schema.validate(options);

            if (validation_result.error) {
              return failure(validation_result.error);
            }

            var timestamp = payload.iat || Math.floor(Date.now() / 1000);

            if (!options.noTimestamp) {
              payload.iat = timestamp;
            } else {
              delete payload.iat;
            }

            if (typeof options.notBefore !== "undefined") {
              payload.nbf = timespan(options.notBefore);
              if (typeof payload.nbf === "undefined") {
                return failure(
                  new Error(
                    '"notBefore" should be a number of seconds or string representing a timespan eg: "1d", "20h", 60'
                  )
                );
              }
            }

            if (
              typeof options.expiresIn !== "undefined" &&
              typeof payload === "object"
            ) {
              payload.exp = timespan(options.expiresIn, timestamp);
              if (typeof payload.exp === "undefined") {
                return failure(
                  new Error(
                    '"expiresIn" should be a number of seconds or string representing a timespan eg: "1d", "20h", 60'
                  )
                );
              }
            }

            Object.keys(options_to_payload).forEach(function(key) {
              var claim = options_to_payload[key];
              if (typeof options[key] !== "undefined") {
                if (typeof payload[claim] !== "undefined") {
                  return failure(
                    new Error(
                      'Bad "options.' +
                        key +
                        '" option. The payload already has an "' +
                        claim +
                        '" property.'
                    )
                  );
                }
                payload[claim] = options[key];
              }
            });

            var encoding = options.encoding || "utf8";

            if (typeof callback === "function") {
              callback = callback && once(callback);

              jws
                .createSign({
                  header: header,
                  privateKey: secretOrPrivateKey,
                  payload: payload,
                  encoding: encoding
                })
                .once("error", callback)
                .once("done", function(signature) {
                  callback(null, signature);
                });
            } else {
              return jws.sign({
                header: header,
                payload: payload,
                secret: secretOrPrivateKey,
                encoding: encoding
              });
            }
          };

          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(0).Buffer));

        /***/
      },
      /* 225 */
      /***/ function(module, exports, __webpack_require__) {
        (function webpackUniversalModuleDefinition(root, factory) {
          if (true) module.exports = factory();
          else if (typeof define === "function" && define.amd)
            define("Joi", [], factory);
          else if (typeof exports === "object") exports["Joi"] = factory();
          else root["Joi"] = factory();
        })(this, function() {
          return /******/ (function(modules) {
            // webpackBootstrap
            /******/ // The module cache
            /******/ var installedModules = {}; // The require function

            /******/ /******/ function __webpack_require__(moduleId) {
              /******/ // Check if module is in cache
              /******/ if (installedModules[moduleId])
                /******/ return installedModules[moduleId].exports; // Create a new module (and put it into the cache)

              /******/ /******/ var module = (installedModules[moduleId] = {
                /******/ exports: {},
                /******/ id: moduleId,
                /******/ loaded: false
                /******/
              }); // Execute the module function

              /******/ /******/ modules[moduleId].call(
                module.exports,
                module,
                module.exports,
                __webpack_require__
              ); // Flag the module as loaded

              /******/ /******/ module.loaded = true; // Return the exports of the module

              /******/ /******/ return module.exports;
              /******/
            } // expose the modules object (__webpack_modules__)

            /******/ /******/ __webpack_require__.m = modules; // expose the module cache

            /******/ /******/ __webpack_require__.c = installedModules; // __webpack_public_path__

            /******/ /******/ __webpack_require__.p = ""; // Load entry module and return exports

            /******/ /******/ return __webpack_require__(0);
            /******/
          })(
            /************************************************************************/
            /******/ [
              /* 0 */
              /***/ function(module, exports, __webpack_require__) {
                "use strict";

                var Joi = __webpack_require__(1);

                module.exports = Joi;

                /***/
              },
              /* 1 */
              /***/ function(module, exports, __webpack_require__) {
                "use strict";

                // Load modules

                var _extends =
                  Object.assign ||
                  function(target) {
                    for (var i = 1; i < arguments.length; i++) {
                      var source = arguments[i];
                      for (var key in source) {
                        if (Object.prototype.hasOwnProperty.call(source, key)) {
                          target[key] = source[key];
                        }
                      }
                    }
                    return target;
                  };

                function _defaults(obj, defaults) {
                  var keys = Object.getOwnPropertyNames(defaults);
                  for (var i = 0; i < keys.length; i++) {
                    var key = keys[i];
                    var value = Object.getOwnPropertyDescriptor(defaults, key);
                    if (value && value.configurable && obj[key] === undefined) {
                      Object.defineProperty(obj, key, value);
                    }
                  }
                  return obj;
                }

                function _defineProperty(obj, key, value) {
                  if (key in obj) {
                    Object.defineProperty(obj, key, {
                      value: value,
                      enumerable: true,
                      configurable: true,
                      writable: true
                    });
                  } else {
                    obj[key] = value;
                  }
                  return obj;
                }

                function _classCallCheck(instance, Constructor) {
                  if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                  }
                }

                function _possibleConstructorReturn(self, call) {
                  if (!self) {
                    throw new ReferenceError(
                      "this hasn't been initialised - super() hasn't been called"
                    );
                  }
                  return call &&
                  (typeof call === "object" || typeof call === "function")
                    ? call
                    : self;
                }

                function _inherits(subClass, superClass) {
                  if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError(
                      "Super expression must either be null or a function, not " +
                        typeof superClass
                    );
                  }
                  subClass.prototype = Object.create(
                    superClass && superClass.prototype,
                    {
                      constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                      }
                    }
                  );
                  if (superClass)
                    Object.setPrototypeOf
                      ? Object.setPrototypeOf(subClass, superClass)
                      : _defaults(subClass, superClass);
                }

                var Hoek = __webpack_require__(2);
                var Any = __webpack_require__(11);
                var Cast = __webpack_require__(16);
                var Errors = __webpack_require__(13);
                var Lazy = __webpack_require__(29);
                var Ref = __webpack_require__(12);

                // Declare internals

                var internals = {
                  alternatives: __webpack_require__(25),
                  array: __webpack_require__(30),
                  boolean: __webpack_require__(24),
                  binary: __webpack_require__(31),
                  date: __webpack_require__(17),
                  number: __webpack_require__(23),
                  object: __webpack_require__(26),
                  string: __webpack_require__(18)
                };

                internals.root = function() {
                  var any = new Any();

                  var root = any.clone();
                  root.any = function() {
                    Hoek.assert(
                      arguments.length === 0,
                      "Joi.any() does not allow arguments."
                    );

                    return any;
                  };

                  root.alternatives = root.alt = function() {
                    return arguments.length
                      ? internals.alternatives.try.apply(
                          internals.alternatives,
                          arguments
                        )
                      : internals.alternatives;
                  };

                  root.array = function() {
                    Hoek.assert(
                      arguments.length === 0,
                      "Joi.array() does not allow arguments."
                    );

                    return internals.array;
                  };

                  root.boolean = root.bool = function() {
                    Hoek.assert(
                      arguments.length === 0,
                      "Joi.boolean() does not allow arguments."
                    );

                    return internals.boolean;
                  };

                  root.binary = function() {
                    Hoek.assert(
                      arguments.length === 0,
                      "Joi.binary() does not allow arguments."
                    );

                    return internals.binary;
                  };

                  root.date = function() {
                    Hoek.assert(
                      arguments.length === 0,
                      "Joi.date() does not allow arguments."
                    );

                    return internals.date;
                  };

                  root.func = function() {
                    Hoek.assert(
                      arguments.length === 0,
                      "Joi.func() does not allow arguments."
                    );

                    return internals.object._func();
                  };

                  root.number = function() {
                    Hoek.assert(
                      arguments.length === 0,
                      "Joi.number() does not allow arguments."
                    );

                    return internals.number;
                  };

                  root.object = function() {
                    return arguments.length
                      ? internals.object.keys.apply(internals.object, arguments)
                      : internals.object;
                  };

                  root.string = function() {
                    Hoek.assert(
                      arguments.length === 0,
                      "Joi.string() does not allow arguments."
                    );

                    return internals.string;
                  };

                  root.ref = function() {
                    return Ref.create.apply(null, arguments);
                  };

                  root.isRef = function(ref) {
                    return Ref.isRef(ref);
                  };

                  root.validate = function(
                    value /*, [schema], [options], callback */
                  ) {
                    var last = arguments[arguments.length - 1];
                    var callback = typeof last === "function" ? last : null;

                    var count = arguments.length - (callback ? 1 : 0);
                    if (count === 1) {
                      return any.validate(value, callback);
                    }

                    var options = count === 3 ? arguments[2] : {};
                    var schema = root.compile(arguments[1]);

                    return schema._validateWithOptions(
                      value,
                      options,
                      callback
                    );
                  };

                  root.describe = function() {
                    var schema = arguments.length
                      ? root.compile(arguments[0])
                      : any;
                    return schema.describe();
                  };

                  root.compile = function(schema) {
                    try {
                      return Cast.schema(schema);
                    } catch (err) {
                      if (err.hasOwnProperty("path")) {
                        err.message = err.message + "(" + err.path + ")";
                      }
                      throw err;
                    }
                  };

                  root.assert = function(value, schema, message) {
                    root.attempt(value, schema, message);
                  };

                  root.attempt = function(value, schema, message) {
                    var result = root.validate(value, schema);
                    var error = result.error;
                    if (error) {
                      if (!message) {
                        if (typeof error.annotate === "function") {
                          error.message = error.annotate();
                        }
                        throw error;
                      }

                      if (!(message instanceof Error)) {
                        if (typeof error.annotate === "function") {
                          error.message = message + " " + error.annotate();
                        }
                        throw error;
                      }

                      throw message;
                    }

                    return result.value;
                  };

                  root.reach = function(schema, path) {
                    Hoek.assert(
                      schema && schema instanceof Any,
                      "you must provide a joi schema"
                    );
                    Hoek.assert(
                      typeof path === "string",
                      "path must be a string"
                    );

                    if (path === "") {
                      return schema;
                    }

                    var parts = path.split(".");
                    var children = schema._inner.children;
                    if (!children) {
                      return;
                    }

                    var key = parts[0];
                    for (var i = 0; i < children.length; ++i) {
                      var child = children[i];
                      if (child.key === key) {
                        return this.reach(
                          child.schema,
                          path.substr(key.length + 1)
                        );
                      }
                    }
                  };

                  root.lazy = function(fn) {
                    return Lazy.set(fn);
                  };

                  root.extend = function() {
                    var _this = this;

                    var extensions = Hoek.flatten(
                      Array.prototype.slice.call(arguments)
                    );
                    Hoek.assert(
                      extensions.length > 0,
                      "You need to provide at least one extension"
                    );

                    this.assert(extensions, root.extensionsSchema);

                    var joi = Object.create(this.any());
                    _extends(joi, this);

                    var _loop = function _loop(i) {
                      var extension = extensions[i];

                      if (typeof extension === "function") {
                        extension = extension(joi);
                      }

                      _this.assert(extension, root.extensionSchema);

                      var base = (extension.base || _this.any()).clone(); // Cloning because we're going to override language afterwards
                      var ctor = base.constructor;
                      var type = (function(_ctor) {
                        _inherits(type, _ctor);

                        // eslint-disable-line no-loop-func

                        function type() {
                          _classCallCheck(this, type);

                          var _this2 = _possibleConstructorReturn(
                            this,
                            _ctor.call(this)
                          );

                          if (extension.base) {
                            _extends(_this2, base);
                          }

                          _this2._type = extension.name;

                          if (extension.language) {
                            _this2._settings = _this2._settings || {
                              language: {}
                            };
                            _this2._settings.language = Hoek.applyToDefaults(
                              _this2._settings.language,
                              _defineProperty(
                                {},
                                extension.name,
                                extension.language
                              )
                            );
                          }
                          return _this2;
                        }

                        return type;
                      })(ctor);

                      if (extension.coerce) {
                        type.prototype._coerce = function(
                          value,
                          state,
                          options
                        ) {
                          if (ctor.prototype._coerce) {
                            var baseRet = ctor.prototype._coerce.call(
                              this,
                              value,
                              state,
                              options
                            );

                            if (baseRet.errors) {
                              return baseRet;
                            }

                            value = baseRet.value;
                          }

                          var ret = extension.coerce.call(
                            this,
                            value,
                            state,
                            options
                          );
                          if (ret instanceof Errors.Err) {
                            return { value: value, errors: ret };
                          }

                          return { value: ret };
                        };
                      }
                      if (extension.pre) {
                        type.prototype._base = function(value, state, options) {
                          if (ctor.prototype._base) {
                            var baseRet = ctor.prototype._base.call(
                              this,
                              value,
                              state,
                              options
                            );

                            if (baseRet.errors) {
                              return baseRet;
                            }

                            value = baseRet.value;
                          }

                          var ret = extension.pre.call(
                            this,
                            value,
                            state,
                            options
                          );
                          if (ret instanceof Errors.Err) {
                            return { value: value, errors: ret };
                          }

                          return { value: ret };
                        };
                      }

                      if (extension.rules) {
                        var _loop2 = function _loop2(j) {
                          var rule = extension.rules[j];
                          var ruleArgs = rule.params
                            ? rule.params instanceof Any
                              ? rule.params._inner.children.map(function(k) {
                                  return k.key;
                                })
                              : Object.keys(rule.params)
                            : [];
                          var validateArgs = rule.params
                            ? Cast.schema(rule.params)
                            : null;

                          type.prototype[rule.name] = function() {
                            // eslint-disable-line no-loop-func

                            if (arguments.length > ruleArgs.length) {
                              throw new Error("Unexpected number of arguments");
                            }

                            var args = Array.prototype.slice.call(arguments);
                            var hasRef = false;
                            var arg = {};

                            for (var k = 0; k < ruleArgs.length; ++k) {
                              arg[ruleArgs[k]] = args[k];
                              if (!hasRef && Ref.isRef(args[k])) {
                                hasRef = true;
                              }
                            }

                            if (validateArgs) {
                              arg = joi.attempt(arg, validateArgs);
                            }

                            var schema = void 0;
                            if (rule.validate) {
                              var validate = function validate(
                                value,
                                state,
                                options
                              ) {
                                return rule.validate.call(
                                  this,
                                  arg,
                                  value,
                                  state,
                                  options
                                );
                              };

                              schema = this._test(rule.name, arg, validate, {
                                description: rule.description,
                                hasRef: hasRef
                              });
                            } else {
                              schema = this.clone();
                            }

                            if (rule.setup) {
                              var newSchema = rule.setup.call(schema, arg);
                              if (newSchema !== undefined) {
                                Hoek.assert(
                                  newSchema instanceof Any,
                                  "Setup of extension Joi." +
                                    this._type +
                                    "()." +
                                    rule.name +
                                    "() must return undefined or a Joi object"
                                );
                                schema = newSchema;
                              }
                            }

                            return schema;
                          };
                        };

                        for (var j = 0; j < extension.rules.length; ++j) {
                          _loop2(j);
                        }
                      }

                      if (extension.describe) {
                        type.prototype.describe = function() {
                          var description = ctor.prototype.describe.call(this);
                          return extension.describe.call(this, description);
                        };
                      }

                      var instance = new type();
                      joi[extension.name] = function() {
                        return instance;
                      };
                    };

                    for (var i = 0; i < extensions.length; ++i) {
                      _loop(i);
                    }

                    return joi;
                  };

                  root.extensionSchema = internals.object
                    .keys({
                      base: internals.object.type(Any, "Joi object"),
                      name: internals.string.required(),
                      coerce: internals.object._func().arity(3),
                      pre: internals.object._func().arity(3),
                      language: internals.object,
                      describe: internals.object._func().arity(1),
                      rules: internals.array.items(
                        internals.object
                          .keys({
                            name: internals.string.required(),
                            setup: internals.object._func().arity(1),
                            validate: internals.object._func().arity(4),
                            params: [
                              internals.object.pattern(
                                /.*/,
                                internals.object.type(Any, "Joi object")
                              ),
                              internals.object.type(
                                internals.object.constructor,
                                "Joi object"
                              )
                            ],
                            description: [
                              internals.string,
                              internals.object._func().arity(1)
                            ]
                          })
                          .or("setup", "validate")
                      )
                    })
                    .strict();

                  root.extensionsSchema = internals.array
                    .items([
                      internals.object,
                      internals.object._func().arity(1)
                    ])
                    .strict();

                  root.version = __webpack_require__(32).version;

                  return root;
                };

                module.exports = internals.root();

                /***/
              },
              /* 2 */
              /***/ function(module, exports, __webpack_require__) {
                /* WEBPACK VAR INJECTION */ (function(Buffer, process) {
                  "use strict";

                  // Load modules

                  var _typeof =
                    typeof Symbol === "function" &&
                    typeof Symbol.iterator === "symbol"
                      ? function(obj) {
                          return typeof obj;
                        }
                      : function(obj) {
                          return obj &&
                          typeof Symbol === "function" &&
                          obj.constructor === Symbol &&
                          obj !== Symbol.prototype
                            ? "symbol"
                            : typeof obj;
                        };

                  var Crypto = __webpack_require__(5);
                  var Path = __webpack_require__(6);
                  var Util = __webpack_require__(7);
                  var Escape = __webpack_require__(10);

                  // Declare internals

                  var internals = {};

                  // Clone object or array

                  exports.clone = function(obj, seen) {
                    if (
                      (typeof obj === "undefined"
                        ? "undefined"
                        : _typeof(obj)) !== "object" ||
                      obj === null
                    ) {
                      return obj;
                    }

                    seen = seen || new Map();

                    var lookup = seen.get(obj);
                    if (lookup) {
                      return lookup;
                    }

                    var newObj = void 0;
                    var cloneDeep = false;

                    if (!Array.isArray(obj)) {
                      if (Buffer.isBuffer(obj)) {
                        newObj = new Buffer(obj);
                      } else if (obj instanceof Date) {
                        newObj = new Date(obj.getTime());
                      } else if (obj instanceof RegExp) {
                        newObj = new RegExp(obj);
                      } else {
                        var proto = Object.getPrototypeOf(obj);
                        if (proto && proto.isImmutable) {
                          newObj = obj;
                        } else {
                          newObj = Object.create(proto);
                          cloneDeep = true;
                        }
                      }
                    } else {
                      newObj = [];
                      cloneDeep = true;
                    }

                    seen.set(obj, newObj);

                    if (cloneDeep) {
                      var keys = Object.getOwnPropertyNames(obj);
                      for (var i = 0; i < keys.length; ++i) {
                        var key = keys[i];
                        var descriptor = Object.getOwnPropertyDescriptor(
                          obj,
                          key
                        );
                        if (descriptor && (descriptor.get || descriptor.set)) {
                          Object.defineProperty(newObj, key, descriptor);
                        } else {
                          newObj[key] = exports.clone(obj[key], seen);
                        }
                      }
                    }

                    return newObj;
                  };

                  // Merge all the properties of source into target, source wins in conflict, and by default null and undefined from source are applied

                  /*eslint-disable */
                  exports.merge = function(
                    target,
                    source,
                    isNullOverride /* = true */,
                    isMergeArrays /* = true */
                  ) {
                    /*eslint-enable */

                    exports.assert(
                      target &&
                        (typeof target === "undefined"
                          ? "undefined"
                          : _typeof(target)) === "object",
                      "Invalid target value: must be an object"
                    );
                    exports.assert(
                      source === null ||
                        source === undefined ||
                        (typeof source === "undefined"
                          ? "undefined"
                          : _typeof(source)) === "object",
                      "Invalid source value: must be null, undefined, or an object"
                    );

                    if (!source) {
                      return target;
                    }

                    if (Array.isArray(source)) {
                      exports.assert(
                        Array.isArray(target),
                        "Cannot merge array onto an object"
                      );
                      if (isMergeArrays === false) {
                        // isMergeArrays defaults to true
                        target.length = 0; // Must not change target assignment
                      }

                      for (var i = 0; i < source.length; ++i) {
                        target.push(exports.clone(source[i]));
                      }

                      return target;
                    }

                    var keys = Object.keys(source);
                    for (var _i = 0; _i < keys.length; ++_i) {
                      var key = keys[_i];
                      var value = source[key];
                      if (
                        value &&
                        (typeof value === "undefined"
                          ? "undefined"
                          : _typeof(value)) === "object"
                      ) {
                        if (
                          !target[key] ||
                          _typeof(target[key]) !== "object" ||
                          Array.isArray(target[key]) !== Array.isArray(value) ||
                          value instanceof Date ||
                          Buffer.isBuffer(value) ||
                          value instanceof RegExp
                        ) {
                          target[key] = exports.clone(value);
                        } else {
                          exports.merge(
                            target[key],
                            value,
                            isNullOverride,
                            isMergeArrays
                          );
                        }
                      } else {
                        if (value !== null && value !== undefined) {
                          // Explicit to preserve empty strings

                          target[key] = value;
                        } else if (isNullOverride !== false) {
                          // Defaults to true
                          target[key] = value;
                        }
                      }
                    }

                    return target;
                  };

                  // Apply options to a copy of the defaults

                  exports.applyToDefaults = function(
                    defaults,
                    options,
                    isNullOverride
                  ) {
                    exports.assert(
                      defaults &&
                        (typeof defaults === "undefined"
                          ? "undefined"
                          : _typeof(defaults)) === "object",
                      "Invalid defaults value: must be an object"
                    );
                    exports.assert(
                      !options ||
                        options === true ||
                        (typeof options === "undefined"
                          ? "undefined"
                          : _typeof(options)) === "object",
                      "Invalid options value: must be true, falsy or an object"
                    );

                    if (!options) {
                      // If no options, return null
                      return null;
                    }

                    var copy = exports.clone(defaults);

                    if (options === true) {
                      // If options is set to true, use defaults
                      return copy;
                    }

                    return exports.merge(
                      copy,
                      options,
                      isNullOverride === true,
                      false
                    );
                  };

                  // Clone an object except for the listed keys which are shallow copied

                  exports.cloneWithShallow = function(source, keys) {
                    if (
                      !source ||
                      (typeof source === "undefined"
                        ? "undefined"
                        : _typeof(source)) !== "object"
                    ) {
                      return source;
                    }

                    var storage = internals.store(source, keys); // Move shallow copy items to storage
                    var copy = exports.clone(source); // Deep copy the rest
                    internals.restore(copy, source, storage); // Shallow copy the stored items and restore
                    return copy;
                  };

                  internals.store = function(source, keys) {
                    var storage = {};
                    for (var i = 0; i < keys.length; ++i) {
                      var key = keys[i];
                      var value = exports.reach(source, key);
                      if (value !== undefined) {
                        storage[key] = value;
                        internals.reachSet(source, key, undefined);
                      }
                    }

                    return storage;
                  };

                  internals.restore = function(copy, source, storage) {
                    var keys = Object.keys(storage);
                    for (var i = 0; i < keys.length; ++i) {
                      var key = keys[i];
                      internals.reachSet(copy, key, storage[key]);
                      internals.reachSet(source, key, storage[key]);
                    }
                  };

                  internals.reachSet = function(obj, key, value) {
                    var path = key.split(".");
                    var ref = obj;
                    for (var i = 0; i < path.length; ++i) {
                      var segment = path[i];
                      if (i + 1 === path.length) {
                        ref[segment] = value;
                      }

                      ref = ref[segment];
                    }
                  };

                  // Apply options to defaults except for the listed keys which are shallow copied from option without merging

                  exports.applyToDefaultsWithShallow = function(
                    defaults,
                    options,
                    keys
                  ) {
                    exports.assert(
                      defaults &&
                        (typeof defaults === "undefined"
                          ? "undefined"
                          : _typeof(defaults)) === "object",
                      "Invalid defaults value: must be an object"
                    );
                    exports.assert(
                      !options ||
                        options === true ||
                        (typeof options === "undefined"
                          ? "undefined"
                          : _typeof(options)) === "object",
                      "Invalid options value: must be true, falsy or an object"
                    );
                    exports.assert(keys && Array.isArray(keys), "Invalid keys");

                    if (!options) {
                      // If no options, return null
                      return null;
                    }

                    var copy = exports.cloneWithShallow(defaults, keys);

                    if (options === true) {
                      // If options is set to true, use defaults
                      return copy;
                    }

                    var storage = internals.store(options, keys); // Move shallow copy items to storage
                    exports.merge(copy, options, false, false); // Deep copy the rest
                    internals.restore(copy, options, storage); // Shallow copy the stored items and restore
                    return copy;
                  };

                  // Deep object or array comparison

                  exports.deepEqual = function(obj, ref, options, seen) {
                    options = options || { prototype: true };

                    var type =
                      typeof obj === "undefined" ? "undefined" : _typeof(obj);

                    if (
                      type !==
                      (typeof ref === "undefined" ? "undefined" : _typeof(ref))
                    ) {
                      return false;
                    }

                    if (type !== "object" || obj === null || ref === null) {
                      if (obj === ref) {
                        // Copied from Deep-eql, copyright(c) 2013 Jake Luer, jake@alogicalparadox.com, MIT Licensed, https://github.com/chaijs/deep-eql
                        return obj !== 0 || 1 / obj === 1 / ref; // -0 / +0
                      }

                      return obj !== obj && ref !== ref; // NaN
                    }

                    seen = seen || [];
                    if (seen.indexOf(obj) !== -1) {
                      return true; // If previous comparison failed, it would have stopped execution
                    }

                    seen.push(obj);

                    if (Array.isArray(obj)) {
                      if (!Array.isArray(ref)) {
                        return false;
                      }

                      if (!options.part && obj.length !== ref.length) {
                        return false;
                      }

                      for (var i = 0; i < obj.length; ++i) {
                        if (options.part) {
                          var found = false;
                          for (var j = 0; j < ref.length; ++j) {
                            if (exports.deepEqual(obj[i], ref[j], options)) {
                              found = true;
                              break;
                            }
                          }

                          return found;
                        }

                        if (!exports.deepEqual(obj[i], ref[i], options)) {
                          return false;
                        }
                      }

                      return true;
                    }

                    if (Buffer.isBuffer(obj)) {
                      if (!Buffer.isBuffer(ref)) {
                        return false;
                      }

                      if (obj.length !== ref.length) {
                        return false;
                      }

                      for (var _i2 = 0; _i2 < obj.length; ++_i2) {
                        if (obj[_i2] !== ref[_i2]) {
                          return false;
                        }
                      }

                      return true;
                    }

                    if (obj instanceof Date) {
                      return (
                        ref instanceof Date && obj.getTime() === ref.getTime()
                      );
                    }

                    if (obj instanceof RegExp) {
                      return (
                        ref instanceof RegExp &&
                        obj.toString() === ref.toString()
                      );
                    }

                    if (options.prototype) {
                      if (
                        Object.getPrototypeOf(obj) !==
                        Object.getPrototypeOf(ref)
                      ) {
                        return false;
                      }
                    }

                    var keys = Object.getOwnPropertyNames(obj);

                    if (
                      !options.part &&
                      keys.length !== Object.getOwnPropertyNames(ref).length
                    ) {
                      return false;
                    }

                    for (var _i3 = 0; _i3 < keys.length; ++_i3) {
                      var key = keys[_i3];
                      var descriptor = Object.getOwnPropertyDescriptor(
                        obj,
                        key
                      );
                      if (descriptor.get) {
                        if (
                          !exports.deepEqual(
                            descriptor,
                            Object.getOwnPropertyDescriptor(ref, key),
                            options,
                            seen
                          )
                        ) {
                          return false;
                        }
                      } else if (
                        !exports.deepEqual(obj[key], ref[key], options, seen)
                      ) {
                        return false;
                      }
                    }

                    return true;
                  };

                  // Remove duplicate items from array

                  exports.unique = function(array, key) {
                    var result = void 0;
                    if (key) {
                      (function() {
                        result = [];
                        var index = new Set();
                        array.forEach(function(item) {
                          var identifier = item[key];
                          if (!index.has(identifier)) {
                            index.add(identifier);
                            result.push(item);
                          }
                        });
                      })();
                    } else {
                      result = Array.from(new Set(array));
                    }

                    return result;
                  };

                  // Convert array into object

                  exports.mapToObject = function(array, key) {
                    if (!array) {
                      return null;
                    }

                    var obj = {};
                    for (var i = 0; i < array.length; ++i) {
                      if (key) {
                        if (array[i][key]) {
                          obj[array[i][key]] = true;
                        }
                      } else {
                        obj[array[i]] = true;
                      }
                    }

                    return obj;
                  };

                  // Find the common unique items in two arrays

                  exports.intersect = function(array1, array2, justFirst) {
                    if (!array1 || !array2) {
                      return [];
                    }

                    var common = [];
                    var hash = Array.isArray(array1)
                      ? exports.mapToObject(array1)
                      : array1;
                    var found = {};
                    for (var i = 0; i < array2.length; ++i) {
                      if (hash[array2[i]] && !found[array2[i]]) {
                        if (justFirst) {
                          return array2[i];
                        }

                        common.push(array2[i]);
                        found[array2[i]] = true;
                      }
                    }

                    return justFirst ? null : common;
                  };

                  // Test if the reference contains the values

                  exports.contain = function(ref, values, options) {
                    /*
	        string -> string(s)
	        array -> item(s)
	        object -> key(s)
	        object -> object (key:value)
	    */

                    var valuePairs = null;
                    if (
                      (typeof ref === "undefined"
                        ? "undefined"
                        : _typeof(ref)) === "object" &&
                      (typeof values === "undefined"
                        ? "undefined"
                        : _typeof(values)) === "object" &&
                      !Array.isArray(ref) &&
                      !Array.isArray(values)
                    ) {
                      valuePairs = values;
                      values = Object.keys(values);
                    } else {
                      values = [].concat(values);
                    }

                    options = options || {}; // deep, once, only, part

                    exports.assert(
                      arguments.length >= 2,
                      "Insufficient arguments"
                    );
                    exports.assert(
                      typeof ref === "string" ||
                        (typeof ref === "undefined"
                          ? "undefined"
                          : _typeof(ref)) === "object",
                      "Reference must be string or an object"
                    );
                    exports.assert(
                      values.length,
                      "Values array cannot be empty"
                    );

                    var compare = void 0;
                    var compareFlags = void 0;
                    if (options.deep) {
                      compare = exports.deepEqual;

                      var hasOnly = options.hasOwnProperty("only");
                      var hasPart = options.hasOwnProperty("part");

                      compareFlags = {
                        prototype: hasOnly
                          ? options.only
                          : hasPart ? !options.part : false,
                        part: hasOnly
                          ? !options.only
                          : hasPart ? options.part : true
                      };
                    } else {
                      compare = function compare(a, b) {
                        return a === b;
                      };
                    }

                    var misses = false;
                    var matches = new Array(values.length);
                    for (var i = 0; i < matches.length; ++i) {
                      matches[i] = 0;
                    }

                    if (typeof ref === "string") {
                      var pattern = "(";
                      for (var _i4 = 0; _i4 < values.length; ++_i4) {
                        var value = values[_i4];
                        exports.assert(
                          typeof value === "string",
                          "Cannot compare string reference to non-string value"
                        );
                        pattern +=
                          (_i4 ? "|" : "") + exports.escapeRegex(value);
                      }

                      var regex = new RegExp(pattern + ")", "g");
                      var leftovers = ref.replace(regex, function($0, $1) {
                        var index = values.indexOf($1);
                        ++matches[index];
                        return ""; // Remove from string
                      });

                      misses = !!leftovers;
                    } else if (Array.isArray(ref)) {
                      for (var _i5 = 0; _i5 < ref.length; ++_i5) {
                        var matched = false;
                        for (
                          var j = 0;
                          j < values.length && matched === false;
                          ++j
                        ) {
                          matched =
                            compare(values[j], ref[_i5], compareFlags) && j;
                        }

                        if (matched !== false) {
                          ++matches[matched];
                        } else {
                          misses = true;
                        }
                      }
                    } else {
                      var keys = Object.getOwnPropertyNames(ref);
                      for (var _i6 = 0; _i6 < keys.length; ++_i6) {
                        var key = keys[_i6];
                        var pos = values.indexOf(key);
                        if (pos !== -1) {
                          if (
                            valuePairs &&
                            !compare(valuePairs[key], ref[key], compareFlags)
                          ) {
                            return false;
                          }

                          ++matches[pos];
                        } else {
                          misses = true;
                        }
                      }
                    }

                    var result = false;
                    for (var _i7 = 0; _i7 < matches.length; ++_i7) {
                      result = result || !!matches[_i7];
                      if (
                        (options.once && matches[_i7] > 1) ||
                        (!options.part && !matches[_i7])
                      ) {
                        return false;
                      }
                    }

                    if (options.only && misses) {
                      return false;
                    }

                    return result;
                  };

                  // Flatten array

                  exports.flatten = function(array, target) {
                    var result = target || [];

                    for (var i = 0; i < array.length; ++i) {
                      if (Array.isArray(array[i])) {
                        exports.flatten(array[i], result);
                      } else {
                        result.push(array[i]);
                      }
                    }

                    return result;
                  };

                  // Convert an object key chain string ('a.b.c') to reference (object[a][b][c])

                  exports.reach = function(obj, chain, options) {
                    if (
                      chain === false ||
                      chain === null ||
                      typeof chain === "undefined"
                    ) {
                      return obj;
                    }

                    options = options || {};
                    if (typeof options === "string") {
                      options = { separator: options };
                    }

                    var path = chain.split(options.separator || ".");
                    var ref = obj;
                    for (var i = 0; i < path.length; ++i) {
                      var key = path[i];
                      if (key[0] === "-" && Array.isArray(ref)) {
                        key = key.slice(1, key.length);
                        key = ref.length - key;
                      }

                      if (
                        !ref ||
                        !(
                          ((typeof ref === "undefined"
                            ? "undefined"
                            : _typeof(ref)) === "object" ||
                            typeof ref === "function") &&
                          key in ref
                        ) ||
                        ((typeof ref === "undefined"
                          ? "undefined"
                          : _typeof(ref)) !== "object" &&
                          options.functions === false)
                      ) {
                        // Only object and function can have properties

                        exports.assert(
                          !options.strict || i + 1 === path.length,
                          "Missing segment",
                          key,
                          "in reach path ",
                          chain
                        );
                        exports.assert(
                          (typeof ref === "undefined"
                            ? "undefined"
                            : _typeof(ref)) === "object" ||
                            options.functions === true ||
                            typeof ref !== "function",
                          "Invalid segment",
                          key,
                          "in reach path ",
                          chain
                        );
                        ref = options.default;
                        break;
                      }

                      ref = ref[key];
                    }

                    return ref;
                  };

                  exports.reachTemplate = function(obj, template, options) {
                    return template.replace(/{([^}]+)}/g, function($0, chain) {
                      var value = exports.reach(obj, chain, options);
                      return value === undefined || value === null ? "" : value;
                    });
                  };

                  exports.formatStack = function(stack) {
                    var trace = [];
                    for (var i = 0; i < stack.length; ++i) {
                      var item = stack[i];
                      trace.push([
                        item.getFileName(),
                        item.getLineNumber(),
                        item.getColumnNumber(),
                        item.getFunctionName(),
                        item.isConstructor()
                      ]);
                    }

                    return trace;
                  };

                  exports.formatTrace = function(trace) {
                    var display = [];

                    for (var i = 0; i < trace.length; ++i) {
                      var row = trace[i];
                      display.push(
                        (row[4] ? "new " : "") +
                          row[3] +
                          " (" +
                          row[0] +
                          ":" +
                          row[1] +
                          ":" +
                          row[2] +
                          ")"
                      );
                    }

                    return display;
                  };

                  exports.callStack = function(slice) {
                    // http://code.google.com/p/v8/wiki/JavaScriptStackTraceApi

                    var v8 = Error.prepareStackTrace;
                    Error.prepareStackTrace = function(_, stack) {
                      return stack;
                    };

                    var capture = {};
                    Error.captureStackTrace(capture, this); // arguments.callee is not supported in strict mode so we use this and slice the trace of this off the result
                    var stack = capture.stack;

                    Error.prepareStackTrace = v8;

                    var trace = exports.formatStack(stack);

                    return trace.slice(1 + slice);
                  };

                  exports.displayStack = function(slice) {
                    var trace = exports.callStack(
                      slice === undefined ? 1 : slice + 1
                    );

                    return exports.formatTrace(trace);
                  };

                  exports.abortThrow = false;

                  exports.abort = function(message, hideStack) {
                    if (
                      process.env.NODE_ENV === "test" ||
                      exports.abortThrow === true
                    ) {
                      throw new Error(message || "Unknown error");
                    }

                    var stack = "";
                    if (!hideStack) {
                      stack = exports.displayStack(1).join("\n\t");
                    }
                    console.log("ABORT: " + message + "\n\t" + stack);
                    process.exit(1);
                  };

                  exports.assert = function(condition /*, msg1, msg2, msg3 */) {
                    if (condition) {
                      return;
                    }

                    if (
                      arguments.length === 2 &&
                      arguments[1] instanceof Error
                    ) {
                      throw arguments[1];
                    }

                    var msgs = [];
                    for (var i = 1; i < arguments.length; ++i) {
                      if (arguments[i] !== "") {
                        msgs.push(arguments[i]); // Avoids Array.slice arguments leak, allowing for V8 optimizations
                      }
                    }

                    msgs = msgs.map(function(msg) {
                      return typeof msg === "string"
                        ? msg
                        : msg instanceof Error
                          ? msg.message
                          : exports.stringify(msg);
                    });

                    throw new Error(msgs.join(" ") || "Unknown error");
                  };

                  exports.Timer = function() {
                    this.ts = 0;
                    this.reset();
                  };

                  exports.Timer.prototype.reset = function() {
                    this.ts = Date.now();
                  };

                  exports.Timer.prototype.elapsed = function() {
                    return Date.now() - this.ts;
                  };

                  exports.Bench = function() {
                    this.ts = 0;
                    this.reset();
                  };

                  exports.Bench.prototype.reset = function() {
                    this.ts = exports.Bench.now();
                  };

                  exports.Bench.prototype.elapsed = function() {
                    return exports.Bench.now() - this.ts;
                  };

                  exports.Bench.now = function() {
                    var ts = process.hrtime();
                    return ts[0] * 1e3 + ts[1] / 1e6;
                  };

                  // Escape string for Regex construction

                  exports.escapeRegex = function(string) {
                    // Escape ^$.*+-?=!:|\/()[]{},
                    return string.replace(
                      /[\^\$\.\*\+\-\?\=\!\:\|\\\/\(\)\[\]\{\}\,]/g,
                      "\\$&"
                    );
                  };

                  // Base64url (RFC 4648) encode

                  exports.base64urlEncode = function(value, encoding) {
                    exports.assert(
                      typeof value === "string" || Buffer.isBuffer(value),
                      "value must be string or buffer"
                    );
                    var buf = Buffer.isBuffer(value)
                      ? value
                      : new Buffer(value, encoding || "binary");
                    return buf
                      .toString("base64")
                      .replace(/\+/g, "-")
                      .replace(/\//g, "_")
                      .replace(/\=/g, "");
                  };

                  // Base64url (RFC 4648) decode

                  exports.base64urlDecode = function(value, encoding) {
                    if (typeof value !== "string") {
                      return new Error("Value not a string");
                    }

                    if (!/^[\w\-]*$/.test(value)) {
                      return new Error("Invalid character");
                    }

                    var buf = new Buffer(value, "base64");
                    return encoding === "buffer"
                      ? buf
                      : buf.toString(encoding || "binary");
                  };

                  // Escape attribute value for use in HTTP header

                  exports.escapeHeaderAttribute = function(attribute) {
                    // Allowed value characters: !#$%&'()*+,-./:;<=>?@[]^_`{|}~ and space, a-z, A-Z, 0-9, \, "

                    exports.assert(
                      /^[ \w\!#\$%&'\(\)\*\+,\-\.\/\:;<\=>\?@\[\]\^`\{\|\}~\"\\]*$/.test(
                        attribute
                      ),
                      "Bad attribute value (" + attribute + ")"
                    );

                    return attribute
                      .replace(/\\/g, "\\\\")
                      .replace(/\"/g, '\\"'); // Escape quotes and slash
                  };

                  exports.escapeHtml = function(string) {
                    return Escape.escapeHtml(string);
                  };

                  exports.escapeJavaScript = function(string) {
                    return Escape.escapeJavaScript(string);
                  };

                  exports.nextTick = function(callback) {
                    return function() {
                      var args = arguments;
                      process.nextTick(function() {
                        callback.apply(null, args);
                      });
                    };
                  };

                  exports.once = function(method) {
                    if (method._hoekOnce) {
                      return method;
                    }

                    var once = false;
                    var wrapped = function wrapped() {
                      if (!once) {
                        once = true;
                        method.apply(null, arguments);
                      }
                    };

                    wrapped._hoekOnce = true;

                    return wrapped;
                  };

                  exports.isInteger = Number.isSafeInteger;

                  exports.ignore = function() {};

                  exports.inherits = Util.inherits;

                  exports.format = Util.format;

                  exports.transform = function(source, transform, options) {
                    exports.assert(
                      source === null ||
                        source === undefined ||
                        (typeof source === "undefined"
                          ? "undefined"
                          : _typeof(source)) === "object" ||
                        Array.isArray(source),
                      "Invalid source object: must be null, undefined, an object, or an array"
                    );
                    var separator =
                      (typeof options === "undefined"
                        ? "undefined"
                        : _typeof(options)) === "object" && options !== null
                        ? options.separator || "."
                        : ".";

                    if (Array.isArray(source)) {
                      var results = [];
                      for (var i = 0; i < source.length; ++i) {
                        results.push(
                          exports.transform(source[i], transform, options)
                        );
                      }
                      return results;
                    }

                    var result = {};
                    var keys = Object.keys(transform);

                    for (var _i8 = 0; _i8 < keys.length; ++_i8) {
                      var key = keys[_i8];
                      var path = key.split(separator);
                      var sourcePath = transform[key];

                      exports.assert(
                        typeof sourcePath === "string",
                        'All mappings must be "." delineated strings'
                      );

                      var segment = void 0;
                      var res = result;

                      while (path.length > 1) {
                        segment = path.shift();
                        if (!res[segment]) {
                          res[segment] = {};
                        }
                        res = res[segment];
                      }
                      segment = path.shift();
                      res[segment] = exports.reach(source, sourcePath, options);
                    }

                    return result;
                  };

                  exports.uniqueFilename = function(path, extension) {
                    if (extension) {
                      extension =
                        extension[0] !== "." ? "." + extension : extension;
                    } else {
                      extension = "";
                    }

                    path = Path.resolve(path);
                    var name =
                      [
                        Date.now(),
                        process.pid,
                        Crypto.randomBytes(8).toString("hex")
                      ].join("-") + extension;
                    return Path.join(path, name);
                  };

                  exports.stringify = function() {
                    try {
                      return JSON.stringify.apply(null, arguments);
                    } catch (err) {
                      return "[Cannot display object: " + err.message + "]";
                    }
                  };

                  exports.shallow = function(source) {
                    var target = {};
                    var keys = Object.keys(source);
                    for (var i = 0; i < keys.length; ++i) {
                      var key = keys[i];
                      target[key] = source[key];
                    }

                    return target;
                  };
                  /* WEBPACK VAR INJECTION */
                }.call(
                  exports,
                  __webpack_require__(3).Buffer,
                  __webpack_require__(4)
                ));

                /***/
              },
              /* 3 */
              /***/ function(module, exports) {
                function Buffer() {
                  throw new Error("Buffer is not included.");
                }
                Buffer.isBuffer = function() {
                  return false;
                };

                exports.INSPECT_MAX_BYTES = 50;
                exports.SlowBuffer = Buffer;
                exports.Buffer = Buffer;

                /***/
              },
              /* 4 */
              /***/ function(module, exports) {
                // shim for using process in browser
                var process = (module.exports = {});

                // cached from whatever global is present so that test runners that stub it
                // don't break things.  But we need to wrap it in a try catch in case it is
                // wrapped in strict mode code which doesn't define any globals.  It's inside a
                // function because try/catches deoptimize in certain engines.

                var cachedSetTimeout;
                var cachedClearTimeout;

                function defaultSetTimout() {
                  throw new Error("setTimeout has not been defined");
                }
                function defaultClearTimeout() {
                  throw new Error("clearTimeout has not been defined");
                }
                (function() {
                  try {
                    if (typeof setTimeout === "function") {
                      cachedSetTimeout = setTimeout;
                    } else {
                      cachedSetTimeout = defaultSetTimout;
                    }
                  } catch (e) {
                    cachedSetTimeout = defaultSetTimout;
                  }
                  try {
                    if (typeof clearTimeout === "function") {
                      cachedClearTimeout = clearTimeout;
                    } else {
                      cachedClearTimeout = defaultClearTimeout;
                    }
                  } catch (e) {
                    cachedClearTimeout = defaultClearTimeout;
                  }
                })();
                function runTimeout(fun) {
                  if (cachedSetTimeout === setTimeout) {
                    //normal enviroments in sane situations
                    return setTimeout(fun, 0);
                  }
                  // if setTimeout wasn't available but was latter defined
                  if (
                    (cachedSetTimeout === defaultSetTimout ||
                      !cachedSetTimeout) &&
                    setTimeout
                  ) {
                    cachedSetTimeout = setTimeout;
                    return setTimeout(fun, 0);
                  }
                  try {
                    // when when somebody has screwed with setTimeout but no I.E. maddness
                    return cachedSetTimeout(fun, 0);
                  } catch (e) {
                    try {
                      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                      return cachedSetTimeout.call(null, fun, 0);
                    } catch (e) {
                      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                      return cachedSetTimeout.call(this, fun, 0);
                    }
                  }
                }
                function runClearTimeout(marker) {
                  if (cachedClearTimeout === clearTimeout) {
                    //normal enviroments in sane situations
                    return clearTimeout(marker);
                  }
                  // if clearTimeout wasn't available but was latter defined
                  if (
                    (cachedClearTimeout === defaultClearTimeout ||
                      !cachedClearTimeout) &&
                    clearTimeout
                  ) {
                    cachedClearTimeout = clearTimeout;
                    return clearTimeout(marker);
                  }
                  try {
                    // when when somebody has screwed with setTimeout but no I.E. maddness
                    return cachedClearTimeout(marker);
                  } catch (e) {
                    try {
                      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                      return cachedClearTimeout.call(null, marker);
                    } catch (e) {
                      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                      return cachedClearTimeout.call(this, marker);
                    }
                  }
                }
                var queue = [];
                var draining = false;
                var currentQueue;
                var queueIndex = -1;

                function cleanUpNextTick() {
                  if (!draining || !currentQueue) {
                    return;
                  }
                  draining = false;
                  if (currentQueue.length) {
                    queue = currentQueue.concat(queue);
                  } else {
                    queueIndex = -1;
                  }
                  if (queue.length) {
                    drainQueue();
                  }
                }

                function drainQueue() {
                  if (draining) {
                    return;
                  }
                  var timeout = runTimeout(cleanUpNextTick);
                  draining = true;

                  var len = queue.length;
                  while (len) {
                    currentQueue = queue;
                    queue = [];
                    while (++queueIndex < len) {
                      if (currentQueue) {
                        currentQueue[queueIndex].run();
                      }
                    }
                    queueIndex = -1;
                    len = queue.length;
                  }
                  currentQueue = null;
                  draining = false;
                  runClearTimeout(timeout);
                }

                process.nextTick = function(fun) {
                  var args = new Array(arguments.length - 1);
                  if (arguments.length > 1) {
                    for (var i = 1; i < arguments.length; i++) {
                      args[i - 1] = arguments[i];
                    }
                  }
                  queue.push(new Item(fun, args));
                  if (queue.length === 1 && !draining) {
                    runTimeout(drainQueue);
                  }
                };

                // v8 likes predictible objects
                function Item(fun, array) {
                  this.fun = fun;
                  this.array = array;
                }
                Item.prototype.run = function() {
                  this.fun.apply(null, this.array);
                };
                process.title = "browser";
                process.browser = true;
                process.env = {};
                process.argv = [];
                process.version = ""; // empty string to avoid regexp issues
                process.versions = {};

                function noop() {}

                process.on = noop;
                process.addListener = noop;
                process.once = noop;
                process.off = noop;
                process.removeListener = noop;
                process.removeAllListeners = noop;
                process.emit = noop;

                process.binding = function(name) {
                  throw new Error("process.binding is not supported");
                };

                process.cwd = function() {
                  return "/";
                };
                process.chdir = function(dir) {
                  throw new Error("process.chdir is not supported");
                };
                process.umask = function() {
                  return 0;
                };

                /***/
              },
              /* 5 */
              /***/ function(module, exports) {
                /***/
              },
              /* 6 */
              /***/ function(module, exports, __webpack_require__) {
                /* WEBPACK VAR INJECTION */ (function(process) {
                  // Copyright Joyent, Inc. and other Node contributors.
                  //
                  // Permission is hereby granted, free of charge, to any person obtaining a
                  // copy of this software and associated documentation files (the
                  // "Software"), to deal in the Software without restriction, including
                  // without limitation the rights to use, copy, modify, merge, publish,
                  // distribute, sublicense, and/or sell copies of the Software, and to permit
                  // persons to whom the Software is furnished to do so, subject to the
                  // following conditions:
                  //
                  // The above copyright notice and this permission notice shall be included
                  // in all copies or substantial portions of the Software.
                  //
                  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
                  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
                  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
                  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
                  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
                  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
                  // USE OR OTHER DEALINGS IN THE SOFTWARE.

                  // resolves . and .. elements in a path array with directory names there
                  // must be no slashes, empty elements, or device names (c:\) in the array
                  // (so also no leading and trailing slashes - it does not distinguish
                  // relative and absolute paths)
                  function normalizeArray(parts, allowAboveRoot) {
                    // if the path tries to go above the root, `up` ends up > 0
                    var up = 0;
                    for (var i = parts.length - 1; i >= 0; i--) {
                      var last = parts[i];
                      if (last === ".") {
                        parts.splice(i, 1);
                      } else if (last === "..") {
                        parts.splice(i, 1);
                        up++;
                      } else if (up) {
                        parts.splice(i, 1);
                        up--;
                      }
                    }

                    // if the path is allowed to go above the root, restore leading ..s
                    if (allowAboveRoot) {
                      for (; up--; up) {
                        parts.unshift("..");
                      }
                    }

                    return parts;
                  }

                  // Split a filename into [root, dir, basename, ext], unix version
                  // 'root' is just a slash, or nothing.
                  var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
                  var splitPath = function(filename) {
                    return splitPathRe.exec(filename).slice(1);
                  };

                  // path.resolve([from ...], to)
                  // posix version
                  exports.resolve = function() {
                    var resolvedPath = "",
                      resolvedAbsolute = false;

                    for (
                      var i = arguments.length - 1;
                      i >= -1 && !resolvedAbsolute;
                      i--
                    ) {
                      var path = i >= 0 ? arguments[i] : process.cwd();

                      // Skip empty and invalid entries
                      if (typeof path !== "string") {
                        throw new TypeError(
                          "Arguments to path.resolve must be strings"
                        );
                      } else if (!path) {
                        continue;
                      }

                      resolvedPath = path + "/" + resolvedPath;
                      resolvedAbsolute = path.charAt(0) === "/";
                    }

                    // At this point the path should be resolved to a full absolute path, but
                    // handle relative paths to be safe (might happen when process.cwd() fails)

                    // Normalize the path
                    resolvedPath = normalizeArray(
                      filter(resolvedPath.split("/"), function(p) {
                        return !!p;
                      }),
                      !resolvedAbsolute
                    ).join("/");

                    return (resolvedAbsolute ? "/" : "") + resolvedPath || ".";
                  };

                  // path.normalize(path)
                  // posix version
                  exports.normalize = function(path) {
                    var isAbsolute = exports.isAbsolute(path),
                      trailingSlash = substr(path, -1) === "/";

                    // Normalize the path
                    path = normalizeArray(
                      filter(path.split("/"), function(p) {
                        return !!p;
                      }),
                      !isAbsolute
                    ).join("/");

                    if (!path && !isAbsolute) {
                      path = ".";
                    }
                    if (path && trailingSlash) {
                      path += "/";
                    }

                    return (isAbsolute ? "/" : "") + path;
                  };

                  // posix version
                  exports.isAbsolute = function(path) {
                    return path.charAt(0) === "/";
                  };

                  // posix version
                  exports.join = function() {
                    var paths = Array.prototype.slice.call(arguments, 0);
                    return exports.normalize(
                      filter(paths, function(p, index) {
                        if (typeof p !== "string") {
                          throw new TypeError(
                            "Arguments to path.join must be strings"
                          );
                        }
                        return p;
                      }).join("/")
                    );
                  };

                  // path.relative(from, to)
                  // posix version
                  exports.relative = function(from, to) {
                    from = exports.resolve(from).substr(1);
                    to = exports.resolve(to).substr(1);

                    function trim(arr) {
                      var start = 0;
                      for (; start < arr.length; start++) {
                        if (arr[start] !== "") break;
                      }

                      var end = arr.length - 1;
                      for (; end >= 0; end--) {
                        if (arr[end] !== "") break;
                      }

                      if (start > end) return [];
                      return arr.slice(start, end - start + 1);
                    }

                    var fromParts = trim(from.split("/"));
                    var toParts = trim(to.split("/"));

                    var length = Math.min(fromParts.length, toParts.length);
                    var samePartsLength = length;
                    for (var i = 0; i < length; i++) {
                      if (fromParts[i] !== toParts[i]) {
                        samePartsLength = i;
                        break;
                      }
                    }

                    var outputParts = [];
                    for (var i = samePartsLength; i < fromParts.length; i++) {
                      outputParts.push("..");
                    }

                    outputParts = outputParts.concat(
                      toParts.slice(samePartsLength)
                    );

                    return outputParts.join("/");
                  };

                  exports.sep = "/";
                  exports.delimiter = ":";

                  exports.dirname = function(path) {
                    var result = splitPath(path),
                      root = result[0],
                      dir = result[1];

                    if (!root && !dir) {
                      // No dirname whatsoever
                      return ".";
                    }

                    if (dir) {
                      // It has a dirname, strip trailing slash
                      dir = dir.substr(0, dir.length - 1);
                    }

                    return root + dir;
                  };

                  exports.basename = function(path, ext) {
                    var f = splitPath(path)[2];
                    // TODO: make this comparison case-insensitive on windows?
                    if (ext && f.substr(-1 * ext.length) === ext) {
                      f = f.substr(0, f.length - ext.length);
                    }
                    return f;
                  };

                  exports.extname = function(path) {
                    return splitPath(path)[3];
                  };

                  function filter(xs, f) {
                    if (xs.filter) return xs.filter(f);
                    var res = [];
                    for (var i = 0; i < xs.length; i++) {
                      if (f(xs[i], i, xs)) res.push(xs[i]);
                    }
                    return res;
                  }

                  // String.prototype.substr - negative index don't work in IE8
                  var substr =
                    "ab".substr(-1) === "b"
                      ? function(str, start, len) {
                          return str.substr(start, len);
                        }
                      : function(str, start, len) {
                          if (start < 0) start = str.length + start;
                          return str.substr(start, len);
                        };

                  /* WEBPACK VAR INJECTION */
                }.call(exports, __webpack_require__(4)));

                /***/
              },
              /* 7 */
              /***/ function(module, exports, __webpack_require__) {
                /* WEBPACK VAR INJECTION */ (function(global, process) {
                  // Copyright Joyent, Inc. and other Node contributors.
                  //
                  // Permission is hereby granted, free of charge, to any person obtaining a
                  // copy of this software and associated documentation files (the
                  // "Software"), to deal in the Software without restriction, including
                  // without limitation the rights to use, copy, modify, merge, publish,
                  // distribute, sublicense, and/or sell copies of the Software, and to permit
                  // persons to whom the Software is furnished to do so, subject to the
                  // following conditions:
                  //
                  // The above copyright notice and this permission notice shall be included
                  // in all copies or substantial portions of the Software.
                  //
                  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
                  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
                  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
                  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
                  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
                  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
                  // USE OR OTHER DEALINGS IN THE SOFTWARE.

                  var formatRegExp = /%[sdj%]/g;
                  exports.format = function(f) {
                    if (!isString(f)) {
                      var objects = [];
                      for (var i = 0; i < arguments.length; i++) {
                        objects.push(inspect(arguments[i]));
                      }
                      return objects.join(" ");
                    }

                    var i = 1;
                    var args = arguments;
                    var len = args.length;
                    var str = String(f).replace(formatRegExp, function(x) {
                      if (x === "%%") return "%";
                      if (i >= len) return x;
                      switch (x) {
                        case "%s":
                          return String(args[i++]);
                        case "%d":
                          return Number(args[i++]);
                        case "%j":
                          try {
                            return JSON.stringify(args[i++]);
                          } catch (_) {
                            return "[Circular]";
                          }
                        default:
                          return x;
                      }
                    });
                    for (var x = args[i]; i < len; x = args[++i]) {
                      if (isNull(x) || !isObject(x)) {
                        str += " " + x;
                      } else {
                        str += " " + inspect(x);
                      }
                    }
                    return str;
                  };

                  // Mark that a method should not be used.
                  // Returns a modified function which warns once by default.
                  // If --no-deprecation is set, then it is a no-op.
                  exports.deprecate = function(fn, msg) {
                    // Allow for deprecating things in the process of starting up.
                    if (isUndefined(global.process)) {
                      return function() {
                        return exports
                          .deprecate(fn, msg)
                          .apply(this, arguments);
                      };
                    }

                    if (process.noDeprecation === true) {
                      return fn;
                    }

                    var warned = false;
                    function deprecated() {
                      if (!warned) {
                        if (process.throwDeprecation) {
                          throw new Error(msg);
                        } else if (process.traceDeprecation) {
                          console.trace(msg);
                        } else {
                          console.error(msg);
                        }
                        warned = true;
                      }
                      return fn.apply(this, arguments);
                    }

                    return deprecated;
                  };

                  var debugs = {};
                  var debugEnviron;
                  exports.debuglog = function(set) {
                    if (isUndefined(debugEnviron))
                      debugEnviron = process.env.NODE_DEBUG || "";
                    set = set.toUpperCase();
                    if (!debugs[set]) {
                      if (
                        new RegExp("\\b" + set + "\\b", "i").test(debugEnviron)
                      ) {
                        var pid = process.pid;
                        debugs[set] = function() {
                          var msg = exports.format.apply(exports, arguments);
                          console.error("%s %d: %s", set, pid, msg);
                        };
                      } else {
                        debugs[set] = function() {};
                      }
                    }
                    return debugs[set];
                  };

                  /**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
                  /* legacy: obj, showHidden, depth, colors*/
                  function inspect(obj, opts) {
                    // default options
                    var ctx = {
                      seen: [],
                      stylize: stylizeNoColor
                    };
                    // legacy...
                    if (arguments.length >= 3) ctx.depth = arguments[2];
                    if (arguments.length >= 4) ctx.colors = arguments[3];
                    if (isBoolean(opts)) {
                      // legacy...
                      ctx.showHidden = opts;
                    } else if (opts) {
                      // got an "options" object
                      exports._extend(ctx, opts);
                    }
                    // set default options
                    if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
                    if (isUndefined(ctx.depth)) ctx.depth = 2;
                    if (isUndefined(ctx.colors)) ctx.colors = false;
                    if (isUndefined(ctx.customInspect))
                      ctx.customInspect = true;
                    if (ctx.colors) ctx.stylize = stylizeWithColor;
                    return formatValue(ctx, obj, ctx.depth);
                  }
                  exports.inspect = inspect;

                  // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
                  inspect.colors = {
                    bold: [1, 22],
                    italic: [3, 23],
                    underline: [4, 24],
                    inverse: [7, 27],
                    white: [37, 39],
                    grey: [90, 39],
                    black: [30, 39],
                    blue: [34, 39],
                    cyan: [36, 39],
                    green: [32, 39],
                    magenta: [35, 39],
                    red: [31, 39],
                    yellow: [33, 39]
                  };

                  // Don't use 'blue' not visible on cmd.exe
                  inspect.styles = {
                    special: "cyan",
                    number: "yellow",
                    boolean: "yellow",
                    undefined: "grey",
                    null: "bold",
                    string: "green",
                    date: "magenta",
                    // "name": intentionally not styling
                    regexp: "red"
                  };

                  function stylizeWithColor(str, styleType) {
                    var style = inspect.styles[styleType];

                    if (style) {
                      return (
                        "\u001b[" +
                        inspect.colors[style][0] +
                        "m" +
                        str +
                        "\u001b[" +
                        inspect.colors[style][1] +
                        "m"
                      );
                    } else {
                      return str;
                    }
                  }

                  function stylizeNoColor(str, styleType) {
                    return str;
                  }

                  function arrayToHash(array) {
                    var hash = {};

                    array.forEach(function(val, idx) {
                      hash[val] = true;
                    });

                    return hash;
                  }

                  function formatValue(ctx, value, recurseTimes) {
                    // Provide a hook for user-specified inspect functions.
                    // Check that value is an object with an inspect function on it
                    if (
                      ctx.customInspect &&
                      value &&
                      isFunction(value.inspect) &&
                      // Filter out the util module, it's inspect function is special
                      value.inspect !== exports.inspect &&
                      // Also filter out any prototype objects using the circular check.
                      !(
                        value.constructor &&
                        value.constructor.prototype === value
                      )
                    ) {
                      var ret = value.inspect(recurseTimes, ctx);
                      if (!isString(ret)) {
                        ret = formatValue(ctx, ret, recurseTimes);
                      }
                      return ret;
                    }

                    // Primitive types cannot have properties
                    var primitive = formatPrimitive(ctx, value);
                    if (primitive) {
                      return primitive;
                    }

                    // Look up the keys of the object.
                    var keys = Object.keys(value);
                    var visibleKeys = arrayToHash(keys);

                    if (ctx.showHidden) {
                      keys = Object.getOwnPropertyNames(value);
                    }

                    // IE doesn't make error fields non-enumerable
                    // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
                    if (
                      isError(value) &&
                      (keys.indexOf("message") >= 0 ||
                        keys.indexOf("description") >= 0)
                    ) {
                      return formatError(value);
                    }

                    // Some type of object without properties can be shortcutted.
                    if (keys.length === 0) {
                      if (isFunction(value)) {
                        var name = value.name ? ": " + value.name : "";
                        return ctx.stylize("[Function" + name + "]", "special");
                      }
                      if (isRegExp(value)) {
                        return ctx.stylize(
                          RegExp.prototype.toString.call(value),
                          "regexp"
                        );
                      }
                      if (isDate(value)) {
                        return ctx.stylize(
                          Date.prototype.toString.call(value),
                          "date"
                        );
                      }
                      if (isError(value)) {
                        return formatError(value);
                      }
                    }

                    var base = "",
                      array = false,
                      braces = ["{", "}"];

                    // Make Array say that they are Array
                    if (isArray(value)) {
                      array = true;
                      braces = ["[", "]"];
                    }

                    // Make functions say that they are functions
                    if (isFunction(value)) {
                      var n = value.name ? ": " + value.name : "";
                      base = " [Function" + n + "]";
                    }

                    // Make RegExps say that they are RegExps
                    if (isRegExp(value)) {
                      base = " " + RegExp.prototype.toString.call(value);
                    }

                    // Make dates with properties first say the date
                    if (isDate(value)) {
                      base = " " + Date.prototype.toUTCString.call(value);
                    }

                    // Make error with message first say the error
                    if (isError(value)) {
                      base = " " + formatError(value);
                    }

                    if (keys.length === 0 && (!array || value.length == 0)) {
                      return braces[0] + base + braces[1];
                    }

                    if (recurseTimes < 0) {
                      if (isRegExp(value)) {
                        return ctx.stylize(
                          RegExp.prototype.toString.call(value),
                          "regexp"
                        );
                      } else {
                        return ctx.stylize("[Object]", "special");
                      }
                    }

                    ctx.seen.push(value);

                    var output;
                    if (array) {
                      output = formatArray(
                        ctx,
                        value,
                        recurseTimes,
                        visibleKeys,
                        keys
                      );
                    } else {
                      output = keys.map(function(key) {
                        return formatProperty(
                          ctx,
                          value,
                          recurseTimes,
                          visibleKeys,
                          key,
                          array
                        );
                      });
                    }

                    ctx.seen.pop();

                    return reduceToSingleString(output, base, braces);
                  }

                  function formatPrimitive(ctx, value) {
                    if (isUndefined(value))
                      return ctx.stylize("undefined", "undefined");
                    if (isString(value)) {
                      var simple =
                        "'" +
                        JSON.stringify(value)
                          .replace(/^"|"$/g, "")
                          .replace(/'/g, "\\'")
                          .replace(/\\"/g, '"') +
                        "'";
                      return ctx.stylize(simple, "string");
                    }
                    if (isNumber(value))
                      return ctx.stylize("" + value, "number");
                    if (isBoolean(value))
                      return ctx.stylize("" + value, "boolean");
                    // For some reason typeof null is "object", so special case here.
                    if (isNull(value)) return ctx.stylize("null", "null");
                  }

                  function formatError(value) {
                    return "[" + Error.prototype.toString.call(value) + "]";
                  }

                  function formatArray(
                    ctx,
                    value,
                    recurseTimes,
                    visibleKeys,
                    keys
                  ) {
                    var output = [];
                    for (var i = 0, l = value.length; i < l; ++i) {
                      if (hasOwnProperty(value, String(i))) {
                        output.push(
                          formatProperty(
                            ctx,
                            value,
                            recurseTimes,
                            visibleKeys,
                            String(i),
                            true
                          )
                        );
                      } else {
                        output.push("");
                      }
                    }
                    keys.forEach(function(key) {
                      if (!key.match(/^\d+$/)) {
                        output.push(
                          formatProperty(
                            ctx,
                            value,
                            recurseTimes,
                            visibleKeys,
                            key,
                            true
                          )
                        );
                      }
                    });
                    return output;
                  }

                  function formatProperty(
                    ctx,
                    value,
                    recurseTimes,
                    visibleKeys,
                    key,
                    array
                  ) {
                    var name, str, desc;
                    desc = Object.getOwnPropertyDescriptor(value, key) || {
                      value: value[key]
                    };
                    if (desc.get) {
                      if (desc.set) {
                        str = ctx.stylize("[Getter/Setter]", "special");
                      } else {
                        str = ctx.stylize("[Getter]", "special");
                      }
                    } else {
                      if (desc.set) {
                        str = ctx.stylize("[Setter]", "special");
                      }
                    }
                    if (!hasOwnProperty(visibleKeys, key)) {
                      name = "[" + key + "]";
                    }
                    if (!str) {
                      if (ctx.seen.indexOf(desc.value) < 0) {
                        if (isNull(recurseTimes)) {
                          str = formatValue(ctx, desc.value, null);
                        } else {
                          str = formatValue(ctx, desc.value, recurseTimes - 1);
                        }
                        if (str.indexOf("\n") > -1) {
                          if (array) {
                            str = str
                              .split("\n")
                              .map(function(line) {
                                return "  " + line;
                              })
                              .join("\n")
                              .substr(2);
                          } else {
                            str =
                              "\n" +
                              str
                                .split("\n")
                                .map(function(line) {
                                  return "   " + line;
                                })
                                .join("\n");
                          }
                        }
                      } else {
                        str = ctx.stylize("[Circular]", "special");
                      }
                    }
                    if (isUndefined(name)) {
                      if (array && key.match(/^\d+$/)) {
                        return str;
                      }
                      name = JSON.stringify("" + key);
                      if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
                        name = name.substr(1, name.length - 2);
                        name = ctx.stylize(name, "name");
                      } else {
                        name = name
                          .replace(/'/g, "\\'")
                          .replace(/\\"/g, '"')
                          .replace(/(^"|"$)/g, "'");
                        name = ctx.stylize(name, "string");
                      }
                    }

                    return name + ": " + str;
                  }

                  function reduceToSingleString(output, base, braces) {
                    var numLinesEst = 0;
                    var length = output.reduce(function(prev, cur) {
                      numLinesEst++;
                      if (cur.indexOf("\n") >= 0) numLinesEst++;
                      return (
                        prev + cur.replace(/\u001b\[\d\d?m/g, "").length + 1
                      );
                    }, 0);

                    if (length > 60) {
                      return (
                        braces[0] +
                        (base === "" ? "" : base + "\n ") +
                        " " +
                        output.join(",\n  ") +
                        " " +
                        braces[1]
                      );
                    }

                    return (
                      braces[0] +
                      base +
                      " " +
                      output.join(", ") +
                      " " +
                      braces[1]
                    );
                  }

                  // NOTE: These type checking functions intentionally don't use `instanceof`
                  // because it is fragile and can be easily faked with `Object.create()`.
                  function isArray(ar) {
                    return Array.isArray(ar);
                  }
                  exports.isArray = isArray;

                  function isBoolean(arg) {
                    return typeof arg === "boolean";
                  }
                  exports.isBoolean = isBoolean;

                  function isNull(arg) {
                    return arg === null;
                  }
                  exports.isNull = isNull;

                  function isNullOrUndefined(arg) {
                    return arg == null;
                  }
                  exports.isNullOrUndefined = isNullOrUndefined;

                  function isNumber(arg) {
                    return typeof arg === "number";
                  }
                  exports.isNumber = isNumber;

                  function isString(arg) {
                    return typeof arg === "string";
                  }
                  exports.isString = isString;

                  function isSymbol(arg) {
                    return typeof arg === "symbol";
                  }
                  exports.isSymbol = isSymbol;

                  function isUndefined(arg) {
                    return arg === void 0;
                  }
                  exports.isUndefined = isUndefined;

                  function isRegExp(re) {
                    return (
                      isObject(re) && objectToString(re) === "[object RegExp]"
                    );
                  }
                  exports.isRegExp = isRegExp;

                  function isObject(arg) {
                    return typeof arg === "object" && arg !== null;
                  }
                  exports.isObject = isObject;

                  function isDate(d) {
                    return isObject(d) && objectToString(d) === "[object Date]";
                  }
                  exports.isDate = isDate;

                  function isError(e) {
                    return (
                      isObject(e) &&
                      (objectToString(e) === "[object Error]" ||
                        e instanceof Error)
                    );
                  }
                  exports.isError = isError;

                  function isFunction(arg) {
                    return typeof arg === "function";
                  }
                  exports.isFunction = isFunction;

                  function isPrimitive(arg) {
                    return (
                      arg === null ||
                      typeof arg === "boolean" ||
                      typeof arg === "number" ||
                      typeof arg === "string" ||
                      typeof arg === "symbol" || // ES6 symbol
                      typeof arg === "undefined"
                    );
                  }
                  exports.isPrimitive = isPrimitive;

                  exports.isBuffer = __webpack_require__(8);

                  function objectToString(o) {
                    return Object.prototype.toString.call(o);
                  }

                  function pad(n) {
                    return n < 10 ? "0" + n.toString(10) : n.toString(10);
                  }

                  var months = [
                    "Jan",
                    "Feb",
                    "Mar",
                    "Apr",
                    "May",
                    "Jun",
                    "Jul",
                    "Aug",
                    "Sep",
                    "Oct",
                    "Nov",
                    "Dec"
                  ];

                  // 26 Feb 16:19:34
                  function timestamp() {
                    var d = new Date();
                    var time = [
                      pad(d.getHours()),
                      pad(d.getMinutes()),
                      pad(d.getSeconds())
                    ].join(":");
                    return [d.getDate(), months[d.getMonth()], time].join(" ");
                  }

                  // log is just a thin wrapper to console.log that prepends a timestamp
                  exports.log = function() {
                    console.log(
                      "%s - %s",
                      timestamp(),
                      exports.format.apply(exports, arguments)
                    );
                  };

                  /**
	 * Inherit the prototype methods from one constructor into another.
	 *
	 * The Function.prototype.inherits from lang.js rewritten as a standalone
	 * function (not on Function.prototype). NOTE: If this file is to be loaded
	 * during bootstrapping this function needs to be rewritten using some native
	 * functions as prototype setup using normal JavaScript does not work as
	 * expected during bootstrapping (see mirror.js in r114903).
	 *
	 * @param {function} ctor Constructor function which needs to inherit the
	 *     prototype.
	 * @param {function} superCtor Constructor function to inherit prototype from.
	 */
                  exports.inherits = __webpack_require__(9);

                  exports._extend = function(origin, add) {
                    // Don't do anything if add isn't an object
                    if (!add || !isObject(add)) return origin;

                    var keys = Object.keys(add);
                    var i = keys.length;
                    while (i--) {
                      origin[keys[i]] = add[keys[i]];
                    }
                    return origin;
                  };

                  function hasOwnProperty(obj, prop) {
                    return Object.prototype.hasOwnProperty.call(obj, prop);
                  }

                  /* WEBPACK VAR INJECTION */
                }.call(
                  exports,
                  (function() {
                    return this;
                  })(),
                  __webpack_require__(4)
                ));

                /***/
              },
              /* 8 */
              /***/ function(module, exports) {
                module.exports = function isBuffer(arg) {
                  return (
                    arg &&
                    typeof arg === "object" &&
                    typeof arg.copy === "function" &&
                    typeof arg.fill === "function" &&
                    typeof arg.readUInt8 === "function"
                  );
                };

                /***/
              },
              /* 9 */
              /***/ function(module, exports) {
                if (typeof Object.create === "function") {
                  // implementation from standard node.js 'util' module
                  module.exports = function inherits(ctor, superCtor) {
                    ctor.super_ = superCtor;
                    ctor.prototype = Object.create(superCtor.prototype, {
                      constructor: {
                        value: ctor,
                        enumerable: false,
                        writable: true,
                        configurable: true
                      }
                    });
                  };
                } else {
                  // old school shim for old browsers
                  module.exports = function inherits(ctor, superCtor) {
                    ctor.super_ = superCtor;
                    var TempCtor = function() {};
                    TempCtor.prototype = superCtor.prototype;
                    ctor.prototype = new TempCtor();
                    ctor.prototype.constructor = ctor;
                  };
                }

                /***/
              },
              /* 10 */
              /***/ function(module, exports, __webpack_require__) {
                /* WEBPACK VAR INJECTION */ (function(Buffer) {
                  "use strict";

                  // Declare internals

                  var internals = {};

                  exports.escapeJavaScript = function(input) {
                    if (!input) {
                      return "";
                    }

                    var escaped = "";

                    for (var i = 0; i < input.length; ++i) {
                      var charCode = input.charCodeAt(i);

                      if (internals.isSafe(charCode)) {
                        escaped += input[i];
                      } else {
                        escaped += internals.escapeJavaScriptChar(charCode);
                      }
                    }

                    return escaped;
                  };

                  exports.escapeHtml = function(input) {
                    if (!input) {
                      return "";
                    }

                    var escaped = "";

                    for (var i = 0; i < input.length; ++i) {
                      var charCode = input.charCodeAt(i);

                      if (internals.isSafe(charCode)) {
                        escaped += input[i];
                      } else {
                        escaped += internals.escapeHtmlChar(charCode);
                      }
                    }

                    return escaped;
                  };

                  internals.escapeJavaScriptChar = function(charCode) {
                    if (charCode >= 256) {
                      return "\\u" + internals.padLeft("" + charCode, 4);
                    }

                    var hexValue = new Buffer(
                      String.fromCharCode(charCode),
                      "ascii"
                    ).toString("hex");
                    return "\\x" + internals.padLeft(hexValue, 2);
                  };

                  internals.escapeHtmlChar = function(charCode) {
                    var namedEscape = internals.namedHtml[charCode];
                    if (typeof namedEscape !== "undefined") {
                      return namedEscape;
                    }

                    if (charCode >= 256) {
                      return "&#" + charCode + ";";
                    }

                    var hexValue = new Buffer(
                      String.fromCharCode(charCode),
                      "ascii"
                    ).toString("hex");
                    return "&#x" + internals.padLeft(hexValue, 2) + ";";
                  };

                  internals.padLeft = function(str, len) {
                    while (str.length < len) {
                      str = "0" + str;
                    }

                    return str;
                  };

                  internals.isSafe = function(charCode) {
                    return (
                      typeof internals.safeCharCodes[charCode] !== "undefined"
                    );
                  };

                  internals.namedHtml = {
                    "38": "&amp;",
                    "60": "&lt;",
                    "62": "&gt;",
                    "34": "&quot;",
                    "160": "&nbsp;",
                    "162": "&cent;",
                    "163": "&pound;",
                    "164": "&curren;",
                    "169": "&copy;",
                    "174": "&reg;"
                  };

                  internals.safeCharCodes = (function() {
                    var safe = {};

                    for (var i = 32; i < 123; ++i) {
                      if (
                        i >= 97 || // a-z
                        (i >= 65 && i <= 90) || // A-Z
                        (i >= 48 && i <= 57) || // 0-9
                        i === 32 || // space
                        i === 46 || // .
                        i === 44 || // ,
                        i === 45 || // -
                        i === 58 || // :
                        i === 95
                      ) {
                        // _

                        safe[i] = null;
                      }
                    }

                    return safe;
                  })();
                  /* WEBPACK VAR INJECTION */
                }.call(exports, __webpack_require__(3).Buffer));

                /***/
              },
              /* 11 */
              /***/ function(module, exports, __webpack_require__) {
                "use strict";

                // Load modules

                var _extends =
                  Object.assign ||
                  function(target) {
                    for (var i = 1; i < arguments.length; i++) {
                      var source = arguments[i];
                      for (var key in source) {
                        if (Object.prototype.hasOwnProperty.call(source, key)) {
                          target[key] = source[key];
                        }
                      }
                    }
                    return target;
                  };

                var _typeof =
                  typeof Symbol === "function" &&
                  typeof Symbol.iterator === "symbol"
                    ? function(obj) {
                        return typeof obj;
                      }
                    : function(obj) {
                        return obj &&
                        typeof Symbol === "function" &&
                        obj.constructor === Symbol &&
                        obj !== Symbol.prototype
                          ? "symbol"
                          : typeof obj;
                      };

                function _classCallCheck(instance, Constructor) {
                  if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                  }
                }

                var Hoek = __webpack_require__(2);
                var Ref = __webpack_require__(12);
                var Errors = __webpack_require__(13);
                var Alternatives = null; // Delay-loaded to prevent circular dependencies
                var Cast = null;

                // Declare internals

                var internals = {
                  Set: __webpack_require__(15)
                };

                internals.defaults = {
                  abortEarly: true,
                  convert: true,
                  allowUnknown: false,
                  skipFunctions: false,
                  stripUnknown: false,
                  language: {},
                  presence: "optional",
                  strip: false,
                  noDefaults: false

                  // context: null
                };

                module.exports = internals.Any = (function() {
                  function _class() {
                    _classCallCheck(this, _class);

                    Cast = Cast || __webpack_require__(16);

                    this.isJoi = true;
                    this._type = "any";
                    this._settings = null;
                    this._valids = new internals.Set();
                    this._invalids = new internals.Set();
                    this._tests = [];
                    this._refs = [];
                    this._flags = {
                      /*
	             presence: 'optional',                   // optional, required, forbidden, ignore
	             allowOnly: false,
	             allowUnknown: undefined,
	             default: undefined,
	             forbidden: false,
	             encoding: undefined,
	             insensitive: false,
	             trim: false,
	             case: undefined,                        // upper, lower
	             empty: undefined,
	             func: false,
	             raw: false
	             */
                    };

                    this._description = null;
                    this._unit = null;
                    this._notes = [];
                    this._tags = [];
                    this._examples = [];
                    this._meta = [];

                    this._inner = {}; // Hash of arrays of immutable objects
                  }

                  _class.prototype.createError = function createError(
                    type,
                    context,
                    state,
                    options
                  ) {
                    return Errors.create(
                      type,
                      context,
                      state,
                      options,
                      this._flags
                    );
                  };

                  _class.prototype.createOverrideError = function createOverrideError(
                    type,
                    context,
                    state,
                    options,
                    message,
                    template
                  ) {
                    return Errors.create(
                      type,
                      context,
                      state,
                      options,
                      this._flags,
                      message,
                      template
                    );
                  };

                  _class.prototype.checkOptions = function checkOptions(
                    options
                  ) {
                    var Schemas = __webpack_require__(28);
                    var result = Schemas.options.validate(options);
                    if (result.error) {
                      throw new Error(result.error.details[0].message);
                    }
                  };

                  _class.prototype.clone = function clone() {
                    var obj = Object.create(Object.getPrototypeOf(this));

                    obj.isJoi = true;
                    obj._type = this._type;
                    obj._settings = internals.concatSettings(this._settings);
                    obj._baseType = this._baseType;
                    obj._valids = Hoek.clone(this._valids);
                    obj._invalids = Hoek.clone(this._invalids);
                    obj._tests = this._tests.slice();
                    obj._refs = this._refs.slice();
                    obj._flags = Hoek.clone(this._flags);

                    obj._description = this._description;
                    obj._unit = this._unit;
                    obj._notes = this._notes.slice();
                    obj._tags = this._tags.slice();
                    obj._examples = this._examples.slice();
                    obj._meta = this._meta.slice();

                    obj._inner = {};
                    var inners = Object.keys(this._inner);
                    for (var i = 0; i < inners.length; ++i) {
                      var key = inners[i];
                      obj._inner[key] = this._inner[key]
                        ? this._inner[key].slice()
                        : null;
                    }

                    return obj;
                  };

                  _class.prototype.concat = function concat(schema) {
                    Hoek.assert(
                      schema instanceof internals.Any,
                      "Invalid schema object"
                    );
                    Hoek.assert(
                      this._type === "any" ||
                        schema._type === "any" ||
                        schema._type === this._type,
                      "Cannot merge type",
                      this._type,
                      "with another type:",
                      schema._type
                    );

                    var obj = this.clone();

                    if (this._type === "any" && schema._type !== "any") {
                      // Reset values as if we were "this"
                      var tmpObj = schema.clone();
                      var keysToRestore = [
                        "_settings",
                        "_valids",
                        "_invalids",
                        "_tests",
                        "_refs",
                        "_flags",
                        "_description",
                        "_unit",
                        "_notes",
                        "_tags",
                        "_examples",
                        "_meta",
                        "_inner"
                      ];

                      for (var i = 0; i < keysToRestore.length; ++i) {
                        tmpObj[keysToRestore[i]] = obj[keysToRestore[i]];
                      }

                      obj = tmpObj;
                    }

                    obj._settings = obj._settings
                      ? internals.concatSettings(
                          obj._settings,
                          schema._settings
                        )
                      : schema._settings;
                    obj._valids.merge(schema._valids, schema._invalids);
                    obj._invalids.merge(schema._invalids, schema._valids);
                    obj._tests = obj._tests.concat(schema._tests);
                    obj._refs = obj._refs.concat(schema._refs);
                    Hoek.merge(obj._flags, schema._flags);

                    obj._description = schema._description || obj._description;
                    obj._unit = schema._unit || obj._unit;
                    obj._notes = obj._notes.concat(schema._notes);
                    obj._tags = obj._tags.concat(schema._tags);
                    obj._examples = obj._examples.concat(schema._examples);
                    obj._meta = obj._meta.concat(schema._meta);

                    var inners = Object.keys(schema._inner);
                    var isObject = obj._type === "object";
                    for (var _i = 0; _i < inners.length; ++_i) {
                      var key = inners[_i];
                      var source = schema._inner[key];
                      if (source) {
                        var target = obj._inner[key];
                        if (target) {
                          if (isObject && key === "children") {
                            var keys = {};

                            for (var j = 0; j < target.length; ++j) {
                              keys[target[j].key] = j;
                            }

                            for (var _j = 0; _j < source.length; ++_j) {
                              var sourceKey = source[_j].key;
                              if (keys[sourceKey] >= 0) {
                                target[keys[sourceKey]] = {
                                  key: sourceKey,
                                  schema: target[keys[sourceKey]].schema.concat(
                                    source[_j].schema
                                  )
                                };
                              } else {
                                target.push(source[_j]);
                              }
                            }
                          } else {
                            obj._inner[key] = obj._inner[key].concat(source);
                          }
                        } else {
                          obj._inner[key] = source.slice();
                        }
                      }
                    }

                    return obj;
                  };

                  _class.prototype._test = function _test(
                    name,
                    arg,
                    func,
                    options
                  ) {
                    var obj = this.clone();
                    obj._tests.push({
                      func: func,
                      name: name,
                      arg: arg,
                      options: options
                    });
                    return obj;
                  };

                  _class.prototype.options = function options(_options) {
                    Hoek.assert(!_options.context, "Cannot override context");
                    this.checkOptions(_options);

                    var obj = this.clone();
                    obj._settings = internals.concatSettings(
                      obj._settings,
                      _options
                    );
                    return obj;
                  };

                  _class.prototype.strict = function strict(isStrict) {
                    var obj = this.clone();
                    obj._settings = obj._settings || {};
                    obj._settings.convert =
                      isStrict === undefined ? false : !isStrict;
                    return obj;
                  };

                  _class.prototype.raw = function raw(isRaw) {
                    var value = isRaw === undefined ? true : isRaw;

                    if (this._flags.raw === value) {
                      return this;
                    }

                    var obj = this.clone();
                    obj._flags.raw = value;
                    return obj;
                  };

                  _class.prototype.error = function error(err) {
                    Hoek.assert(
                      err &&
                        (err instanceof Error || typeof err === "function"),
                      "Must provide a valid Error object or a function"
                    );

                    var obj = this.clone();
                    obj._flags.error = err;
                    return obj;
                  };

                  _class.prototype.allow = function allow() {
                    var obj = this.clone();
                    var values = Hoek.flatten(
                      Array.prototype.slice.call(arguments)
                    );
                    for (var i = 0; i < values.length; ++i) {
                      var value = values[i];

                      Hoek.assert(
                        value !== undefined,
                        "Cannot call allow/valid/invalid with undefined"
                      );
                      obj._invalids.remove(value);
                      obj._valids.add(value, obj._refs);
                    }
                    return obj;
                  };

                  _class.prototype.valid = function valid() {
                    var obj = this.allow.apply(this, arguments);
                    obj._flags.allowOnly = true;
                    return obj;
                  };

                  _class.prototype.invalid = function invalid(value) {
                    var obj = this.clone();
                    var values = Hoek.flatten(
                      Array.prototype.slice.call(arguments)
                    );
                    for (var i = 0; i < values.length; ++i) {
                      value = values[i];

                      Hoek.assert(
                        value !== undefined,
                        "Cannot call allow/valid/invalid with undefined"
                      );
                      obj._valids.remove(value);
                      obj._invalids.add(value, this._refs);
                    }

                    return obj;
                  };

                  _class.prototype.required = function required() {
                    if (this._flags.presence === "required") {
                      return this;
                    }

                    var obj = this.clone();
                    obj._flags.presence = "required";
                    return obj;
                  };

                  _class.prototype.optional = function optional() {
                    if (this._flags.presence === "optional") {
                      return this;
                    }

                    var obj = this.clone();
                    obj._flags.presence = "optional";
                    return obj;
                  };

                  _class.prototype.forbidden = function forbidden() {
                    if (this._flags.presence === "forbidden") {
                      return this;
                    }

                    var obj = this.clone();
                    obj._flags.presence = "forbidden";
                    return obj;
                  };

                  _class.prototype.strip = function strip() {
                    if (this._flags.strip) {
                      return this;
                    }

                    var obj = this.clone();
                    obj._flags.strip = true;
                    return obj;
                  };

                  _class.prototype.applyFunctionToChildren = function applyFunctionToChildren(
                    children,
                    fn,
                    args,
                    root
                  ) {
                    children = [].concat(children);

                    if (children.length !== 1 || children[0] !== "") {
                      root = root ? root + "." : "";

                      var extraChildren = (children[0] === ""
                        ? children.slice(1)
                        : children).map(function(child) {
                        return root + child;
                      });

                      throw new Error(
                        "unknown key(s) " + extraChildren.join(", ")
                      );
                    }

                    return this[fn].apply(this, args);
                  };

                  _class.prototype.default = function _default(
                    value,
                    description
                  ) {
                    if (typeof value === "function" && !Ref.isRef(value)) {
                      if (!value.description && description) {
                        value.description = description;
                      }

                      if (!this._flags.func) {
                        Hoek.assert(
                          typeof value.description === "string" &&
                            value.description.length > 0,
                          "description must be provided when default value is a function"
                        );
                      }
                    }

                    var obj = this.clone();
                    obj._flags.default = value;
                    Ref.push(obj._refs, value);
                    return obj;
                  };

                  _class.prototype.empty = function empty(schema) {
                    var obj = this.clone();
                    obj._flags.empty =
                      schema === undefined ? undefined : Cast.schema(schema);
                    return obj;
                  };

                  _class.prototype.when = function when(ref, options) {
                    Hoek.assert(
                      options &&
                        (typeof options === "undefined"
                          ? "undefined"
                          : _typeof(options)) === "object",
                      "Invalid options"
                    );
                    Hoek.assert(
                      options.then !== undefined ||
                        options.otherwise !== undefined,
                      'options must have at least one of "then" or "otherwise"'
                    );

                    var then = options.hasOwnProperty("then")
                      ? this.concat(Cast.schema(options.then))
                      : undefined;
                    var otherwise = options.hasOwnProperty("otherwise")
                      ? this.concat(Cast.schema(options.otherwise))
                      : undefined;

                    Alternatives = Alternatives || __webpack_require__(25);
                    var obj = Alternatives.when(ref, {
                      is: options.is,
                      then: then,
                      otherwise: otherwise
                    });
                    obj._flags.presence = "ignore";
                    obj._baseType = this;

                    return obj;
                  };

                  _class.prototype.description = function description(desc) {
                    Hoek.assert(
                      desc && typeof desc === "string",
                      "Description must be a non-empty string"
                    );

                    var obj = this.clone();
                    obj._description = desc;
                    return obj;
                  };

                  _class.prototype.notes = function notes(_notes) {
                    Hoek.assert(
                      _notes &&
                        (typeof _notes === "string" || Array.isArray(_notes)),
                      "Notes must be a non-empty string or array"
                    );

                    var obj = this.clone();
                    obj._notes = obj._notes.concat(_notes);
                    return obj;
                  };

                  _class.prototype.tags = function tags(_tags) {
                    Hoek.assert(
                      _tags &&
                        (typeof _tags === "string" || Array.isArray(_tags)),
                      "Tags must be a non-empty string or array"
                    );

                    var obj = this.clone();
                    obj._tags = obj._tags.concat(_tags);
                    return obj;
                  };

                  _class.prototype.meta = function meta(_meta) {
                    Hoek.assert(
                      _meta !== undefined,
                      "Meta cannot be undefined"
                    );

                    var obj = this.clone();
                    obj._meta = obj._meta.concat(_meta);
                    return obj;
                  };

                  _class.prototype.example = function example(value) {
                    Hoek.assert(arguments.length, "Missing example");
                    var result = this._validate(
                      value,
                      null,
                      internals.defaults
                    );
                    Hoek.assert(
                      !result.errors,
                      "Bad example:",
                      result.errors && Errors.process(result.errors, value)
                    );

                    var obj = this.clone();
                    obj._examples.push(value);
                    return obj;
                  };

                  _class.prototype.unit = function unit(name) {
                    Hoek.assert(
                      name && typeof name === "string",
                      "Unit name must be a non-empty string"
                    );

                    var obj = this.clone();
                    obj._unit = name;
                    return obj;
                  };

                  _class.prototype._prepareEmptyValue = function _prepareEmptyValue(
                    value
                  ) {
                    if (typeof value === "string" && this._flags.trim) {
                      return value.trim();
                    }

                    return value;
                  };

                  _class.prototype._validate = function _validate(
                    value,
                    state,
                    options,
                    reference
                  ) {
                    var _this = this;

                    var originalValue = value;

                    // Setup state and settings

                    state = state || {
                      key: "",
                      path: "",
                      parent: null,
                      reference: reference
                    };

                    if (this._settings) {
                      options = internals.concatSettings(
                        options,
                        this._settings
                      );
                    }

                    var errors = [];
                    var finish = function finish() {
                      var finalValue = void 0;

                      if (value !== undefined) {
                        finalValue = _this._flags.raw ? originalValue : value;
                      } else if (options.noDefaults) {
                        finalValue = value;
                      } else if (Ref.isRef(_this._flags.default)) {
                        finalValue = _this._flags.default(
                          state.parent,
                          options
                        );
                      } else if (
                        typeof _this._flags.default === "function" &&
                        !(
                          _this._flags.func && !_this._flags.default.description
                        )
                      ) {
                        var args = void 0;

                        if (
                          state.parent !== null &&
                          _this._flags.default.length > 0
                        ) {
                          args = [Hoek.clone(state.parent), options];
                        }

                        var defaultValue = internals._try(
                          _this._flags.default,
                          args
                        );
                        finalValue = defaultValue.value;
                        if (defaultValue.error) {
                          errors.push(
                            _this.createError(
                              "any.default",
                              defaultValue.error,
                              state,
                              options
                            )
                          );
                        }
                      } else {
                        finalValue = Hoek.clone(_this._flags.default);
                      }

                      if (
                        errors.length &&
                        typeof _this._flags.error === "function"
                      ) {
                        var change = _this._flags.error.call(_this, errors);

                        if (typeof change === "string") {
                          errors = [
                            _this.createOverrideError(
                              "override",
                              { reason: errors },
                              state,
                              options,
                              change
                            )
                          ];
                        } else {
                          errors = [].concat(change).map(function(err) {
                            return err instanceof Error
                              ? err
                              : _this.createOverrideError(
                                  err.type || "override",
                                  err.context,
                                  state,
                                  options,
                                  err.message,
                                  err.template
                                );
                          });
                        }
                      }

                      return {
                        value: _this._flags.strip ? undefined : finalValue,
                        finalValue: finalValue,
                        errors: errors.length ? errors : null
                      };
                    };

                    if (this._coerce) {
                      var coerced = this._coerce.call(
                        this,
                        value,
                        state,
                        options
                      );
                      if (coerced.errors) {
                        value = coerced.value;
                        errors = errors.concat(coerced.errors);
                        return finish(); // Coerced error always aborts early
                      }

                      value = coerced.value;
                    }

                    if (
                      this._flags.empty &&
                      !this._flags.empty._validate(
                        this._prepareEmptyValue(value),
                        null,
                        internals.defaults
                      ).errors
                    ) {
                      value = undefined;
                    }

                    // Check presence requirements

                    var presence = this._flags.presence || options.presence;
                    if (presence === "optional") {
                      if (value === undefined) {
                        var isDeepDefault =
                          this._flags.hasOwnProperty("default") &&
                          this._flags.default === undefined;
                        if (isDeepDefault && this._type === "object") {
                          value = {};
                        } else {
                          return finish();
                        }
                      }
                    } else if (presence === "required" && value === undefined) {
                      errors.push(
                        this.createError("any.required", null, state, options)
                      );
                      return finish();
                    } else if (presence === "forbidden") {
                      if (value === undefined) {
                        return finish();
                      }

                      errors.push(
                        this.createError("any.unknown", null, state, options)
                      );
                      return finish();
                    }

                    // Check allowed and denied values using the original value

                    if (
                      this._valids.has(
                        value,
                        state,
                        options,
                        this._flags.insensitive
                      )
                    ) {
                      return finish();
                    }

                    if (
                      this._invalids.has(
                        value,
                        state,
                        options,
                        this._flags.insensitive
                      )
                    ) {
                      errors.push(
                        this.createError(
                          value === "" ? "any.empty" : "any.invalid",
                          null,
                          state,
                          options
                        )
                      );
                      if (options.abortEarly || value === undefined) {
                        // No reason to keep validating missing value

                        return finish();
                      }
                    }

                    // Convert value and validate type

                    if (this._base) {
                      var base = this._base.call(this, value, state, options);
                      if (base.errors) {
                        value = base.value;
                        errors = errors.concat(base.errors);
                        return finish(); // Base error always aborts early
                      }

                      if (base.value !== value) {
                        value = base.value;

                        // Check allowed and denied values using the converted value

                        if (
                          this._valids.has(
                            value,
                            state,
                            options,
                            this._flags.insensitive
                          )
                        ) {
                          return finish();
                        }

                        if (
                          this._invalids.has(
                            value,
                            state,
                            options,
                            this._flags.insensitive
                          )
                        ) {
                          errors.push(
                            this.createError(
                              value === "" ? "any.empty" : "any.invalid",
                              null,
                              state,
                              options
                            )
                          );
                          if (options.abortEarly) {
                            return finish();
                          }
                        }
                      }
                    }

                    // Required values did not match

                    if (this._flags.allowOnly) {
                      errors.push(
                        this.createError(
                          "any.allowOnly",
                          {
                            valids: this._valids.values({
                              stripUndefined: true
                            })
                          },
                          state,
                          options
                        )
                      );
                      if (options.abortEarly) {
                        return finish();
                      }
                    }

                    // Helper.validate tests

                    for (var i = 0; i < this._tests.length; ++i) {
                      var test = this._tests[i];
                      var ret = test.func.call(this, value, state, options);
                      if (ret instanceof Errors.Err) {
                        errors.push(ret);
                        if (options.abortEarly) {
                          return finish();
                        }
                      } else {
                        value = ret;
                      }
                    }

                    return finish();
                  };

                  _class.prototype._validateWithOptions = function _validateWithOptions(
                    value,
                    options,
                    callback
                  ) {
                    if (options) {
                      this.checkOptions(options);
                    }

                    var settings = internals.concatSettings(
                      internals.defaults,
                      options
                    );
                    var result = this._validate(value, null, settings);
                    var errors = Errors.process(result.errors, value);

                    if (callback) {
                      return callback(errors, result.value);
                    }

                    return { error: errors, value: result.value };
                  };

                  _class.prototype.validate = function validate(
                    value,
                    options,
                    callback
                  ) {
                    if (typeof options === "function") {
                      return this._validateWithOptions(value, null, options);
                    }

                    return this._validateWithOptions(value, options, callback);
                  };

                  _class.prototype.describe = function describe() {
                    var _this2 = this;

                    var description = {
                      type: this._type
                    };

                    var flags = Object.keys(this._flags);
                    if (flags.length) {
                      if (
                        ["empty", "default", "lazy", "label"].some(function(
                          flag
                        ) {
                          return _this2._flags.hasOwnProperty(flag);
                        })
                      ) {
                        description.flags = {};
                        for (var i = 0; i < flags.length; ++i) {
                          var flag = flags[i];
                          if (flag === "empty") {
                            description.flags[flag] = this._flags[
                              flag
                            ].describe();
                          } else if (flag === "default") {
                            if (Ref.isRef(this._flags[flag])) {
                              description.flags[flag] = this._flags[
                                flag
                              ].toString();
                            } else if (
                              typeof this._flags[flag] === "function"
                            ) {
                              description.flags[flag] = this._flags[
                                flag
                              ].description;
                            } else {
                              description.flags[flag] = this._flags[flag];
                            }
                          } else if (flag === "lazy" || flag === "label") {
                            // We don't want it in the description
                          } else {
                            description.flags[flag] = this._flags[flag];
                          }
                        }
                      } else {
                        description.flags = this._flags;
                      }
                    }

                    if (this._settings) {
                      description.options = Hoek.clone(this._settings);
                    }

                    if (this._baseType) {
                      description.base = this._baseType.describe();
                    }

                    if (this._description) {
                      description.description = this._description;
                    }

                    if (this._notes.length) {
                      description.notes = this._notes;
                    }

                    if (this._tags.length) {
                      description.tags = this._tags;
                    }

                    if (this._meta.length) {
                      description.meta = this._meta;
                    }

                    if (this._examples.length) {
                      description.examples = this._examples;
                    }

                    if (this._unit) {
                      description.unit = this._unit;
                    }

                    var valids = this._valids.values();
                    if (valids.length) {
                      description.valids = valids.map(function(v) {
                        return Ref.isRef(v) ? v.toString() : v;
                      });
                    }

                    var invalids = this._invalids.values();
                    if (invalids.length) {
                      description.invalids = invalids.map(function(v) {
                        return Ref.isRef(v) ? v.toString() : v;
                      });
                    }

                    description.rules = [];

                    for (var _i2 = 0; _i2 < this._tests.length; ++_i2) {
                      var validator = this._tests[_i2];
                      var item = { name: validator.name };

                      if (validator.arg !== void 0) {
                        item.arg = Ref.isRef(validator.arg)
                          ? validator.arg.toString()
                          : validator.arg;
                      }

                      var options = validator.options;
                      if (options) {
                        if (options.hasRef) {
                          item.arg = {};
                          var keys = Object.keys(validator.arg);
                          for (var j = 0; j < keys.length; ++j) {
                            var key = keys[j];
                            var value = validator.arg[key];
                            item.arg[key] = Ref.isRef(value)
                              ? value.toString()
                              : value;
                          }
                        }

                        if (typeof options.description === "string") {
                          item.description = options.description;
                        } else if (typeof options.description === "function") {
                          item.description = options.description(item.arg);
                        }
                      }

                      description.rules.push(item);
                    }

                    if (!description.rules.length) {
                      delete description.rules;
                    }

                    var label = this._getLabel();
                    if (label) {
                      description.label = label;
                    }

                    return description;
                  };

                  _class.prototype.label = function label(name) {
                    Hoek.assert(
                      name && typeof name === "string",
                      "Label name must be a non-empty string"
                    );

                    var obj = this.clone();
                    obj._flags.label = name;
                    return obj;
                  };

                  _class.prototype._getLabel = function _getLabel(def) {
                    return this._flags.label || def;
                  };

                  return _class;
                })();

                internals.Any.prototype.isImmutable = true; // Prevents Hoek from deep cloning schema objects

                // Aliases

                internals.Any.prototype.only = internals.Any.prototype.equal =
                  internals.Any.prototype.valid;
                internals.Any.prototype.disallow = internals.Any.prototype.not =
                  internals.Any.prototype.invalid;
                internals.Any.prototype.exist =
                  internals.Any.prototype.required;

                internals._try = function(fn, args) {
                  var err = void 0;
                  var result = void 0;

                  try {
                    result = fn.apply(null, args);
                  } catch (e) {
                    err = e;
                  }

                  return {
                    value: result,
                    error: err
                  };
                };

                internals.concatSettings = function(target, source) {
                  // Used to avoid cloning context

                  if (!target && !source) {
                    return null;
                  }

                  var obj = {};

                  if (target) {
                    _extends(obj, target);
                  }

                  if (source) {
                    var sKeys = Object.keys(source);
                    for (var i = 0; i < sKeys.length; ++i) {
                      var key = sKeys[i];
                      if (key !== "language" || !obj.hasOwnProperty(key)) {
                        obj[key] = source[key];
                      } else {
                        obj[key] = Hoek.applyToDefaults(obj[key], source[key]);
                      }
                    }
                  }

                  return obj;
                };

                /***/
              },
              /* 12 */
              /***/ function(module, exports, __webpack_require__) {
                "use strict";

                // Load modules

                var Hoek = __webpack_require__(2);

                // Declare internals

                var internals = {};

                exports.create = function(key, options) {
                  Hoek.assert(
                    typeof key === "string",
                    "Invalid reference key:",
                    key
                  );

                  var settings = Hoek.clone(options); // options can be reused and modified

                  var ref = function ref(value, validationOptions) {
                    return Hoek.reach(
                      ref.isContext ? validationOptions.context : value,
                      ref.key,
                      settings
                    );
                  };

                  ref.isContext =
                    key[0] === ((settings && settings.contextPrefix) || "$");
                  ref.key = ref.isContext ? key.slice(1) : key;
                  ref.path = ref.key.split(
                    (settings && settings.separator) || "."
                  );
                  ref.depth = ref.path.length;
                  ref.root = ref.path[0];
                  ref.isJoi = true;

                  ref.toString = function() {
                    return (ref.isContext ? "context:" : "ref:") + ref.key;
                  };

                  return ref;
                };

                exports.isRef = function(ref) {
                  return typeof ref === "function" && ref.isJoi;
                };

                exports.push = function(array, ref) {
                  if (exports.isRef(ref) && !ref.isContext) {
                    array.push(ref.root);
                  }
                };

                /***/
              },
              /* 13 */
              /***/ function(module, exports, __webpack_require__) {
                "use strict";

                // Load modules

                var _typeof =
                  typeof Symbol === "function" &&
                  typeof Symbol.iterator === "symbol"
                    ? function(obj) {
                        return typeof obj;
                      }
                    : function(obj) {
                        return obj &&
                        typeof Symbol === "function" &&
                        obj.constructor === Symbol &&
                        obj !== Symbol.prototype
                          ? "symbol"
                          : typeof obj;
                      };

                function _classCallCheck(instance, Constructor) {
                  if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                  }
                }

                var Hoek = __webpack_require__(2);
                var Language = __webpack_require__(14);

                // Declare internals

                var internals = {
                  annotations: Symbol("joi-annotations")
                };

                internals.stringify = function(value, wrapArrays) {
                  var type =
                    typeof value === "undefined" ? "undefined" : _typeof(value);

                  if (value === null) {
                    return "null";
                  }

                  if (type === "string") {
                    return value;
                  }

                  if (value instanceof exports.Err || type === "function") {
                    return value.toString();
                  }

                  if (type === "object") {
                    if (Array.isArray(value)) {
                      var partial = "";

                      for (var i = 0; i < value.length; ++i) {
                        partial =
                          partial +
                          (partial.length ? ", " : "") +
                          internals.stringify(value[i], wrapArrays);
                      }

                      return wrapArrays ? "[" + partial + "]" : partial;
                    }

                    return value.toString();
                  }

                  return JSON.stringify(value);
                };

                exports.Err = (function() {
                  function _class(
                    type,
                    context,
                    state,
                    options,
                    flags,
                    message,
                    template
                  ) {
                    _classCallCheck(this, _class);

                    this.isJoi = true;
                    this.type = type;
                    this.context = context || {};
                    this.context.key = state.key;
                    this.path = state.path;
                    this.options = options;
                    this.flags = flags;
                    this.message = message;
                    this.template = template;
                  }

                  _class.prototype.toString = function toString() {
                    var _this = this;

                    if (this.message) {
                      return this.message;
                    }

                    var format = void 0;

                    if (this.template) {
                      format = this.template;
                    }

                    var localized = this.options.language;

                    if (this.flags.label) {
                      this.context.key = this.flags.label;
                    } else if (
                      this.context.key === "" ||
                      this.context.key === null
                    ) {
                      this.context.key = localized.root || Language.errors.root;
                    }

                    format =
                      format ||
                      Hoek.reach(localized, this.type) ||
                      Hoek.reach(Language.errors, this.type);

                    var wrapArrays = Hoek.reach(
                      localized,
                      "messages.wrapArrays"
                    );
                    if (typeof wrapArrays !== "boolean") {
                      wrapArrays = Language.errors.messages.wrapArrays;
                    }

                    if (format === null) {
                      var childrenString = internals.stringify(
                        this.context.reason,
                        wrapArrays
                      );
                      if (wrapArrays) {
                        return childrenString.slice(1, -1);
                      }
                      return childrenString;
                    }

                    var hasKey = /\{\{\!?key\}\}/.test(format);
                    var skipKey =
                      format.length > 2 &&
                      format[0] === "!" &&
                      format[1] === "!";

                    if (skipKey) {
                      format = format.slice(2);
                    }

                    if (!hasKey && !skipKey) {
                      format =
                        (Hoek.reach(localized, "key") ||
                          Hoek.reach(Language.errors, "key")) + format;
                    }

                    return format.replace(/\{\{(\!?)([^}]+)\}\}/g, function(
                      $0,
                      isSecure,
                      name
                    ) {
                      var value = Hoek.reach(_this.context, name);
                      var normalized = internals.stringify(value, wrapArrays);
                      return isSecure
                        ? Hoek.escapeHtml(normalized)
                        : normalized;
                    });
                  };

                  return _class;
                })();

                exports.create = function(
                  type,
                  context,
                  state,
                  options,
                  flags,
                  message,
                  template
                ) {
                  return new exports.Err(
                    type,
                    context,
                    state,
                    options,
                    flags,
                    message,
                    template
                  );
                };

                exports.process = function(errors, object) {
                  if (!errors || !errors.length) {
                    return null;
                  }

                  // Construct error

                  var message = "";
                  var details = [];

                  var processErrors = function processErrors(
                    localErrors,
                    parent
                  ) {
                    for (var i = 0; i < localErrors.length; ++i) {
                      var item = localErrors[i];

                      if (item instanceof Error) {
                        return item;
                      }

                      if (
                        item.flags.error &&
                        typeof item.flags.error !== "function"
                      ) {
                        return item.flags.error;
                      }

                      var itemMessage = void 0;
                      if (parent === undefined) {
                        itemMessage = item.toString();
                        message = message + (message ? ". " : "") + itemMessage;
                      }

                      // Do not push intermediate errors, we're only interested in leafs

                      if (item.context.reason && item.context.reason.length) {
                        var _override = processErrors(
                          item.context.reason,
                          item.path
                        );
                        if (_override) {
                          return _override;
                        }
                      } else {
                        details.push({
                          message: itemMessage || item.toString(),
                          path: internals.getPath(item),
                          type: item.type,
                          context: item.context
                        });
                      }
                    }
                  };

                  var override = processErrors(errors);
                  if (override) {
                    return override;
                  }

                  var error = new Error(message);
                  error.isJoi = true;
                  error.name = "ValidationError";
                  error.details = details;
                  error._object = object;
                  error.annotate = internals.annotate;
                  return error;
                };

                internals.getPath = function(item) {
                  return item.path || item.context.key;
                };

                // Inspired by json-stringify-safe
                internals.safeStringify = function(obj, spaces) {
                  return JSON.stringify(obj, internals.serializer(), spaces);
                };

                internals.serializer = function() {
                  var keys = [];
                  var stack = [];

                  var cycleReplacer = function cycleReplacer(key, value) {
                    if (stack[0] === value) {
                      return "[Circular ~]";
                    }

                    return (
                      "[Circular ~." +
                      keys.slice(0, stack.indexOf(value)).join(".") +
                      "]"
                    );
                  };

                  return function(key, value) {
                    if (stack.length > 0) {
                      var thisPos = stack.indexOf(this);
                      if (~thisPos) {
                        stack.length = thisPos + 1;
                        keys.length = thisPos + 1;
                        keys[thisPos] = key;
                      } else {
                        stack.push(this);
                        keys.push(key);
                      }

                      if (~stack.indexOf(value)) {
                        value = cycleReplacer.call(this, key, value);
                      }
                    } else {
                      stack.push(value);
                    }

                    if (value) {
                      var annotations = value[internals.annotations];
                      if (annotations) {
                        if (Array.isArray(value)) {
                          var annotated = [];

                          for (var i = 0; i < value.length; ++i) {
                            if (annotations.errors[i]) {
                              annotated.push(
                                "_$idx$_" +
                                  annotations.errors[i].sort().join(", ") +
                                  "_$end$_"
                              );
                            }
                            annotated.push(value[i]);
                          }

                          value = annotated;
                        } else {
                          var errorKeys = Object.keys(annotations.errors);
                          for (var _i = 0; _i < errorKeys.length; ++_i) {
                            var errorKey = errorKeys[_i];
                            value[
                              errorKey +
                                "_$key$_" +
                                annotations.errors[errorKey].sort().join(", ") +
                                "_$end$_"
                            ] =
                              value[errorKey];
                            value[errorKey] = undefined;
                          }

                          var missingKeys = Object.keys(annotations.missing);
                          for (var _i2 = 0; _i2 < missingKeys.length; ++_i2) {
                            var missingKey = missingKeys[_i2];
                            value[
                              "_$miss$_" +
                                missingKey +
                                "|" +
                                annotations.missing[missingKey] +
                                "_$end$_"
                            ] =
                              "__missing__";
                          }
                        }

                        return value;
                      }
                    }

                    if (
                      value === Infinity ||
                      value === -Infinity ||
                      Number.isNaN(value) ||
                      typeof value === "function" ||
                      (typeof value === "undefined"
                        ? "undefined"
                        : _typeof(value)) === "symbol"
                    ) {
                      return "[" + value.toString() + "]";
                    }

                    return value;
                  };
                };

                internals.annotate = function(stripColorCodes) {
                  var redFgEscape = stripColorCodes ? "" : "\x1B[31m";
                  var redBgEscape = stripColorCodes ? "" : "\x1B[41m";
                  var endColor = stripColorCodes ? "" : "\x1B[0m";

                  if (_typeof(this._object) !== "object") {
                    return this.details[0].message;
                  }

                  var obj = Hoek.clone(this._object || {});

                  for (var i = this.details.length - 1; i >= 0; --i) {
                    // Reverse order to process deepest child first
                    var pos = i + 1;
                    var error = this.details[i];
                    var path = error.path.split(".");
                    var ref = obj;
                    for (var j = 0; ; ++j) {
                      var seg = path[j];

                      if (ref.isImmutable) {
                        ref = ref.clone(); // joi schemas are not cloned by hoek, we have to take this extra step
                      }

                      if (
                        j + 1 < path.length &&
                        ref[seg] &&
                        typeof ref[seg] !== "string"
                      ) {
                        ref = ref[seg];
                      } else {
                        var refAnnotations = (ref[internals.annotations] = ref[
                          internals.annotations
                        ] || { errors: {}, missing: {} });
                        var value = ref[seg];

                        if (value !== undefined) {
                          refAnnotations.errors[seg] =
                            refAnnotations.errors[seg] || [];
                          refAnnotations.errors[seg].push(pos);
                        } else {
                          refAnnotations.missing[seg] = pos;
                        }

                        break;
                      }
                    }
                  }

                  var replacers = {
                    key: /_\$key\$_([, \d]+)_\$end\$_\"/g,
                    missing: /\"_\$miss\$_([^\|]+)\|(\d+)_\$end\$_\"\: \"__missing__\"/g,
                    arrayIndex: /\s*\"_\$idx\$_([, \d]+)_\$end\$_\",?\n(.*)/g,
                    specials: /"\[(NaN|Symbol.*|-?Infinity|function.*|\(.*)\]"/g
                  };

                  var message = internals
                    .safeStringify(obj, 2)
                    .replace(replacers.key, function($0, $1) {
                      return '" ' + redFgEscape + "[" + $1 + "]" + endColor;
                    })
                    .replace(replacers.missing, function($0, $1, $2) {
                      return (
                        redBgEscape +
                        '"' +
                        $1 +
                        '"' +
                        endColor +
                        redFgEscape +
                        " [" +
                        $2 +
                        "]: -- missing --" +
                        endColor
                      );
                    })
                    .replace(replacers.arrayIndex, function($0, $1, $2) {
                      return (
                        "\n" +
                        $2 +
                        " " +
                        redFgEscape +
                        "[" +
                        $1 +
                        "]" +
                        endColor
                      );
                    })
                    .replace(replacers.specials, function($0, $1) {
                      return $1;
                    });

                  message = message + "\n" + redFgEscape;

                  for (var _i3 = 0; _i3 < this.details.length; ++_i3) {
                    var _pos = _i3 + 1;
                    message =
                      message + "\n[" + _pos + "] " + this.details[_i3].message;
                  }

                  message = message + endColor;

                  return message;
                };

                /***/
              },
              /* 14 */
              /***/ function(module, exports) {
                "use strict";

                // Load modules

                // Declare internals

                var internals = {};

                exports.errors = {
                  root: "value",
                  key: '"{{!key}}" ',
                  messages: {
                    wrapArrays: true
                  },
                  any: {
                    unknown: "is not allowed",
                    invalid: "contains an invalid value",
                    empty: "is not allowed to be empty",
                    required: "is required",
                    allowOnly: "must be one of {{valids}}",
                    default: "threw an error when running default method"
                  },
                  alternatives: {
                    base: "not matching any of the allowed alternatives",
                    child: null
                  },
                  array: {
                    base: "must be an array",
                    includes:
                      "at position {{pos}} does not match any of the allowed types",
                    includesSingle:
                      'single value of "{{!key}}" does not match any of the allowed types',
                    includesOne: "at position {{pos}} fails because {{reason}}",
                    includesOneSingle:
                      'single value of "{{!key}}" fails because {{reason}}',
                    includesRequiredUnknowns:
                      "does not contain {{unknownMisses}} required value(s)",
                    includesRequiredKnowns: "does not contain {{knownMisses}}",
                    includesRequiredBoth:
                      "does not contain {{knownMisses}} and {{unknownMisses}} other required value(s)",
                    excludes: "at position {{pos}} contains an excluded value",
                    excludesSingle:
                      'single value of "{{!key}}" contains an excluded value',
                    min: "must contain at least {{limit}} items",
                    max: "must contain less than or equal to {{limit}} items",
                    length: "must contain {{limit}} items",
                    ordered: "at position {{pos}} fails because {{reason}}",
                    orderedLength:
                      "at position {{pos}} fails because array must contain at most {{limit}} items",
                    ref: 'references "{{ref}}" which is not a positive integer',
                    sparse: "must not be a sparse array",
                    unique: "position {{pos}} contains a duplicate value"
                  },
                  boolean: {
                    base: "must be a boolean"
                  },
                  binary: {
                    base: "must be a buffer or a string",
                    min: "must be at least {{limit}} bytes",
                    max: "must be less than or equal to {{limit}} bytes",
                    length: "must be {{limit}} bytes"
                  },
                  date: {
                    base:
                      "must be a number of milliseconds or valid date string",
                    format:
                      "must be a string with one of the following formats {{format}}",
                    strict: "must be a valid date",
                    min: 'must be larger than or equal to "{{limit}}"',
                    max: 'must be less than or equal to "{{limit}}"',
                    isoDate: "must be a valid ISO 8601 date",
                    timestamp: {
                      javascript:
                        "must be a valid timestamp or number of milliseconds",
                      unix: "must be a valid timestamp or number of seconds"
                    },
                    ref: 'references "{{ref}}" which is not a date'
                  },
                  function: {
                    base: "must be a Function",
                    arity: "must have an arity of {{n}}",
                    minArity: "must have an arity greater or equal to {{n}}",
                    maxArity: "must have an arity lesser or equal to {{n}}",
                    ref: "must be a Joi reference"
                  },
                  lazy: {
                    base: "!!schema error: lazy schema must be set",
                    schema:
                      "!!schema error: lazy schema function must return a schema"
                  },
                  object: {
                    base: "must be an object",
                    child: '!!child "{{!child}}" fails because {{reason}}',
                    min: "must have at least {{limit}} children",
                    max: "must have less than or equal to {{limit}} children",
                    length: "must have {{limit}} children",
                    allowUnknown: '!!"{{!child}}" is not allowed',
                    with:
                      '!!"{{mainWithLabel}}" missing required peer "{{peerWithLabel}}"',
                    without:
                      '!!"{{mainWithLabel}}" conflict with forbidden peer "{{peerWithLabel}}"',
                    missing: "must contain at least one of {{peersWithLabels}}",
                    xor:
                      "contains a conflict between exclusive peers {{peersWithLabels}}",
                    or: "must contain at least one of {{peersWithLabels}}",
                    and:
                      "contains {{presentWithLabels}} without its required peers {{missingWithLabels}}",
                    nand:
                      '!!"{{mainWithLabel}}" must not exist simultaneously with {{peersWithLabels}}',
                    assert:
                      '!!"{{ref}}" validation failed because "{{ref}}" failed to {{message}}',
                    rename: {
                      multiple:
                        'cannot rename child "{{from}}" because multiple renames are disabled and another key was already renamed to "{{to}}"',
                      override:
                        'cannot rename child "{{from}}" because override is disabled and target "{{to}}" exists'
                    },
                    type: 'must be an instance of "{{type}}"',
                    schema: "must be a Joi instance"
                  },
                  number: {
                    base: "must be a number",
                    min: "must be larger than or equal to {{limit}}",
                    max: "must be less than or equal to {{limit}}",
                    less: "must be less than {{limit}}",
                    greater: "must be greater than {{limit}}",
                    float: "must be a float or double",
                    integer: "must be an integer",
                    negative: "must be a negative number",
                    positive: "must be a positive number",
                    precision:
                      "must have no more than {{limit}} decimal places",
                    ref: 'references "{{ref}}" which is not a number',
                    multiple: "must be a multiple of {{multiple}}"
                  },
                  string: {
                    base: "must be a string",
                    min: "length must be at least {{limit}} characters long",
                    max:
                      "length must be less than or equal to {{limit}} characters long",
                    length: "length must be {{limit}} characters long",
                    alphanum: "must only contain alpha-numeric characters",
                    token:
                      "must only contain alpha-numeric and underscore characters",
                    regex: {
                      base:
                        'with value "{{!value}}" fails to match the required pattern: {{pattern}}',
                      name:
                        'with value "{{!value}}" fails to match the {{name}} pattern',
                      invert: {
                        base:
                          'with value "{{!value}}" matches the inverted pattern: {{pattern}}',
                        name:
                          'with value "{{!value}}" matches the inverted {{name}} pattern'
                      }
                    },
                    email: "must be a valid email",
                    uri: "must be a valid uri",
                    uriRelativeOnly: "must be a valid relative uri",
                    uriCustomScheme:
                      "must be a valid uri with a scheme matching the {{scheme}} pattern",
                    isoDate: "must be a valid ISO 8601 date",
                    guid: "must be a valid GUID",
                    hex: "must only contain hexadecimal characters",
                    base64: "must be a valid base64 string",
                    hostname: "must be a valid hostname",
                    lowercase: "must only contain lowercase characters",
                    uppercase: "must only contain uppercase characters",
                    trim: "must not have leading or trailing whitespace",
                    creditCard: "must be a credit card",
                    ref: 'references "{{ref}}" which is not a number',
                    ip: "must be a valid ip address with a {{cidr}} CIDR",
                    ipVersion:
                      "must be a valid ip address of one of the following versions {{version}} with a {{cidr}} CIDR"
                  }
                };

                /***/
              },
              /* 15 */
              /***/ function(module, exports, __webpack_require__) {
                /* WEBPACK VAR INJECTION */ (function(Buffer) {
                  "use strict";

                  var _typeof =
                    typeof Symbol === "function" &&
                    typeof Symbol.iterator === "symbol"
                      ? function(obj) {
                          return typeof obj;
                        }
                      : function(obj) {
                          return obj &&
                          typeof Symbol === "function" &&
                          obj.constructor === Symbol &&
                          obj !== Symbol.prototype
                            ? "symbol"
                            : typeof obj;
                        };

                  function _classCallCheck(instance, Constructor) {
                    if (!(instance instanceof Constructor)) {
                      throw new TypeError("Cannot call a class as a function");
                    }
                  }

                  var Ref = __webpack_require__(12);

                  module.exports = (function() {
                    function Set() {
                      _classCallCheck(this, Set);

                      this._set = [];
                    }

                    Set.prototype.add = function add(value, refs) {
                      if (
                        !Ref.isRef(value) &&
                        this.has(value, null, null, false)
                      ) {
                        return;
                      }

                      if (refs !== undefined) {
                        // If it's a merge, we don't have any refs
                        Ref.push(refs, value);
                      }

                      this._set.push(value);
                      return this;
                    };

                    Set.prototype.merge = function merge(add, remove) {
                      for (var i = 0; i < add._set.length; ++i) {
                        this.add(add._set[i]);
                      }

                      for (var _i = 0; _i < remove._set.length; ++_i) {
                        this.remove(remove._set[_i]);
                      }

                      return this;
                    };

                    Set.prototype.remove = function remove(value) {
                      this._set = this._set.filter(function(item) {
                        return value !== item;
                      });
                      return this;
                    };

                    Set.prototype.has = function has(
                      value,
                      state,
                      options,
                      insensitive
                    ) {
                      for (var i = 0; i < this._set.length; ++i) {
                        var items = this._set[i];

                        if (state && Ref.isRef(items)) {
                          // Only resolve references if there is a state, otherwise it's a merge
                          items = items(
                            state.reference || state.parent,
                            options
                          );
                        }

                        if (!Array.isArray(items)) {
                          items = [items];
                        }

                        for (var j = 0; j < items.length; ++j) {
                          var item = items[j];
                          if (
                            (typeof value === "undefined"
                              ? "undefined"
                              : _typeof(value)) !==
                            (typeof item === "undefined"
                              ? "undefined"
                              : _typeof(item))
                          ) {
                            continue;
                          }

                          if (
                            value === item ||
                            (value instanceof Date &&
                              item instanceof Date &&
                              value.getTime() === item.getTime()) ||
                            (insensitive &&
                              typeof value === "string" &&
                              value.toLowerCase() === item.toLowerCase()) ||
                            (Buffer.isBuffer(value) &&
                              Buffer.isBuffer(item) &&
                              value.length === item.length &&
                              value.toString("binary") ===
                                item.toString("binary"))
                          ) {
                            return true;
                          }
                        }
                      }

                      return false;
                    };

                    Set.prototype.values = function values(options) {
                      if (options && options.stripUndefined) {
                        var values = [];

                        for (var i = 0; i < this._set.length; ++i) {
                          var item = this._set[i];
                          if (item !== undefined) {
                            values.push(item);
                          }
                        }

                        return values;
                      }

                      return this._set.slice();
                    };

                    Set.prototype.slice = function slice() {
                      var newSet = new Set();
                      newSet._set = this._set.slice();

                      return newSet;
                    };

                    Set.prototype.concat = function concat(source) {
                      var newSet = new Set();
                      newSet._set = this._set.concat(source._set);

                      return newSet;
                    };

                    return Set;
                  })();
                  /* WEBPACK VAR INJECTION */
                }.call(exports, __webpack_require__(3).Buffer));

                /***/
              },
              /* 16 */
              /***/ function(module, exports, __webpack_require__) {
                "use strict";

                // Load modules

                var _typeof =
                  typeof Symbol === "function" &&
                  typeof Symbol.iterator === "symbol"
                    ? function(obj) {
                        return typeof obj;
                      }
                    : function(obj) {
                        return obj &&
                        typeof Symbol === "function" &&
                        obj.constructor === Symbol &&
                        obj !== Symbol.prototype
                          ? "symbol"
                          : typeof obj;
                      };

                var Hoek = __webpack_require__(2);
                var Ref = __webpack_require__(12);

                // Type modules are delay-loaded to prevent circular dependencies

                // Declare internals

                var internals = {
                  any: null,
                  date: __webpack_require__(17),
                  string: __webpack_require__(18),
                  number: __webpack_require__(23),
                  boolean: __webpack_require__(24),
                  alt: null,
                  object: null
                };

                exports.schema = function(config) {
                  internals.any =
                    internals.any || new (__webpack_require__(11))();
                  internals.alt = internals.alt || __webpack_require__(25);
                  internals.object =
                    internals.object || __webpack_require__(26);

                  if (
                    config !== undefined &&
                    config !== null &&
                    (typeof config === "undefined"
                      ? "undefined"
                      : _typeof(config)) === "object"
                  ) {
                    if (config.isJoi) {
                      return config;
                    }

                    if (Array.isArray(config)) {
                      return internals.alt.try(config);
                    }

                    if (config instanceof RegExp) {
                      return internals.string.regex(config);
                    }

                    if (config instanceof Date) {
                      return internals.date.valid(config);
                    }

                    return internals.object.keys(config);
                  }

                  if (typeof config === "string") {
                    return internals.string.valid(config);
                  }

                  if (typeof config === "number") {
                    return internals.number.valid(config);
                  }

                  if (typeof config === "boolean") {
                    return internals.boolean.valid(config);
                  }

                  if (Ref.isRef(config)) {
                    return internals.any.valid(config);
                  }

                  Hoek.assert(
                    config === null,
                    "Invalid schema content:",
                    config
                  );

                  return internals.any.valid(null);
                };

                exports.ref = function(id) {
                  return Ref.isRef(id) ? id : Ref.create(id);
                };

                /***/
              },
              /* 17 */
              /***/ function(module, exports, __webpack_require__) {
                "use strict";

                // Load modules

                function _defaults(obj, defaults) {
                  var keys = Object.getOwnPropertyNames(defaults);
                  for (var i = 0; i < keys.length; i++) {
                    var key = keys[i];
                    var value = Object.getOwnPropertyDescriptor(defaults, key);
                    if (value && value.configurable && obj[key] === undefined) {
                      Object.defineProperty(obj, key, value);
                    }
                  }
                  return obj;
                }

                function _classCallCheck(instance, Constructor) {
                  if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                  }
                }

                function _possibleConstructorReturn(self, call) {
                  if (!self) {
                    throw new ReferenceError(
                      "this hasn't been initialised - super() hasn't been called"
                    );
                  }
                  return call &&
                  (typeof call === "object" || typeof call === "function")
                    ? call
                    : self;
                }

                function _inherits(subClass, superClass) {
                  if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError(
                      "Super expression must either be null or a function, not " +
                        typeof superClass
                    );
                  }
                  subClass.prototype = Object.create(
                    superClass && superClass.prototype,
                    {
                      constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                      }
                    }
                  );
                  if (superClass)
                    Object.setPrototypeOf
                      ? Object.setPrototypeOf(subClass, superClass)
                      : _defaults(subClass, superClass);
                }

                var Any = __webpack_require__(11);
                var Ref = __webpack_require__(12);
                var Hoek = __webpack_require__(2);

                // Declare internals

                var internals = {};

                internals.isoDate = /^(?:[-+]\d{2})?(?:\d{4}(?!\d{2}\b))(?:(-?)(?:(?:0[1-9]|1[0-2])(?:\1(?:[12]\d|0[1-9]|3[01]))?|W(?:[0-4]\d|5[0-2])(?:-?[1-7])?|(?:00[1-9]|0[1-9]\d|[12]\d{2}|3(?:[0-5]\d|6[1-6])))(?![T]$|[T][\d]+Z$)(?:[T\s](?:(?:(?:[01]\d|2[0-3])(?:(:?)[0-5]\d)?|24\:?00)(?:[.,]\d+(?!:))?)(?:\2[0-5]\d(?:[.,]\d+)?)?(?:[Z]|(?:[+-])(?:[01]\d|2[0-3])(?::?[0-5]\d)?)?)?)?$/;
                internals.invalidDate = new Date("");
                internals.isIsoDate = (function() {
                  var isoString = internals.isoDate.toString();

                  return function(date) {
                    return date && date.toString() === isoString;
                  };
                })();

                internals.Date = (function(_Any) {
                  _inherits(_class, _Any);

                  function _class() {
                    _classCallCheck(this, _class);

                    var _this = _possibleConstructorReturn(
                      this,
                      _Any.call(this)
                    );

                    _this._type = "date";
                    return _this;
                  }

                  _class.prototype._base = function _base(
                    value,
                    state,
                    options
                  ) {
                    var result = {
                      value:
                        (options.convert &&
                          internals.Date.toDate(
                            value,
                            this._flags.format,
                            this._flags.timestamp,
                            this._flags.multiplier
                          )) ||
                        value
                    };

                    if (
                      result.value instanceof Date &&
                      !isNaN(result.value.getTime())
                    ) {
                      result.errors = null;
                    } else if (!options.convert) {
                      result.errors = this.createError(
                        "date.strict",
                        null,
                        state,
                        options
                      );
                    } else {
                      var type = void 0;
                      if (internals.isIsoDate(this._flags.format)) {
                        type = "isoDate";
                      } else if (this._flags.timestamp) {
                        type = "timestamp." + this._flags.timestamp;
                      } else {
                        type = "base";
                      }

                      result.errors = this.createError(
                        "date." + type,
                        null,
                        state,
                        options
                      );
                    }

                    return result;
                  };

                  _class.toDate = function toDate(
                    value,
                    format,
                    timestamp,
                    multiplier
                  ) {
                    if (value instanceof Date) {
                      return value;
                    }

                    if (
                      typeof value === "string" ||
                      (typeof value === "number" &&
                        !isNaN(value) &&
                        isFinite(value))
                    ) {
                      if (
                        typeof value === "string" &&
                        /^[+-]?\d+(\.\d+)?$/.test(value)
                      ) {
                        value = parseFloat(value);
                      }

                      var date = void 0;
                      if (format && internals.isIsoDate(format)) {
                        date = format.test(value)
                          ? new Date(value)
                          : internals.invalidDate;
                      } else if (timestamp && multiplier) {
                        date = new Date(value * multiplier);
                      } else {
                        date = new Date(value);
                      }

                      if (!isNaN(date.getTime())) {
                        return date;
                      }
                    }

                    return null;
                  };

                  _class.prototype.iso = function iso() {
                    if (this._flags.format === internals.isoDate) {
                      return this;
                    }

                    var obj = this.clone();
                    obj._flags.format = internals.isoDate;
                    return obj;
                  };

                  _class.prototype.timestamp = function timestamp(type) {
                    type = type || "javascript";

                    var allowed = ["javascript", "unix"];
                    Hoek.assert(
                      allowed.indexOf(type) !== -1,
                      '"type" must be one of "' + allowed.join('", "') + '"'
                    );

                    if (this._flags.timestamp === type) {
                      return this;
                    }

                    var obj = this.clone();
                    obj._flags.timestamp = type;
                    obj._flags.multiplier = type === "unix" ? 1000 : 1;
                    return obj;
                  };

                  _class.prototype._isIsoDate = function _isIsoDate(value) {
                    return internals.isoDate.test(value);
                  };

                  return _class;
                })(Any);

                internals.compare = function(type, compare) {
                  return function(date) {
                    var isNow = date === "now";
                    var isRef = Ref.isRef(date);

                    if (!isNow && !isRef) {
                      date = internals.Date.toDate(date);
                    }

                    Hoek.assert(date, "Invalid date format");

                    return this._test(type, date, function(
                      value,
                      state,
                      options
                    ) {
                      var compareTo = void 0;
                      if (isNow) {
                        compareTo = Date.now();
                      } else if (isRef) {
                        compareTo = internals.Date.toDate(
                          date(state.reference || state.parent, options)
                        );

                        if (!compareTo) {
                          return this.createError(
                            "date.ref",
                            { ref: date.key },
                            state,
                            options
                          );
                        }

                        compareTo = compareTo.getTime();
                      } else {
                        compareTo = date.getTime();
                      }

                      if (compare(value.getTime(), compareTo)) {
                        return value;
                      }

                      return this.createError(
                        "date." + type,
                        { limit: new Date(compareTo) },
                        state,
                        options
                      );
                    });
                  };
                };
                internals.Date.prototype.min = internals.compare(
                  "min",
                  function(value, date) {
                    return value >= date;
                  }
                );
                internals.Date.prototype.max = internals.compare(
                  "max",
                  function(value, date) {
                    return value <= date;
                  }
                );

                module.exports = new internals.Date();

                /***/
              },
              /* 18 */
              /***/ function(module, exports, __webpack_require__) {
                /* WEBPACK VAR INJECTION */ (function(Buffer) {
                  "use strict";

                  // Load modules

                  var _typeof =
                    typeof Symbol === "function" &&
                    typeof Symbol.iterator === "symbol"
                      ? function(obj) {
                          return typeof obj;
                        }
                      : function(obj) {
                          return obj &&
                          typeof Symbol === "function" &&
                          obj.constructor === Symbol &&
                          obj !== Symbol.prototype
                            ? "symbol"
                            : typeof obj;
                        };

                  function _defaults(obj, defaults) {
                    var keys = Object.getOwnPropertyNames(defaults);
                    for (var i = 0; i < keys.length; i++) {
                      var key = keys[i];
                      var value = Object.getOwnPropertyDescriptor(
                        defaults,
                        key
                      );
                      if (
                        value &&
                        value.configurable &&
                        obj[key] === undefined
                      ) {
                        Object.defineProperty(obj, key, value);
                      }
                    }
                    return obj;
                  }

                  function _classCallCheck(instance, Constructor) {
                    if (!(instance instanceof Constructor)) {
                      throw new TypeError("Cannot call a class as a function");
                    }
                  }

                  function _possibleConstructorReturn(self, call) {
                    if (!self) {
                      throw new ReferenceError(
                        "this hasn't been initialised - super() hasn't been called"
                      );
                    }
                    return call &&
                    (typeof call === "object" || typeof call === "function")
                      ? call
                      : self;
                  }

                  function _inherits(subClass, superClass) {
                    if (
                      typeof superClass !== "function" &&
                      superClass !== null
                    ) {
                      throw new TypeError(
                        "Super expression must either be null or a function, not " +
                          typeof superClass
                      );
                    }
                    subClass.prototype = Object.create(
                      superClass && superClass.prototype,
                      {
                        constructor: {
                          value: subClass,
                          enumerable: false,
                          writable: true,
                          configurable: true
                        }
                      }
                    );
                    if (superClass)
                      Object.setPrototypeOf
                        ? Object.setPrototypeOf(subClass, superClass)
                        : _defaults(subClass, superClass);
                  }

                  var Net = __webpack_require__(5);
                  var Hoek = __webpack_require__(2);
                  var Isemail = void 0; // Loaded on demand
                  var Any = __webpack_require__(11);
                  var Ref = __webpack_require__(12);
                  var JoiDate = __webpack_require__(17);
                  var Uri = __webpack_require__(19);
                  var Ip = __webpack_require__(21);

                  // Declare internals

                  var internals = {
                    uriRegex: Uri.createUriRegex(),
                    ipRegex: Ip.createIpRegex(
                      ["ipv4", "ipv6", "ipvfuture"],
                      "optional"
                    ),
                    guidBrackets: {
                      "{": "}",
                      "[": "]",
                      "(": ")",
                      "": ""
                    },
                    guidVersions: {
                      uuidv1: "1",
                      uuidv2: "2",
                      uuidv3: "3",
                      uuidv4: "4",
                      uuidv5: "5"
                    }
                  };

                  internals.String = (function(_Any) {
                    _inherits(_class, _Any);

                    function _class() {
                      _classCallCheck(this, _class);

                      var _this = _possibleConstructorReturn(
                        this,
                        _Any.call(this)
                      );

                      _this._type = "string";
                      _this._invalids.add("");
                      return _this;
                    }

                    _class.prototype._base = function _base(
                      value,
                      state,
                      options
                    ) {
                      if (typeof value === "string" && options.convert) {
                        if (this._flags.case) {
                          value =
                            this._flags.case === "upper"
                              ? value.toLocaleUpperCase()
                              : value.toLocaleLowerCase();
                        }

                        if (this._flags.trim) {
                          value = value.trim();
                        }

                        if (this._inner.replacements) {
                          for (
                            var i = 0;
                            i < this._inner.replacements.length;
                            ++i
                          ) {
                            var replacement = this._inner.replacements[i];
                            value = value.replace(
                              replacement.pattern,
                              replacement.replacement
                            );
                          }
                        }

                        if (this._flags.truncate) {
                          for (var _i = 0; _i < this._tests.length; ++_i) {
                            var test = this._tests[_i];
                            if (test.name === "max") {
                              value = value.slice(0, test.arg);
                              break;
                            }
                          }
                        }
                      }

                      return {
                        value: value,
                        errors:
                          typeof value === "string"
                            ? null
                            : this.createError(
                                "string.base",
                                { value: value },
                                state,
                                options
                              )
                      };
                    };

                    _class.prototype.insensitive = function insensitive() {
                      if (this._flags.insensitive) {
                        return this;
                      }

                      var obj = this.clone();
                      obj._flags.insensitive = true;
                      return obj;
                    };

                    _class.prototype.creditCard = function creditCard() {
                      return this._test("creditCard", undefined, function(
                        value,
                        state,
                        options
                      ) {
                        var i = value.length;
                        var sum = 0;
                        var mul = 1;

                        while (i--) {
                          var char = value.charAt(i) * mul;
                          sum = sum + (char - (char > 9) * 9);
                          mul = mul ^ 3;
                        }

                        var check = sum % 10 === 0 && sum > 0;
                        return check
                          ? value
                          : this.createError(
                              "string.creditCard",
                              { value: value },
                              state,
                              options
                            );
                      });
                    };

                    _class.prototype.regex = function regex(
                      pattern,
                      patternOptions
                    ) {
                      Hoek.assert(
                        pattern instanceof RegExp,
                        "pattern must be a RegExp"
                      );

                      var patternObject = {
                        pattern: new RegExp(
                          pattern.source,
                          pattern.ignoreCase ? "i" : undefined
                        ) // Future version should break this and forbid unsupported regex flags
                      };

                      if (typeof patternOptions === "string") {
                        patternObject.name = patternOptions;
                      } else if (
                        (typeof patternOptions === "undefined"
                          ? "undefined"
                          : _typeof(patternOptions)) === "object"
                      ) {
                        patternObject.invert = !!patternOptions.invert;

                        if (patternOptions.name) {
                          patternObject.name = patternOptions.name;
                        }
                      }

                      var errorCode = [
                        "string.regex",
                        patternObject.invert ? ".invert" : "",
                        patternObject.name ? ".name" : ".base"
                      ].join("");

                      return this._test("regex", patternObject, function(
                        value,
                        state,
                        options
                      ) {
                        var patternMatch = patternObject.pattern.test(value);

                        if (patternMatch ^ patternObject.invert) {
                          return value;
                        }

                        return this.createError(
                          errorCode,
                          {
                            name: patternObject.name,
                            pattern: patternObject.pattern,
                            value: value
                          },
                          state,
                          options
                        );
                      });
                    };

                    _class.prototype.alphanum = function alphanum() {
                      return this._test("alphanum", undefined, function(
                        value,
                        state,
                        options
                      ) {
                        if (/^[a-zA-Z0-9]+$/.test(value)) {
                          return value;
                        }

                        return this.createError(
                          "string.alphanum",
                          { value: value },
                          state,
                          options
                        );
                      });
                    };

                    _class.prototype.token = function token() {
                      return this._test("token", undefined, function(
                        value,
                        state,
                        options
                      ) {
                        if (/^\w+$/.test(value)) {
                          return value;
                        }

                        return this.createError(
                          "string.token",
                          { value: value },
                          state,
                          options
                        );
                      });
                    };

                    _class.prototype.email = function email(isEmailOptions) {
                      if (isEmailOptions) {
                        Hoek.assert(
                          (typeof isEmailOptions === "undefined"
                            ? "undefined"
                            : _typeof(isEmailOptions)) === "object",
                          "email options must be an object"
                        );
                        Hoek.assert(
                          typeof isEmailOptions.checkDNS === "undefined",
                          "checkDNS option is not supported"
                        );
                        Hoek.assert(
                          typeof isEmailOptions.tldWhitelist === "undefined" ||
                            _typeof(isEmailOptions.tldWhitelist) === "object",
                          "tldWhitelist must be an array or object"
                        );
                        Hoek.assert(
                          typeof isEmailOptions.minDomainAtoms ===
                            "undefined" ||
                            (Number.isSafeInteger(
                              isEmailOptions.minDomainAtoms
                            ) &&
                              isEmailOptions.minDomainAtoms > 0),
                          "minDomainAtoms must be a positive integer"
                        );
                        Hoek.assert(
                          typeof isEmailOptions.errorLevel === "undefined" ||
                            typeof isEmailOptions.errorLevel === "boolean" ||
                            (Number.isSafeInteger(isEmailOptions.errorLevel) &&
                              isEmailOptions.errorLevel >= 0),
                          "errorLevel must be a non-negative integer or boolean"
                        );
                      }

                      return this._test("email", isEmailOptions, function(
                        value,
                        state,
                        options
                      ) {
                        Isemail = Isemail || __webpack_require__(22);

                        try {
                          var result = Isemail.validate(value, isEmailOptions);
                          if (result === true || result === 0) {
                            return value;
                          }
                        } catch (e) {}

                        return this.createError(
                          "string.email",
                          { value: value },
                          state,
                          options
                        );
                      });
                    };

                    _class.prototype.ip = function ip(ipOptions) {
                      var regex = internals.ipRegex;
                      ipOptions = ipOptions || {};
                      Hoek.assert(
                        (typeof ipOptions === "undefined"
                          ? "undefined"
                          : _typeof(ipOptions)) === "object",
                        "options must be an object"
                      );

                      if (ipOptions.cidr) {
                        Hoek.assert(
                          typeof ipOptions.cidr === "string",
                          "cidr must be a string"
                        );
                        ipOptions.cidr = ipOptions.cidr.toLowerCase();

                        Hoek.assert(
                          ipOptions.cidr in Ip.cidrs,
                          "cidr must be one of " +
                            Object.keys(Ip.cidrs).join(", ")
                        );

                        // If we only received a `cidr` setting, create a regex for it. But we don't need to create one if `cidr` is "optional" since that is the default
                        if (
                          !ipOptions.version &&
                          ipOptions.cidr !== "optional"
                        ) {
                          regex = Ip.createIpRegex(
                            ["ipv4", "ipv6", "ipvfuture"],
                            ipOptions.cidr
                          );
                        }
                      } else {
                        // Set our default cidr strategy
                        ipOptions.cidr = "optional";
                      }

                      var versions = void 0;
                      if (ipOptions.version) {
                        if (!Array.isArray(ipOptions.version)) {
                          ipOptions.version = [ipOptions.version];
                        }

                        Hoek.assert(
                          ipOptions.version.length >= 1,
                          "version must have at least 1 version specified"
                        );

                        versions = [];
                        for (var i = 0; i < ipOptions.version.length; ++i) {
                          var version = ipOptions.version[i];
                          Hoek.assert(
                            typeof version === "string",
                            "version at position " + i + " must be a string"
                          );
                          version = version.toLowerCase();
                          Hoek.assert(
                            Ip.versions[version],
                            "version at position " +
                              i +
                              " must be one of " +
                              Object.keys(Ip.versions).join(", ")
                          );
                          versions.push(version);
                        }

                        // Make sure we have a set of versions
                        versions = Hoek.unique(versions);

                        regex = Ip.createIpRegex(versions, ipOptions.cidr);
                      }

                      return this._test("ip", ipOptions, function(
                        value,
                        state,
                        options
                      ) {
                        if (regex.test(value)) {
                          return value;
                        }

                        if (versions) {
                          return this.createError(
                            "string.ipVersion",
                            {
                              value: value,
                              cidr: ipOptions.cidr,
                              version: versions
                            },
                            state,
                            options
                          );
                        }

                        return this.createError(
                          "string.ip",
                          { value: value, cidr: ipOptions.cidr },
                          state,
                          options
                        );
                      });
                    };

                    _class.prototype.uri = function uri(uriOptions) {
                      var customScheme = "";
                      var allowRelative = false;
                      var relativeOnly = false;
                      var regex = internals.uriRegex;

                      if (uriOptions) {
                        Hoek.assert(
                          (typeof uriOptions === "undefined"
                            ? "undefined"
                            : _typeof(uriOptions)) === "object",
                          "options must be an object"
                        );

                        if (uriOptions.scheme) {
                          Hoek.assert(
                            uriOptions.scheme instanceof RegExp ||
                              typeof uriOptions.scheme === "string" ||
                              Array.isArray(uriOptions.scheme),
                            "scheme must be a RegExp, String, or Array"
                          );

                          if (!Array.isArray(uriOptions.scheme)) {
                            uriOptions.scheme = [uriOptions.scheme];
                          }

                          Hoek.assert(
                            uriOptions.scheme.length >= 1,
                            "scheme must have at least 1 scheme specified"
                          );

                          // Flatten the array into a string to be used to match the schemes.
                          for (var i = 0; i < uriOptions.scheme.length; ++i) {
                            var scheme = uriOptions.scheme[i];
                            Hoek.assert(
                              scheme instanceof RegExp ||
                                typeof scheme === "string",
                              "scheme at position " +
                                i +
                                " must be a RegExp or String"
                            );

                            // Add OR separators if a value already exists
                            customScheme =
                              customScheme + (customScheme ? "|" : "");

                            // If someone wants to match HTTP or HTTPS for example then we need to support both RegExp and String so we don't escape their pattern unknowingly.
                            if (scheme instanceof RegExp) {
                              customScheme = customScheme + scheme.source;
                            } else {
                              Hoek.assert(
                                /[a-zA-Z][a-zA-Z0-9+-\.]*/.test(scheme),
                                "scheme at position " +
                                  i +
                                  " must be a valid scheme"
                              );
                              customScheme =
                                customScheme + Hoek.escapeRegex(scheme);
                            }
                          }
                        }

                        if (uriOptions.allowRelative) {
                          allowRelative = true;
                        }

                        if (uriOptions.relativeOnly) {
                          relativeOnly = true;
                        }
                      }

                      if (customScheme || allowRelative || relativeOnly) {
                        regex = Uri.createUriRegex(
                          customScheme,
                          allowRelative,
                          relativeOnly
                        );
                      }

                      return this._test("uri", uriOptions, function(
                        value,
                        state,
                        options
                      ) {
                        if (regex.test(value)) {
                          return value;
                        }

                        if (relativeOnly) {
                          return this.createError(
                            "string.uriRelativeOnly",
                            { value: value },
                            state,
                            options
                          );
                        }

                        if (customScheme) {
                          return this.createError(
                            "string.uriCustomScheme",
                            { scheme: customScheme, value: value },
                            state,
                            options
                          );
                        }

                        return this.createError(
                          "string.uri",
                          { value: value },
                          state,
                          options
                        );
                      });
                    };

                    _class.prototype.isoDate = function isoDate() {
                      return this._test("isoDate", undefined, function(
                        value,
                        state,
                        options
                      ) {
                        if (JoiDate._isIsoDate(value)) {
                          return value;
                        }

                        return this.createError(
                          "string.isoDate",
                          { value: value },
                          state,
                          options
                        );
                      });
                    };

                    _class.prototype.guid = function guid(guidOptions) {
                      var versionNumbers = "";

                      if (guidOptions && guidOptions.version) {
                        if (!Array.isArray(guidOptions.version)) {
                          guidOptions.version = [guidOptions.version];
                        }

                        Hoek.assert(
                          guidOptions.version.length >= 1,
                          "version must have at least 1 valid version specified"
                        );
                        var versions = new Set();

                        for (var i = 0; i < guidOptions.version.length; ++i) {
                          var version = guidOptions.version[i];
                          Hoek.assert(
                            typeof version === "string",
                            "version at position " + i + " must be a string"
                          );
                          version = version.toLowerCase();
                          var versionNumber = internals.guidVersions[version];
                          Hoek.assert(
                            versionNumber,
                            "version at position " +
                              i +
                              " must be one of " +
                              Object.keys(internals.guidVersions).join(", ")
                          );
                          Hoek.assert(
                            !versions.has(versionNumber),
                            "version at position " +
                              i +
                              " must not be a duplicate."
                          );

                          versionNumbers += versionNumber;
                          versions.add(versionNumber);
                        }
                      }

                      var guidRegex = new RegExp(
                        "^([\\[{\\(]?)[0-9A-F]{8}([:-]?)[0-9A-F]{4}\\2?[" +
                          (versionNumbers || "0-9A-F") +
                          "][0-9A-F]{3}\\2?[" +
                          (versionNumbers ? "89AB" : "0-9A-F") +
                          "][0-9A-F]{3}\\2?[0-9A-F]{12}([\\]}\\)]?)$",
                        "i"
                      );

                      return this._test("guid", guidOptions, function(
                        value,
                        state,
                        options
                      ) {
                        var results = guidRegex.exec(value);

                        if (!results) {
                          return this.createError(
                            "string.guid",
                            { value: value },
                            state,
                            options
                          );
                        }

                        // Matching braces
                        if (
                          internals.guidBrackets[results[1]] !==
                          results[results.length - 1]
                        ) {
                          return this.createError(
                            "string.guid",
                            { value: value },
                            state,
                            options
                          );
                        }

                        return value;
                      });
                    };

                    _class.prototype.hex = function hex() {
                      var regex = /^[a-f0-9]+$/i;

                      return this._test("hex", regex, function(
                        value,
                        state,
                        options
                      ) {
                        if (regex.test(value)) {
                          return value;
                        }

                        return this.createError(
                          "string.hex",
                          { value: value },
                          state,
                          options
                        );
                      });
                    };

                    _class.prototype.base64 = function base64(base64Options) {
                      base64Options = base64Options || {};

                      // Validation.
                      Hoek.assert(
                        (typeof base64Options === "undefined"
                          ? "undefined"
                          : _typeof(base64Options)) === "object",
                        "base64 options must be an object"
                      );
                      Hoek.assert(
                        typeof base64Options.paddingRequired === "undefined" ||
                          typeof base64Options.paddingRequired === "boolean",
                        "paddingRequired must be boolean"
                      );

                      // Determine if padding is required.
                      var paddingRequired =
                        base64Options.paddingRequired === false
                          ? base64Options.paddingRequired
                          : base64Options.paddingRequired || true;

                      // Set validation based on preference.
                      var regex = paddingRequired
                        ? // Padding is required.
                          /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/
                        : // Padding is optional.
                          /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}(==)?|[A-Za-z0-9+\/]{3}=?)?$/;

                      return this._test("base64", regex, function(
                        value,
                        state,
                        options
                      ) {
                        if (regex.test(value)) {
                          return value;
                        }

                        return this.createError(
                          "string.base64",
                          { value: value },
                          state,
                          options
                        );
                      });
                    };

                    _class.prototype.hostname = function hostname() {
                      var regex = /^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$/;

                      return this._test("hostname", undefined, function(
                        value,
                        state,
                        options
                      ) {
                        if (
                          (value.length <= 255 && regex.test(value)) ||
                          Net.isIPv6(value)
                        ) {
                          return value;
                        }

                        return this.createError(
                          "string.hostname",
                          { value: value },
                          state,
                          options
                        );
                      });
                    };

                    _class.prototype.lowercase = function lowercase() {
                      var obj = this._test("lowercase", undefined, function(
                        value,
                        state,
                        options
                      ) {
                        if (
                          options.convert ||
                          value === value.toLocaleLowerCase()
                        ) {
                          return value;
                        }

                        return this.createError(
                          "string.lowercase",
                          { value: value },
                          state,
                          options
                        );
                      });

                      obj._flags.case = "lower";
                      return obj;
                    };

                    _class.prototype.uppercase = function uppercase() {
                      var obj = this._test("uppercase", undefined, function(
                        value,
                        state,
                        options
                      ) {
                        if (
                          options.convert ||
                          value === value.toLocaleUpperCase()
                        ) {
                          return value;
                        }

                        return this.createError(
                          "string.uppercase",
                          { value: value },
                          state,
                          options
                        );
                      });

                      obj._flags.case = "upper";
                      return obj;
                    };

                    _class.prototype.trim = function trim() {
                      var obj = this._test("trim", undefined, function(
                        value,
                        state,
                        options
                      ) {
                        if (options.convert || value === value.trim()) {
                          return value;
                        }

                        return this.createError(
                          "string.trim",
                          { value: value },
                          state,
                          options
                        );
                      });

                      obj._flags.trim = true;
                      return obj;
                    };

                    _class.prototype.replace = function replace(
                      pattern,
                      replacement
                    ) {
                      if (typeof pattern === "string") {
                        pattern = new RegExp(Hoek.escapeRegex(pattern), "g");
                      }

                      Hoek.assert(
                        pattern instanceof RegExp,
                        "pattern must be a RegExp"
                      );
                      Hoek.assert(
                        typeof replacement === "string",
                        "replacement must be a String"
                      );

                      // This can not be considere a test like trim, we can't "reject"
                      // anything from this rule, so just clone the current object
                      var obj = this.clone();

                      if (!obj._inner.replacements) {
                        obj._inner.replacements = [];
                      }

                      obj._inner.replacements.push({
                        pattern: pattern,
                        replacement: replacement
                      });

                      return obj;
                    };

                    _class.prototype.truncate = function truncate(enabled) {
                      var value = enabled === undefined ? true : !!enabled;

                      if (this._flags.truncate === value) {
                        return this;
                      }

                      var obj = this.clone();
                      obj._flags.truncate = value;
                      return obj;
                    };

                    return _class;
                  })(Any);

                  internals.compare = function(type, compare) {
                    return function(limit, encoding) {
                      var isRef = Ref.isRef(limit);

                      Hoek.assert(
                        (Number.isSafeInteger(limit) && limit >= 0) || isRef,
                        "limit must be a positive integer or reference"
                      );
                      Hoek.assert(
                        !encoding || Buffer.isEncoding(encoding),
                        "Invalid encoding:",
                        encoding
                      );

                      return this._test(type, limit, function(
                        value,
                        state,
                        options
                      ) {
                        var compareTo = void 0;
                        if (isRef) {
                          compareTo = limit(
                            state.reference || state.parent,
                            options
                          );

                          if (!Number.isSafeInteger(compareTo)) {
                            return this.createError(
                              "string.ref",
                              { ref: limit.key },
                              state,
                              options
                            );
                          }
                        } else {
                          compareTo = limit;
                        }

                        if (compare(value, compareTo, encoding)) {
                          return value;
                        }

                        return this.createError(
                          "string." + type,
                          {
                            limit: compareTo,
                            value: value,
                            encoding: encoding
                          },
                          state,
                          options
                        );
                      });
                    };
                  };

                  internals.String.prototype.min = internals.compare(
                    "min",
                    function(value, limit, encoding) {
                      var length = encoding
                        ? Buffer.byteLength(value, encoding)
                        : value.length;
                      return length >= limit;
                    }
                  );

                  internals.String.prototype.max = internals.compare(
                    "max",
                    function(value, limit, encoding) {
                      var length = encoding
                        ? Buffer.byteLength(value, encoding)
                        : value.length;
                      return length <= limit;
                    }
                  );

                  internals.String.prototype.length = internals.compare(
                    "length",
                    function(value, limit, encoding) {
                      var length = encoding
                        ? Buffer.byteLength(value, encoding)
                        : value.length;
                      return length === limit;
                    }
                  );

                  // Aliases

                  internals.String.prototype.uuid =
                    internals.String.prototype.guid;

                  module.exports = new internals.String();
                  /* WEBPACK VAR INJECTION */
                }.call(exports, __webpack_require__(3).Buffer));

                /***/
              },
              /* 19 */
              /***/ function(module, exports, __webpack_require__) {
                "use strict";

                // Load Modules

                var RFC3986 = __webpack_require__(20);

                // Declare internals

                var internals = {
                  Uri: {
                    createUriRegex: function createUriRegex(
                      optionalScheme,
                      allowRelative,
                      relativeOnly
                    ) {
                      var scheme = RFC3986.scheme;
                      var prefix = void 0;

                      if (relativeOnly) {
                        prefix = "(?:" + RFC3986.relativeRef + ")";
                      } else {
                        // If we were passed a scheme, use it instead of the generic one
                        if (optionalScheme) {
                          // Have to put this in a non-capturing group to handle the OR statements
                          scheme = "(?:" + optionalScheme + ")";
                        }

                        var withScheme =
                          "(?:" + scheme + ":" + RFC3986.hierPart + ")";

                        prefix = allowRelative
                          ? "(?:" + withScheme + "|" + RFC3986.relativeRef + ")"
                          : withScheme;
                      }

                      /**
	             * URI = scheme ":" hier-part [ "?" query ] [ "#" fragment ]
	             *
	             * OR
	             *
	             * relative-ref = relative-part [ "?" query ] [ "#" fragment ]
	             */
                      return new RegExp(
                        "^" +
                          prefix +
                          "(?:\\?" +
                          RFC3986.query +
                          ")?" +
                          "(?:#" +
                          RFC3986.fragment +
                          ")?$"
                      );
                    }
                  }
                };

                module.exports = internals.Uri;

                /***/
              },
              /* 20 */
              /***/ function(module, exports) {
                "use strict";

                // Load modules

                // Delcare internals

                var internals = {
                  rfc3986: {}
                };

                internals.generate = function() {
                  /**
	   * elements separated by forward slash ("/") are alternatives.
	   */
                  var or = "|";

                  /**
	   * DIGIT = %x30-39 ; 0-9
	   */
                  var digit = "0-9";
                  var digitOnly = "[" + digit + "]";

                  /**
	   * ALPHA = %x41-5A / %x61-7A   ; A-Z / a-z
	   */
                  var alpha = "a-zA-Z";
                  var alphaOnly = "[" + alpha + "]";

                  /**
	   * cidr       = DIGIT                ; 0-9
	   *            / %x31-32 DIGIT         ; 10-29
	   *            / "3" %x30-32           ; 30-32
	   */
                  internals.rfc3986.cidr =
                    digitOnly + or + "[1-2]" + digitOnly + or + "3" + "[0-2]";

                  /**
	   * HEXDIG = DIGIT / "A" / "B" / "C" / "D" / "E" / "F"
	   */
                  var hexDigit = digit + "A-Fa-f";
                  var hexDigitOnly = "[" + hexDigit + "]";

                  /**
	   * unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
	   */
                  var unreserved = alpha + digit + "-\\._~";

                  /**
	   * sub-delims = "!" / "$" / "&" / "'" / "(" / ")" / "*" / "+" / "," / ";" / "="
	   */
                  var subDelims = "!\\$&'\\(\\)\\*\\+,;=";

                  /**
	   * pct-encoded = "%" HEXDIG HEXDIG
	   */
                  var pctEncoded = "%" + hexDigit;

                  /**
	   * pchar = unreserved / pct-encoded / sub-delims / ":" / "@"
	   */
                  var pchar = unreserved + pctEncoded + subDelims + ":@";
                  var pcharOnly = "[" + pchar + "]";

                  /**
	   * Rule to support zero-padded addresses.
	   */
                  var zeroPad = "0?";

                  /**
	   * dec-octet   = DIGIT                 ; 0-9
	   *            / %x31-39 DIGIT         ; 10-99
	   *            / "1" 2DIGIT            ; 100-199
	   *            / "2" %x30-34 DIGIT     ; 200-249
	   *            / "25" %x30-35          ; 250-255
	   */
                  var decOctect =
                    "(?:" +
                    zeroPad +
                    zeroPad +
                    digitOnly +
                    or +
                    zeroPad +
                    "[1-9]" +
                    digitOnly +
                    or +
                    "1" +
                    digitOnly +
                    digitOnly +
                    or +
                    "2" +
                    "[0-4]" +
                    digitOnly +
                    or +
                    "25" +
                    "[0-5])";

                  /**
	   * IPv4address = dec-octet "." dec-octet "." dec-octet "." dec-octet
	   */
                  internals.rfc3986.IPv4address =
                    "(?:" + decOctect + "\\.){3}" + decOctect;

                  /**
	   * h16 = 1*4HEXDIG ; 16 bits of address represented in hexadecimal
	   * ls32 = ( h16 ":" h16 ) / IPv4address ; least-significant 32 bits of address
	   * IPv6address =                            6( h16 ":" ) ls32
	   *             /                       "::" 5( h16 ":" ) ls32
	   *             / [               h16 ] "::" 4( h16 ":" ) ls32
	   *             / [ *1( h16 ":" ) h16 ] "::" 3( h16 ":" ) ls32
	   *             / [ *2( h16 ":" ) h16 ] "::" 2( h16 ":" ) ls32
	   *             / [ *3( h16 ":" ) h16 ] "::"    h16 ":"   ls32
	   *             / [ *4( h16 ":" ) h16 ] "::"              ls32
	   *             / [ *5( h16 ":" ) h16 ] "::"              h16
	   *             / [ *6( h16 ":" ) h16 ] "::"
	   */
                  var h16 = hexDigitOnly + "{1,4}";
                  var ls32 =
                    "(?:" +
                    h16 +
                    ":" +
                    h16 +
                    "|" +
                    internals.rfc3986.IPv4address +
                    ")";
                  var IPv6SixHex = "(?:" + h16 + ":){6}" + ls32;
                  var IPv6FiveHex = "::(?:" + h16 + ":){5}" + ls32;
                  var IPv6FourHex =
                    "(?:" + h16 + ")?::(?:" + h16 + ":){4}" + ls32;
                  var IPv6ThreeHex =
                    "(?:(?:" +
                    h16 +
                    ":){0,1}" +
                    h16 +
                    ")?::(?:" +
                    h16 +
                    ":){3}" +
                    ls32;
                  var IPv6TwoHex =
                    "(?:(?:" +
                    h16 +
                    ":){0,2}" +
                    h16 +
                    ")?::(?:" +
                    h16 +
                    ":){2}" +
                    ls32;
                  var IPv6OneHex =
                    "(?:(?:" +
                    h16 +
                    ":){0,3}" +
                    h16 +
                    ")?::" +
                    h16 +
                    ":" +
                    ls32;
                  var IPv6NoneHex =
                    "(?:(?:" + h16 + ":){0,4}" + h16 + ")?::" + ls32;
                  var IPv6NoneHex2 =
                    "(?:(?:" + h16 + ":){0,5}" + h16 + ")?::" + h16;
                  var IPv6NoneHex3 = "(?:(?:" + h16 + ":){0,6}" + h16 + ")?::";
                  internals.rfc3986.IPv6address =
                    "(?:" +
                    IPv6SixHex +
                    or +
                    IPv6FiveHex +
                    or +
                    IPv6FourHex +
                    or +
                    IPv6ThreeHex +
                    or +
                    IPv6TwoHex +
                    or +
                    IPv6OneHex +
                    or +
                    IPv6NoneHex +
                    or +
                    IPv6NoneHex2 +
                    or +
                    IPv6NoneHex3 +
                    ")";

                  /**
	   * IPvFuture = "v" 1*HEXDIG "." 1*( unreserved / sub-delims / ":" )
	   */
                  internals.rfc3986.IPvFuture =
                    "v" +
                    hexDigitOnly +
                    "+\\.[" +
                    unreserved +
                    subDelims +
                    ":]+";

                  /**
	   * scheme = ALPHA *( ALPHA / DIGIT / "+" / "-" / "." )
	   */
                  internals.rfc3986.scheme =
                    alphaOnly + "[" + alpha + digit + "+-\\.]*";

                  /**
	   * userinfo = *( unreserved / pct-encoded / sub-delims / ":" )
	   */
                  var userinfo =
                    "[" + unreserved + pctEncoded + subDelims + ":]*";

                  /**
	   * IP-literal = "[" ( IPv6address / IPvFuture  ) "]"
	   */
                  var IPLiteral =
                    "\\[(?:" +
                    internals.rfc3986.IPv6address +
                    or +
                    internals.rfc3986.IPvFuture +
                    ")\\]";

                  /**
	   * reg-name = *( unreserved / pct-encoded / sub-delims )
	   */
                  var regName =
                    "[" + unreserved + pctEncoded + subDelims + "]{0,255}";

                  /**
	   * host = IP-literal / IPv4address / reg-name
	   */
                  var host =
                    "(?:" +
                    IPLiteral +
                    or +
                    internals.rfc3986.IPv4address +
                    or +
                    regName +
                    ")";

                  /**
	   * port = *DIGIT
	   */
                  var port = digitOnly + "*";

                  /**
	   * authority   = [ userinfo "@" ] host [ ":" port ]
	   */
                  var authority =
                    "(?:" + userinfo + "@)?" + host + "(?::" + port + ")?";

                  /**
	   * segment       = *pchar
	   * segment-nz    = 1*pchar
	   * path          = path-abempty    ; begins with "/" or is empty
	   *               / path-absolute   ; begins with "/" but not "//"
	   *               / path-noscheme   ; begins with a non-colon segment
	   *               / path-rootless   ; begins with a segment
	   *               / path-empty      ; zero characters
	   * path-abempty  = *( "/" segment )
	   * path-absolute = "/" [ segment-nz *( "/" segment ) ]
	   * path-rootless = segment-nz *( "/" segment )
	   */
                  var segment = pcharOnly + "*";
                  var segmentNz = pcharOnly + "+";
                  var segmentNzNc =
                    "[" + unreserved + pctEncoded + subDelims + "@" + "]+";
                  var pathEmpty = "";
                  var pathAbEmpty = "(?:\\/" + segment + ")*";
                  var pathAbsolute = "\\/(?:" + segmentNz + pathAbEmpty + ")?";
                  var pathRootless = segmentNz + pathAbEmpty;
                  var pathNoScheme = segmentNzNc + pathAbEmpty;

                  /**
	   * hier-part = "//" authority path
	   */
                  internals.rfc3986.hierPart =
                    "(?:" +
                    "(?:\\/\\/" +
                    authority +
                    pathAbEmpty +
                    ")" +
                    or +
                    pathAbsolute +
                    or +
                    pathRootless +
                    ")";

                  /**
	   * relative-part = "//" authority path-abempty
	   *                 / path-absolute
	   *                 / path-noscheme
	   *                 / path-empty
	   */
                  internals.rfc3986.relativeRef =
                    "(?:" +
                    "(?:\\/\\/" +
                    authority +
                    pathAbEmpty +
                    ")" +
                    or +
                    pathAbsolute +
                    or +
                    pathNoScheme +
                    or +
                    pathEmpty +
                    ")";

                  /**
	   * query = *( pchar / "/" / "?" )
	   */
                  internals.rfc3986.query = "[" + pchar + "\\/\\?]*(?=#|$)"; //Finish matching either at the fragment part or end of the line.

                  /**
	   * fragment = *( pchar / "/" / "?" )
	   */
                  internals.rfc3986.fragment = "[" + pchar + "\\/\\?]*";
                };

                internals.generate();

                module.exports = internals.rfc3986;

                /***/
              },
              /* 21 */
              /***/ function(module, exports, __webpack_require__) {
                "use strict";

                // Load modules

                var RFC3986 = __webpack_require__(20);

                // Declare internals

                var internals = {
                  Ip: {
                    cidrs: {
                      required: "\\/(?:" + RFC3986.cidr + ")",
                      optional: "(?:\\/(?:" + RFC3986.cidr + "))?",
                      forbidden: ""
                    },
                    versions: {
                      ipv4: RFC3986.IPv4address,
                      ipv6: RFC3986.IPv6address,
                      ipvfuture: RFC3986.IPvFuture
                    }
                  }
                };

                internals.Ip.createIpRegex = function(versions, cidr) {
                  var regex = void 0;
                  for (var i = 0; i < versions.length; ++i) {
                    var version = versions[i];
                    if (!regex) {
                      regex = "^(?:" + internals.Ip.versions[version];
                    }
                    regex = regex + "|" + internals.Ip.versions[version];
                  }

                  return new RegExp(
                    regex + ")" + internals.Ip.cidrs[cidr] + "$"
                  );
                };

                module.exports = internals.Ip;

                /***/
              },
              /* 22 */
              /***/ function(module, exports, __webpack_require__) {
                /* WEBPACK VAR INJECTION */ (function(process) {
                  "use strict";

                  // Load modules

                  var _typeof =
                    typeof Symbol === "function" &&
                    typeof Symbol.iterator === "symbol"
                      ? function(obj) {
                          return typeof obj;
                        }
                      : function(obj) {
                          return obj &&
                          typeof Symbol === "function" &&
                          obj.constructor === Symbol &&
                          obj !== Symbol.prototype
                            ? "symbol"
                            : typeof obj;
                        };

                  var Dns = __webpack_require__(5);

                  // Declare internals

                  var internals = {
                    hasOwn: Object.prototype.hasOwnProperty,
                    indexOf: Array.prototype.indexOf,
                    defaultThreshold: 16,
                    maxIPv6Groups: 8,

                    categories: {
                      valid: 1,
                      dnsWarn: 7,
                      rfc5321: 15,
                      cfws: 31,
                      deprecated: 63,
                      rfc5322: 127,
                      error: 255
                    },

                    diagnoses: {
                      // Address is valid

                      valid: 0,

                      // Address is valid, but the DNS check failed

                      dnsWarnNoMXRecord: 5,
                      dnsWarnNoRecord: 6,

                      // Address is valid for SMTP but has unusual elements

                      rfc5321TLD: 9,
                      rfc5321TLDNumeric: 10,
                      rfc5321QuotedString: 11,
                      rfc5321AddressLiteral: 12,

                      // Address is valid for message, but must be modified for envelope

                      cfwsComment: 17,
                      cfwsFWS: 18,

                      // Address contains deprecated elements, but may still be valid in some contexts

                      deprecatedLocalPart: 33,
                      deprecatedFWS: 34,
                      deprecatedQTEXT: 35,
                      deprecatedQP: 36,
                      deprecatedComment: 37,
                      deprecatedCTEXT: 38,
                      deprecatedIPv6: 39,
                      deprecatedCFWSNearAt: 49,

                      // Address is only valid according to broad definition in RFC 5322, but is otherwise invalid

                      rfc5322Domain: 65,
                      rfc5322TooLong: 66,
                      rfc5322LocalTooLong: 67,
                      rfc5322DomainTooLong: 68,
                      rfc5322LabelTooLong: 69,
                      rfc5322DomainLiteral: 70,
                      rfc5322DomainLiteralOBSDText: 71,
                      rfc5322IPv6GroupCount: 72,
                      rfc5322IPv62x2xColon: 73,
                      rfc5322IPv6BadCharacter: 74,
                      rfc5322IPv6MaxGroups: 75,
                      rfc5322IPv6ColonStart: 76,
                      rfc5322IPv6ColonEnd: 77,

                      // Address is invalid for any purpose

                      errExpectingDTEXT: 129,
                      errNoLocalPart: 130,
                      errNoDomain: 131,
                      errConsecutiveDots: 132,
                      errATEXTAfterCFWS: 133,
                      errATEXTAfterQS: 134,
                      errATEXTAfterDomainLiteral: 135,
                      errExpectingQPair: 136,
                      errExpectingATEXT: 137,
                      errExpectingQTEXT: 138,
                      errExpectingCTEXT: 139,
                      errBackslashEnd: 140,
                      errDotStart: 141,
                      errDotEnd: 142,
                      errDomainHyphenStart: 143,
                      errDomainHyphenEnd: 144,
                      errUnclosedQuotedString: 145,
                      errUnclosedComment: 146,
                      errUnclosedDomainLiteral: 147,
                      errFWSCRLFx2: 148,
                      errFWSCRLFEnd: 149,
                      errCRNoLF: 150,
                      errUnknownTLD: 160,
                      errDomainTooShort: 161
                    },

                    components: {
                      localpart: 0,
                      domain: 1,
                      literal: 2,
                      contextComment: 3,
                      contextFWS: 4,
                      contextQuotedString: 5,
                      contextQuotedPair: 6
                    }
                  };

                  // $lab:coverage:off$
                  internals.defer =
                    typeof process !== "undefined" &&
                    process &&
                    typeof process.nextTick === "function"
                      ? process.nextTick.bind(process)
                      : function(callback) {
                          return setTimeout(callback, 0);
                        };
                  // $lab:coverage:on$

                  internals.specials = (function() {
                    var specials = '()<>[]:;@\\,."'; // US-ASCII visible characters not valid for atext (http://tools.ietf.org/html/rfc5322#section-3.2.3)
                    var lookup = new Array(0x100);
                    for (var i = 0xff; i >= 0; --i) {
                      lookup[i] = false;
                    }

                    for (var _i = 0; _i < specials.length; ++_i) {
                      lookup[specials.charCodeAt(_i)] = true;
                    }

                    return function(code) {
                      return lookup[code];
                    };
                  })();

                  internals.regex = {
                    ipV4: /\b(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,
                    ipV6: /^[a-fA-F\d]{0,4}$/
                  };

                  internals.checkIpV6 = function(items) {
                    return items.every(function(value) {
                      return internals.regex.ipV6.test(value);
                    });
                  };

                  internals.validDomain = function(tldAtom, options) {
                    if (options.tldBlacklist) {
                      if (Array.isArray(options.tldBlacklist)) {
                        return (
                          internals.indexOf.call(
                            options.tldBlacklist,
                            tldAtom
                          ) === -1
                        );
                      }

                      return !internals.hasOwn.call(
                        options.tldBlacklist,
                        tldAtom
                      );
                    }

                    if (Array.isArray(options.tldWhitelist)) {
                      return (
                        internals.indexOf.call(
                          options.tldWhitelist,
                          tldAtom
                        ) !== -1
                      );
                    }

                    return internals.hasOwn.call(options.tldWhitelist, tldAtom);
                  };

                  /**
	 * Check that an email address conforms to RFCs 5321, 5322 and others
	 *
	 * We distinguish clearly between a Mailbox as defined by RFC 5321 and an
	 * addr-spec as defined by RFC 5322. Depending on the context, either can be
	 * regarded as a valid email address. The RFC 5321 Mailbox specification is
	 * more restrictive (comments, white space and obsolete forms are not allowed).
	 *
	 * @param {string} email The email address to check. See README for specifics.
	 * @param {Object} options The (optional) options:
	 *   {boolean} checkDNS If true then will check DNS for MX records. If
	 *     true this call to isEmail _will_ be asynchronous.
	 *   {*} errorLevel Determines the boundary between valid and invalid
	 *     addresses.
	 *   {*} tldBlacklist The set of domains to consider invalid.
	 *   {*} tldWhitelist The set of domains to consider valid.
	 *   {*} minDomainAtoms The minimum number of domain atoms which must be present
	 *     for the address to be valid.
	 * @param {function(number|boolean)} callback The (optional) callback handler.
	 * @return {*}
	 */

                  exports.validate = internals.validate = function(
                    email,
                    options,
                    callback
                  ) {
                    options = options || {};

                    if (typeof options === "function") {
                      callback = options;
                      options = {};
                    }

                    if (typeof callback !== "function") {
                      if (options.checkDNS) {
                        throw new TypeError(
                          "expected callback function for checkDNS option"
                        );
                      }

                      callback = null;
                    }

                    var diagnose = void 0;
                    var threshold = void 0;

                    if (typeof options.errorLevel === "number") {
                      diagnose = true;
                      threshold = options.errorLevel;
                    } else {
                      diagnose = !!options.errorLevel;
                      threshold = internals.diagnoses.valid;
                    }

                    if (options.tldWhitelist) {
                      if (typeof options.tldWhitelist === "string") {
                        options.tldWhitelist = [options.tldWhitelist];
                      } else if (_typeof(options.tldWhitelist) !== "object") {
                        throw new TypeError(
                          "expected array or object tldWhitelist"
                        );
                      }
                    }

                    if (options.tldBlacklist) {
                      if (typeof options.tldBlacklist === "string") {
                        options.tldBlacklist = [options.tldBlacklist];
                      } else if (_typeof(options.tldBlacklist) !== "object") {
                        throw new TypeError(
                          "expected array or object tldBlacklist"
                        );
                      }
                    }

                    if (
                      options.minDomainAtoms &&
                      (options.minDomainAtoms !==
                        (+options.minDomainAtoms | 0) ||
                        options.minDomainAtoms < 0)
                    ) {
                      throw new TypeError(
                        "expected positive integer minDomainAtoms"
                      );
                    }

                    var maxResult = internals.diagnoses.valid;
                    var updateResult = function updateResult(value) {
                      if (value > maxResult) {
                        maxResult = value;
                      }
                    };

                    var context = {
                      now: internals.components.localpart,
                      prev: internals.components.localpart,
                      stack: [internals.components.localpart]
                    };

                    var prevToken = "";

                    var parseData = {
                      local: "",
                      domain: ""
                    };
                    var atomData = {
                      locals: [""],
                      domains: [""]
                    };

                    var elementCount = 0;
                    var elementLength = 0;
                    var crlfCount = 0;
                    var charCode = void 0;

                    var hyphenFlag = false;
                    var assertEnd = false;

                    var emailLength = email.length;

                    var token = void 0; // Token is used outside the loop, must declare similarly
                    for (var i = 0; i < emailLength; ++i) {
                      token = email[i];

                      switch (context.now) {
                        // Local-part
                        case internals.components.localpart:
                          // http://tools.ietf.org/html/rfc5322#section-3.4.1
                          //   local-part      =   dot-atom / quoted-string / obs-local-part
                          //
                          //   dot-atom        =   [CFWS] dot-atom-text [CFWS]
                          //
                          //   dot-atom-text   =   1*atext *("." 1*atext)
                          //
                          //   quoted-string   =   [CFWS]
                          //                       DQUOTE *([FWS] qcontent) [FWS] DQUOTE
                          //                       [CFWS]
                          //
                          //   obs-local-part  =   word *("." word)
                          //
                          //   word            =   atom / quoted-string
                          //
                          //   atom            =   [CFWS] 1*atext [CFWS]
                          switch (token) {
                            // Comment
                            case "(":
                              if (elementLength === 0) {
                                // Comments are OK at the beginning of an element
                                updateResult(
                                  elementCount === 0
                                    ? internals.diagnoses.cfwsComment
                                    : internals.diagnoses.deprecatedComment
                                );
                              } else {
                                updateResult(internals.diagnoses.cfwsComment);
                                // Cannot start a comment in an element, should be end
                                assertEnd = true;
                              }

                              context.stack.push(context.now);
                              context.now = internals.components.contextComment;
                              break;

                            // Next dot-atom element
                            case ".":
                              if (elementLength === 0) {
                                // Another dot, already?
                                updateResult(
                                  elementCount === 0
                                    ? internals.diagnoses.errDotStart
                                    : internals.diagnoses.errConsecutiveDots
                                );
                              } else {
                                // The entire local-part can be a quoted string for RFC 5321; if one atom is quoted it's an RFC 5322 obsolete form
                                if (assertEnd) {
                                  updateResult(
                                    internals.diagnoses.deprecatedLocalPart
                                  );
                                }

                                // CFWS & quoted strings are OK again now we're at the beginning of an element (although they are obsolete forms)
                                assertEnd = false;
                                elementLength = 0;
                                ++elementCount;
                                parseData.local += token;
                                atomData.locals[elementCount] = "";
                              }

                              break;

                            // Quoted string
                            case '"':
                              if (elementLength === 0) {
                                // The entire local-part can be a quoted string for RFC 5321; if one atom is quoted it's an RFC 5322 obsolete form
                                updateResult(
                                  elementCount === 0
                                    ? internals.diagnoses.rfc5321QuotedString
                                    : internals.diagnoses.deprecatedLocalPart
                                );

                                parseData.local += token;
                                atomData.locals[elementCount] += token;
                                ++elementLength;

                                // Quoted string must be the entire element
                                assertEnd = true;
                                context.stack.push(context.now);
                                context.now =
                                  internals.components.contextQuotedString;
                              } else {
                                updateResult(
                                  internals.diagnoses.errExpectingATEXT
                                );
                              }

                              break;

                            // Folding white space
                            case "\r":
                              if (emailLength === ++i || email[i] !== "\n") {
                                // Fatal error
                                updateResult(internals.diagnoses.errCRNoLF);
                                break;
                              }

                            // Fallthrough

                            case " ":
                            case "\t":
                              if (elementLength === 0) {
                                updateResult(
                                  elementCount === 0
                                    ? internals.diagnoses.cfwsFWS
                                    : internals.diagnoses.deprecatedFWS
                                );
                              } else {
                                // We can't start FWS in the middle of an element, better be end
                                assertEnd = true;
                              }

                              context.stack.push(context.now);
                              context.now = internals.components.contextFWS;
                              prevToken = token;
                              break;

                            case "@":
                              // At this point we should have a valid local-part
                              // $lab:coverage:off$
                              if (context.stack.length !== 1) {
                                throw new Error(
                                  "unexpected item on context stack"
                                );
                              }
                              // $lab:coverage:on$

                              if (parseData.local.length === 0) {
                                // Fatal error
                                updateResult(
                                  internals.diagnoses.errNoLocalPart
                                );
                              } else if (elementLength === 0) {
                                // Fatal error
                                updateResult(internals.diagnoses.errDotEnd);
                              } else if (parseData.local.length > 64) {
                                // http://tools.ietf.org/html/rfc5321#section-4.5.3.1.1 the maximum total length of a user name or other local-part is 64
                                //    octets
                                updateResult(
                                  internals.diagnoses.rfc5322LocalTooLong
                                );
                              } else if (
                                context.prev ===
                                  internals.components.contextComment ||
                                context.prev === internals.components.contextFWS
                              ) {
                                // http://tools.ietf.org/html/rfc5322#section-3.4.1 comments and folding white space SHOULD NOT be used around "@" in the
                                //    addr-spec
                                //
                                // http://tools.ietf.org/html/rfc2119
                                // 4. SHOULD NOT this phrase, or the phrase "NOT RECOMMENDED" mean that there may exist valid reasons in particular
                                //    circumstances when the particular behavior is acceptable or even useful, but the full implications should be understood
                                //    and the case carefully weighed before implementing any behavior described with this label.
                                updateResult(
                                  internals.diagnoses.deprecatedCFWSNearAt
                                );
                              }

                              // Clear everything down for the domain parsing
                              context.now = internals.components.domain;
                              context.stack[0] = internals.components.domain;
                              elementCount = 0;
                              elementLength = 0;
                              assertEnd = false; // CFWS can only appear at the end of the element
                              break;

                            // ATEXT
                            default:
                              // http://tools.ietf.org/html/rfc5322#section-3.2.3
                              //    atext = ALPHA / DIGIT / ; Printable US-ASCII
                              //            "!" / "#" /     ;  characters not including
                              //            "$" / "%" /     ;  specials.  Used for atoms.
                              //            "&" / "'" /
                              //            "*" / "+" /
                              //            "-" / "/" /
                              //            "=" / "?" /
                              //            "^" / "_" /
                              //            "`" / "{" /
                              //            "|" / "}" /
                              //            "~"
                              if (assertEnd) {
                                // We have encountered atext where it is no longer valid
                                switch (context.prev) {
                                  case internals.components.contextComment:
                                  case internals.components.contextFWS:
                                    updateResult(
                                      internals.diagnoses.errATEXTAfterCFWS
                                    );
                                    break;

                                  case internals.components.contextQuotedString:
                                    updateResult(
                                      internals.diagnoses.errATEXTAfterQS
                                    );
                                    break;

                                  // $lab:coverage:off$
                                  default:
                                    throw new Error(
                                      "more atext found where none is allowed, but unrecognized prev context: " +
                                        context.prev
                                    );
                                  // $lab:coverage:on$
                                }
                              } else {
                                context.prev = context.now;
                                charCode = token.charCodeAt(0);

                                // Especially if charCode == 10
                                if (
                                  charCode < 33 ||
                                  charCode > 126 ||
                                  internals.specials(charCode)
                                ) {
                                  // Fatal error
                                  updateResult(
                                    internals.diagnoses.errExpectingATEXT
                                  );
                                }

                                parseData.local += token;
                                atomData.locals[elementCount] += token;
                                ++elementLength;
                              }
                          }

                          break;

                        case internals.components.domain:
                          // http://tools.ietf.org/html/rfc5322#section-3.4.1
                          //   domain          =   dot-atom / domain-literal / obs-domain
                          //
                          //   dot-atom        =   [CFWS] dot-atom-text [CFWS]
                          //
                          //   dot-atom-text   =   1*atext *("." 1*atext)
                          //
                          //   domain-literal  =   [CFWS] "[" *([FWS] dtext) [FWS] "]" [CFWS]
                          //
                          //   dtext           =   %d33-90 /          ; Printable US-ASCII
                          //                       %d94-126 /         ;  characters not including
                          //                       obs-dtext          ;  "[", "]", or "\"
                          //
                          //   obs-domain      =   atom *("." atom)
                          //
                          //   atom            =   [CFWS] 1*atext [CFWS]

                          // http://tools.ietf.org/html/rfc5321#section-4.1.2
                          //   Mailbox        = Local-part "@" ( Domain / address-literal )
                          //
                          //   Domain         = sub-domain *("." sub-domain)
                          //
                          //   address-literal  = "[" ( IPv4-address-literal /
                          //                    IPv6-address-literal /
                          //                    General-address-literal ) "]"
                          //                    ; See Section 4.1.3

                          // http://tools.ietf.org/html/rfc5322#section-3.4.1
                          //      Note: A liberal syntax for the domain portion of addr-spec is
                          //      given here.  However, the domain portion contains addressing
                          //      information specified by and used in other protocols (e.g.,
                          //      [RFC1034], [RFC1035], [RFC1123], [RFC5321]).  It is therefore
                          //      incumbent upon implementations to conform to the syntax of
                          //      addresses for the context in which they are used.
                          //
                          // is_email() author's note: it's not clear how to interpret this in
                          // he context of a general email address validator. The conclusion I
                          // have reached is this: "addressing information" must comply with
                          // RFC 5321 (and in turn RFC 1035), anything that is "semantically
                          // invisible" must comply only with RFC 5322.
                          switch (token) {
                            // Comment
                            case "(":
                              if (elementLength === 0) {
                                // Comments at the start of the domain are deprecated in the text, comments at the start of a subdomain are obs-domain
                                // http://tools.ietf.org/html/rfc5322#section-3.4.1
                                updateResult(
                                  elementCount === 0
                                    ? internals.diagnoses.deprecatedCFWSNearAt
                                    : internals.diagnoses.deprecatedComment
                                );
                              } else {
                                // We can't start a comment mid-element, better be at the end
                                assertEnd = true;
                                updateResult(internals.diagnoses.cfwsComment);
                              }

                              context.stack.push(context.now);
                              context.now = internals.components.contextComment;
                              break;

                            // Next dot-atom element
                            case ".":
                              if (elementLength === 0) {
                                // Another dot, already? Fatal error.
                                updateResult(
                                  elementCount === 0
                                    ? internals.diagnoses.errDotStart
                                    : internals.diagnoses.errConsecutiveDots
                                );
                              } else if (hyphenFlag) {
                                // Previous subdomain ended in a hyphen. Fatal error.
                                updateResult(
                                  internals.diagnoses.errDomainHyphenEnd
                                );
                              } else if (elementLength > 63) {
                                // Nowhere in RFC 5321 does it say explicitly that the domain part of a Mailbox must be a valid domain according to the
                                // DNS standards set out in RFC 1035, but this *is* implied in several places. For instance, wherever the idea of host
                                // routing is discussed the RFC says that the domain must be looked up in the DNS. This would be nonsense unless the
                                // domain was designed to be a valid DNS domain. Hence we must conclude that the RFC 1035 restriction on label length
                                // also applies to RFC 5321 domains.
                                //
                                // http://tools.ietf.org/html/rfc1035#section-2.3.4
                                // labels          63 octets or less

                                updateResult(
                                  internals.diagnoses.rfc5322LabelTooLong
                                );
                              }

                              // CFWS is OK again now we're at the beginning of an element (although
                              // it may be obsolete CFWS)
                              assertEnd = false;
                              elementLength = 0;
                              ++elementCount;
                              atomData.domains[elementCount] = "";
                              parseData.domain += token;

                              break;

                            // Domain literal
                            case "[":
                              if (parseData.domain.length === 0) {
                                // Domain literal must be the only component
                                assertEnd = true;
                                ++elementLength;
                                context.stack.push(context.now);
                                context.now = internals.components.literal;
                                parseData.domain += token;
                                atomData.domains[elementCount] += token;
                                parseData.literal = "";
                              } else {
                                // Fatal error
                                updateResult(
                                  internals.diagnoses.errExpectingATEXT
                                );
                              }

                              break;

                            // Folding white space
                            case "\r":
                              if (emailLength === ++i || email[i] !== "\n") {
                                // Fatal error
                                updateResult(internals.diagnoses.errCRNoLF);
                                break;
                              }

                            // Fallthrough

                            case " ":
                            case "\t":
                              if (elementLength === 0) {
                                updateResult(
                                  elementCount === 0
                                    ? internals.diagnoses.deprecatedCFWSNearAt
                                    : internals.diagnoses.deprecatedFWS
                                );
                              } else {
                                // We can't start FWS in the middle of an element, so this better be the end
                                updateResult(internals.diagnoses.cfwsFWS);
                                assertEnd = true;
                              }

                              context.stack.push(context.now);
                              context.now = internals.components.contextFWS;
                              prevToken = token;
                              break;

                            // This must be ATEXT
                            default:
                              // RFC 5322 allows any atext...
                              // http://tools.ietf.org/html/rfc5322#section-3.2.3
                              //    atext = ALPHA / DIGIT / ; Printable US-ASCII
                              //            "!" / "#" /     ;  characters not including
                              //            "$" / "%" /     ;  specials.  Used for atoms.
                              //            "&" / "'" /
                              //            "*" / "+" /
                              //            "-" / "/" /
                              //            "=" / "?" /
                              //            "^" / "_" /
                              //            "`" / "{" /
                              //            "|" / "}" /
                              //            "~"

                              // But RFC 5321 only allows letter-digit-hyphen to comply with DNS rules
                              //   (RFCs 1034 & 1123)
                              // http://tools.ietf.org/html/rfc5321#section-4.1.2
                              //   sub-domain     = Let-dig [Ldh-str]
                              //
                              //   Let-dig        = ALPHA / DIGIT
                              //
                              //   Ldh-str        = *( ALPHA / DIGIT / "-" ) Let-dig
                              //
                              if (assertEnd) {
                                // We have encountered ATEXT where it is no longer valid
                                switch (context.prev) {
                                  case internals.components.contextComment:
                                  case internals.components.contextFWS:
                                    updateResult(
                                      internals.diagnoses.errATEXTAfterCFWS
                                    );
                                    break;

                                  case internals.components.literal:
                                    updateResult(
                                      internals.diagnoses
                                        .errATEXTAfterDomainLiteral
                                    );
                                    break;

                                  // $lab:coverage:off$
                                  default:
                                    throw new Error(
                                      "more atext found where none is allowed, but unrecognized prev context: " +
                                        context.prev
                                    );
                                  // $lab:coverage:on$
                                }
                              }

                              charCode = token.charCodeAt(0);
                              // Assume this token isn't a hyphen unless we discover it is
                              hyphenFlag = false;

                              if (
                                charCode < 33 ||
                                charCode > 126 ||
                                internals.specials(charCode)
                              ) {
                                // Fatal error
                                updateResult(
                                  internals.diagnoses.errExpectingATEXT
                                );
                              } else if (token === "-") {
                                if (elementLength === 0) {
                                  // Hyphens cannot be at the beginning of a subdomain, fatal error
                                  updateResult(
                                    internals.diagnoses.errDomainHyphenStart
                                  );
                                }

                                hyphenFlag = true;
                              } else if (
                                charCode < 48 ||
                                charCode > 122 ||
                                (charCode > 57 && charCode < 65) ||
                                (charCode > 90 && charCode < 97)
                              ) {
                                // Check if it's a neither a number nor a latin letter
                                // This is not an RFC 5321 subdomain, but still OK by RFC 5322
                                updateResult(internals.diagnoses.rfc5322Domain);
                              }

                              parseData.domain += token;
                              atomData.domains[elementCount] += token;
                              ++elementLength;
                          }

                          break;

                        // Domain literal
                        case internals.components.literal:
                          // http://tools.ietf.org/html/rfc5322#section-3.4.1
                          //   domain-literal  =   [CFWS] "[" *([FWS] dtext) [FWS] "]" [CFWS]
                          //
                          //   dtext           =   %d33-90 /          ; Printable US-ASCII
                          //                       %d94-126 /         ;  characters not including
                          //                       obs-dtext          ;  "[", "]", or "\"
                          //
                          //   obs-dtext       =   obs-NO-WS-CTL / quoted-pair
                          switch (token) {
                            // End of domain literal
                            case "]":
                              if (maxResult < internals.categories.deprecated) {
                                // Could be a valid RFC 5321 address literal, so let's check

                                // http://tools.ietf.org/html/rfc5321#section-4.1.2
                                //   address-literal  = "[" ( IPv4-address-literal /
                                //                    IPv6-address-literal /
                                //                    General-address-literal ) "]"
                                //                    ; See Section 4.1.3
                                //
                                // http://tools.ietf.org/html/rfc5321#section-4.1.3
                                //   IPv4-address-literal  = Snum 3("."  Snum)
                                //
                                //   IPv6-address-literal  = "IPv6:" IPv6-addr
                                //
                                //   General-address-literal  = Standardized-tag ":" 1*dcontent
                                //
                                //   Standardized-tag  = Ldh-str
                                //                     ; Standardized-tag MUST be specified in a
                                //                     ; Standards-Track RFC and registered with IANA
                                //
                                //   dcontent      = %d33-90 / ; Printable US-ASCII
                                //                 %d94-126 ; excl. "[", "\", "]"
                                //
                                //   Snum          = 1*3DIGIT
                                //                 ; representing a decimal integer
                                //                 ; value in the range 0 through 255
                                //
                                //   IPv6-addr     = IPv6-full / IPv6-comp / IPv6v4-full / IPv6v4-comp
                                //
                                //   IPv6-hex      = 1*4HEXDIG
                                //
                                //   IPv6-full     = IPv6-hex 7(":" IPv6-hex)
                                //
                                //   IPv6-comp     = [IPv6-hex *5(":" IPv6-hex)] "::"
                                //                 [IPv6-hex *5(":" IPv6-hex)]
                                //                 ; The "::" represents at least 2 16-bit groups of
                                //                 ; zeros.  No more than 6 groups in addition to the
                                //                 ; "::" may be present.
                                //
                                //   IPv6v4-full   = IPv6-hex 5(":" IPv6-hex) ":" IPv4-address-literal
                                //
                                //   IPv6v4-comp   = [IPv6-hex *3(":" IPv6-hex)] "::"
                                //                 [IPv6-hex *3(":" IPv6-hex) ":"]
                                //                 IPv4-address-literal
                                //                 ; The "::" represents at least 2 16-bit groups of
                                //                 ; zeros.  No more than 4 groups in addition to the
                                //                 ; "::" and IPv4-address-literal may be present.

                                var index = -1;
                                var addressLiteral = parseData.literal;
                                var matchesIP = internals.regex.ipV4.exec(
                                  addressLiteral
                                );

                                // Maybe extract IPv4 part from the end of the address-literal
                                if (matchesIP) {
                                  index = matchesIP.index;
                                  if (index !== 0) {
                                    // Convert IPv4 part to IPv6 format for futher testing
                                    addressLiteral =
                                      addressLiteral.slice(0, index) + "0:0";
                                  }
                                }

                                if (index === 0) {
                                  // Nothing there except a valid IPv4 address, so...
                                  updateResult(
                                    internals.diagnoses.rfc5321AddressLiteral
                                  );
                                } else if (
                                  addressLiteral.slice(0, 5).toLowerCase() !==
                                  "ipv6:"
                                ) {
                                  updateResult(
                                    internals.diagnoses.rfc5322DomainLiteral
                                  );
                                } else {
                                  var match = addressLiteral.slice(5);
                                  var maxGroups = internals.maxIPv6Groups;
                                  var groups = match.split(":");
                                  index = match.indexOf("::");

                                  if (!~index) {
                                    // Need exactly the right number of groups
                                    if (groups.length !== maxGroups) {
                                      updateResult(
                                        internals.diagnoses
                                          .rfc5322IPv6GroupCount
                                      );
                                    }
                                  } else if (
                                    index !== match.lastIndexOf("::")
                                  ) {
                                    updateResult(
                                      internals.diagnoses.rfc5322IPv62x2xColon
                                    );
                                  } else {
                                    if (
                                      index === 0 ||
                                      index === match.length - 2
                                    ) {
                                      // RFC 4291 allows :: at the start or end of an address with 7 other groups in addition
                                      ++maxGroups;
                                    }

                                    if (groups.length > maxGroups) {
                                      updateResult(
                                        internals.diagnoses.rfc5322IPv6MaxGroups
                                      );
                                    } else if (groups.length === maxGroups) {
                                      // Eliding a single "::"
                                      updateResult(
                                        internals.diagnoses.deprecatedIPv6
                                      );
                                    }
                                  }

                                  // IPv6 testing strategy
                                  if (match[0] === ":" && match[1] !== ":") {
                                    updateResult(
                                      internals.diagnoses.rfc5322IPv6ColonStart
                                    );
                                  } else if (
                                    match[match.length - 1] === ":" &&
                                    match[match.length - 2] !== ":"
                                  ) {
                                    updateResult(
                                      internals.diagnoses.rfc5322IPv6ColonEnd
                                    );
                                  } else if (internals.checkIpV6(groups)) {
                                    updateResult(
                                      internals.diagnoses.rfc5321AddressLiteral
                                    );
                                  } else {
                                    updateResult(
                                      internals.diagnoses
                                        .rfc5322IPv6BadCharacter
                                    );
                                  }
                                }
                              } else {
                                updateResult(
                                  internals.diagnoses.rfc5322DomainLiteral
                                );
                              }

                              parseData.domain += token;
                              atomData.domains[elementCount] += token;
                              ++elementLength;
                              context.prev = context.now;
                              context.now = context.stack.pop();
                              break;

                            case "\\":
                              updateResult(
                                internals.diagnoses.rfc5322DomainLiteralOBSDText
                              );
                              context.stack.push(context.now);
                              context.now =
                                internals.components.contextQuotedPair;
                              break;

                            // Folding white space
                            case "\r":
                              if (emailLength === ++i || email[i] !== "\n") {
                                updateResult(internals.diagnoses.errCRNoLF);
                                break;
                              }

                            // Fallthrough

                            case " ":
                            case "\t":
                              updateResult(internals.diagnoses.cfwsFWS);

                              context.stack.push(context.now);
                              context.now = internals.components.contextFWS;
                              prevToken = token;
                              break;

                            // DTEXT
                            default:
                              // http://tools.ietf.org/html/rfc5322#section-3.4.1
                              //   dtext         =   %d33-90 /  ; Printable US-ASCII
                              //                     %d94-126 / ;  characters not including
                              //                     obs-dtext  ;  "[", "]", or "\"
                              //
                              //   obs-dtext     =   obs-NO-WS-CTL / quoted-pair
                              //
                              //   obs-NO-WS-CTL =   %d1-8 /    ; US-ASCII control
                              //                     %d11 /     ;  characters that do not
                              //                     %d12 /     ;  include the carriage
                              //                     %d14-31 /  ;  return, line feed, and
                              //                     %d127      ;  white space characters
                              charCode = token.charCodeAt(0);

                              // '\r', '\n', ' ', and '\t' have already been parsed above
                              if (
                                charCode > 127 ||
                                charCode === 0 ||
                                token === "["
                              ) {
                                // Fatal error
                                updateResult(
                                  internals.diagnoses.errExpectingDTEXT
                                );
                                break;
                              } else if (charCode < 33 || charCode === 127) {
                                updateResult(
                                  internals.diagnoses
                                    .rfc5322DomainLiteralOBSDText
                                );
                              }

                              parseData.literal += token;
                              parseData.domain += token;
                              atomData.domains[elementCount] += token;
                              ++elementLength;
                          }

                          break;

                        // Quoted string
                        case internals.components.contextQuotedString:
                          // http://tools.ietf.org/html/rfc5322#section-3.2.4
                          //   quoted-string = [CFWS]
                          //                   DQUOTE *([FWS] qcontent) [FWS] DQUOTE
                          //                   [CFWS]
                          //
                          //   qcontent      = qtext / quoted-pair
                          switch (token) {
                            // Quoted pair
                            case "\\":
                              context.stack.push(context.now);
                              context.now =
                                internals.components.contextQuotedPair;
                              break;

                            // Folding white space. Spaces are allowed as regular characters inside a quoted string - it's only FWS if we include '\t' or '\r\n'
                            case "\r":
                              if (emailLength === ++i || email[i] !== "\n") {
                                // Fatal error
                                updateResult(internals.diagnoses.errCRNoLF);
                                break;
                              }

                            // Fallthrough

                            case "\t":
                              // http://tools.ietf.org/html/rfc5322#section-3.2.2
                              //   Runs of FWS, comment, or CFWS that occur between lexical tokens in
                              //   a structured header field are semantically interpreted as a single
                              //   space character.

                              // http://tools.ietf.org/html/rfc5322#section-3.2.4
                              //   the CRLF in any FWS/CFWS that appears within the quoted-string [is]
                              //   semantically "invisible" and therefore not part of the
                              //   quoted-string

                              parseData.local += " ";
                              atomData.locals[elementCount] += " ";
                              ++elementLength;

                              updateResult(internals.diagnoses.cfwsFWS);
                              context.stack.push(context.now);
                              context.now = internals.components.contextFWS;
                              prevToken = token;
                              break;

                            // End of quoted string
                            case '"':
                              parseData.local += token;
                              atomData.locals[elementCount] += token;
                              ++elementLength;
                              context.prev = context.now;
                              context.now = context.stack.pop();
                              break;

                            // QTEXT
                            default:
                              // http://tools.ietf.org/html/rfc5322#section-3.2.4
                              //   qtext          =   %d33 /             ; Printable US-ASCII
                              //                      %d35-91 /          ;  characters not including
                              //                      %d93-126 /         ;  "\" or the quote character
                              //                      obs-qtext
                              //
                              //   obs-qtext      =   obs-NO-WS-CTL
                              //
                              //   obs-NO-WS-CTL  =   %d1-8 /            ; US-ASCII control
                              //                      %d11 /             ;  characters that do not
                              //                      %d12 /             ;  include the carriage
                              //                      %d14-31 /          ;  return, line feed, and
                              //                      %d127              ;  white space characters
                              charCode = token.charCodeAt(0);

                              if (
                                charCode > 127 ||
                                charCode === 0 ||
                                charCode === 10
                              ) {
                                updateResult(
                                  internals.diagnoses.errExpectingQTEXT
                                );
                              } else if (charCode < 32 || charCode === 127) {
                                updateResult(
                                  internals.diagnoses.deprecatedQTEXT
                                );
                              }

                              parseData.local += token;
                              atomData.locals[elementCount] += token;
                              ++elementLength;
                          }

                          // http://tools.ietf.org/html/rfc5322#section-3.4.1
                          //   If the string can be represented as a dot-atom (that is, it contains
                          //   no characters other than atext characters or "." surrounded by atext
                          //   characters), then the dot-atom form SHOULD be used and the quoted-
                          //   string form SHOULD NOT be used.

                          break;
                        // Quoted pair
                        case internals.components.contextQuotedPair:
                          // http://tools.ietf.org/html/rfc5322#section-3.2.1
                          //   quoted-pair     =   ("\" (VCHAR / WSP)) / obs-qp
                          //
                          //   VCHAR           =  %d33-126   ; visible (printing) characters
                          //   WSP             =  SP / HTAB  ; white space
                          //
                          //   obs-qp          =   "\" (%d0 / obs-NO-WS-CTL / LF / CR)
                          //
                          //   obs-NO-WS-CTL   =   %d1-8 /   ; US-ASCII control
                          //                       %d11 /    ;  characters that do not
                          //                       %d12 /    ;  include the carriage
                          //                       %d14-31 / ;  return, line feed, and
                          //                       %d127     ;  white space characters
                          //
                          // i.e. obs-qp       =  "\" (%d0-8, %d10-31 / %d127)
                          charCode = token.charCodeAt(0);

                          if (charCode > 127) {
                            // Fatal error
                            updateResult(internals.diagnoses.errExpectingQPair);
                          } else if (
                            (charCode < 31 && charCode !== 9) ||
                            charCode === 127
                          ) {
                            // ' ' and '\t' are allowed
                            updateResult(internals.diagnoses.deprecatedQP);
                          }

                          // At this point we know where this qpair occurred so we could check to see if the character actually needed to be quoted at all.
                          // http://tools.ietf.org/html/rfc5321#section-4.1.2
                          //   the sending system SHOULD transmit the form that uses the minimum quoting possible.

                          context.prev = context.now;
                          // End of qpair
                          context.now = context.stack.pop();
                          token = "\\" + token;

                          switch (context.now) {
                            case internals.components.contextComment:
                              break;

                            case internals.components.contextQuotedString:
                              parseData.local += token;
                              atomData.locals[elementCount] += token;

                              // The maximum sizes specified by RFC 5321 are octet counts, so we must include the backslash
                              elementLength += 2;
                              break;

                            case internals.components.literal:
                              parseData.domain += token;
                              atomData.domains[elementCount] += token;

                              // The maximum sizes specified by RFC 5321 are octet counts, so we must include the backslash
                              elementLength += 2;
                              break;

                            // $lab:coverage:off$
                            default:
                              throw new Error(
                                "quoted pair logic invoked in an invalid context: " +
                                  context.now
                              );
                            // $lab:coverage:on$
                          }
                          break;

                        // Comment
                        case internals.components.contextComment:
                          // http://tools.ietf.org/html/rfc5322#section-3.2.2
                          //   comment  = "(" *([FWS] ccontent) [FWS] ")"
                          //
                          //   ccontent = ctext / quoted-pair / comment
                          switch (token) {
                            // Nested comment
                            case "(":
                              // Nested comments are ok
                              context.stack.push(context.now);
                              context.now = internals.components.contextComment;
                              break;

                            // End of comment
                            case ")":
                              context.prev = context.now;
                              context.now = context.stack.pop();
                              break;

                            // Quoted pair
                            case "\\":
                              context.stack.push(context.now);
                              context.now =
                                internals.components.contextQuotedPair;
                              break;

                            // Folding white space
                            case "\r":
                              if (emailLength === ++i || email[i] !== "\n") {
                                // Fatal error
                                updateResult(internals.diagnoses.errCRNoLF);
                                break;
                              }

                            // Fallthrough

                            case " ":
                            case "\t":
                              updateResult(internals.diagnoses.cfwsFWS);

                              context.stack.push(context.now);
                              context.now = internals.components.contextFWS;
                              prevToken = token;
                              break;

                            // CTEXT
                            default:
                              // http://tools.ietf.org/html/rfc5322#section-3.2.3
                              //   ctext         = %d33-39 /  ; Printable US-ASCII
                              //                   %d42-91 /  ;  characters not including
                              //                   %d93-126 / ;  "(", ")", or "\"
                              //                   obs-ctext
                              //
                              //   obs-ctext     = obs-NO-WS-CTL
                              //
                              //   obs-NO-WS-CTL = %d1-8 /    ; US-ASCII control
                              //                   %d11 /     ;  characters that do not
                              //                   %d12 /     ;  include the carriage
                              //                   %d14-31 /  ;  return, line feed, and
                              //                   %d127      ;  white space characters
                              charCode = token.charCodeAt(0);

                              if (
                                charCode > 127 ||
                                charCode === 0 ||
                                charCode === 10
                              ) {
                                // Fatal error
                                updateResult(
                                  internals.diagnoses.errExpectingCTEXT
                                );
                                break;
                              } else if (charCode < 32 || charCode === 127) {
                                updateResult(
                                  internals.diagnoses.deprecatedCTEXT
                                );
                              }
                          }

                          break;

                        // Folding white space
                        case internals.components.contextFWS:
                          // http://tools.ietf.org/html/rfc5322#section-3.2.2
                          //   FWS     =   ([*WSP CRLF] 1*WSP) /  obs-FWS
                          //                                   ; Folding white space

                          // But note the erratum:
                          // http://www.rfc-editor.org/errata_search.php?rfc=5322&eid=1908:
                          //   In the obsolete syntax, any amount of folding white space MAY be
                          //   inserted where the obs-FWS rule is allowed.  This creates the
                          //   possibility of having two consecutive "folds" in a line, and
                          //   therefore the possibility that a line which makes up a folded header
                          //   field could be composed entirely of white space.
                          //
                          //   obs-FWS =   1*([CRLF] WSP)

                          if (prevToken === "\r") {
                            if (token === "\r") {
                              // Fatal error
                              updateResult(internals.diagnoses.errFWSCRLFx2);
                              break;
                            }

                            if (++crlfCount > 1) {
                              // Multiple folds => obsolete FWS
                              updateResult(internals.diagnoses.deprecatedFWS);
                            } else {
                              crlfCount = 1;
                            }
                          }

                          switch (token) {
                            case "\r":
                              if (emailLength === ++i || email[i] !== "\n") {
                                // Fatal error
                                updateResult(internals.diagnoses.errCRNoLF);
                              }

                              break;

                            case " ":
                            case "\t":
                              break;

                            default:
                              if (prevToken === "\r") {
                                // Fatal error
                                updateResult(internals.diagnoses.errFWSCRLFEnd);
                              }

                              crlfCount = 0;

                              // End of FWS
                              context.prev = context.now;
                              context.now = context.stack.pop();

                              // Look at this token again in the parent context
                              --i;
                          }

                          prevToken = token;
                          break;

                        // Unexpected context
                        // $lab:coverage:off$
                        default:
                          throw new Error("unknown context: " + context.now);
                        // $lab:coverage:on$
                      } // Primary state machine

                      if (maxResult > internals.categories.rfc5322) {
                        // Fatal error, no point continuing
                        break;
                      }
                    } // Token loop

                    // Check for errors
                    if (maxResult < internals.categories.rfc5322) {
                      // Fatal errors
                      if (
                        context.now === internals.components.contextQuotedString
                      ) {
                        updateResult(
                          internals.diagnoses.errUnclosedQuotedString
                        );
                      } else if (
                        context.now === internals.components.contextQuotedPair
                      ) {
                        updateResult(internals.diagnoses.errBackslashEnd);
                      } else if (
                        context.now === internals.components.contextComment
                      ) {
                        updateResult(internals.diagnoses.errUnclosedComment);
                      } else if (context.now === internals.components.literal) {
                        updateResult(
                          internals.diagnoses.errUnclosedDomainLiteral
                        );
                      } else if (token === "\r") {
                        updateResult(internals.diagnoses.errFWSCRLFEnd);
                      } else if (parseData.domain.length === 0) {
                        updateResult(internals.diagnoses.errNoDomain);
                      } else if (elementLength === 0) {
                        updateResult(internals.diagnoses.errDotEnd);
                      } else if (hyphenFlag) {
                        updateResult(internals.diagnoses.errDomainHyphenEnd);
                      } else if (parseData.domain.length > 255) {
                        // Other errors
                        // http://tools.ietf.org/html/rfc5321#section-4.5.3.1.2
                        //   The maximum total length of a domain name or number is 255 octets.
                        updateResult(internals.diagnoses.rfc5322DomainTooLong);
                      } else if (
                        parseData.local.length +
                          parseData.domain.length +
                          /* '@' */ 1 >
                        254
                      ) {
                        // http://tools.ietf.org/html/rfc5321#section-4.1.2
                        //   Forward-path   = Path
                        //
                        //   Path           = "<" [ A-d-l ":" ] Mailbox ">"
                        //
                        // http://tools.ietf.org/html/rfc5321#section-4.5.3.1.3
                        //   The maximum total length of a reverse-path or forward-path is 256 octets (including the punctuation and element separators).
                        //
                        // Thus, even without (obsolete) routing information, the Mailbox can only be 254 characters long. This is confirmed by this verified
                        // erratum to RFC 3696:
                        //
                        // http://www.rfc-editor.org/errata_search.php?rfc=3696&eid=1690
                        //   However, there is a restriction in RFC 2821 on the length of an address in MAIL and RCPT commands of 254 characters.  Since
                        //   addresses that do not fit in those fields are not normally useful, the upper limit on address lengths should normally be considered
                        //   to be 254.
                        updateResult(internals.diagnoses.rfc5322TooLong);
                      } else if (elementLength > 63) {
                        // http://tools.ietf.org/html/rfc1035#section-2.3.4
                        // labels   63 octets or less
                        updateResult(internals.diagnoses.rfc5322LabelTooLong);
                      } else if (
                        options.minDomainAtoms &&
                        atomData.domains.length < options.minDomainAtoms
                      ) {
                        updateResult(internals.diagnoses.errDomainTooShort);
                      } else if (options.tldWhitelist || options.tldBlacklist) {
                        var tldAtom = atomData.domains[elementCount];

                        if (!internals.validDomain(tldAtom, options)) {
                          updateResult(internals.diagnoses.errUnknownTLD);
                        }
                      }
                    } // Check for errors

                    var dnsPositive = false;
                    var finishImmediately = false;

                    var finish = function finish() {
                      if (
                        !dnsPositive &&
                        maxResult < internals.categories.dnsWarn
                      ) {
                        // Per RFC 5321, domain atoms are limited to letter-digit-hyphen, so we only need to check code <= 57 to check for a digit
                        var code = atomData.domains[elementCount].charCodeAt(0);
                        if (code <= 57) {
                          updateResult(internals.diagnoses.rfc5321TLDNumeric);
                        } else if (elementCount === 0) {
                          updateResult(internals.diagnoses.rfc5321TLD);
                        }
                      }

                      if (maxResult < threshold) {
                        maxResult = internals.diagnoses.valid;
                      }

                      var finishResult = diagnose
                        ? maxResult
                        : maxResult < internals.defaultThreshold;

                      if (callback) {
                        if (finishImmediately) {
                          callback(finishResult);
                        } else {
                          internals.defer(callback.bind(null, finishResult));
                        }
                      }

                      return finishResult;
                    }; // Finish

                    if (
                      options.checkDNS &&
                      maxResult < internals.categories.dnsWarn
                    ) {
                      (function() {
                        // http://tools.ietf.org/html/rfc5321#section-2.3.5
                        //   Names that can be resolved to MX RRs or address (i.e., A or AAAA) RRs (as discussed in Section 5) are permitted, as are CNAME RRs whose
                        //   targets can be resolved, in turn, to MX or address RRs.
                        //
                        // http://tools.ietf.org/html/rfc5321#section-5.1
                        //   The lookup first attempts to locate an MX record associated with the name.  If a CNAME record is found, the resulting name is processed
                        //   as if it were the initial name. ... If an empty list of MXs is returned, the address is treated as if it was associated with an implicit
                        //   MX RR, with a preference of 0, pointing to that host.
                        //
                        // isEmail() author's note: We will regard the existence of a CNAME to be sufficient evidence of the domain's existence. For performance
                        // reasons we will not repeat the DNS lookup for the CNAME's target, but we will raise a warning because we didn't immediately find an MX
                        // record.
                        if (elementCount === 0) {
                          // Checking TLD DNS only works if you explicitly check from the root
                          parseData.domain += ".";
                        }

                        var dnsDomain = parseData.domain;
                        Dns.resolveMx(dnsDomain, function(err, mxRecords) {
                          // If we have a fatal error, then we must assume that there are no records
                          if (err && err.code !== Dns.NODATA) {
                            updateResult(internals.diagnoses.dnsWarnNoRecord);
                            return finish();
                          }

                          if (mxRecords && mxRecords.length) {
                            dnsPositive = true;
                            return finish();
                          }

                          var count = 3;
                          var done = false;
                          updateResult(internals.diagnoses.dnsWarnNoMXRecord);

                          var handleRecords = function handleRecords(
                            ignoreError,
                            records
                          ) {
                            if (done) {
                              return;
                            }

                            --count;

                            if (records && records.length) {
                              done = true;
                              return finish();
                            }

                            if (count === 0) {
                              // No usable records for the domain can be found
                              updateResult(internals.diagnoses.dnsWarnNoRecord);
                              done = true;
                              finish();
                            }
                          };

                          Dns.resolveCname(dnsDomain, handleRecords);
                          Dns.resolve4(dnsDomain, handleRecords);
                          Dns.resolve6(dnsDomain, handleRecords);
                        });

                        finishImmediately = true;
                      })();
                    } else {
                      var result = finish();
                      finishImmediately = true;
                      return result;
                    } // CheckDNS
                  };

                  exports.diagnoses = internals.validate.diagnoses = (function() {
                    var diag = {};
                    var keys = Object.keys(internals.diagnoses);
                    for (var i = 0; i < keys.length; ++i) {
                      var key = keys[i];
                      diag[key] = internals.diagnoses[key];
                    }

                    return diag;
                  })();
                  /* WEBPACK VAR INJECTION */
                }.call(exports, __webpack_require__(4)));

                /***/
              },
              /* 23 */
              /***/ function(module, exports, __webpack_require__) {
                "use strict";

                // Load modules

                function _defaults(obj, defaults) {
                  var keys = Object.getOwnPropertyNames(defaults);
                  for (var i = 0; i < keys.length; i++) {
                    var key = keys[i];
                    var value = Object.getOwnPropertyDescriptor(defaults, key);
                    if (value && value.configurable && obj[key] === undefined) {
                      Object.defineProperty(obj, key, value);
                    }
                  }
                  return obj;
                }

                function _classCallCheck(instance, Constructor) {
                  if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                  }
                }

                function _possibleConstructorReturn(self, call) {
                  if (!self) {
                    throw new ReferenceError(
                      "this hasn't been initialised - super() hasn't been called"
                    );
                  }
                  return call &&
                  (typeof call === "object" || typeof call === "function")
                    ? call
                    : self;
                }

                function _inherits(subClass, superClass) {
                  if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError(
                      "Super expression must either be null or a function, not " +
                        typeof superClass
                    );
                  }
                  subClass.prototype = Object.create(
                    superClass && superClass.prototype,
                    {
                      constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                      }
                    }
                  );
                  if (superClass)
                    Object.setPrototypeOf
                      ? Object.setPrototypeOf(subClass, superClass)
                      : _defaults(subClass, superClass);
                }

                var Any = __webpack_require__(11);
                var Ref = __webpack_require__(12);
                var Hoek = __webpack_require__(2);

                // Declare internals

                var internals = {
                  precisionRx: /(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/
                };

                internals.Number = (function(_Any) {
                  _inherits(_class, _Any);

                  function _class() {
                    _classCallCheck(this, _class);

                    var _this = _possibleConstructorReturn(
                      this,
                      _Any.call(this)
                    );

                    _this._type = "number";
                    _this._invalids.add(Infinity);
                    _this._invalids.add(-Infinity);
                    return _this;
                  }

                  _class.prototype._base = function _base(
                    value,
                    state,
                    options
                  ) {
                    var result = {
                      errors: null,
                      value: value
                    };

                    if (typeof value === "string" && options.convert) {
                      var number = parseFloat(value);
                      result.value =
                        isNaN(number) || !isFinite(value) ? NaN : number;
                    }

                    var isNumber =
                      typeof result.value === "number" && !isNaN(result.value);

                    if (
                      options.convert &&
                      "precision" in this._flags &&
                      isNumber
                    ) {
                      // This is conceptually equivalent to using toFixed but it should be much faster
                      var precision = Math.pow(10, this._flags.precision);
                      result.value =
                        Math.round(result.value * precision) / precision;
                    }

                    result.errors = isNumber
                      ? null
                      : this.createError("number.base", null, state, options);
                    return result;
                  };

                  _class.prototype.multiple = function multiple(base) {
                    var isRef = Ref.isRef(base);

                    if (!isRef) {
                      Hoek.assert(
                        typeof base === "number" && isFinite(base),
                        "multiple must be a number"
                      );
                      Hoek.assert(base > 0, "multiple must be greater than 0");
                    }

                    return this._test("multiple", base, function(
                      value,
                      state,
                      options
                    ) {
                      var divisor = isRef
                        ? base(state.reference || state.parent, options)
                        : base;

                      if (
                        isRef &&
                        (typeof divisor !== "number" || !isFinite(divisor))
                      ) {
                        return this.createError(
                          "number.ref",
                          { ref: base.key },
                          state,
                          options
                        );
                      }

                      if (value % divisor === 0) {
                        return value;
                      }

                      return this.createError(
                        "number.multiple",
                        { multiple: base, value: value },
                        state,
                        options
                      );
                    });
                  };

                  _class.prototype.integer = function integer() {
                    return this._test("integer", undefined, function(
                      value,
                      state,
                      options
                    ) {
                      return Number.isSafeInteger(value)
                        ? value
                        : this.createError(
                            "number.integer",
                            { value: value },
                            state,
                            options
                          );
                    });
                  };

                  _class.prototype.negative = function negative() {
                    return this._test("negative", undefined, function(
                      value,
                      state,
                      options
                    ) {
                      if (value < 0) {
                        return value;
                      }

                      return this.createError(
                        "number.negative",
                        { value: value },
                        state,
                        options
                      );
                    });
                  };

                  _class.prototype.positive = function positive() {
                    return this._test("positive", undefined, function(
                      value,
                      state,
                      options
                    ) {
                      if (value > 0) {
                        return value;
                      }

                      return this.createError(
                        "number.positive",
                        { value: value },
                        state,
                        options
                      );
                    });
                  };

                  _class.prototype.precision = function precision(limit) {
                    Hoek.assert(
                      Number.isSafeInteger(limit),
                      "limit must be an integer"
                    );
                    Hoek.assert(
                      !("precision" in this._flags),
                      "precision already set"
                    );

                    var obj = this._test("precision", limit, function(
                      value,
                      state,
                      options
                    ) {
                      var places = value
                        .toString()
                        .match(internals.precisionRx);
                      var decimals = Math.max(
                        (places[1] ? places[1].length : 0) -
                          (places[2] ? parseInt(places[2], 10) : 0),
                        0
                      );
                      if (decimals <= limit) {
                        return value;
                      }

                      return this.createError(
                        "number.precision",
                        { limit: limit, value: value },
                        state,
                        options
                      );
                    });

                    obj._flags.precision = limit;
                    return obj;
                  };

                  return _class;
                })(Any);

                internals.compare = function(type, compare) {
                  return function(limit) {
                    var isRef = Ref.isRef(limit);
                    var isNumber = typeof limit === "number" && !isNaN(limit);

                    Hoek.assert(
                      isNumber || isRef,
                      "limit must be a number or reference"
                    );

                    return this._test(type, limit, function(
                      value,
                      state,
                      options
                    ) {
                      var compareTo = void 0;
                      if (isRef) {
                        compareTo = limit(
                          state.reference || state.parent,
                          options
                        );

                        if (
                          !(typeof compareTo === "number" && !isNaN(compareTo))
                        ) {
                          return this.createError(
                            "number.ref",
                            { ref: limit.key },
                            state,
                            options
                          );
                        }
                      } else {
                        compareTo = limit;
                      }

                      if (compare(value, compareTo)) {
                        return value;
                      }

                      return this.createError(
                        "number." + type,
                        { limit: compareTo, value: value },
                        state,
                        options
                      );
                    });
                  };
                };

                internals.Number.prototype.min = internals.compare(
                  "min",
                  function(value, limit) {
                    return value >= limit;
                  }
                );
                internals.Number.prototype.max = internals.compare(
                  "max",
                  function(value, limit) {
                    return value <= limit;
                  }
                );
                internals.Number.prototype.greater = internals.compare(
                  "greater",
                  function(value, limit) {
                    return value > limit;
                  }
                );
                internals.Number.prototype.less = internals.compare(
                  "less",
                  function(value, limit) {
                    return value < limit;
                  }
                );

                module.exports = new internals.Number();

                /***/
              },
              /* 24 */
              /***/ function(module, exports, __webpack_require__) {
                "use strict";

                // Load modules

                function _defaults(obj, defaults) {
                  var keys = Object.getOwnPropertyNames(defaults);
                  for (var i = 0; i < keys.length; i++) {
                    var key = keys[i];
                    var value = Object.getOwnPropertyDescriptor(defaults, key);
                    if (value && value.configurable && obj[key] === undefined) {
                      Object.defineProperty(obj, key, value);
                    }
                  }
                  return obj;
                }

                function _classCallCheck(instance, Constructor) {
                  if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                  }
                }

                function _possibleConstructorReturn(self, call) {
                  if (!self) {
                    throw new ReferenceError(
                      "this hasn't been initialised - super() hasn't been called"
                    );
                  }
                  return call &&
                  (typeof call === "object" || typeof call === "function")
                    ? call
                    : self;
                }

                function _inherits(subClass, superClass) {
                  if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError(
                      "Super expression must either be null or a function, not " +
                        typeof superClass
                    );
                  }
                  subClass.prototype = Object.create(
                    superClass && superClass.prototype,
                    {
                      constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                      }
                    }
                  );
                  if (superClass)
                    Object.setPrototypeOf
                      ? Object.setPrototypeOf(subClass, superClass)
                      : _defaults(subClass, superClass);
                }

                var Any = __webpack_require__(11);
                var Hoek = __webpack_require__(2);

                // Declare internals

                var internals = {
                  Set: __webpack_require__(15)
                };

                internals.Boolean = (function(_Any) {
                  _inherits(_class, _Any);

                  function _class() {
                    _classCallCheck(this, _class);

                    var _this = _possibleConstructorReturn(
                      this,
                      _Any.call(this)
                    );

                    _this._type = "boolean";
                    _this._flags.insensitive = true;
                    _this._inner.truthySet = new internals.Set();
                    _this._inner.falsySet = new internals.Set();
                    return _this;
                  }

                  _class.prototype._base = function _base(
                    value,
                    state,
                    options
                  ) {
                    var result = {
                      value: value
                    };

                    if (typeof value === "string" && options.convert) {
                      var normalized = this._flags.insensitive
                        ? value.toLowerCase()
                        : value;
                      result.value =
                        normalized === "true"
                          ? true
                          : normalized === "false" ? false : value;
                    }

                    if (typeof result.value !== "boolean") {
                      result.value = this._inner.truthySet.has(
                        value,
                        null,
                        null,
                        this._flags.insensitive
                      )
                        ? true
                        : this._inner.falsySet.has(
                            value,
                            null,
                            null,
                            this._flags.insensitive
                          )
                          ? false
                          : value;
                    }

                    result.errors =
                      typeof result.value === "boolean"
                        ? null
                        : this.createError(
                            "boolean.base",
                            null,
                            state,
                            options
                          );
                    return result;
                  };

                  _class.prototype.truthy = function truthy() {
                    var obj = this.clone();
                    var values = Hoek.flatten(
                      Array.prototype.slice.call(arguments)
                    );
                    for (var i = 0; i < values.length; ++i) {
                      var value = values[i];

                      Hoek.assert(
                        value !== undefined,
                        "Cannot call truthy with undefined"
                      );
                      obj._inner.truthySet.add(value);
                    }
                    return obj;
                  };

                  _class.prototype.falsy = function falsy() {
                    var obj = this.clone();
                    var values = Hoek.flatten(
                      Array.prototype.slice.call(arguments)
                    );
                    for (var i = 0; i < values.length; ++i) {
                      var value = values[i];

                      Hoek.assert(
                        value !== undefined,
                        "Cannot call falsy with undefined"
                      );
                      obj._inner.falsySet.add(value);
                    }
                    return obj;
                  };

                  _class.prototype.insensitive = function insensitive(enabled) {
                    var insensitive = enabled === undefined ? true : !!enabled;

                    if (this._flags.insensitive === insensitive) {
                      return this;
                    }

                    var obj = this.clone();
                    obj._flags.insensitive = insensitive;
                    return obj;
                  };

                  _class.prototype.describe = function describe() {
                    var description = Any.prototype.describe.call(this);
                    description.truthy = [true].concat(
                      this._inner.truthySet.values()
                    );
                    description.falsy = [false].concat(
                      this._inner.falsySet.values()
                    );
                    return description;
                  };

                  return _class;
                })(Any);

                module.exports = new internals.Boolean();

                /***/
              },
              /* 25 */
              /***/ function(module, exports, __webpack_require__) {
                "use strict";

                // Load modules

                var _typeof =
                  typeof Symbol === "function" &&
                  typeof Symbol.iterator === "symbol"
                    ? function(obj) {
                        return typeof obj;
                      }
                    : function(obj) {
                        return obj &&
                        typeof Symbol === "function" &&
                        obj.constructor === Symbol &&
                        obj !== Symbol.prototype
                          ? "symbol"
                          : typeof obj;
                      };

                function _defaults(obj, defaults) {
                  var keys = Object.getOwnPropertyNames(defaults);
                  for (var i = 0; i < keys.length; i++) {
                    var key = keys[i];
                    var value = Object.getOwnPropertyDescriptor(defaults, key);
                    if (value && value.configurable && obj[key] === undefined) {
                      Object.defineProperty(obj, key, value);
                    }
                  }
                  return obj;
                }

                function _classCallCheck(instance, Constructor) {
                  if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                  }
                }

                function _possibleConstructorReturn(self, call) {
                  if (!self) {
                    throw new ReferenceError(
                      "this hasn't been initialised - super() hasn't been called"
                    );
                  }
                  return call &&
                  (typeof call === "object" || typeof call === "function")
                    ? call
                    : self;
                }

                function _inherits(subClass, superClass) {
                  if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError(
                      "Super expression must either be null or a function, not " +
                        typeof superClass
                    );
                  }
                  subClass.prototype = Object.create(
                    superClass && superClass.prototype,
                    {
                      constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                      }
                    }
                  );
                  if (superClass)
                    Object.setPrototypeOf
                      ? Object.setPrototypeOf(subClass, superClass)
                      : _defaults(subClass, superClass);
                }

                var Hoek = __webpack_require__(2);
                var Any = __webpack_require__(11);
                var Cast = __webpack_require__(16);
                var Ref = __webpack_require__(12);

                // Declare internals

                var internals = {};

                internals.Alternatives = (function(_Any) {
                  _inherits(_class, _Any);

                  function _class() {
                    _classCallCheck(this, _class);

                    var _this = _possibleConstructorReturn(
                      this,
                      _Any.call(this)
                    );

                    _this._type = "alternatives";
                    _this._invalids.remove(null);
                    _this._inner.matches = [];
                    return _this;
                  }

                  _class.prototype._base = function _base(
                    value,
                    state,
                    options
                  ) {
                    var errors = [];
                    var il = this._inner.matches.length;
                    var baseType = this._baseType;

                    for (var i = 0; i < il; ++i) {
                      var item = this._inner.matches[i];
                      var schema = item.schema;
                      if (!schema) {
                        var failed = item.is._validate(
                          item.ref(state.reference || state.parent, options),
                          null,
                          options,
                          state.parent
                        ).errors;

                        if (failed) {
                          if (item.otherwise) {
                            return item.otherwise._validate(
                              value,
                              state,
                              options
                            );
                          }
                        } else if (item.then) {
                          return item.then._validate(value, state, options);
                        }

                        if (i === il - 1 && baseType) {
                          return baseType._validate(value, state, options);
                        }

                        continue;
                      }

                      var result = schema._validate(value, state, options);
                      if (!result.errors) {
                        // Found a valid match
                        return result;
                      }

                      errors = errors.concat(result.errors);
                    }

                    if (errors.length) {
                      return {
                        errors: this.createError(
                          "alternatives.child",
                          { reason: errors },
                          state,
                          options
                        )
                      };
                    }

                    return {
                      errors: this.createError(
                        "alternatives.base",
                        null,
                        state,
                        options
                      )
                    };
                  };

                  _class.prototype.try = function _try() /* schemas */ {
                    var schemas = Hoek.flatten(
                      Array.prototype.slice.call(arguments)
                    );
                    Hoek.assert(
                      schemas.length,
                      "Cannot add other alternatives without at least one schema"
                    );

                    var obj = this.clone();

                    for (var i = 0; i < schemas.length; ++i) {
                      var cast = Cast.schema(schemas[i]);
                      if (cast._refs.length) {
                        obj._refs = obj._refs.concat(cast._refs);
                      }
                      obj._inner.matches.push({ schema: cast });
                    }

                    return obj;
                  };

                  _class.prototype.when = function when(ref, options) {
                    Hoek.assert(
                      Ref.isRef(ref) || typeof ref === "string",
                      "Invalid reference:",
                      ref
                    );
                    Hoek.assert(options, "Missing options");
                    Hoek.assert(
                      (typeof options === "undefined"
                        ? "undefined"
                        : _typeof(options)) === "object",
                      "Invalid options"
                    );
                    Hoek.assert(
                      options.hasOwnProperty("is"),
                      'Missing "is" directive'
                    );
                    Hoek.assert(
                      options.then !== undefined ||
                        options.otherwise !== undefined,
                      'options must have at least one of "then" or "otherwise"'
                    );

                    var obj = this.clone();
                    var is = Cast.schema(options.is);

                    if (
                      options.is === null ||
                      !(Ref.isRef(options.is) || options.is instanceof Any)
                    ) {
                      // Only apply required if this wasn't already a schema or a ref, we'll suppose people know what they're doing
                      is = is.required();
                    }

                    var item = {
                      ref: Cast.ref(ref),
                      is: is,
                      then:
                        options.then !== undefined
                          ? Cast.schema(options.then)
                          : undefined,
                      otherwise:
                        options.otherwise !== undefined
                          ? Cast.schema(options.otherwise)
                          : undefined
                    };

                    if (obj._baseType) {
                      item.then = item.then && obj._baseType.concat(item.then);
                      item.otherwise =
                        item.otherwise && obj._baseType.concat(item.otherwise);
                    }

                    Ref.push(obj._refs, item.ref);
                    obj._refs = obj._refs.concat(item.is._refs);

                    if (item.then && item.then._refs) {
                      obj._refs = obj._refs.concat(item.then._refs);
                    }

                    if (item.otherwise && item.otherwise._refs) {
                      obj._refs = obj._refs.concat(item.otherwise._refs);
                    }

                    obj._inner.matches.push(item);

                    return obj;
                  };

                  _class.prototype.describe = function describe() {
                    var description = Any.prototype.describe.call(this);
                    var alternatives = [];
                    for (var i = 0; i < this._inner.matches.length; ++i) {
                      var item = this._inner.matches[i];
                      if (item.schema) {
                        // try()

                        alternatives.push(item.schema.describe());
                      } else {
                        // when()

                        var when = {
                          ref: item.ref.toString(),
                          is: item.is.describe()
                        };

                        if (item.then) {
                          when.then = item.then.describe();
                        }

                        if (item.otherwise) {
                          when.otherwise = item.otherwise.describe();
                        }

                        alternatives.push(when);
                      }
                    }

                    description.alternatives = alternatives;
                    return description;
                  };

                  return _class;
                })(Any);

                module.exports = new internals.Alternatives();

                /***/
              },
              /* 26 */
              /***/ function(module, exports, __webpack_require__) {
                "use strict";

                // Load modules

                var _typeof =
                  typeof Symbol === "function" &&
                  typeof Symbol.iterator === "symbol"
                    ? function(obj) {
                        return typeof obj;
                      }
                    : function(obj) {
                        return obj &&
                        typeof Symbol === "function" &&
                        obj.constructor === Symbol &&
                        obj !== Symbol.prototype
                          ? "symbol"
                          : typeof obj;
                      };

                function _defaults(obj, defaults) {
                  var keys = Object.getOwnPropertyNames(defaults);
                  for (var i = 0; i < keys.length; i++) {
                    var key = keys[i];
                    var value = Object.getOwnPropertyDescriptor(defaults, key);
                    if (value && value.configurable && obj[key] === undefined) {
                      Object.defineProperty(obj, key, value);
                    }
                  }
                  return obj;
                }

                function _classCallCheck(instance, Constructor) {
                  if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                  }
                }

                function _possibleConstructorReturn(self, call) {
                  if (!self) {
                    throw new ReferenceError(
                      "this hasn't been initialised - super() hasn't been called"
                    );
                  }
                  return call &&
                  (typeof call === "object" || typeof call === "function")
                    ? call
                    : self;
                }

                function _inherits(subClass, superClass) {
                  if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError(
                      "Super expression must either be null or a function, not " +
                        typeof superClass
                    );
                  }
                  subClass.prototype = Object.create(
                    superClass && superClass.prototype,
                    {
                      constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                      }
                    }
                  );
                  if (superClass)
                    Object.setPrototypeOf
                      ? Object.setPrototypeOf(subClass, superClass)
                      : _defaults(subClass, superClass);
                }

                var Hoek = __webpack_require__(2);
                var Topo = __webpack_require__(27);
                var Any = __webpack_require__(11);
                var Errors = __webpack_require__(13);
                var Cast = __webpack_require__(16);
                var Ref = __webpack_require__(12);

                // Declare internals

                var internals = {};

                internals.Object = (function(_Any) {
                  _inherits(_class, _Any);

                  function _class() {
                    _classCallCheck(this, _class);

                    var _this = _possibleConstructorReturn(
                      this,
                      _Any.call(this)
                    );

                    _this._type = "object";
                    _this._inner.children = null;
                    _this._inner.renames = [];
                    _this._inner.dependencies = [];
                    _this._inner.patterns = [];
                    return _this;
                  }

                  _class.prototype._base = function _base(
                    value,
                    state,
                    options
                  ) {
                    var target = value;
                    var errors = [];
                    var finish = function finish() {
                      return {
                        value: target,
                        errors: errors.length ? errors : null
                      };
                    };

                    if (typeof value === "string" && options.convert) {
                      value = internals.safeParse(value);
                    }

                    var type = this._flags.func ? "function" : "object";
                    if (
                      !value ||
                      (typeof value === "undefined"
                        ? "undefined"
                        : _typeof(value)) !== type ||
                      Array.isArray(value)
                    ) {
                      errors.push(
                        this.createError(type + ".base", null, state, options)
                      );
                      return finish();
                    }

                    // Skip if there are no other rules to test

                    if (
                      !this._inner.renames.length &&
                      !this._inner.dependencies.length &&
                      !this._inner.children && // null allows any keys
                      !this._inner.patterns.length
                    ) {
                      target = value;
                      return finish();
                    }

                    // Ensure target is a local copy (parsed) or shallow copy

                    if (target === value) {
                      if (type === "object") {
                        target = Object.create(Object.getPrototypeOf(value));
                      } else {
                        target = function target() {
                          return value.apply(this, arguments);
                        };

                        target.prototype = Hoek.clone(value.prototype);
                      }

                      var valueKeys = Object.keys(value);
                      for (var i = 0; i < valueKeys.length; ++i) {
                        target[valueKeys[i]] = value[valueKeys[i]];
                      }
                    } else {
                      target = value;
                    }

                    // Rename keys

                    var renamed = {};
                    for (var _i = 0; _i < this._inner.renames.length; ++_i) {
                      var rename = this._inner.renames[_i];

                      if (
                        rename.options.ignoreUndefined &&
                        target[rename.from] === undefined
                      ) {
                        continue;
                      }

                      if (!rename.options.multiple && renamed[rename.to]) {
                        errors.push(
                          this.createError(
                            "object.rename.multiple",
                            { from: rename.from, to: rename.to },
                            state,
                            options
                          )
                        );
                        if (options.abortEarly) {
                          return finish();
                        }
                      }

                      if (
                        Object.prototype.hasOwnProperty.call(
                          target,
                          rename.to
                        ) &&
                        !rename.options.override &&
                        !renamed[rename.to]
                      ) {
                        errors.push(
                          this.createError(
                            "object.rename.override",
                            { from: rename.from, to: rename.to },
                            state,
                            options
                          )
                        );
                        if (options.abortEarly) {
                          return finish();
                        }
                      }

                      if (target[rename.from] === undefined) {
                        delete target[rename.to];
                      } else {
                        target[rename.to] = target[rename.from];
                      }

                      renamed[rename.to] = true;

                      if (!rename.options.alias) {
                        delete target[rename.from];
                      }
                    }

                    // Validate schema

                    if (
                      !this._inner.children && // null allows any keys
                      !this._inner.patterns.length &&
                      !this._inner.dependencies.length
                    ) {
                      return finish();
                    }

                    var unprocessed = Hoek.mapToObject(Object.keys(target));

                    if (this._inner.children) {
                      var stripProps = [];

                      for (
                        var _i2 = 0;
                        _i2 < this._inner.children.length;
                        ++_i2
                      ) {
                        var child = this._inner.children[_i2];
                        var key = child.key;
                        var item = target[key];

                        delete unprocessed[key];

                        var localState = {
                          key: key,
                          path:
                            (state.path || "") +
                            (state.path && key ? "." : "") +
                            key,
                          parent: target,
                          reference: state.reference
                        };
                        var result = child.schema._validate(
                          item,
                          localState,
                          options
                        );
                        if (result.errors) {
                          errors.push(
                            this.createError(
                              "object.child",
                              {
                                key: key,
                                child: child.schema._getLabel(key),
                                reason: result.errors
                              },
                              localState,
                              options
                            )
                          );

                          if (options.abortEarly) {
                            return finish();
                          }
                        } else {
                          if (
                            child.schema._flags.strip ||
                            (result.value === undefined &&
                              result.value !== item)
                          ) {
                            stripProps.push(key);
                            target[key] = result.finalValue;
                          } else if (result.value !== undefined) {
                            target[key] = result.value;
                          }
                        }
                      }

                      for (var _i3 = 0; _i3 < stripProps.length; ++_i3) {
                        delete target[stripProps[_i3]];
                      }
                    }

                    // Unknown keys

                    var unprocessedKeys = Object.keys(unprocessed);
                    if (unprocessedKeys.length && this._inner.patterns.length) {
                      for (var _i4 = 0; _i4 < unprocessedKeys.length; ++_i4) {
                        var _key = unprocessedKeys[_i4];
                        var _localState = {
                          key: _key,
                          path: (state.path ? state.path + "." : "") + _key,
                          parent: target,
                          reference: state.reference
                        };
                        var _item = target[_key];

                        for (var j = 0; j < this._inner.patterns.length; ++j) {
                          var pattern = this._inner.patterns[j];

                          if (pattern.regex.test(_key)) {
                            delete unprocessed[_key];

                            var _result = pattern.rule._validate(
                              _item,
                              _localState,
                              options
                            );
                            if (_result.errors) {
                              errors.push(
                                this.createError(
                                  "object.child",
                                  {
                                    key: _key,
                                    child: pattern.rule._getLabel(_key),
                                    reason: _result.errors
                                  },
                                  _localState,
                                  options
                                )
                              );

                              if (options.abortEarly) {
                                return finish();
                              }
                            }

                            if (_result.value !== undefined) {
                              target[_key] = _result.value;
                            }
                          }
                        }
                      }

                      unprocessedKeys = Object.keys(unprocessed);
                    }

                    if (
                      (this._inner.children || this._inner.patterns.length) &&
                      unprocessedKeys.length
                    ) {
                      if (
                        (options.stripUnknown &&
                          this._flags.allowUnknown !== true) ||
                        options.skipFunctions
                      ) {
                        var stripUnknown = options.stripUnknown
                          ? options.stripUnknown === true
                            ? true
                            : !!options.stripUnknown.objects
                          : false;

                        for (var _i5 = 0; _i5 < unprocessedKeys.length; ++_i5) {
                          var _key2 = unprocessedKeys[_i5];

                          if (stripUnknown) {
                            delete target[_key2];
                            delete unprocessed[_key2];
                          } else if (typeof target[_key2] === "function") {
                            delete unprocessed[_key2];
                          }
                        }

                        unprocessedKeys = Object.keys(unprocessed);
                      }

                      if (
                        unprocessedKeys.length &&
                        (this._flags.allowUnknown !== undefined
                          ? !this._flags.allowUnknown
                          : !options.allowUnknown)
                      ) {
                        for (var _i6 = 0; _i6 < unprocessedKeys.length; ++_i6) {
                          var unprocessedKey = unprocessedKeys[_i6];
                          errors.push(
                            this.createError(
                              "object.allowUnknown",
                              { child: unprocessedKey },
                              {
                                key: unprocessedKey,
                                path:
                                  state.path +
                                  (state.path ? "." : "") +
                                  unprocessedKey
                              },
                              options
                            )
                          );
                        }
                      }
                    }

                    // Validate dependencies

                    for (
                      var _i7 = 0;
                      _i7 < this._inner.dependencies.length;
                      ++_i7
                    ) {
                      var dep = this._inner.dependencies[_i7];
                      var err = internals[dep.type].call(
                        this,
                        dep.key !== null && target[dep.key],
                        dep.peers,
                        target,
                        {
                          key: dep.key,
                          path:
                            (state.path || "") + (dep.key ? "." + dep.key : "")
                        },
                        options
                      );
                      if (err instanceof Errors.Err) {
                        errors.push(err);
                        if (options.abortEarly) {
                          return finish();
                        }
                      }
                    }

                    return finish();
                  };

                  _class.prototype._func = function _func() {
                    var obj = this.clone();
                    obj._flags.func = true;
                    return obj;
                  };

                  _class.prototype.keys = function keys(schema) {
                    Hoek.assert(
                      schema === null ||
                        schema === undefined ||
                        (typeof schema === "undefined"
                          ? "undefined"
                          : _typeof(schema)) === "object",
                      "Object schema must be a valid object"
                    );
                    Hoek.assert(
                      !schema || !(schema instanceof Any),
                      "Object schema cannot be a joi schema"
                    );

                    var obj = this.clone();

                    if (!schema) {
                      obj._inner.children = null;
                      return obj;
                    }

                    var children = Object.keys(schema);

                    if (!children.length) {
                      obj._inner.children = [];
                      return obj;
                    }

                    var topo = new Topo();
                    if (obj._inner.children) {
                      for (var i = 0; i < obj._inner.children.length; ++i) {
                        var child = obj._inner.children[i];

                        // Only add the key if we are not going to replace it later
                        if (children.indexOf(child.key) === -1) {
                          topo.add(child, {
                            after: child._refs,
                            group: child.key
                          });
                        }
                      }
                    }

                    for (var _i8 = 0; _i8 < children.length; ++_i8) {
                      var key = children[_i8];
                      var _child = schema[key];
                      try {
                        var cast = Cast.schema(_child);
                        topo.add(
                          { key: key, schema: cast },
                          { after: cast._refs, group: key }
                        );
                      } catch (castErr) {
                        if (castErr.hasOwnProperty("path")) {
                          castErr.path = key + "." + castErr.path;
                        } else {
                          castErr.path = key;
                        }
                        throw castErr;
                      }
                    }

                    obj._inner.children = topo.nodes;

                    return obj;
                  };

                  _class.prototype.unknown = function unknown(allow) {
                    var value = allow !== false;

                    if (this._flags.allowUnknown === value) {
                      return this;
                    }

                    var obj = this.clone();
                    obj._flags.allowUnknown = value;
                    return obj;
                  };

                  _class.prototype.length = function length(limit) {
                    Hoek.assert(
                      Number.isSafeInteger(limit) && limit >= 0,
                      "limit must be a positive integer"
                    );

                    return this._test("length", limit, function(
                      value,
                      state,
                      options
                    ) {
                      if (Object.keys(value).length === limit) {
                        return value;
                      }

                      return this.createError(
                        "object.length",
                        { limit: limit },
                        state,
                        options
                      );
                    });
                  };

                  _class.prototype.arity = function arity(n) {
                    Hoek.assert(
                      Number.isSafeInteger(n) && n >= 0,
                      "n must be a positive integer"
                    );

                    return this._test("arity", n, function(
                      value,
                      state,
                      options
                    ) {
                      if (value.length === n) {
                        return value;
                      }

                      return this.createError(
                        "function.arity",
                        { n: n },
                        state,
                        options
                      );
                    });
                  };

                  _class.prototype.minArity = function minArity(n) {
                    Hoek.assert(
                      Number.isSafeInteger(n) && n > 0,
                      "n must be a strict positive integer"
                    );

                    return this._test("minArity", n, function(
                      value,
                      state,
                      options
                    ) {
                      if (value.length >= n) {
                        return value;
                      }

                      return this.createError(
                        "function.minArity",
                        { n: n },
                        state,
                        options
                      );
                    });
                  };

                  _class.prototype.maxArity = function maxArity(n) {
                    Hoek.assert(
                      Number.isSafeInteger(n) && n >= 0,
                      "n must be a positive integer"
                    );

                    return this._test("maxArity", n, function(
                      value,
                      state,
                      options
                    ) {
                      if (value.length <= n) {
                        return value;
                      }

                      return this.createError(
                        "function.maxArity",
                        { n: n },
                        state,
                        options
                      );
                    });
                  };

                  _class.prototype.min = function min(limit) {
                    Hoek.assert(
                      Number.isSafeInteger(limit) && limit >= 0,
                      "limit must be a positive integer"
                    );

                    return this._test("min", limit, function(
                      value,
                      state,
                      options
                    ) {
                      if (Object.keys(value).length >= limit) {
                        return value;
                      }

                      return this.createError(
                        "object.min",
                        { limit: limit },
                        state,
                        options
                      );
                    });
                  };

                  _class.prototype.max = function max(limit) {
                    Hoek.assert(
                      Number.isSafeInteger(limit) && limit >= 0,
                      "limit must be a positive integer"
                    );

                    return this._test("max", limit, function(
                      value,
                      state,
                      options
                    ) {
                      if (Object.keys(value).length <= limit) {
                        return value;
                      }

                      return this.createError(
                        "object.max",
                        { limit: limit },
                        state,
                        options
                      );
                    });
                  };

                  _class.prototype.pattern = function pattern(
                    _pattern,
                    schema
                  ) {
                    Hoek.assert(
                      _pattern instanceof RegExp,
                      "Invalid regular expression"
                    );
                    Hoek.assert(schema !== undefined, "Invalid rule");

                    _pattern = new RegExp(
                      _pattern.source,
                      _pattern.ignoreCase ? "i" : undefined
                    ); // Future version should break this and forbid unsupported regex flags

                    try {
                      schema = Cast.schema(schema);
                    } catch (castErr) {
                      if (castErr.hasOwnProperty("path")) {
                        castErr.message =
                          castErr.message + "(" + castErr.path + ")";
                      }

                      throw castErr;
                    }

                    var obj = this.clone();
                    obj._inner.patterns.push({ regex: _pattern, rule: schema });
                    return obj;
                  };

                  _class.prototype.schema = function schema() {
                    return this._test("schema", null, function(
                      value,
                      state,
                      options
                    ) {
                      if (value instanceof Any) {
                        return value;
                      }

                      return this.createError(
                        "object.schema",
                        null,
                        state,
                        options
                      );
                    });
                  };

                  _class.prototype.with = function _with(key, peers) {
                    return this._dependency("with", key, peers);
                  };

                  _class.prototype.without = function without(key, peers) {
                    return this._dependency("without", key, peers);
                  };

                  _class.prototype.xor = function xor() {
                    var peers = Hoek.flatten(
                      Array.prototype.slice.call(arguments)
                    );
                    return this._dependency("xor", null, peers);
                  };

                  _class.prototype.or = function or() {
                    var peers = Hoek.flatten(
                      Array.prototype.slice.call(arguments)
                    );
                    return this._dependency("or", null, peers);
                  };

                  _class.prototype.and = function and() {
                    var peers = Hoek.flatten(
                      Array.prototype.slice.call(arguments)
                    );
                    return this._dependency("and", null, peers);
                  };

                  _class.prototype.nand = function nand() {
                    var peers = Hoek.flatten(
                      Array.prototype.slice.call(arguments)
                    );
                    return this._dependency("nand", null, peers);
                  };

                  _class.prototype.requiredKeys = function requiredKeys(
                    children
                  ) {
                    children = Hoek.flatten(
                      Array.prototype.slice.call(arguments)
                    );
                    return this.applyFunctionToChildren(children, "required");
                  };

                  _class.prototype.optionalKeys = function optionalKeys(
                    children
                  ) {
                    children = Hoek.flatten(
                      Array.prototype.slice.call(arguments)
                    );
                    return this.applyFunctionToChildren(children, "optional");
                  };

                  _class.prototype.forbiddenKeys = function forbiddenKeys(
                    children
                  ) {
                    children = Hoek.flatten(
                      Array.prototype.slice.call(arguments)
                    );
                    return this.applyFunctionToChildren(children, "forbidden");
                  };

                  _class.prototype.rename = function rename(from, to, options) {
                    Hoek.assert(
                      typeof from === "string",
                      "Rename missing the from argument"
                    );
                    Hoek.assert(
                      typeof to === "string",
                      "Rename missing the to argument"
                    );
                    Hoek.assert(
                      to !== from,
                      "Cannot rename key to same name:",
                      from
                    );

                    for (var i = 0; i < this._inner.renames.length; ++i) {
                      Hoek.assert(
                        this._inner.renames[i].from !== from,
                        "Cannot rename the same key multiple times"
                      );
                    }

                    var obj = this.clone();

                    obj._inner.renames.push({
                      from: from,
                      to: to,
                      options: Hoek.applyToDefaults(
                        internals.renameDefaults,
                        options || {}
                      )
                    });

                    return obj;
                  };

                  _class.prototype.applyFunctionToChildren = function applyFunctionToChildren(
                    children,
                    fn,
                    args,
                    root
                  ) {
                    children = [].concat(children);
                    Hoek.assert(
                      children.length > 0,
                      "expected at least one children"
                    );

                    var groupedChildren = internals.groupChildren(children);
                    var obj = void 0;

                    if ("" in groupedChildren) {
                      obj = this[fn].apply(this, args);
                      delete groupedChildren[""];
                    } else {
                      obj = this.clone();
                    }

                    if (obj._inner.children) {
                      root = root ? root + "." : "";

                      for (var i = 0; i < obj._inner.children.length; ++i) {
                        var child = obj._inner.children[i];
                        var group = groupedChildren[child.key];

                        if (group) {
                          obj._inner.children[i] = {
                            key: child.key,
                            _refs: child._refs,
                            schema: child.schema.applyFunctionToChildren(
                              group,
                              fn,
                              args,
                              root + child.key
                            )
                          };

                          delete groupedChildren[child.key];
                        }
                      }
                    }

                    var remaining = Object.keys(groupedChildren);
                    Hoek.assert(
                      remaining.length === 0,
                      "unknown key(s)",
                      remaining.join(", ")
                    );

                    return obj;
                  };

                  _class.prototype._dependency = function _dependency(
                    type,
                    key,
                    peers
                  ) {
                    peers = [].concat(peers);
                    for (var i = 0; i < peers.length; ++i) {
                      Hoek.assert(
                        typeof peers[i] === "string",
                        type,
                        "peers must be a string or array of strings"
                      );
                    }

                    var obj = this.clone();
                    obj._inner.dependencies.push({
                      type: type,
                      key: key,
                      peers: peers
                    });
                    return obj;
                  };

                  _class.prototype.describe = function describe(shallow) {
                    var description = Any.prototype.describe.call(this);

                    if (description.rules) {
                      for (var i = 0; i < description.rules.length; ++i) {
                        var rule = description.rules[i];
                        // Coverage off for future-proof descriptions, only object().assert() is use right now
                        if (
                          /* $lab:coverage:off$ */ rule.arg &&
                          _typeof(rule.arg) === "object" &&
                          rule.arg.schema &&
                          rule.arg.ref /* $lab:coverage:on$ */
                        ) {
                          rule.arg = {
                            schema: rule.arg.schema.describe(),
                            ref: rule.arg.ref.toString()
                          };
                        }
                      }
                    }

                    if (this._inner.children && !shallow) {
                      description.children = {};
                      for (
                        var _i9 = 0;
                        _i9 < this._inner.children.length;
                        ++_i9
                      ) {
                        var child = this._inner.children[_i9];
                        description.children[
                          child.key
                        ] = child.schema.describe();
                      }
                    }

                    if (this._inner.dependencies.length) {
                      description.dependencies = Hoek.clone(
                        this._inner.dependencies
                      );
                    }

                    if (this._inner.patterns.length) {
                      description.patterns = [];

                      for (
                        var _i10 = 0;
                        _i10 < this._inner.patterns.length;
                        ++_i10
                      ) {
                        var pattern = this._inner.patterns[_i10];
                        description.patterns.push({
                          regex: pattern.regex.toString(),
                          rule: pattern.rule.describe()
                        });
                      }
                    }

                    if (this._inner.renames.length > 0) {
                      description.renames = Hoek.clone(this._inner.renames);
                    }

                    return description;
                  };

                  _class.prototype.assert = function assert(
                    ref,
                    schema,
                    message
                  ) {
                    ref = Cast.ref(ref);
                    Hoek.assert(
                      ref.isContext || ref.depth > 1,
                      "Cannot use assertions for root level references - use direct key rules instead"
                    );
                    message = message || "pass the assertion test";

                    try {
                      schema = Cast.schema(schema);
                    } catch (castErr) {
                      if (castErr.hasOwnProperty("path")) {
                        castErr.message =
                          castErr.message + "(" + castErr.path + ")";
                      }

                      throw castErr;
                    }

                    var key = ref.path[ref.path.length - 1];
                    var path = ref.path.join(".");

                    return this._test(
                      "assert",
                      { schema: schema, ref: ref },
                      function(value, state, options) {
                        var result = schema._validate(
                          ref(value),
                          null,
                          options,
                          value
                        );
                        if (!result.errors) {
                          return value;
                        }

                        var localState = Hoek.merge({}, state);
                        localState.key = key;
                        localState.path = path;
                        return this.createError(
                          "object.assert",
                          { ref: localState.path, message: message },
                          localState,
                          options
                        );
                      }
                    );
                  };

                  _class.prototype.type = function type(constructor, name) {
                    Hoek.assert(
                      typeof constructor === "function",
                      "type must be a constructor function"
                    );
                    var typeData = {
                      name: name || constructor.name,
                      ctor: constructor
                    };

                    return this._test("type", typeData, function(
                      value,
                      state,
                      options
                    ) {
                      if (value instanceof constructor) {
                        return value;
                      }

                      return this.createError(
                        "object.type",
                        { type: typeData.name },
                        state,
                        options
                      );
                    });
                  };

                  _class.prototype.ref = function ref() {
                    return this._test("ref", null, function(
                      value,
                      state,
                      options
                    ) {
                      if (Ref.isRef(value)) {
                        return value;
                      }

                      return this.createError(
                        "function.ref",
                        null,
                        state,
                        options
                      );
                    });
                  };

                  return _class;
                })(Any);

                internals.safeParse = function(value) {
                  try {
                    return JSON.parse(value);
                  } catch (parseErr) {}

                  return value;
                };

                internals.renameDefaults = {
                  alias: false, // Keep old value in place
                  multiple: false, // Allow renaming multiple keys into the same target
                  override: false // Overrides an existing key
                };

                internals.groupChildren = function(children) {
                  children.sort();

                  var grouped = {};

                  for (var i = 0; i < children.length; ++i) {
                    var child = children[i];
                    Hoek.assert(
                      typeof child === "string",
                      "children must be strings"
                    );
                    var group = child.split(".")[0];
                    var childGroup = (grouped[group] = grouped[group] || []);
                    childGroup.push(child.substring(group.length + 1));
                  }

                  return grouped;
                };

                internals.keysToLabels = function(schema, keys) {
                  var children = schema._inner.children;

                  if (!children) {
                    return keys;
                  }

                  var findLabel = function findLabel(key) {
                    var matchingChild = children.find(function(child) {
                      return child.key === key;
                    });
                    return matchingChild
                      ? matchingChild.schema._getLabel(key)
                      : key;
                  };

                  if (Array.isArray(keys)) {
                    return keys.map(findLabel);
                  }

                  return findLabel(keys);
                };

                internals.with = function(
                  value,
                  peers,
                  parent,
                  state,
                  options
                ) {
                  if (value === undefined) {
                    return value;
                  }

                  for (var i = 0; i < peers.length; ++i) {
                    var peer = peers[i];
                    if (
                      !Object.prototype.hasOwnProperty.call(parent, peer) ||
                      parent[peer] === undefined
                    ) {
                      return this.createError(
                        "object.with",
                        {
                          main: state.key,
                          mainWithLabel: internals.keysToLabels(
                            this,
                            state.key
                          ),
                          peer: peer,
                          peerWithLabel: internals.keysToLabels(this, peer)
                        },
                        state,
                        options
                      );
                    }
                  }

                  return value;
                };

                internals.without = function(
                  value,
                  peers,
                  parent,
                  state,
                  options
                ) {
                  if (value === undefined) {
                    return value;
                  }

                  for (var i = 0; i < peers.length; ++i) {
                    var peer = peers[i];
                    if (
                      Object.prototype.hasOwnProperty.call(parent, peer) &&
                      parent[peer] !== undefined
                    ) {
                      return this.createError(
                        "object.without",
                        {
                          main: state.key,
                          mainWithLabel: internals.keysToLabels(
                            this,
                            state.key
                          ),
                          peer: peer,
                          peerWithLabel: internals.keysToLabels(this, peer)
                        },
                        state,
                        options
                      );
                    }
                  }

                  return value;
                };

                internals.xor = function(value, peers, parent, state, options) {
                  var present = [];
                  for (var i = 0; i < peers.length; ++i) {
                    var peer = peers[i];
                    if (
                      Object.prototype.hasOwnProperty.call(parent, peer) &&
                      parent[peer] !== undefined
                    ) {
                      present.push(peer);
                    }
                  }

                  if (present.length === 1) {
                    return value;
                  }

                  var context = {
                    peers: peers,
                    peersWithLabels: internals.keysToLabels(this, peers)
                  };

                  if (present.length === 0) {
                    return this.createError(
                      "object.missing",
                      context,
                      state,
                      options
                    );
                  }

                  return this.createError(
                    "object.xor",
                    context,
                    state,
                    options
                  );
                };

                internals.or = function(value, peers, parent, state, options) {
                  for (var i = 0; i < peers.length; ++i) {
                    var peer = peers[i];
                    if (
                      Object.prototype.hasOwnProperty.call(parent, peer) &&
                      parent[peer] !== undefined
                    ) {
                      return value;
                    }
                  }

                  return this.createError(
                    "object.missing",
                    {
                      peers: peers,
                      peersWithLabels: internals.keysToLabels(this, peers)
                    },
                    state,
                    options
                  );
                };

                internals.and = function(value, peers, parent, state, options) {
                  var missing = [];
                  var present = [];
                  var count = peers.length;
                  for (var i = 0; i < count; ++i) {
                    var peer = peers[i];
                    if (
                      !Object.prototype.hasOwnProperty.call(parent, peer) ||
                      parent[peer] === undefined
                    ) {
                      missing.push(peer);
                    } else {
                      present.push(peer);
                    }
                  }

                  var aon =
                    missing.length === count || present.length === count;

                  if (!aon) {
                    return this.createError(
                      "object.and",
                      {
                        present: present,
                        presentWithLabels: internals.keysToLabels(
                          this,
                          present
                        ),
                        missing: missing,
                        missingWithLabels: internals.keysToLabels(this, missing)
                      },
                      state,
                      options
                    );
                  }
                };

                internals.nand = function(
                  value,
                  peers,
                  parent,
                  state,
                  options
                ) {
                  var present = [];
                  for (var i = 0; i < peers.length; ++i) {
                    var peer = peers[i];
                    if (
                      Object.prototype.hasOwnProperty.call(parent, peer) &&
                      parent[peer] !== undefined
                    ) {
                      present.push(peer);
                    }
                  }

                  var values = Hoek.clone(peers);
                  var main = values.splice(0, 1)[0];
                  var allPresent = present.length === peers.length;
                  return allPresent
                    ? this.createError(
                        "object.nand",
                        {
                          main: main,
                          mainWithLabel: internals.keysToLabels(this, main),
                          peers: values,
                          peersWithLabels: internals.keysToLabels(this, values)
                        },
                        state,
                        options
                      )
                    : null;
                };

                module.exports = new internals.Object();

                /***/
              },
              /* 27 */
              /***/ function(module, exports, __webpack_require__) {
                "use strict";

                // Load modules

                var Hoek = __webpack_require__(2);

                // Declare internals

                var internals = {};

                exports = module.exports = internals.Topo = function() {
                  this._items = [];
                  this.nodes = [];
                };

                internals.Topo.prototype.add = function(nodes, options) {
                  var _this = this;

                  options = options || {};

                  // Validate rules

                  var before = [].concat(options.before || []);
                  var after = [].concat(options.after || []);
                  var group = options.group || "?";
                  var sort = options.sort || 0; // Used for merging only

                  Hoek.assert(
                    before.indexOf(group) === -1,
                    "Item cannot come before itself:",
                    group
                  );
                  Hoek.assert(
                    before.indexOf("?") === -1,
                    "Item cannot come before unassociated items"
                  );
                  Hoek.assert(
                    after.indexOf(group) === -1,
                    "Item cannot come after itself:",
                    group
                  );
                  Hoek.assert(
                    after.indexOf("?") === -1,
                    "Item cannot come after unassociated items"
                  );

                  [].concat(nodes).forEach(function(node, i) {
                    var item = {
                      seq: _this._items.length,
                      sort: sort,
                      before: before,
                      after: after,
                      group: group,
                      node: node
                    };

                    _this._items.push(item);
                  });

                  // Insert event

                  var error = this._sort();
                  Hoek.assert(
                    !error,
                    "item",
                    group !== "?" ? "added into group " + group : "",
                    "created a dependencies error"
                  );

                  return this.nodes;
                };

                internals.Topo.prototype.merge = function(others) {
                  others = [].concat(others);
                  for (var i = 0; i < others.length; ++i) {
                    var other = others[i];
                    if (other) {
                      for (var j = 0; j < other._items.length; ++j) {
                        var item = Hoek.shallow(other._items[j]);
                        this._items.push(item);
                      }
                    }
                  }

                  // Sort items

                  this._items.sort(internals.mergeSort);
                  for (var _i = 0; _i < this._items.length; ++_i) {
                    this._items[_i].seq = _i;
                  }

                  var error = this._sort();
                  Hoek.assert(!error, "merge created a dependencies error");

                  return this.nodes;
                };

                internals.mergeSort = function(a, b) {
                  return a.sort === b.sort ? 0 : a.sort < b.sort ? -1 : 1;
                };

                internals.Topo.prototype._sort = function() {
                  // Construct graph

                  var graph = {};
                  var graphAfters = Object.create(null); // A prototype can bungle lookups w/ false positives
                  var groups = Object.create(null);

                  for (var i = 0; i < this._items.length; ++i) {
                    var item = this._items[i];
                    var seq = item.seq; // Unique across all items
                    var group = item.group;

                    // Determine Groups

                    groups[group] = groups[group] || [];
                    groups[group].push(seq);

                    // Build intermediary graph using 'before'

                    graph[seq] = item.before;

                    // Build second intermediary graph with 'after'

                    var after = item.after;
                    for (var j = 0; j < after.length; ++j) {
                      graphAfters[after[j]] = (graphAfters[after[j]] || [])
                        .concat(seq);
                    }
                  }

                  // Expand intermediary graph

                  var graphNodes = Object.keys(graph);
                  for (var _i2 = 0; _i2 < graphNodes.length; ++_i2) {
                    var node = graphNodes[_i2];
                    var expandedGroups = [];

                    var graphNodeItems = Object.keys(graph[node]);
                    for (var _j = 0; _j < graphNodeItems.length; ++_j) {
                      var _group = graph[node][graphNodeItems[_j]];
                      groups[_group] = groups[_group] || [];

                      for (var k = 0; k < groups[_group].length; ++k) {
                        expandedGroups.push(groups[_group][k]);
                      }
                    }
                    graph[node] = expandedGroups;
                  }

                  // Merge intermediary graph using graphAfters into final graph

                  var afterNodes = Object.keys(graphAfters);
                  for (var _i3 = 0; _i3 < afterNodes.length; ++_i3) {
                    var _group2 = afterNodes[_i3];

                    if (groups[_group2]) {
                      for (var _j2 = 0; _j2 < groups[_group2].length; ++_j2) {
                        var _node = groups[_group2][_j2];
                        graph[_node] = graph[_node].concat(
                          graphAfters[_group2]
                        );
                      }
                    }
                  }

                  // Compile ancestors

                  var children = void 0;
                  var ancestors = {};
                  graphNodes = Object.keys(graph);
                  for (var _i4 = 0; _i4 < graphNodes.length; ++_i4) {
                    var _node2 = graphNodes[_i4];
                    children = graph[_node2];

                    for (var _j3 = 0; _j3 < children.length; ++_j3) {
                      ancestors[children[_j3]] = (ancestors[children[_j3]] ||
                        [])
                        .concat(_node2);
                    }
                  }

                  // Topo sort

                  var visited = {};
                  var sorted = [];

                  for (var _i5 = 0; _i5 < this._items.length; ++_i5) {
                    var next = _i5;

                    if (ancestors[_i5]) {
                      next = null;
                      for (var _j4 = 0; _j4 < this._items.length; ++_j4) {
                        if (visited[_j4] === true) {
                          continue;
                        }

                        if (!ancestors[_j4]) {
                          ancestors[_j4] = [];
                        }

                        var shouldSeeCount = ancestors[_j4].length;
                        var seenCount = 0;
                        for (var _k = 0; _k < shouldSeeCount; ++_k) {
                          if (sorted.indexOf(ancestors[_j4][_k]) >= 0) {
                            ++seenCount;
                          }
                        }

                        if (seenCount === shouldSeeCount) {
                          next = _j4;
                          break;
                        }
                      }
                    }

                    if (next !== null) {
                      next = next.toString(); // Normalize to string TODO: replace with seq
                      visited[next] = true;
                      sorted.push(next);
                    }
                  }

                  if (sorted.length !== this._items.length) {
                    return new Error("Invalid dependencies");
                  }

                  var seqIndex = {};
                  for (var _i6 = 0; _i6 < this._items.length; ++_i6) {
                    var _item = this._items[_i6];
                    seqIndex[_item.seq] = _item;
                  }

                  var sortedNodes = [];
                  this._items = sorted.map(function(value) {
                    var sortedItem = seqIndex[value];
                    sortedNodes.push(sortedItem.node);
                    return sortedItem;
                  });

                  this.nodes = sortedNodes;
                };

                /***/
              },
              /* 28 */
              /***/ function(module, exports, __webpack_require__) {
                "use strict";

                // Load modules

                var Joi = __webpack_require__(1);

                // Declare internals

                var internals = {};

                exports.options = Joi.object({
                  abortEarly: Joi.boolean(),
                  convert: Joi.boolean(),
                  allowUnknown: Joi.boolean(),
                  skipFunctions: Joi.boolean(),
                  stripUnknown: [
                    Joi.boolean(),
                    Joi.object({
                      arrays: Joi.boolean(),
                      objects: Joi.boolean()
                    }).or("arrays", "objects")
                  ],
                  language: Joi.object(),
                  presence: Joi.string().only(
                    "required",
                    "optional",
                    "forbidden",
                    "ignore"
                  ),
                  raw: Joi.boolean(),
                  context: Joi.object(),
                  strip: Joi.boolean(),
                  noDefaults: Joi.boolean()
                }).strict();

                /***/
              },
              /* 29 */
              /***/ function(module, exports, __webpack_require__) {
                "use strict";

                // Load modules

                function _defaults(obj, defaults) {
                  var keys = Object.getOwnPropertyNames(defaults);
                  for (var i = 0; i < keys.length; i++) {
                    var key = keys[i];
                    var value = Object.getOwnPropertyDescriptor(defaults, key);
                    if (value && value.configurable && obj[key] === undefined) {
                      Object.defineProperty(obj, key, value);
                    }
                  }
                  return obj;
                }

                function _classCallCheck(instance, Constructor) {
                  if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                  }
                }

                function _possibleConstructorReturn(self, call) {
                  if (!self) {
                    throw new ReferenceError(
                      "this hasn't been initialised - super() hasn't been called"
                    );
                  }
                  return call &&
                  (typeof call === "object" || typeof call === "function")
                    ? call
                    : self;
                }

                function _inherits(subClass, superClass) {
                  if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError(
                      "Super expression must either be null or a function, not " +
                        typeof superClass
                    );
                  }
                  subClass.prototype = Object.create(
                    superClass && superClass.prototype,
                    {
                      constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                      }
                    }
                  );
                  if (superClass)
                    Object.setPrototypeOf
                      ? Object.setPrototypeOf(subClass, superClass)
                      : _defaults(subClass, superClass);
                }

                var Any = __webpack_require__(11);
                var Hoek = __webpack_require__(2);

                // Declare internals

                var internals = {};

                internals.Lazy = (function(_Any) {
                  _inherits(_class, _Any);

                  function _class() {
                    _classCallCheck(this, _class);

                    var _this = _possibleConstructorReturn(
                      this,
                      _Any.call(this)
                    );

                    _this._type = "lazy";
                    return _this;
                  }

                  _class.prototype._base = function _base(
                    value,
                    state,
                    options
                  ) {
                    var result = { value: value };
                    var lazy = this._flags.lazy;

                    if (!lazy) {
                      result.errors = this.createError(
                        "lazy.base",
                        null,
                        state,
                        options
                      );
                      return result;
                    }

                    var schema = lazy();

                    if (!(schema instanceof Any)) {
                      result.errors = this.createError(
                        "lazy.schema",
                        null,
                        state,
                        options
                      );
                      return result;
                    }

                    return schema._validate(value, state, options);
                  };

                  _class.prototype.set = function set(fn) {
                    Hoek.assert(
                      typeof fn === "function",
                      "You must provide a function as first argument"
                    );

                    var obj = this.clone();
                    obj._flags.lazy = fn;
                    return obj;
                  };

                  return _class;
                })(Any);

                module.exports = new internals.Lazy();

                /***/
              },
              /* 30 */
              /***/ function(module, exports, __webpack_require__) {
                "use strict";

                // Load modules

                var _typeof =
                  typeof Symbol === "function" &&
                  typeof Symbol.iterator === "symbol"
                    ? function(obj) {
                        return typeof obj;
                      }
                    : function(obj) {
                        return obj &&
                        typeof Symbol === "function" &&
                        obj.constructor === Symbol &&
                        obj !== Symbol.prototype
                          ? "symbol"
                          : typeof obj;
                      };

                function _defaults(obj, defaults) {
                  var keys = Object.getOwnPropertyNames(defaults);
                  for (var i = 0; i < keys.length; i++) {
                    var key = keys[i];
                    var value = Object.getOwnPropertyDescriptor(defaults, key);
                    if (value && value.configurable && obj[key] === undefined) {
                      Object.defineProperty(obj, key, value);
                    }
                  }
                  return obj;
                }

                function _classCallCheck(instance, Constructor) {
                  if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                  }
                }

                function _possibleConstructorReturn(self, call) {
                  if (!self) {
                    throw new ReferenceError(
                      "this hasn't been initialised - super() hasn't been called"
                    );
                  }
                  return call &&
                  (typeof call === "object" || typeof call === "function")
                    ? call
                    : self;
                }

                function _inherits(subClass, superClass) {
                  if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError(
                      "Super expression must either be null or a function, not " +
                        typeof superClass
                    );
                  }
                  subClass.prototype = Object.create(
                    superClass && superClass.prototype,
                    {
                      constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                      }
                    }
                  );
                  if (superClass)
                    Object.setPrototypeOf
                      ? Object.setPrototypeOf(subClass, superClass)
                      : _defaults(subClass, superClass);
                }

                var Any = __webpack_require__(11);
                var Cast = __webpack_require__(16);
                var Ref = __webpack_require__(12);
                var Hoek = __webpack_require__(2);

                // Declare internals

                var internals = {};

                internals.fastSplice = function(arr, i) {
                  var pos = i;
                  while (pos < arr.length) {
                    arr[pos++] = arr[pos];
                  }

                  --arr.length;
                };

                internals.Array = (function(_Any) {
                  _inherits(_class, _Any);

                  function _class() {
                    _classCallCheck(this, _class);

                    var _this = _possibleConstructorReturn(
                      this,
                      _Any.call(this)
                    );

                    _this._type = "array";
                    _this._inner.items = [];
                    _this._inner.ordereds = [];
                    _this._inner.inclusions = [];
                    _this._inner.exclusions = [];
                    _this._inner.requireds = [];
                    _this._flags.sparse = false;
                    return _this;
                  }

                  _class.prototype._base = function _base(
                    value,
                    state,
                    options
                  ) {
                    var result = {
                      value: value
                    };

                    if (typeof value === "string" && options.convert) {
                      internals.safeParse(value, result);
                    }

                    var isArray = Array.isArray(result.value);
                    var wasArray = isArray;
                    if (options.convert && this._flags.single && !isArray) {
                      result.value = [result.value];
                      isArray = true;
                    }

                    if (!isArray) {
                      result.errors = this.createError(
                        "array.base",
                        null,
                        state,
                        options
                      );
                      return result;
                    }

                    if (
                      this._inner.inclusions.length ||
                      this._inner.exclusions.length ||
                      this._inner.requireds.length ||
                      this._inner.ordereds.length ||
                      !this._flags.sparse
                    ) {
                      // Clone the array so that we don't modify the original
                      if (wasArray) {
                        result.value = result.value.slice(0);
                      }

                      result.errors = this._checkItems.call(
                        this,
                        result.value,
                        wasArray,
                        state,
                        options
                      );

                      if (
                        result.errors &&
                        wasArray &&
                        options.convert &&
                        this._flags.single
                      ) {
                        // Attempt a 2nd pass by putting the array inside one.
                        var previousErrors = result.errors;

                        result.value = [result.value];
                        result.errors = this._checkItems.call(
                          this,
                          result.value,
                          wasArray,
                          state,
                          options
                        );

                        if (result.errors) {
                          // Restore previous errors and value since this didn't validate either.
                          result.errors = previousErrors;
                          result.value = result.value[0];
                        }
                      }
                    }

                    return result;
                  };

                  _class.prototype._checkItems = function _checkItems(
                    items,
                    wasArray,
                    state,
                    options
                  ) {
                    var errors = [];
                    var errored = void 0;

                    var requireds = this._inner.requireds.slice();
                    var ordereds = this._inner.ordereds.slice();
                    var inclusions = this._inner.inclusions.concat(requireds);

                    var il = items.length;
                    for (var i = 0; i < il; ++i) {
                      errored = false;
                      var item = items[i];
                      var isValid = false;
                      var key = wasArray ? i : state.key;
                      var path = wasArray
                        ? (state.path ? state.path + "." : "") + i
                        : state.path;
                      var localState = {
                        key: key,
                        path: path,
                        parent: state.parent,
                        reference: state.reference
                      };
                      var res = void 0;

                      // Sparse

                      if (!this._flags.sparse && item === undefined) {
                        errors.push(
                          this.createError(
                            "array.sparse",
                            null,
                            { key: state.key, path: localState.path, pos: i },
                            options
                          )
                        );

                        if (options.abortEarly) {
                          return errors;
                        }

                        continue;
                      }

                      // Exclusions

                      for (var j = 0; j < this._inner.exclusions.length; ++j) {
                        res = this._inner.exclusions[j]._validate(
                          item,
                          localState,
                          {}
                        ); // Not passing options to use defaults

                        if (!res.errors) {
                          errors.push(
                            this.createError(
                              wasArray
                                ? "array.excludes"
                                : "array.excludesSingle",
                              { pos: i, value: item },
                              { key: state.key, path: localState.path },
                              options
                            )
                          );
                          errored = true;

                          if (options.abortEarly) {
                            return errors;
                          }

                          break;
                        }
                      }

                      if (errored) {
                        continue;
                      }

                      // Ordered
                      if (this._inner.ordereds.length) {
                        if (ordereds.length > 0) {
                          var ordered = ordereds.shift();
                          res = ordered._validate(item, localState, options);
                          if (!res.errors) {
                            if (ordered._flags.strip) {
                              internals.fastSplice(items, i);
                              --i;
                              --il;
                            } else if (
                              !this._flags.sparse &&
                              res.value === undefined
                            ) {
                              errors.push(
                                this.createError(
                                  "array.sparse",
                                  null,
                                  {
                                    key: state.key,
                                    path: localState.path,
                                    pos: i
                                  },
                                  options
                                )
                              );

                              if (options.abortEarly) {
                                return errors;
                              }

                              continue;
                            } else {
                              items[i] = res.value;
                            }
                          } else {
                            errors.push(
                              this.createError(
                                "array.ordered",
                                { pos: i, reason: res.errors, value: item },
                                { key: state.key, path: localState.path },
                                options
                              )
                            );
                            if (options.abortEarly) {
                              return errors;
                            }
                          }
                          continue;
                        } else if (!this._inner.items.length) {
                          errors.push(
                            this.createError(
                              "array.orderedLength",
                              { pos: i, limit: this._inner.ordereds.length },
                              { key: state.key, path: localState.path },
                              options
                            )
                          );
                          if (options.abortEarly) {
                            return errors;
                          }
                          continue;
                        }
                      }

                      // Requireds

                      var requiredChecks = [];
                      var jl = requireds.length;
                      for (var _j = 0; _j < jl; ++_j) {
                        res = requiredChecks[_j] = requireds[_j]._validate(
                          item,
                          localState,
                          options
                        );
                        if (!res.errors) {
                          items[i] = res.value;
                          isValid = true;
                          internals.fastSplice(requireds, _j);
                          --_j;
                          --jl;

                          if (!this._flags.sparse && res.value === undefined) {
                            errors.push(
                              this.createError(
                                "array.sparse",
                                null,
                                {
                                  key: state.key,
                                  path: localState.path,
                                  pos: i
                                },
                                options
                              )
                            );

                            if (options.abortEarly) {
                              return errors;
                            }
                          }

                          break;
                        }
                      }

                      if (isValid) {
                        continue;
                      }

                      // Inclusions

                      var stripUnknown = options.stripUnknown
                        ? options.stripUnknown === true
                          ? true
                          : !!options.stripUnknown.arrays
                        : false;

                      jl = inclusions.length;
                      for (var _j2 = 0; _j2 < jl; ++_j2) {
                        var inclusion = inclusions[_j2];

                        // Avoid re-running requireds that already didn't match in the previous loop
                        var previousCheck = requireds.indexOf(inclusion);
                        if (previousCheck !== -1) {
                          res = requiredChecks[previousCheck];
                        } else {
                          res = inclusion._validate(item, localState, options);

                          if (!res.errors) {
                            if (inclusion._flags.strip) {
                              internals.fastSplice(items, i);
                              --i;
                              --il;
                            } else if (
                              !this._flags.sparse &&
                              res.value === undefined
                            ) {
                              errors.push(
                                this.createError(
                                  "array.sparse",
                                  null,
                                  {
                                    key: state.key,
                                    path: localState.path,
                                    pos: i
                                  },
                                  options
                                )
                              );
                              errored = true;
                            } else {
                              items[i] = res.value;
                            }
                            isValid = true;
                            break;
                          }
                        }

                        // Return the actual error if only one inclusion defined
                        if (jl === 1) {
                          if (stripUnknown) {
                            internals.fastSplice(items, i);
                            --i;
                            --il;
                            isValid = true;
                            break;
                          }

                          errors.push(
                            this.createError(
                              wasArray
                                ? "array.includesOne"
                                : "array.includesOneSingle",
                              { pos: i, reason: res.errors, value: item },
                              { key: state.key, path: localState.path },
                              options
                            )
                          );
                          errored = true;

                          if (options.abortEarly) {
                            return errors;
                          }

                          break;
                        }
                      }

                      if (errored) {
                        continue;
                      }

                      if (this._inner.inclusions.length && !isValid) {
                        if (stripUnknown) {
                          internals.fastSplice(items, i);
                          --i;
                          --il;
                          continue;
                        }

                        errors.push(
                          this.createError(
                            wasArray
                              ? "array.includes"
                              : "array.includesSingle",
                            { pos: i, value: item },
                            { key: state.key, path: localState.path },
                            options
                          )
                        );

                        if (options.abortEarly) {
                          return errors;
                        }
                      }
                    }

                    if (requireds.length) {
                      this._fillMissedErrors.call(
                        this,
                        errors,
                        requireds,
                        state,
                        options
                      );
                    }

                    if (ordereds.length) {
                      this._fillOrderedErrors.call(
                        this,
                        errors,
                        ordereds,
                        state,
                        options
                      );
                    }

                    return errors.length ? errors : null;
                  };

                  _class.prototype.describe = function describe() {
                    var description = Any.prototype.describe.call(this);

                    if (this._inner.ordereds.length) {
                      description.orderedItems = [];

                      for (var i = 0; i < this._inner.ordereds.length; ++i) {
                        description.orderedItems.push(
                          this._inner.ordereds[i].describe()
                        );
                      }
                    }

                    if (this._inner.items.length) {
                      description.items = [];

                      for (var _i = 0; _i < this._inner.items.length; ++_i) {
                        description.items.push(
                          this._inner.items[_i].describe()
                        );
                      }
                    }

                    return description;
                  };

                  _class.prototype.items = function items() {
                    var obj = this.clone();

                    Hoek.flatten(
                      Array.prototype.slice.call(arguments)
                    ).forEach(function(type, index) {
                      try {
                        type = Cast.schema(type);
                      } catch (castErr) {
                        if (castErr.hasOwnProperty("path")) {
                          castErr.path = index + "." + castErr.path;
                        } else {
                          castErr.path = index;
                        }
                        castErr.message =
                          castErr.message + "(" + castErr.path + ")";
                        throw castErr;
                      }

                      obj._inner.items.push(type);

                      if (type._flags.presence === "required") {
                        obj._inner.requireds.push(type);
                      } else if (type._flags.presence === "forbidden") {
                        obj._inner.exclusions.push(type.optional());
                      } else {
                        obj._inner.inclusions.push(type);
                      }
                    });

                    return obj;
                  };

                  _class.prototype.ordered = function ordered() {
                    var obj = this.clone();

                    Hoek.flatten(
                      Array.prototype.slice.call(arguments)
                    ).forEach(function(type, index) {
                      try {
                        type = Cast.schema(type);
                      } catch (castErr) {
                        if (castErr.hasOwnProperty("path")) {
                          castErr.path = index + "." + castErr.path;
                        } else {
                          castErr.path = index;
                        }
                        castErr.message =
                          castErr.message + "(" + castErr.path + ")";
                        throw castErr;
                      }
                      obj._inner.ordereds.push(type);
                    });

                    return obj;
                  };

                  _class.prototype.min = function min(limit) {
                    var isRef = Ref.isRef(limit);

                    Hoek.assert(
                      (Number.isSafeInteger(limit) && limit >= 0) || isRef,
                      "limit must be a positive integer or reference"
                    );

                    return this._test("min", limit, function(
                      value,
                      state,
                      options
                    ) {
                      var compareTo = void 0;
                      if (isRef) {
                        compareTo = limit(
                          state.reference || state.parent,
                          options
                        );

                        if (
                          !(Number.isSafeInteger(compareTo) && compareTo >= 0)
                        ) {
                          return this.createError(
                            "array.ref",
                            { ref: limit.key },
                            state,
                            options
                          );
                        }
                      } else {
                        compareTo = limit;
                      }

                      if (value.length >= compareTo) {
                        return value;
                      }

                      return this.createError(
                        "array.min",
                        { limit: limit, value: value },
                        state,
                        options
                      );
                    });
                  };

                  _class.prototype.max = function max(limit) {
                    var isRef = Ref.isRef(limit);

                    Hoek.assert(
                      (Number.isSafeInteger(limit) && limit >= 0) || isRef,
                      "limit must be a positive integer or reference"
                    );

                    return this._test("max", limit, function(
                      value,
                      state,
                      options
                    ) {
                      var compareTo = void 0;
                      if (isRef) {
                        compareTo = limit(
                          state.reference || state.parent,
                          options
                        );

                        if (
                          !(Number.isSafeInteger(compareTo) && compareTo >= 0)
                        ) {
                          return this.createError(
                            "array.ref",
                            { ref: limit.key },
                            state,
                            options
                          );
                        }
                      } else {
                        compareTo = limit;
                      }

                      if (value.length <= compareTo) {
                        return value;
                      }

                      return this.createError(
                        "array.max",
                        { limit: limit, value: value },
                        state,
                        options
                      );
                    });
                  };

                  _class.prototype.length = function length(limit) {
                    var isRef = Ref.isRef(limit);

                    Hoek.assert(
                      (Number.isSafeInteger(limit) && limit >= 0) || isRef,
                      "limit must be a positive integer or reference"
                    );

                    return this._test("length", limit, function(
                      value,
                      state,
                      options
                    ) {
                      var compareTo = void 0;
                      if (isRef) {
                        compareTo = limit(
                          state.reference || state.parent,
                          options
                        );

                        if (
                          !(Number.isSafeInteger(compareTo) && compareTo >= 0)
                        ) {
                          return this.createError(
                            "array.ref",
                            { ref: limit.key },
                            state,
                            options
                          );
                        }
                      } else {
                        compareTo = limit;
                      }

                      if (value.length === compareTo) {
                        return value;
                      }

                      return this.createError(
                        "array.length",
                        { limit: limit, value: value },
                        state,
                        options
                      );
                    });
                  };

                  _class.prototype.unique = function unique(comparator) {
                    Hoek.assert(
                      comparator === undefined ||
                        typeof comparator === "function" ||
                        typeof comparator === "string",
                      "comparator must be a function or a string"
                    );

                    var settings = {};

                    if (typeof comparator === "string") {
                      settings.path = comparator;
                    } else if (typeof comparator === "function") {
                      settings.comparator = comparator;
                    }

                    return this._test("unique", settings, function(
                      value,
                      state,
                      options
                    ) {
                      var found = {
                        string: {},
                        number: {},
                        undefined: {},
                        boolean: {},
                        object: new Map(),
                        function: new Map(),
                        custom: new Map()
                      };

                      var compare = settings.comparator || Hoek.deepEqual;

                      for (var i = 0; i < value.length; ++i) {
                        var item = settings.path
                          ? Hoek.reach(value[i], settings.path)
                          : value[i];
                        var records = settings.comparator
                          ? found.custom
                          : found[
                              typeof item === "undefined"
                                ? "undefined"
                                : _typeof(item)
                            ];

                        // All available types are supported, so it's not possible to reach 100% coverage without ignoring this line.
                        // I still want to keep the test for future js versions with new types (eg. Symbol).
                        if (
                          /* $lab:coverage:off$ */ records /* $lab:coverage:on$ */
                        ) {
                          if (records instanceof Map) {
                            var entries = records.entries();
                            var current = void 0;
                            while (!(current = entries.next()).done) {
                              if (compare(current.value[0], item)) {
                                var localState = {
                                  key: state.key,
                                  path:
                                    (state.path ? state.path + "." : "") + i,
                                  parent: state.parent,
                                  reference: state.reference
                                };

                                var context = {
                                  pos: i,
                                  value: value[i],
                                  dupePos: current.value[1],
                                  dupeValue: value[current.value[1]]
                                };

                                if (settings.path) {
                                  context.path = settings.path;
                                }

                                return this.createError(
                                  "array.unique",
                                  context,
                                  localState,
                                  options
                                );
                              }
                            }

                            records.set(item, i);
                          } else {
                            if (records[item] !== undefined) {
                              var _localState = {
                                key: state.key,
                                path: (state.path ? state.path + "." : "") + i,
                                parent: state.parent,
                                reference: state.reference
                              };

                              var _context = {
                                pos: i,
                                value: value[i],
                                dupePos: records[item],
                                dupeValue: value[records[item]]
                              };

                              if (settings.path) {
                                _context.path = settings.path;
                              }

                              return this.createError(
                                "array.unique",
                                _context,
                                _localState,
                                options
                              );
                            }

                            records[item] = i;
                          }
                        }
                      }

                      return value;
                    });
                  };

                  _class.prototype.sparse = function sparse(enabled) {
                    var value = enabled === undefined ? true : !!enabled;

                    if (this._flags.sparse === value) {
                      return this;
                    }

                    var obj = this.clone();
                    obj._flags.sparse = value;
                    return obj;
                  };

                  _class.prototype.single = function single(enabled) {
                    var value = enabled === undefined ? true : !!enabled;

                    if (this._flags.single === value) {
                      return this;
                    }

                    var obj = this.clone();
                    obj._flags.single = value;
                    return obj;
                  };

                  _class.prototype._fillMissedErrors = function _fillMissedErrors(
                    errors,
                    requireds,
                    state,
                    options
                  ) {
                    var knownMisses = [];
                    var unknownMisses = 0;
                    for (var i = 0; i < requireds.length; ++i) {
                      var label = requireds[i]._getLabel();
                      if (label) {
                        knownMisses.push(label);
                      } else {
                        ++unknownMisses;
                      }
                    }

                    if (knownMisses.length) {
                      if (unknownMisses) {
                        errors.push(
                          this.createError(
                            "array.includesRequiredBoth",
                            {
                              knownMisses: knownMisses,
                              unknownMisses: unknownMisses
                            },
                            { key: state.key, path: state.path },
                            options
                          )
                        );
                      } else {
                        errors.push(
                          this.createError(
                            "array.includesRequiredKnowns",
                            { knownMisses: knownMisses },
                            { key: state.key, path: state.path },
                            options
                          )
                        );
                      }
                    } else {
                      errors.push(
                        this.createError(
                          "array.includesRequiredUnknowns",
                          { unknownMisses: unknownMisses },
                          { key: state.key, path: state.path },
                          options
                        )
                      );
                    }
                  };

                  _class.prototype._fillOrderedErrors = function _fillOrderedErrors(
                    errors,
                    ordereds,
                    state,
                    options
                  ) {
                    var requiredOrdereds = [];

                    for (var i = 0; i < ordereds.length; ++i) {
                      var presence = Hoek.reach(ordereds[i], "_flags.presence");
                      if (presence === "required") {
                        requiredOrdereds.push(ordereds[i]);
                      }
                    }

                    if (requiredOrdereds.length) {
                      this._fillMissedErrors.call(
                        this,
                        errors,
                        requiredOrdereds,
                        state,
                        options
                      );
                    }
                  };

                  return _class;
                })(Any);

                internals.safeParse = function(value, result) {
                  try {
                    var converted = JSON.parse(value);
                    if (Array.isArray(converted)) {
                      result.value = converted;
                    }
                  } catch (e) {}
                };

                module.exports = new internals.Array();

                /***/
              },
              /* 31 */
              /***/ function(module, exports, __webpack_require__) {
                /* WEBPACK VAR INJECTION */ (function(Buffer) {
                  "use strict";

                  // Load modules

                  function _defaults(obj, defaults) {
                    var keys = Object.getOwnPropertyNames(defaults);
                    for (var i = 0; i < keys.length; i++) {
                      var key = keys[i];
                      var value = Object.getOwnPropertyDescriptor(
                        defaults,
                        key
                      );
                      if (
                        value &&
                        value.configurable &&
                        obj[key] === undefined
                      ) {
                        Object.defineProperty(obj, key, value);
                      }
                    }
                    return obj;
                  }

                  function _classCallCheck(instance, Constructor) {
                    if (!(instance instanceof Constructor)) {
                      throw new TypeError("Cannot call a class as a function");
                    }
                  }

                  function _possibleConstructorReturn(self, call) {
                    if (!self) {
                      throw new ReferenceError(
                        "this hasn't been initialised - super() hasn't been called"
                      );
                    }
                    return call &&
                    (typeof call === "object" || typeof call === "function")
                      ? call
                      : self;
                  }

                  function _inherits(subClass, superClass) {
                    if (
                      typeof superClass !== "function" &&
                      superClass !== null
                    ) {
                      throw new TypeError(
                        "Super expression must either be null or a function, not " +
                          typeof superClass
                      );
                    }
                    subClass.prototype = Object.create(
                      superClass && superClass.prototype,
                      {
                        constructor: {
                          value: subClass,
                          enumerable: false,
                          writable: true,
                          configurable: true
                        }
                      }
                    );
                    if (superClass)
                      Object.setPrototypeOf
                        ? Object.setPrototypeOf(subClass, superClass)
                        : _defaults(subClass, superClass);
                  }

                  var Any = __webpack_require__(11);
                  var Hoek = __webpack_require__(2);

                  // Declare internals

                  var internals = {};

                  internals.Binary = (function(_Any) {
                    _inherits(_class, _Any);

                    function _class() {
                      _classCallCheck(this, _class);

                      var _this = _possibleConstructorReturn(
                        this,
                        _Any.call(this)
                      );

                      _this._type = "binary";
                      return _this;
                    }

                    _class.prototype._base = function _base(
                      value,
                      state,
                      options
                    ) {
                      var result = {
                        value: value
                      };

                      if (typeof value === "string" && options.convert) {
                        try {
                          result.value = new Buffer(
                            value,
                            this._flags.encoding
                          );
                        } catch (e) {}
                      }

                      result.errors = Buffer.isBuffer(result.value)
                        ? null
                        : this.createError("binary.base", null, state, options);
                      return result;
                    };

                    _class.prototype.encoding = function encoding(_encoding) {
                      Hoek.assert(
                        Buffer.isEncoding(_encoding),
                        "Invalid encoding:",
                        _encoding
                      );

                      if (this._flags.encoding === _encoding) {
                        return this;
                      }

                      var obj = this.clone();
                      obj._flags.encoding = _encoding;
                      return obj;
                    };

                    _class.prototype.min = function min(limit) {
                      Hoek.assert(
                        Number.isSafeInteger(limit) && limit >= 0,
                        "limit must be a positive integer"
                      );

                      return this._test("min", limit, function(
                        value,
                        state,
                        options
                      ) {
                        if (value.length >= limit) {
                          return value;
                        }

                        return this.createError(
                          "binary.min",
                          { limit: limit, value: value },
                          state,
                          options
                        );
                      });
                    };

                    _class.prototype.max = function max(limit) {
                      Hoek.assert(
                        Number.isSafeInteger(limit) && limit >= 0,
                        "limit must be a positive integer"
                      );

                      return this._test("max", limit, function(
                        value,
                        state,
                        options
                      ) {
                        if (value.length <= limit) {
                          return value;
                        }

                        return this.createError(
                          "binary.max",
                          { limit: limit, value: value },
                          state,
                          options
                        );
                      });
                    };

                    _class.prototype.length = function length(limit) {
                      Hoek.assert(
                        Number.isSafeInteger(limit) && limit >= 0,
                        "limit must be a positive integer"
                      );

                      return this._test("length", limit, function(
                        value,
                        state,
                        options
                      ) {
                        if (value.length === limit) {
                          return value;
                        }

                        return this.createError(
                          "binary.length",
                          { limit: limit, value: value },
                          state,
                          options
                        );
                      });
                    };

                    return _class;
                  })(Any);

                  module.exports = new internals.Binary();
                  /* WEBPACK VAR INJECTION */
                }.call(exports, __webpack_require__(3).Buffer));

                /***/
              },
              /* 32 */
              /***/ function(module, exports) {
                module.exports = {
                  _args: [
                    [
                      {
                        raw: "joi@10.6.0",
                        scope: null,
                        escapedName: "joi",
                        name: "joi",
                        rawSpec: "10.6.0",
                        spec: "10.6.0",
                        type: "version"
                      },
                      "/Users/jeff/projects/joi-browser"
                    ]
                  ],
                  _from: "joi@10.6.0",
                  _id: "joi@10.6.0",
                  _inCache: true,
                  _location: "/joi",
                  _nodeVersion: "6.11.0",
                  _npmOperationalInternal: {
                    host: "s3://npm-registry-packages",
                    tmp: "tmp/joi-10.6.0.tgz_1497548465053_0.7665833418723196"
                  },
                  _npmUser: {
                    name: "marsup",
                    email: "nicolas@morel.io"
                  },
                  _npmVersion: "5.0.3",
                  _phantomChildren: {},
                  _requested: {
                    raw: "joi@10.6.0",
                    scope: null,
                    escapedName: "joi",
                    name: "joi",
                    rawSpec: "10.6.0",
                    spec: "10.6.0",
                    type: "version"
                  },
                  _requiredBy: ["#DEV:/"],
                  _resolved: "https://registry.npmjs.org/joi/-/joi-10.6.0.tgz",
                  _shasum: "52587f02d52b8b75cdb0c74f0b164a191a0e1fc2",
                  _shrinkwrap: null,
                  _spec: "joi@10.6.0",
                  _where: "/Users/jeff/projects/joi-browser",
                  bugs: {
                    url: "https://github.com/hapijs/joi/issues"
                  },
                  dependencies: {
                    hoek: "4.x.x",
                    isemail: "2.x.x",
                    items: "2.x.x",
                    topo: "2.x.x"
                  },
                  description: "Object schema validation",
                  devDependencies: {
                    code: "4.x.x",
                    hapitoc: "1.x.x",
                    lab: "13.x.x"
                  },
                  directories: {},
                  dist: {
                    integrity:
                      "sha512-hBF3LcqyAid+9X/pwg+eXjD2QBZI5eXnBFJYaAkH4SK3mp9QSRiiQnDYlmlz5pccMvnLcJRS4whhDOTCkmsAdQ==",
                    shasum: "52587f02d52b8b75cdb0c74f0b164a191a0e1fc2",
                    tarball: "https://registry.npmjs.org/joi/-/joi-10.6.0.tgz"
                  },
                  engines: {
                    node: ">=4.0.0"
                  },
                  gitHead: "069bb6c04063cba202544dacf9da3bbe21fa3074",
                  homepage: "https://github.com/hapijs/joi",
                  keywords: ["hapi", "schema", "validation"],
                  license: "BSD-3-Clause",
                  main: "lib/index.js",
                  maintainers: [
                    {
                      name: "hueniverse",
                      email: "eran@hammer.io"
                    },
                    {
                      name: "marsup",
                      email: "nicolas@morel.io"
                    },
                    {
                      name: "nlf",
                      email: "quitlahok@gmail.com"
                    },
                    {
                      name: "wyatt",
                      email: "wpreul@gmail.com"
                    }
                  ],
                  name: "joi",
                  optionalDependencies: {},
                  readme: "ERROR: No README data found!",
                  repository: {
                    type: "git",
                    url: "git://github.com/hapijs/joi.git"
                  },
                  scripts: {
                    test: "lab -t 100 -a code -L",
                    "test-cov-html": "lab -r html -o coverage.html -a code",
                    "test-debug": "lab -a code",
                    toc: "hapitoc",
                    version: "npm run toc && git add API.md README.md"
                  },
                  version: "10.6.0"
                };

                /***/
              }
              /******/
            ]
          );
        });

        /***/
      },
      /* 226 */
      /***/ function(module, exports, __webpack_require__) {
        var ms = __webpack_require__(49);

        module.exports = function(time, iat) {
          var timestamp = iat || Math.floor(Date.now() / 1000);

          if (typeof time === "string") {
            var milliseconds = ms(time);
            if (typeof milliseconds === "undefined") {
              return;
            }
            return Math.floor(timestamp + milliseconds / 1000);
          } else if (typeof time === "number") {
            return timestamp + time;
          } else {
            return;
          }
        };

        /***/
      },
      /* 227 */
      /***/ function(module, exports) {
        /**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

        /** Used as the `TypeError` message for "Functions" methods. */
        var FUNC_ERROR_TEXT = "Expected a function";

        /** Used as references for various `Number` constants. */
        var INFINITY = 1 / 0,
          MAX_INTEGER = 1.7976931348623157e308,
          NAN = 0 / 0;

        /** `Object#toString` result references. */
        var symbolTag = "[object Symbol]";

        /** Used to match leading and trailing whitespace. */
        var reTrim = /^\s+|\s+$/g;

        /** Used to detect bad signed hexadecimal string values. */
        var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

        /** Used to detect binary string values. */
        var reIsBinary = /^0b[01]+$/i;

        /** Used to detect octal string values. */
        var reIsOctal = /^0o[0-7]+$/i;

        /** Built-in method references without a dependency on `root`. */
        var freeParseInt = parseInt;

        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
        var objectToString = objectProto.toString;

        /**
 * Creates a function that invokes `func`, with the `this` binding and arguments
 * of the created function, while it's called less than `n` times. Subsequent
 * calls to the created function return the result of the last `func` invocation.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Function
 * @param {number} n The number of calls at which `func` is no longer invoked.
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new restricted function.
 * @example
 *
 * jQuery(element).on('click', _.before(5, addContactToList));
 * // => Allows adding up to 4 contacts to the list.
 */
        function before(n, func) {
          var result;
          if (typeof func != "function") {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          n = toInteger(n);
          return function() {
            if (--n > 0) {
              result = func.apply(this, arguments);
            }
            if (n <= 1) {
              func = undefined;
            }
            return result;
          };
        }

        /**
 * Creates a function that is restricted to invoking `func` once. Repeat calls
 * to the function return the value of the first invocation. The `func` is
 * invoked with the `this` binding and arguments of the created function.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new restricted function.
 * @example
 *
 * var initialize = _.once(createApplication);
 * initialize();
 * initialize();
 * // => `createApplication` is invoked once
 */
        function once(func) {
          return before(2, func);
        }

        /**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
        function isObject(value) {
          var type = typeof value;
          return !!value && (type == "object" || type == "function");
        }

        /**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
        function isObjectLike(value) {
          return !!value && typeof value == "object";
        }

        /**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
        function isSymbol(value) {
          return (
            typeof value == "symbol" ||
            (isObjectLike(value) && objectToString.call(value) == symbolTag)
          );
        }

        /**
 * Converts `value` to a finite number.
 *
 * @static
 * @memberOf _
 * @since 4.12.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted number.
 * @example
 *
 * _.toFinite(3.2);
 * // => 3.2
 *
 * _.toFinite(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toFinite(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toFinite('3.2');
 * // => 3.2
 */
        function toFinite(value) {
          if (!value) {
            return value === 0 ? value : 0;
          }
          value = toNumber(value);
          if (value === INFINITY || value === -INFINITY) {
            var sign = value < 0 ? -1 : 1;
            return sign * MAX_INTEGER;
          }
          return value === value ? value : 0;
        }

        /**
 * Converts `value` to an integer.
 *
 * **Note:** This method is loosely based on
 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted integer.
 * @example
 *
 * _.toInteger(3.2);
 * // => 3
 *
 * _.toInteger(Number.MIN_VALUE);
 * // => 0
 *
 * _.toInteger(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toInteger('3.2');
 * // => 3
 */
        function toInteger(value) {
          var result = toFinite(value),
            remainder = result % 1;

          return result === result
            ? remainder ? result - remainder : result
            : 0;
        }

        /**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
        function toNumber(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          if (isObject(value)) {
            var other =
              typeof value.valueOf == "function" ? value.valueOf() : value;
            value = isObject(other) ? other + "" : other;
          }
          if (typeof value != "string") {
            return value === 0 ? value : +value;
          }
          value = value.replace(reTrim, "");
          var isBinary = reIsBinary.test(value);
          return isBinary || reIsOctal.test(value)
            ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
            : reIsBadHex.test(value) ? NAN : +value;
        }

        module.exports = once;

        /***/
      },
      /* 228 */
      /***/ function(module, __webpack_exports__, __webpack_require__) {
        "use strict";
        /* harmony export (immutable) */ __webpack_exports__["c"] = splitca;
        /* harmony export (immutable) */ __webpack_exports__[
          "b"
        ] = pemToDerArray;
        /* harmony export (immutable) */ __webpack_exports__[
          "a"
        ] = derArrayToPem;
        /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_node_forge__ = __webpack_require__(
          62
        );
        /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_node_forge___default = __webpack_require__.n(
          __WEBPACK_IMPORTED_MODULE_0_node_forge__
        );

        /**
 * Split a PEM file containing multiple certs into an array of PEM certs.
 *
 * Adapted from https://github.com/bushong1/split-ca
 * @param  {String} chain
 * @return {String}
 */
        function splitca(chain) {
          const split = "\n";

          const ca = [];
          if (
            chain.indexOf("-END CERTIFICATE-") < 0 ||
            chain.indexOf("-BEGIN CERTIFICATE-") < 0
          ) {
            throw Error(
              "File does not contain 'BEGIN CERTIFICATE' or 'END CERTIFICATE'"
            );
          }
          chain = chain.split(split);
          let cert = [];
          let _i;
          let _len;
          for (_i = 0, _len = chain.length; _i < _len; _i++) {
            const line = chain[_i];
            if (!(line.length !== 0)) {
              continue;
            }
            cert.push(line);
            if (line.match(/-END CERTIFICATE-/)) {
              ca.push(cert.join(split));
              cert = [];
            }
          }
          return ca;
        }

        function pemToDerArray(pem) {
          return splitca(pem).map(pem => {
            const asn1Cert = __WEBPACK_IMPORTED_MODULE_0_node_forge___default.a.pki.certificateFromPem(
              pem
            );
            const asn1Obj = __WEBPACK_IMPORTED_MODULE_0_node_forge___default.a.pki.certificateToAsn1(
              asn1Cert
            );
            const derKey = __WEBPACK_IMPORTED_MODULE_0_node_forge___default.a.asn1
              .toDer(asn1Obj)
              .getBytes();
            return __WEBPACK_IMPORTED_MODULE_0_node_forge___default.a.util.encode64(
              derKey
            );
          });
        }

        function derArrayToPem(derArray) {
          return derArray
            .map(der => {
              const derKey = __WEBPACK_IMPORTED_MODULE_0_node_forge___default.a.util.decode64(
                der
              );
              const asnObj = __WEBPACK_IMPORTED_MODULE_0_node_forge___default.a.asn1.fromDer(
                derKey
              );
              const asn1Cert = __WEBPACK_IMPORTED_MODULE_0_node_forge___default.a.pki.certificateFromAsn1(
                asnObj
              );
              // node-forge returns things with \r\n and that breaks our tests, so...
              const pem = __WEBPACK_IMPORTED_MODULE_0_node_forge___default.a.pki.certificateToPem(
                asn1Cert
              );
              return pem.split("\r\n").join("\n");
            })
            .join("");
        }

        /***/
      },
      /* 229 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";
        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.

        var punycode = __webpack_require__(230);
        var util = __webpack_require__(231);

        exports.parse = urlParse;
        exports.resolve = urlResolve;
        exports.resolveObject = urlResolveObject;
        exports.format = urlFormat;

        exports.Url = Url;

        function Url() {
          this.protocol = null;
          this.slashes = null;
          this.auth = null;
          this.host = null;
          this.port = null;
          this.hostname = null;
          this.hash = null;
          this.search = null;
          this.query = null;
          this.pathname = null;
          this.path = null;
          this.href = null;
        }

        // Reference: RFC 3986, RFC 1808, RFC 2396

        // define these here so at least they only have to be
        // compiled once on the first module load.
        var protocolPattern = /^([a-z0-9.+-]+:)/i,
          portPattern = /:[0-9]*$/,
          // Special case for a simple path URL
          simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,
          // RFC 2396: characters reserved for delimiting URLs.
          // We actually just auto-escape these.
          delims = ["<", ">", '"', "`", " ", "\r", "\n", "\t"],
          // RFC 2396: characters not allowed for various reasons.
          unwise = ["{", "}", "|", "\\", "^", "`"].concat(delims),
          // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
          autoEscape = ["'"].concat(unwise),
          // Characters that are never ever allowed in a hostname.
          // Note that any invalid chars are also handled, but these
          // are the ones that are *expected* to be seen, so we fast-path
          // them.
          nonHostChars = ["%", "/", "?", ";", "#"].concat(autoEscape),
          hostEndingChars = ["/", "?", "#"],
          hostnameMaxLen = 255,
          hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
          hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
          // protocols that can allow "unsafe" and "unwise" chars.
          unsafeProtocol = {
            javascript: true,
            "javascript:": true
          },
          // protocols that never have a hostname.
          hostlessProtocol = {
            javascript: true,
            "javascript:": true
          },
          // protocols that always contain a // bit.
          slashedProtocol = {
            http: true,
            https: true,
            ftp: true,
            gopher: true,
            file: true,
            "http:": true,
            "https:": true,
            "ftp:": true,
            "gopher:": true,
            "file:": true
          },
          querystring = __webpack_require__(232);

        function urlParse(url, parseQueryString, slashesDenoteHost) {
          if (url && util.isObject(url) && url instanceof Url) return url;

          var u = new Url();
          u.parse(url, parseQueryString, slashesDenoteHost);
          return u;
        }

        Url.prototype.parse = function(
          url,
          parseQueryString,
          slashesDenoteHost
        ) {
          if (!util.isString(url)) {
            throw new TypeError(
              "Parameter 'url' must be a string, not " + typeof url
            );
          }

          // Copy chrome, IE, opera backslash-handling behavior.
          // Back slashes before the query string get converted to forward slashes
          // See: https://code.google.com/p/chromium/issues/detail?id=25916
          var queryIndex = url.indexOf("?"),
            splitter =
              queryIndex !== -1 && queryIndex < url.indexOf("#") ? "?" : "#",
            uSplit = url.split(splitter),
            slashRegex = /\\/g;
          uSplit[0] = uSplit[0].replace(slashRegex, "/");
          url = uSplit.join(splitter);

          var rest = url;

          // trim before proceeding.
          // This is to support parse stuff like "  http://foo.com  \n"
          rest = rest.trim();

          if (!slashesDenoteHost && url.split("#").length === 1) {
            // Try fast path regexp
            var simplePath = simplePathPattern.exec(rest);
            if (simplePath) {
              this.path = rest;
              this.href = rest;
              this.pathname = simplePath[1];
              if (simplePath[2]) {
                this.search = simplePath[2];
                if (parseQueryString) {
                  this.query = querystring.parse(this.search.substr(1));
                } else {
                  this.query = this.search.substr(1);
                }
              } else if (parseQueryString) {
                this.search = "";
                this.query = {};
              }
              return this;
            }
          }

          var proto = protocolPattern.exec(rest);
          if (proto) {
            proto = proto[0];
            var lowerProto = proto.toLowerCase();
            this.protocol = lowerProto;
            rest = rest.substr(proto.length);
          }

          // figure out if it's got a host
          // user@server is *always* interpreted as a hostname, and url
          // resolution will treat //foo/bar as host=foo,path=bar because that's
          // how the browser resolves relative URLs.
          if (
            slashesDenoteHost ||
            proto ||
            rest.match(/^\/\/[^@\/]+@[^@\/]+/)
          ) {
            var slashes = rest.substr(0, 2) === "//";
            if (slashes && !(proto && hostlessProtocol[proto])) {
              rest = rest.substr(2);
              this.slashes = true;
            }
          }

          if (
            !hostlessProtocol[proto] &&
            (slashes || (proto && !slashedProtocol[proto]))
          ) {
            // there's a hostname.
            // the first instance of /, ?, ;, or # ends the host.
            //
            // If there is an @ in the hostname, then non-host chars *are* allowed
            // to the left of the last @ sign, unless some host-ending character
            // comes *before* the @-sign.
            // URLs are obnoxious.
            //
            // ex:
            // http://a@b@c/ => user:a@b host:c
            // http://a@b?@c => user:a host:c path:/?@c

            // v0.12 TODO(isaacs): This is not quite how Chrome does things.
            // Review our test case against browsers more comprehensively.

            // find the first instance of any hostEndingChars
            var hostEnd = -1;
            for (var i = 0; i < hostEndingChars.length; i++) {
              var hec = rest.indexOf(hostEndingChars[i]);
              if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
                hostEnd = hec;
            }

            // at this point, either we have an explicit point where the
            // auth portion cannot go past, or the last @ char is the decider.
            var auth, atSign;
            if (hostEnd === -1) {
              // atSign can be anywhere.
              atSign = rest.lastIndexOf("@");
            } else {
              // atSign must be in auth portion.
              // http://a@b/c@d => host:b auth:a path:/c@d
              atSign = rest.lastIndexOf("@", hostEnd);
            }

            // Now we have a portion which is definitely the auth.
            // Pull that off.
            if (atSign !== -1) {
              auth = rest.slice(0, atSign);
              rest = rest.slice(atSign + 1);
              this.auth = decodeURIComponent(auth);
            }

            // the host is the remaining to the left of the first non-host char
            hostEnd = -1;
            for (var i = 0; i < nonHostChars.length; i++) {
              var hec = rest.indexOf(nonHostChars[i]);
              if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
                hostEnd = hec;
            }
            // if we still have not hit it, then the entire thing is a host.
            if (hostEnd === -1) hostEnd = rest.length;

            this.host = rest.slice(0, hostEnd);
            rest = rest.slice(hostEnd);

            // pull out port.
            this.parseHost();

            // we've indicated that there is a hostname,
            // so even if it's empty, it has to be present.
            this.hostname = this.hostname || "";

            // if hostname begins with [ and ends with ]
            // assume that it's an IPv6 address.
            var ipv6Hostname =
              this.hostname[0] === "[" &&
              this.hostname[this.hostname.length - 1] === "]";

            // validate a little.
            if (!ipv6Hostname) {
              var hostparts = this.hostname.split(/\./);
              for (var i = 0, l = hostparts.length; i < l; i++) {
                var part = hostparts[i];
                if (!part) continue;
                if (!part.match(hostnamePartPattern)) {
                  var newpart = "";
                  for (var j = 0, k = part.length; j < k; j++) {
                    if (part.charCodeAt(j) > 127) {
                      // we replace non-ASCII char with a temporary placeholder
                      // we need this to make sure size of hostname is not
                      // broken by replacing non-ASCII by nothing
                      newpart += "x";
                    } else {
                      newpart += part[j];
                    }
                  }
                  // we test again with ASCII char only
                  if (!newpart.match(hostnamePartPattern)) {
                    var validParts = hostparts.slice(0, i);
                    var notHost = hostparts.slice(i + 1);
                    var bit = part.match(hostnamePartStart);
                    if (bit) {
                      validParts.push(bit[1]);
                      notHost.unshift(bit[2]);
                    }
                    if (notHost.length) {
                      rest = "/" + notHost.join(".") + rest;
                    }
                    this.hostname = validParts.join(".");
                    break;
                  }
                }
              }
            }

            if (this.hostname.length > hostnameMaxLen) {
              this.hostname = "";
            } else {
              // hostnames are always lower case.
              this.hostname = this.hostname.toLowerCase();
            }

            if (!ipv6Hostname) {
              // IDNA Support: Returns a punycoded representation of "domain".
              // It only converts parts of the domain name that
              // have non-ASCII characters, i.e. it doesn't matter if
              // you call it with a domain that already is ASCII-only.
              this.hostname = punycode.toASCII(this.hostname);
            }

            var p = this.port ? ":" + this.port : "";
            var h = this.hostname || "";
            this.host = h + p;
            this.href += this.host;

            // strip [ and ] from the hostname
            // the host field still retains them, though
            if (ipv6Hostname) {
              this.hostname = this.hostname.substr(1, this.hostname.length - 2);
              if (rest[0] !== "/") {
                rest = "/" + rest;
              }
            }
          }

          // now rest is set to the post-host stuff.
          // chop off any delim chars.
          if (!unsafeProtocol[lowerProto]) {
            // First, make 100% sure that any "autoEscape" chars get
            // escaped, even if encodeURIComponent doesn't think they
            // need to be.
            for (var i = 0, l = autoEscape.length; i < l; i++) {
              var ae = autoEscape[i];
              if (rest.indexOf(ae) === -1) continue;
              var esc = encodeURIComponent(ae);
              if (esc === ae) {
                esc = escape(ae);
              }
              rest = rest.split(ae).join(esc);
            }
          }

          // chop off from the tail first.
          var hash = rest.indexOf("#");
          if (hash !== -1) {
            // got a fragment string.
            this.hash = rest.substr(hash);
            rest = rest.slice(0, hash);
          }
          var qm = rest.indexOf("?");
          if (qm !== -1) {
            this.search = rest.substr(qm);
            this.query = rest.substr(qm + 1);
            if (parseQueryString) {
              this.query = querystring.parse(this.query);
            }
            rest = rest.slice(0, qm);
          } else if (parseQueryString) {
            // no query string, but parseQueryString still requested
            this.search = "";
            this.query = {};
          }
          if (rest) this.pathname = rest;
          if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {
            this.pathname = "/";
          }

          //to support http.request
          if (this.pathname || this.search) {
            var p = this.pathname || "";
            var s = this.search || "";
            this.path = p + s;
          }

          // finally, reconstruct the href based on what has been validated.
          this.href = this.format();
          return this;
        };

        // format a parsed object into a url string
        function urlFormat(obj) {
          // ensure it's an object, and not a string url.
          // If it's an obj, this is a no-op.
          // this way, you can call url_format() on strings
          // to clean up potentially wonky urls.
          if (util.isString(obj)) obj = urlParse(obj);
          if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
          return obj.format();
        }

        Url.prototype.format = function() {
          var auth = this.auth || "";
          if (auth) {
            auth = encodeURIComponent(auth);
            auth = auth.replace(/%3A/i, ":");
            auth += "@";
          }

          var protocol = this.protocol || "",
            pathname = this.pathname || "",
            hash = this.hash || "",
            host = false,
            query = "";

          if (this.host) {
            host = auth + this.host;
          } else if (this.hostname) {
            host =
              auth +
              (this.hostname.indexOf(":") === -1
                ? this.hostname
                : "[" + this.hostname + "]");
            if (this.port) {
              host += ":" + this.port;
            }
          }

          if (
            this.query &&
            util.isObject(this.query) &&
            Object.keys(this.query).length
          ) {
            query = querystring.stringify(this.query);
          }

          var search = this.search || (query && "?" + query) || "";

          if (protocol && protocol.substr(-1) !== ":") protocol += ":";

          // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
          // unless they had them to begin with.
          if (
            this.slashes ||
            ((!protocol || slashedProtocol[protocol]) && host !== false)
          ) {
            host = "//" + (host || "");
            if (pathname && pathname.charAt(0) !== "/")
              pathname = "/" + pathname;
          } else if (!host) {
            host = "";
          }

          if (hash && hash.charAt(0) !== "#") hash = "#" + hash;
          if (search && search.charAt(0) !== "?") search = "?" + search;

          pathname = pathname.replace(/[?#]/g, function(match) {
            return encodeURIComponent(match);
          });
          search = search.replace("#", "%23");

          return protocol + host + pathname + search + hash;
        };

        function urlResolve(source, relative) {
          return urlParse(source, false, true).resolve(relative);
        }

        Url.prototype.resolve = function(relative) {
          return this.resolveObject(urlParse(relative, false, true)).format();
        };

        function urlResolveObject(source, relative) {
          if (!source) return relative;
          return urlParse(source, false, true).resolveObject(relative);
        }

        Url.prototype.resolveObject = function(relative) {
          if (util.isString(relative)) {
            var rel = new Url();
            rel.parse(relative, false, true);
            relative = rel;
          }

          var result = new Url();
          var tkeys = Object.keys(this);
          for (var tk = 0; tk < tkeys.length; tk++) {
            var tkey = tkeys[tk];
            result[tkey] = this[tkey];
          }

          // hash is always overridden, no matter what.
          // even href="" will remove it.
          result.hash = relative.hash;

          // if the relative url is empty, then there's nothing left to do here.
          if (relative.href === "") {
            result.href = result.format();
            return result;
          }

          // hrefs like //foo/bar always cut to the protocol.
          if (relative.slashes && !relative.protocol) {
            // take everything except the protocol from relative
            var rkeys = Object.keys(relative);
            for (var rk = 0; rk < rkeys.length; rk++) {
              var rkey = rkeys[rk];
              if (rkey !== "protocol") result[rkey] = relative[rkey];
            }

            //urlParse appends trailing / to urls like http://www.example.com
            if (
              slashedProtocol[result.protocol] &&
              result.hostname &&
              !result.pathname
            ) {
              result.path = result.pathname = "/";
            }

            result.href = result.format();
            return result;
          }

          if (relative.protocol && relative.protocol !== result.protocol) {
            // if it's a known url protocol, then changing
            // the protocol does weird things
            // first, if it's not file:, then we MUST have a host,
            // and if there was a path
            // to begin with, then we MUST have a path.
            // if it is file:, then the host is dropped,
            // because that's known to be hostless.
            // anything else is assumed to be absolute.
            if (!slashedProtocol[relative.protocol]) {
              var keys = Object.keys(relative);
              for (var v = 0; v < keys.length; v++) {
                var k = keys[v];
                result[k] = relative[k];
              }
              result.href = result.format();
              return result;
            }

            result.protocol = relative.protocol;
            if (!relative.host && !hostlessProtocol[relative.protocol]) {
              var relPath = (relative.pathname || "").split("/");
              while (relPath.length && !(relative.host = relPath.shift()));
              if (!relative.host) relative.host = "";
              if (!relative.hostname) relative.hostname = "";
              if (relPath[0] !== "") relPath.unshift("");
              if (relPath.length < 2) relPath.unshift("");
              result.pathname = relPath.join("/");
            } else {
              result.pathname = relative.pathname;
            }
            result.search = relative.search;
            result.query = relative.query;
            result.host = relative.host || "";
            result.auth = relative.auth;
            result.hostname = relative.hostname || relative.host;
            result.port = relative.port;
            // to support http.request
            if (result.pathname || result.search) {
              var p = result.pathname || "";
              var s = result.search || "";
              result.path = p + s;
            }
            result.slashes = result.slashes || relative.slashes;
            result.href = result.format();
            return result;
          }

          var isSourceAbs =
              result.pathname && result.pathname.charAt(0) === "/",
            isRelAbs =
              relative.host ||
              (relative.pathname && relative.pathname.charAt(0) === "/"),
            mustEndAbs =
              isRelAbs || isSourceAbs || (result.host && relative.pathname),
            removeAllDots = mustEndAbs,
            srcPath = (result.pathname && result.pathname.split("/")) || [],
            relPath = (relative.pathname && relative.pathname.split("/")) || [],
            psychotic = result.protocol && !slashedProtocol[result.protocol];

          // if the url is a non-slashed url, then relative
          // links like ../.. should be able
          // to crawl up to the hostname, as well.  This is strange.
          // result.protocol has already been set by now.
          // Later on, put the first path part into the host field.
          if (psychotic) {
            result.hostname = "";
            result.port = null;
            if (result.host) {
              if (srcPath[0] === "") srcPath[0] = result.host;
              else srcPath.unshift(result.host);
            }
            result.host = "";
            if (relative.protocol) {
              relative.hostname = null;
              relative.port = null;
              if (relative.host) {
                if (relPath[0] === "") relPath[0] = relative.host;
                else relPath.unshift(relative.host);
              }
              relative.host = null;
            }
            mustEndAbs = mustEndAbs && (relPath[0] === "" || srcPath[0] === "");
          }

          if (isRelAbs) {
            // it's absolute.
            result.host =
              relative.host || relative.host === ""
                ? relative.host
                : result.host;
            result.hostname =
              relative.hostname || relative.hostname === ""
                ? relative.hostname
                : result.hostname;
            result.search = relative.search;
            result.query = relative.query;
            srcPath = relPath;
            // fall through to the dot-handling below.
          } else if (relPath.length) {
            // it's relative
            // throw away the existing file, and take the new path instead.
            if (!srcPath) srcPath = [];
            srcPath.pop();
            srcPath = srcPath.concat(relPath);
            result.search = relative.search;
            result.query = relative.query;
          } else if (!util.isNullOrUndefined(relative.search)) {
            // just pull out the search.
            // like href='?foo'.
            // Put this after the other two cases because it simplifies the booleans
            if (psychotic) {
              result.hostname = result.host = srcPath.shift();
              //occationaly the auth can get stuck only in host
              //this especially happens in cases like
              //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
              var authInHost =
                result.host && result.host.indexOf("@") > 0
                  ? result.host.split("@")
                  : false;
              if (authInHost) {
                result.auth = authInHost.shift();
                result.host = result.hostname = authInHost.shift();
              }
            }
            result.search = relative.search;
            result.query = relative.query;
            //to support http.request
            if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
              result.path =
                (result.pathname ? result.pathname : "") +
                (result.search ? result.search : "");
            }
            result.href = result.format();
            return result;
          }

          if (!srcPath.length) {
            // no path at all.  easy.
            // we've already handled the other stuff above.
            result.pathname = null;
            //to support http.request
            if (result.search) {
              result.path = "/" + result.search;
            } else {
              result.path = null;
            }
            result.href = result.format();
            return result;
          }

          // if a url ENDs in . or .., then it must get a trailing slash.
          // however, if it ends in anything else non-slashy,
          // then it must NOT get a trailing slash.
          var last = srcPath.slice(-1)[0];
          var hasTrailingSlash =
            ((result.host || relative.host || srcPath.length > 1) &&
              (last === "." || last === "..")) ||
            last === "";

          // strip single dots, resolve double dots to parent dir
          // if the path tries to go above the root, `up` ends up > 0
          var up = 0;
          for (var i = srcPath.length; i >= 0; i--) {
            last = srcPath[i];
            if (last === ".") {
              srcPath.splice(i, 1);
            } else if (last === "..") {
              srcPath.splice(i, 1);
              up++;
            } else if (up) {
              srcPath.splice(i, 1);
              up--;
            }
          }

          // if the path is allowed to go above the root, restore leading ..s
          if (!mustEndAbs && !removeAllDots) {
            for (; up--; up) {
              srcPath.unshift("..");
            }
          }

          if (
            mustEndAbs &&
            srcPath[0] !== "" &&
            (!srcPath[0] || srcPath[0].charAt(0) !== "/")
          ) {
            srcPath.unshift("");
          }

          if (hasTrailingSlash && srcPath.join("/").substr(-1) !== "/") {
            srcPath.push("");
          }

          var isAbsolute =
            srcPath[0] === "" || (srcPath[0] && srcPath[0].charAt(0) === "/");

          // put the host back
          if (psychotic) {
            result.hostname = result.host = isAbsolute
              ? ""
              : srcPath.length ? srcPath.shift() : "";
            //occationaly the auth can get stuck only in host
            //this especially happens in cases like
            //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
            var authInHost =
              result.host && result.host.indexOf("@") > 0
                ? result.host.split("@")
                : false;
            if (authInHost) {
              result.auth = authInHost.shift();
              result.host = result.hostname = authInHost.shift();
            }
          }

          mustEndAbs = mustEndAbs || (result.host && srcPath.length);

          if (mustEndAbs && !isAbsolute) {
            srcPath.unshift("");
          }

          if (!srcPath.length) {
            result.pathname = null;
            result.path = null;
          } else {
            result.pathname = srcPath.join("/");
          }

          //to support request.http
          if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
            result.path =
              (result.pathname ? result.pathname : "") +
              (result.search ? result.search : "");
          }
          result.auth = relative.auth || result.auth;
          result.slashes = result.slashes || relative.slashes;
          result.href = result.format();
          return result;
        };

        Url.prototype.parseHost = function() {
          var host = this.host;
          var port = portPattern.exec(host);
          if (port) {
            port = port[0];
            if (port !== ":") {
              this.port = port.substr(1);
            }
            host = host.substr(0, host.length - port.length);
          }
          if (host) this.hostname = host;
        };

        /***/
      },
      /* 230 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(module, global) {
          var __WEBPACK_AMD_DEFINE_RESULT__; /*! https://mths.be/punycode v1.4.1 by @mathias */
          (function(root) {
            /** Detect free variables */
            var freeExports =
              typeof exports == "object" &&
              exports &&
              !exports.nodeType &&
              exports;
            var freeModule =
              typeof module == "object" && module && !module.nodeType && module;
            var freeGlobal = typeof global == "object" && global;
            if (
              freeGlobal.global === freeGlobal ||
              freeGlobal.window === freeGlobal ||
              freeGlobal.self === freeGlobal
            ) {
              root = freeGlobal;
            }

            /**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
            var punycode,
              /** Highest positive signed 32-bit float value */
              maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1
              /** Bootstring parameters */
              base = 36,
              tMin = 1,
              tMax = 26,
              skew = 38,
              damp = 700,
              initialBias = 72,
              initialN = 128, // 0x80
              delimiter = "-", // '\x2D'
              /** Regular expressions */
              regexPunycode = /^xn--/,
              regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
              regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators
              /** Error messages */
              errors = {
                overflow: "Overflow: input needs wider integers to process",
                "not-basic": "Illegal input >= 0x80 (not a basic code point)",
                "invalid-input": "Invalid input"
              },
              /** Convenience shortcuts */
              baseMinusTMin = base - tMin,
              floor = Math.floor,
              stringFromCharCode = String.fromCharCode,
              /** Temporary variable */
              key;

            /*--------------------------------------------------------------------------*/

            /**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
            function error(type) {
              throw new RangeError(errors[type]);
            }

            /**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
            function map(array, fn) {
              var length = array.length;
              var result = [];
              while (length--) {
                result[length] = fn(array[length]);
              }
              return result;
            }

            /**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
            function mapDomain(string, fn) {
              var parts = string.split("@");
              var result = "";
              if (parts.length > 1) {
                // In email addresses, only the domain name should be punycoded. Leave
                // the local part (i.e. everything up to `@`) intact.
                result = parts[0] + "@";
                string = parts[1];
              }
              // Avoid `split(regex)` for IE8 compatibility. See #17.
              string = string.replace(regexSeparators, "\x2E");
              var labels = string.split(".");
              var encoded = map(labels, fn).join(".");
              return result + encoded;
            }

            /**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
            function ucs2decode(string) {
              var output = [],
                counter = 0,
                length = string.length,
                value,
                extra;
              while (counter < length) {
                value = string.charCodeAt(counter++);
                if (value >= 0xd800 && value <= 0xdbff && counter < length) {
                  // high surrogate, and there is a next character
                  extra = string.charCodeAt(counter++);
                  if ((extra & 0xfc00) == 0xdc00) {
                    // low surrogate
                    output.push(
                      ((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000
                    );
                  } else {
                    // unmatched surrogate; only append this code unit, in case the next
                    // code unit is the high surrogate of a surrogate pair
                    output.push(value);
                    counter--;
                  }
                } else {
                  output.push(value);
                }
              }
              return output;
            }

            /**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
            function ucs2encode(array) {
              return map(array, function(value) {
                var output = "";
                if (value > 0xffff) {
                  value -= 0x10000;
                  output += stringFromCharCode(
                    ((value >>> 10) & 0x3ff) | 0xd800
                  );
                  value = 0xdc00 | (value & 0x3ff);
                }
                output += stringFromCharCode(value);
                return output;
              }).join("");
            }

            /**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
            function basicToDigit(codePoint) {
              if (codePoint - 48 < 10) {
                return codePoint - 22;
              }
              if (codePoint - 65 < 26) {
                return codePoint - 65;
              }
              if (codePoint - 97 < 26) {
                return codePoint - 97;
              }
              return base;
            }

            /**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
            function digitToBasic(digit, flag) {
              //  0..25 map to ASCII a..z or A..Z
              // 26..35 map to ASCII 0..9
              return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
            }

            /**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
            function adapt(delta, numPoints, firstTime) {
              var k = 0;
              delta = firstTime ? floor(delta / damp) : delta >> 1;
              delta += floor(delta / numPoints);
              for (
                ;
                /* no initialization */ delta > (baseMinusTMin * tMax) >> 1;
                k += base
              ) {
                delta = floor(delta / baseMinusTMin);
              }
              return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
            }

            /**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
            function decode(input) {
              // Don't use UCS-2
              var output = [],
                inputLength = input.length,
                out,
                i = 0,
                n = initialN,
                bias = initialBias,
                basic,
                j,
                index,
                oldi,
                w,
                k,
                digit,
                t,
                /** Cached calculation results */
                baseMinusT;

              // Handle the basic code points: let `basic` be the number of input code
              // points before the last delimiter, or `0` if there is none, then copy
              // the first basic code points to the output.

              basic = input.lastIndexOf(delimiter);
              if (basic < 0) {
                basic = 0;
              }

              for (j = 0; j < basic; ++j) {
                // if it's not a basic code point
                if (input.charCodeAt(j) >= 0x80) {
                  error("not-basic");
                }
                output.push(input.charCodeAt(j));
              }

              // Main decoding loop: start just after the last delimiter if any basic code
              // points were copied; start at the beginning otherwise.

              for (
                index = basic > 0 ? basic + 1 : 0;
                index < inputLength /* no final expression */;

              ) {
                // `index` is the index of the next character to be consumed.
                // Decode a generalized variable-length integer into `delta`,
                // which gets added to `i`. The overflow checking is easier
                // if we increase `i` as we go, then subtract off its starting
                // value at the end to obtain `delta`.
                for (
                  oldi = i, w = 1, k = base /* no condition */;
                  ;
                  k += base
                ) {
                  if (index >= inputLength) {
                    error("invalid-input");
                  }

                  digit = basicToDigit(input.charCodeAt(index++));

                  if (digit >= base || digit > floor((maxInt - i) / w)) {
                    error("overflow");
                  }

                  i += digit * w;
                  t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

                  if (digit < t) {
                    break;
                  }

                  baseMinusT = base - t;
                  if (w > floor(maxInt / baseMinusT)) {
                    error("overflow");
                  }

                  w *= baseMinusT;
                }

                out = output.length + 1;
                bias = adapt(i - oldi, out, oldi == 0);

                // `i` was supposed to wrap around from `out` to `0`,
                // incrementing `n` each time, so we'll fix that now:
                if (floor(i / out) > maxInt - n) {
                  error("overflow");
                }

                n += floor(i / out);
                i %= out;

                // Insert `n` at position `i` of the output
                output.splice(i++, 0, n);
              }

              return ucs2encode(output);
            }

            /**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
            function encode(input) {
              var n,
                delta,
                handledCPCount,
                basicLength,
                bias,
                j,
                m,
                q,
                k,
                t,
                currentValue,
                output = [],
                /** `inputLength` will hold the number of code points in `input`. */
                inputLength,
                /** Cached calculation results */
                handledCPCountPlusOne,
                baseMinusT,
                qMinusT;

              // Convert the input in UCS-2 to Unicode
              input = ucs2decode(input);

              // Cache the length
              inputLength = input.length;

              // Initialize the state
              n = initialN;
              delta = 0;
              bias = initialBias;

              // Handle the basic code points
              for (j = 0; j < inputLength; ++j) {
                currentValue = input[j];
                if (currentValue < 0x80) {
                  output.push(stringFromCharCode(currentValue));
                }
              }

              handledCPCount = basicLength = output.length;

              // `handledCPCount` is the number of code points that have been handled;
              // `basicLength` is the number of basic code points.

              // Finish the basic string - if it is not empty - with a delimiter
              if (basicLength) {
                output.push(delimiter);
              }

              // Main encoding loop:
              while (handledCPCount < inputLength) {
                // All non-basic code points < n have been handled already. Find the next
                // larger one:
                for (m = maxInt, j = 0; j < inputLength; ++j) {
                  currentValue = input[j];
                  if (currentValue >= n && currentValue < m) {
                    m = currentValue;
                  }
                }

                // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
                // but guard against overflow
                handledCPCountPlusOne = handledCPCount + 1;
                if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
                  error("overflow");
                }

                delta += (m - n) * handledCPCountPlusOne;
                n = m;

                for (j = 0; j < inputLength; ++j) {
                  currentValue = input[j];

                  if (currentValue < n && ++delta > maxInt) {
                    error("overflow");
                  }

                  if (currentValue == n) {
                    // Represent delta as a generalized variable-length integer
                    for (q = delta, k = base /* no condition */; ; k += base) {
                      t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                      if (q < t) {
                        break;
                      }
                      qMinusT = q - t;
                      baseMinusT = base - t;
                      output.push(
                        stringFromCharCode(
                          digitToBasic(t + qMinusT % baseMinusT, 0)
                        )
                      );
                      q = floor(qMinusT / baseMinusT);
                    }

                    output.push(stringFromCharCode(digitToBasic(q, 0)));
                    bias = adapt(
                      delta,
                      handledCPCountPlusOne,
                      handledCPCount == basicLength
                    );
                    delta = 0;
                    ++handledCPCount;
                  }
                }

                ++delta;
                ++n;
              }
              return output.join("");
            }

            /**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
            function toUnicode(input) {
              return mapDomain(input, function(string) {
                return regexPunycode.test(string)
                  ? decode(string.slice(4).toLowerCase())
                  : string;
              });
            }

            /**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
            function toASCII(input) {
              return mapDomain(input, function(string) {
                return regexNonASCII.test(string)
                  ? "xn--" + encode(string)
                  : string;
              });
            }

            /*--------------------------------------------------------------------------*/

            /** Define the public API */
            punycode = {
              /**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
              version: "1.4.1",
              /**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
              ucs2: {
                decode: ucs2decode,
                encode: ucs2encode
              },
              decode: decode,
              encode: encode,
              toASCII: toASCII,
              toUnicode: toUnicode
            };

            /** Expose `punycode` */
            // Some AMD build optimizers, like r.js, check for specific condition patterns
            // like the following:
            if (true) {
              !(
                (__WEBPACK_AMD_DEFINE_RESULT__ = function() {
                  return punycode;
                }.call(exports, __webpack_require__, exports, module)),
                __WEBPACK_AMD_DEFINE_RESULT__ !== undefined &&
                  (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)
              );
            } else if (freeExports && freeModule) {
              if (module.exports == freeExports) {
                // in Node.js, io.js, or RingoJS v0.8.0+
                freeModule.exports = punycode;
              } else {
                // in Narwhal or RingoJS v0.7.0-
                for (key in punycode) {
                  punycode.hasOwnProperty(key) &&
                    (freeExports[key] = punycode[key]);
                }
              }
            } else {
              // in Rhino or a web browser
              root.punycode = punycode;
            }
          })(this);

          /* WEBPACK VAR INJECTION */
        }.call(
          exports,
          __webpack_require__(104)(module),
          __webpack_require__(8)
        ));

        /***/
      },
      /* 231 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        module.exports = {
          isString: function(arg) {
            return typeof arg === "string";
          },
          isObject: function(arg) {
            return typeof arg === "object" && arg !== null;
          },
          isNull: function(arg) {
            return arg === null;
          },
          isNullOrUndefined: function(arg) {
            return arg == null;
          }
        };

        /***/
      },
      /* 232 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        exports.decode = exports.parse = __webpack_require__(233);
        exports.encode = exports.stringify = __webpack_require__(234);

        /***/
      },
      /* 233 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";
        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.

        // If obj.hasOwnProperty has been overridden, then calling
        // obj.hasOwnProperty(prop) will break.
        // See: https://github.com/joyent/node/issues/1707
        function hasOwnProperty(obj, prop) {
          return Object.prototype.hasOwnProperty.call(obj, prop);
        }

        module.exports = function(qs, sep, eq, options) {
          sep = sep || "&";
          eq = eq || "=";
          var obj = {};

          if (typeof qs !== "string" || qs.length === 0) {
            return obj;
          }

          var regexp = /\+/g;
          qs = qs.split(sep);

          var maxKeys = 1000;
          if (options && typeof options.maxKeys === "number") {
            maxKeys = options.maxKeys;
          }

          var len = qs.length;
          // maxKeys <= 0 means that we should not limit keys count
          if (maxKeys > 0 && len > maxKeys) {
            len = maxKeys;
          }

          for (var i = 0; i < len; ++i) {
            var x = qs[i].replace(regexp, "%20"),
              idx = x.indexOf(eq),
              kstr,
              vstr,
              k,
              v;

            if (idx >= 0) {
              kstr = x.substr(0, idx);
              vstr = x.substr(idx + 1);
            } else {
              kstr = x;
              vstr = "";
            }

            k = decodeURIComponent(kstr);
            v = decodeURIComponent(vstr);

            if (!hasOwnProperty(obj, k)) {
              obj[k] = v;
            } else if (isArray(obj[k])) {
              obj[k].push(v);
            } else {
              obj[k] = [obj[k], v];
            }
          }

          return obj;
        };

        var isArray =
          Array.isArray ||
          function(xs) {
            return Object.prototype.toString.call(xs) === "[object Array]";
          };

        /***/
      },
      /* 234 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";
        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.

        var stringifyPrimitive = function(v) {
          switch (typeof v) {
            case "string":
              return v;

            case "boolean":
              return v ? "true" : "false";

            case "number":
              return isFinite(v) ? v : "";

            default:
              return "";
          }
        };

        module.exports = function(obj, sep, eq, name) {
          sep = sep || "&";
          eq = eq || "=";
          if (obj === null) {
            obj = undefined;
          }

          if (typeof obj === "object") {
            return map(objectKeys(obj), function(k) {
              var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
              if (isArray(obj[k])) {
                return map(obj[k], function(v) {
                  return ks + encodeURIComponent(stringifyPrimitive(v));
                }).join(sep);
              } else {
                return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
              }
            }).join(sep);
          }

          if (!name) return "";
          return (
            encodeURIComponent(stringifyPrimitive(name)) +
            eq +
            encodeURIComponent(stringifyPrimitive(obj))
          );
        };

        var isArray =
          Array.isArray ||
          function(xs) {
            return Object.prototype.toString.call(xs) === "[object Array]";
          };

        function map(xs, f) {
          if (xs.map) return xs.map(f);
          var res = [];
          for (var i = 0; i < xs.length; i++) {
            res.push(f(xs[i], i));
          }
          return res;
        }

        var objectKeys =
          Object.keys ||
          function(obj) {
            var res = [];
            for (var key in obj) {
              if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
            }
            return res;
          };

        /***/
      },
      /* 235 */
      /***/ function(module, __webpack_exports__, __webpack_require__) {
        "use strict";
        /* harmony export (immutable) */ __webpack_exports__["a"] = getSystemCA;
        /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_raw_loader_ca_certificates_browser_crt__ = __webpack_require__(
          236
        );
        /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_raw_loader_ca_certificates_browser_crt___default = __webpack_require__.n(
          __WEBPACK_IMPORTED_MODULE_0_raw_loader_ca_certificates_browser_crt__
        );

        console.warn(`
  Hi there! You're using dove-jwt in a browser. For now, that means that we're
  using a hardcoded list of CAs scraped from Debian. Sorry about that. There
  might be more secure ways to go about it. As always, dove-jwts should be used
  with grains of salt.
`);

        function getSystemCA() {
          return __WEBPACK_IMPORTED_MODULE_0_raw_loader_ca_certificates_browser_crt___default.a;
        }

        /***/
      },
      /* 236 */
      /***/ function(module, exports) {
        module.exports =
          "-----BEGIN CERTIFICATE-----\nMIIH0zCCBbugAwIBAgIIXsO3pkN/pOAwDQYJKoZIhvcNAQEFBQAwQjESMBAGA1UE\nAwwJQUNDVlJBSVoxMRAwDgYDVQQLDAdQS0lBQ0NWMQ0wCwYDVQQKDARBQ0NWMQsw\nCQYDVQQGEwJFUzAeFw0xMTA1MDUwOTM3MzdaFw0zMDEyMzEwOTM3MzdaMEIxEjAQ\nBgNVBAMMCUFDQ1ZSQUlaMTEQMA4GA1UECwwHUEtJQUNDVjENMAsGA1UECgwEQUND\nVjELMAkGA1UEBhMCRVMwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCb\nqau/YUqXry+XZpp0X9DZlv3P4uRm7x8fRzPCRKPfmt4ftVTdFXxpNRFvu8gMjmoY\nHtiP2Ra8EEg2XPBjs5BaXCQ316PWywlxufEBcoSwfdtNgM3802/J+Nq2DoLSRYWo\nG2ioPej0RGy9ocLLA76MPhMAhN9KSMDjIgro6TenGEyxCQ0jVn8ETdkXhBilyNpA\nlHPrzg5XPAOBOp0KoVdDaaxXbXmQeOW1tDvYvEyNKKGno6e6Ak4l0Squ7a4DIrhr\nIA8wKFSVf+DuzgpmndFALW4ir50awQUZ0m/A8p/4e7MCQvtQqR0tkw8jq8bBD5L/\n0KIV9VMJcRz/RROE5iZe+OCIHAr8Fraocwa48GOEAqDGWuzndN9wrqODJerWx5eH\nk6fGioozl2A3ED6XPm4pFdahD9GILBKfb6qkxkLrQaLjlUPTAYVtjrs78yM2x/47\n4KElB0iryYl0/wiPgL/AlmXz7uxLaL2diMMxs0Dx6M/2OLuc5NF/1OVYm3z61PMO\nm3WR5LpSLhl+0fXNWhn8ugb2+1KoS5kE3fj5tItQo05iifCHJPqDQsGH+tUtKSpa\ncXpkatcnYGMN285J9Y0fkIkyF/hzQ7jSWpOGYdbhdQrqeWZ2iE9x6wQl1gpaepPl\nuUsXQA+xtrn13k/c4LOsOxFwYIRKQ26ZIMApcQrAZQIDAQABo4ICyzCCAscwfQYI\nKwYBBQUHAQEEcTBvMEwGCCsGAQUFBzAChkBodHRwOi8vd3d3LmFjY3YuZXMvZmls\nZWFkbWluL0FyY2hpdm9zL2NlcnRpZmljYWRvcy9yYWl6YWNjdjEuY3J0MB8GCCsG\nAQUFBzABhhNodHRwOi8vb2NzcC5hY2N2LmVzMB0GA1UdDgQWBBTSh7Tj3zcnk1X2\nVuqB5TbMjB4/vTAPBgNVHRMBAf8EBTADAQH/MB8GA1UdIwQYMBaAFNKHtOPfNyeT\nVfZW6oHlNsyMHj+9MIIBcwYDVR0gBIIBajCCAWYwggFiBgRVHSAAMIIBWDCCASIG\nCCsGAQUFBwICMIIBFB6CARAAQQB1AHQAbwByAGkAZABhAGQAIABkAGUAIABDAGUA\ncgB0AGkAZgBpAGMAYQBjAGkA8wBuACAAUgBhAO0AegAgAGQAZQAgAGwAYQAgAEEA\nQwBDAFYAIAAoAEEAZwBlAG4AYwBpAGEAIABkAGUAIABUAGUAYwBuAG8AbABvAGcA\n7QBhACAAeQAgAEMAZQByAHQAaQBmAGkAYwBhAGMAaQDzAG4AIABFAGwAZQBjAHQA\ncgDzAG4AaQBjAGEALAAgAEMASQBGACAAUQA0ADYAMAAxADEANQA2AEUAKQAuACAA\nQwBQAFMAIABlAG4AIABoAHQAdABwADoALwAvAHcAdwB3AC4AYQBjAGMAdgAuAGUA\nczAwBggrBgEFBQcCARYkaHR0cDovL3d3dy5hY2N2LmVzL2xlZ2lzbGFjaW9uX2Mu\naHRtMFUGA1UdHwROMEwwSqBIoEaGRGh0dHA6Ly93d3cuYWNjdi5lcy9maWxlYWRt\naW4vQXJjaGl2b3MvY2VydGlmaWNhZG9zL3JhaXphY2N2MV9kZXIuY3JsMA4GA1Ud\nDwEB/wQEAwIBBjAXBgNVHREEEDAOgQxhY2N2QGFjY3YuZXMwDQYJKoZIhvcNAQEF\nBQADggIBAJcxAp/n/UNnSEQU5CmH7UwoZtCPNdpNYbdKl02125DgBS4OxnnQ8pdp\nD70ER9m+27Up2pvZrqmZ1dM8MJP1jaGo/AaNRPTKFpV8M9xii6g3+CfYCS0b78gU\nJyCpZET/LtZ1qmxNYEAZSUNUY9rizLpm5U9EelvZaoErQNV/+QEnWCzI7UiRfD+m\nAM/EKXMRNt6GGT6d7hmKG9Ww7Y49nCrADdg9ZuM8Db3VlFzi4qc1GwQA9j9ajepD\nvV+JHanBsMyZ4k0ACtrJJ1vnE5Bc5PUzolVt3OAJTS+xJlsndQAJxGJ3KQhfnlms\ntn6tn1QwIgPBHnFk/vk4CpYY3QIUrCPLBhwepH2NDd4nQeit2hW3sCPdK6jT2iWH\n7ehVRE2I9DZ+hJp4rPcOVkkO1jMl1oRQQmwgEh0q1b688nCBpHBgvgW1m54ERL5h\nI6zppSSMEYCUWqKiuUnSwdzRp+0xESyeGabu4VXhwOrPDYTkF7eifKXeVSUG7szA\nh1xA2syVP1XgNce4hL60Xc16gwFy7ofmXx2utYXGJt/mwZrpHgJHnyqobalbz+xF\nd3+YJ5oyXSrjhO7FmGYvliAd3djDJ9ew+f7Zfc3Qn48LFFhRny+Lwzgt3uiP1o2H\npPVWQxaZLPSkVrQ0uGE3ycJYgBugl6H8WY3pEfbRD0tVNEYqi4Y7\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIFtTCCA52gAwIBAgIIYY3HhjsBggUwDQYJKoZIhvcNAQEFBQAwRDEWMBQGA1UE\nAwwNQUNFRElDT00gUm9vdDEMMAoGA1UECwwDUEtJMQ8wDQYDVQQKDAZFRElDT00x\nCzAJBgNVBAYTAkVTMB4XDTA4MDQxODE2MjQyMloXDTI4MDQxMzE2MjQyMlowRDEW\nMBQGA1UEAwwNQUNFRElDT00gUm9vdDEMMAoGA1UECwwDUEtJMQ8wDQYDVQQKDAZF\nRElDT00xCzAJBgNVBAYTAkVTMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKC\nAgEA/5KV4WgGdrQsyFhIyv2AVClVYyT/kGWbEHV7w2rbYgIB8hiGtXxaOLHkWLn7\n09gtn70yN78sFW2+tfQh0hOR2QetAQXW8713zl9CgQr5auODAKgrLlUTY4HKRxx7\nXBZXehuDYAQ6PmXDzQHe3qTWDLqO3tkE7hdWIpuPY/1NFgu3e3eM+SW10W2ZEi5P\nGrjm6gSSrj0RuVFCPYewMYWveVqc/udOXpJPQ/yrOq2lEiZmueIM15jO1FillUAK\nt0SdE3QrwqXrIhWYENiLxQSfHY9g5QYbm8+5eaA9oiM/Qj9r+hwDezCNzmzAv+Yb\nX79nuIQZ1RXve8uQNjFiybwCq0Zfm/4aaJQ0PZCOrfbkHQl/Sog4P75n/TSW9R28\nMHTLOO7VbKvU/PQAtwBbhTIWdjPp2KOZnQUAqhbm84F9b32qhm2tFXTTxKJxqvQU\nfecyuB+81fFOvW8XAjnXDpVCOscAPukmYxHqC9FK/xidstd7LzrZlvvoHpKuE1XI\n2Sf23EgbsCTBheN3nZqk8wwRHQ3ItBTutYJXCb8gWH8vIiPYcMt5bMlL8qkqyPyH\nK9caUPgn6C9D4zq92Fdx/c6mUlv53U3t5fZvie27k5x2IXXwkkwp9y+cAS7+UEae\nZAwUswdbxcJzbPEHXEUkFDWug/FqTYl6+rPYLWbwNof1K1MCAwEAAaOBqjCBpzAP\nBgNVHRMBAf8EBTADAQH/MB8GA1UdIwQYMBaAFKaz4SsrSbbXc6GqlPUB53NlTKxQ\nMA4GA1UdDwEB/wQEAwIBhjAdBgNVHQ4EFgQUprPhKytJttdzoaqU9QHnc2VMrFAw\nRAYDVR0gBD0wOzA5BgRVHSAAMDEwLwYIKwYBBQUHAgEWI2h0dHA6Ly9hY2VkaWNv\nbS5lZGljb21ncm91cC5jb20vZG9jMA0GCSqGSIb3DQEBBQUAA4ICAQDOLAtSUWIm\nfQwng4/F9tqgaHtPkl7qpHMyEVNEskTLnewPeUKzEKbHDZ3Ltvo/Onzqv4hTGzz3\ngvoFNTPhNahXwOf9jU8/kzJPeGYDdwdY6ZXIfj7QeQCM8htRM5u8lOk6e25SLTKe\nI6RF+7YuE7CLGLHdztUdp0J/Vb77W7tH1PwkzQSulgUV1qzOMPPKC8W64iLgpq0i\n5ALudBF/TP94HTXa5gI06xgSYXcGCRZj6hitoocf8seACQl1ThCojz2GuHURwCRi\nipZ7SkXp7FnFvmuD5uHorLUwHv4FB4D54SMNUI8FmP8sX+g7tq3PgbUhh8oIKiMn\nMCArz+2UW6yyetLHKKGKC5tNSixthT8Jcjxn4tncB7rrZXtaAWPWkFtPF2Y9fwsZ\no5NjEFIqnxQWWOLcpfShFosOkYuByptZ+thrkQdlVV9SH686+5DdaaVbnG0OLLb6\nzqylfDJKZ0DcMDQj3dcEI2bw/FWAp/tmGYI1Z2JwOV5vx+qQQEQIHriy1tvuWacN\nGHk0vFQYXlPKNFHtRQrmjseCNj6nOGOpMCwXEGCSn1WHElkQwg9naRHMTh5+Spqt\nr0CodaxWkHS4oJyleW/c6RrIaQXpuvoDs3zk4E7Czp3otkYNbn5XOmeUwssfnHdK\nZ05phkOTOPu220+DkdRgfks+KzgHVZhepA==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIGZjCCBE6gAwIBAgIPB35Sk3vgFeNX8GmMy+wMMA0GCSqGSIb3DQEBBQUAMHsx\nCzAJBgNVBAYTAkNPMUcwRQYDVQQKDD5Tb2NpZWRhZCBDYW1lcmFsIGRlIENlcnRp\nZmljYWNpw7NuIERpZ2l0YWwgLSBDZXJ0aWPDoW1hcmEgUy5BLjEjMCEGA1UEAwwa\nQUMgUmHDrXogQ2VydGljw6FtYXJhIFMuQS4wHhcNMDYxMTI3MjA0NjI5WhcNMzAw\nNDAyMjE0MjAyWjB7MQswCQYDVQQGEwJDTzFHMEUGA1UECgw+U29jaWVkYWQgQ2Ft\nZXJhbCBkZSBDZXJ0aWZpY2FjacOzbiBEaWdpdGFsIC0gQ2VydGljw6FtYXJhIFMu\nQS4xIzAhBgNVBAMMGkFDIFJhw616IENlcnRpY8OhbWFyYSBTLkEuMIICIjANBgkq\nhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAq2uJo1PMSCMI+8PPUZYILrgIem08kBeG\nqentLhM0R7LQcNzJPNCNyu5LF6vQhbCnIwTLqKL85XXbQMpiiY9QngE9JlsYhBzL\nfDe3fezTf3MZsGqy2IiKLUV0qPezuMDU2s0iiXRNWhU5cxh0T7XrmafBHoi0wpOQ\nY5fzp6cSsgkiBzPZkc0OnB8OIMfuuzONj8LSWKdf/WU34ojC2I+GdV75LaeHM/J4\nNy+LvB2GNzmxlPLYvEqcgxhaBvzz1NS6jBUJJfD5to0EfhcSM2tXSExP2yYe68yQ\n54v5aHxwD6Mq0Do43zeX4lvegGHTgNiRg0JaTASJaBE8rF9ogEHMYELODVoqDA+b\nMMCm8Ibbq0nXl21Ii/kDwFJnmxL3wvIumGVC2daa49AZMQyth9VXAnow6IYm+48j\nilSH5L887uvDdUhfHjlvgWJsxS3EF1QZtzeNnDeRyPYL1epjb4OsOMLzP96a++Ej\nYfDIJss2yKHzMI+ko6Kh3VOz3vCaMh+DkXkwwakfU5tTohVTP92dsxA7SH2JD/zt\nA/X7JWR1DhcZDY8AFmd5ekD8LVkH2ZD6mq093ICK5lw1omdMEWux+IBkAC1vImHF\nrEsm5VoQgpukg3s0956JkSCXjrdCx2bD0Omk1vUgjcTDlaxECp1bczwmPS9KvqfJ\npxAe+59QafMCAwEAAaOB5jCB4zAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQE\nAwIBBjAdBgNVHQ4EFgQU0QnQ6dfOeXRU+Tows/RtLAMDG2gwgaAGA1UdIASBmDCB\nlTCBkgYEVR0gADCBiTArBggrBgEFBQcCARYfaHR0cDovL3d3dy5jZXJ0aWNhbWFy\nYS5jb20vZHBjLzBaBggrBgEFBQcCAjBOGkxMaW1pdGFjaW9uZXMgZGUgZ2FyYW50\n7WFzIGRlIGVzdGUgY2VydGlmaWNhZG8gc2UgcHVlZGVuIGVuY29udHJhciBlbiBs\nYSBEUEMuMA0GCSqGSIb3DQEBBQUAA4ICAQBclLW4RZFNjmEfAygPU3zmpFmps4p6\nxbD/CHwso3EcIRNnoZUSQDWDg4902zNc8El2CoFS3UnUmjIz75uny3XlesuXEpBc\nunvFm9+7OSPI/5jOCk0iAUgHforA1SBClETvv3eiiWdIG0ADBaGJ7M9i4z0ldma/\nJre7Ir5v/zlXdLp6yQGVwZVR6Kss+LGGIOk/yzVb0hfpKv6DExdA7ohiZVvVO2Dp\nezy4ydV/NgIlqmjCMRW3MGXrfx1IebHPOeJCgBbT9ZMj/EyXyVo3bHwi2ErN0o42\ngzmRkBDI8ck1fj+404HGIGQatlDCIaR43NAvO2STdPCWkPHv+wlaNECW8DYSwaN0\njJN+Qd53i+yG2dIPPy3RzECiiWZIHiCznCNZc6lEc7wkeZBWN7PGKX6jD/EpOe9+\nXCgycDWs2rjIdWb8m0w5R44bb5tNAlQiM+9hup4phO9OSzNHdpdqy35f/RWmnkJD\nW2ZaiogN9xa5P1FlK2Zqi9E4UqLWRhH6/JocdJ6PlwsCT2TG9WjTSy3/pDceiz+/\nRL5hRqGEPQgnTIEgd4kI6mdAXmwIUV80WoyWaM3X94nCHNMyAK9Sy9NgWyo6R35r\nMDOhYil/SrnhLecUIw4OGEfhefwVVdCx/CVxY3UzHCMrr1zZ7Ud3YA47Dx7SwNxk\nBYn8eNZcLCZDqQ==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIFuzCCA6OgAwIBAgIIVwoRl0LE48wwDQYJKoZIhvcNAQELBQAwazELMAkGA1UE\nBhMCSVQxDjAMBgNVBAcMBU1pbGFuMSMwIQYDVQQKDBpBY3RhbGlzIFMucC5BLi8w\nMzM1ODUyMDk2NzEnMCUGA1UEAwweQWN0YWxpcyBBdXRoZW50aWNhdGlvbiBSb290\nIENBMB4XDTExMDkyMjExMjIwMloXDTMwMDkyMjExMjIwMlowazELMAkGA1UEBhMC\nSVQxDjAMBgNVBAcMBU1pbGFuMSMwIQYDVQQKDBpBY3RhbGlzIFMucC5BLi8wMzM1\nODUyMDk2NzEnMCUGA1UEAwweQWN0YWxpcyBBdXRoZW50aWNhdGlvbiBSb290IENB\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAp8bEpSmkLO/lGMWwUKNv\nUTufClrJwkg4CsIcoBh/kbWHuUA/3R1oHwiD1S0eiKD4j1aPbZkCkpAW1V8IbInX\n4ay8IMKx4INRimlNAJZaby/ARH6jDuSRzVju3PvHHkVH3Se5CAGfpiEd9UEtL0z9\nKK3giq0itFZljoZUj5NDKd45RnijMCO6zfB9E1fAXdKDa0hMxKufgFpbOr3JpyI/\ngCczWw63igxdBzcIy2zSekciRDXFzMwujt0q7bd9Zg1fYVEiVRvjRuPjPdA1Yprb\nrxTIW6HMiRvhMCb8oJsfgadHHwTrozmSBp+Z07/T6k9QnBn+locePGX2oxgkg4YQ\n51Q+qDp2JE+BIcXjDwL4k5RHILv+1A7TaLndxHqEguNTVHnd25zS8gebLra8Pu2F\nbe8lEfKXGkJh90qX6IuxEAf6ZYGyojnP9zz/GPvG8VqLWeICrHuS0E4UT1lF9gxe\nKF+w6D9Fz8+vm2/7hNN3WpVvrJSEnu68wEqPSpP4RCHiMUVhUE4Q2OM1fEwZtN4F\nv6MGn8i1zeQf1xcGDXqVdFUNaBr8EBtiZJ1t4JWgw5QHVw0U5r0F+7if5t+L4sbn\nfpb2U8WANFAoWPASUHEXMLrmeGO89LKtmyuy/uE5jF66CyCU3nuDuP/jVo23Eek7\njPKxwV2dpAtMK9myGPW1n0sCAwEAAaNjMGEwHQYDVR0OBBYEFFLYiDrIn3hm7Ynz\nezhwlMkCAjbQMA8GA1UdEwEB/wQFMAMBAf8wHwYDVR0jBBgwFoAUUtiIOsifeGbt\nifN7OHCUyQICNtAwDgYDVR0PAQH/BAQDAgEGMA0GCSqGSIb3DQEBCwUAA4ICAQAL\ne3KHwGCmSUyIWOYdiPcUZEim2FgKDk8TNd81HdTtBjHIgT5q1d07GjLukD0R0i70\njsNjLiNmsGe+b7bAEzlgqqI0JZN1Ut6nna0Oh4lScWoWPBkdg/iaKWW+9D+a2fDz\nWochcYBNy+A4mz+7+uAwTc+G02UQGRjRlwKxK3JCaKygvU5a2hi/a5iB0P2avl4V\nSM0RFbnAKVy06Ij3Pjaut2L9HmLecHgQHEhb2rykOLpn7VU+Xlff1ANATIGk0k9j\npwlCCRT8AKnCgHNPLsBA2RF7SOp6AsDT6ygBJlh0wcBzIm2Tlf05fbsq4/aC4yyX\nX04fkZT6/iyj2HYauE2yOE+b+h1IYHkm4vP9qdCa6HCPSXrW5b0KDtst842/6+Ok\nfcvHlXHo2qN8xcL4dJIEG4aspCJTQLas/kx2z/uUMsA1n3Y/buWQbqCmJqK4LL7R\nK4X9p2jIugErsWx0Hbhzlefut8cl8ABMALJ+tguLHPPAUJ4lueAI3jZm/zel0btU\nZCzJJ7VLkn5l/9Mt4blOvH+kQSGQQXemOR/qnuOf0GZvBeyqdn6/axag67XH/JJU\nLysRJyU3eExRarDzzFhdFPFqSBX/wge2sY0PjlxQRrM9vwGYT7JZVEc+NHt4bVaT\nLnPqZih4zR0Uv6CPLy64Lo7yFIrM6bV8+2ydDKXhlg==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIENjCCAx6gAwIBAgIBATANBgkqhkiG9w0BAQUFADBvMQswCQYDVQQGEwJTRTEU\nMBIGA1UEChMLQWRkVHJ1c3QgQUIxJjAkBgNVBAsTHUFkZFRydXN0IEV4dGVybmFs\nIFRUUCBOZXR3b3JrMSIwIAYDVQQDExlBZGRUcnVzdCBFeHRlcm5hbCBDQSBSb290\nMB4XDTAwMDUzMDEwNDgzOFoXDTIwMDUzMDEwNDgzOFowbzELMAkGA1UEBhMCU0Ux\nFDASBgNVBAoTC0FkZFRydXN0IEFCMSYwJAYDVQQLEx1BZGRUcnVzdCBFeHRlcm5h\nbCBUVFAgTmV0d29yazEiMCAGA1UEAxMZQWRkVHJ1c3QgRXh0ZXJuYWwgQ0EgUm9v\ndDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALf3GjPm8gAELTngTlvt\nH7xsD821+iO2zt6bETOXpClMfZOfvUq8k+0DGuOPz+VtUFrWlymUWoCwSXrbLpX9\nuMq/NzgtHj6RQa1wVsfwTz/oMp50ysiQVOnGXw94nZpAPA6sYapeFI+eh6FqUNzX\nmk6vBbOmcZSccbNQYArHE504B4YCqOmoaSYYkKtMsE8jqzpPhNjfzp/haW+710LX\na0Tkx63ubUFfclpxCDezeWWkWaCUN/cALw3CknLa0Dhy2xSoRcRdKn23tNbE7qzN\nE0S3ySvdQwAl+mG5aWpYIxG3pzOPVnVZ9c0p10a3CitlttNCbxWyuHv77+ldU9U0\nWicCAwEAAaOB3DCB2TAdBgNVHQ4EFgQUrb2YejS0Jvf6xCZU7wO94CTLVBowCwYD\nVR0PBAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wgZkGA1UdIwSBkTCBjoAUrb2YejS0\nJvf6xCZU7wO94CTLVBqhc6RxMG8xCzAJBgNVBAYTAlNFMRQwEgYDVQQKEwtBZGRU\ncnVzdCBBQjEmMCQGA1UECxMdQWRkVHJ1c3QgRXh0ZXJuYWwgVFRQIE5ldHdvcmsx\nIjAgBgNVBAMTGUFkZFRydXN0IEV4dGVybmFsIENBIFJvb3SCAQEwDQYJKoZIhvcN\nAQEFBQADggEBALCb4IUlwtYj4g+WBpKdQZic2YR5gdkeWxQHIzZlj7DYd7usQWxH\nYINRsPkyPef89iYTx4AWpb9a/IfPeHmJIZriTAcKhjW88t5RxNKWt9x+Tu5w/Rw5\n6wwCURQtjr0W4MHfRnXnJK3s9EK0hZNwEGe6nQY1ShjTK3rMUUKhemPR5ruhxSvC\nNr4TDea9Y355e6cJDUCrat2PisP29owaQgVR1EX1n6diIWgVIEM8med8vSTYqZEX\nc4g/VhsxOBi0cQ+azcgOno4uG+GMmIPLHzHxREzGBHNJdmAPx/i9F4BrLunMTA5a\nmnkPIAou1Z5jJh5VkpTYghdae9C8x49OhgQ=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIEGDCCAwCgAwIBAgIBATANBgkqhkiG9w0BAQUFADBlMQswCQYDVQQGEwJTRTEU\nMBIGA1UEChMLQWRkVHJ1c3QgQUIxHTAbBgNVBAsTFEFkZFRydXN0IFRUUCBOZXR3\nb3JrMSEwHwYDVQQDExhBZGRUcnVzdCBDbGFzcyAxIENBIFJvb3QwHhcNMDAwNTMw\nMTAzODMxWhcNMjAwNTMwMTAzODMxWjBlMQswCQYDVQQGEwJTRTEUMBIGA1UEChML\nQWRkVHJ1c3QgQUIxHTAbBgNVBAsTFEFkZFRydXN0IFRUUCBOZXR3b3JrMSEwHwYD\nVQQDExhBZGRUcnVzdCBDbGFzcyAxIENBIFJvb3QwggEiMA0GCSqGSIb3DQEBAQUA\nA4IBDwAwggEKAoIBAQCWltQhSWDia+hBBwzexODcEyPNwTXH+9ZOEQpnXvUGW2ul\nCDtbKRY654eyNAbFvAWlA3yCyykQruGIgb3WntP+LVbBFc7jJp0VLhD7Bo8wBN6n\ntGO0/7Gcrjyvd7ZWxbWroulpOj0OM3kyP3CCkplhbY0wCI9xP6ZIVxn4JdxLZlyl\ndI+Yrsj5wAYi56xz36Uu+1LcsRVlIPo1Zmne3yzxbrww2ywkEtvrNTVokMsAsJch\nPXQhI2U0K7t4WaPW4XY5mqRJjox0r26kmqPZm9I4XJuiGMx1I4S+6+JNM3GOGvDC\n+Mcdoq0Dlyz4zyXG9rgkMbFjXZJ/Y/AlyVMuH79NAgMBAAGjgdIwgc8wHQYDVR0O\nBBYEFJWxtPCUtr3H2tERCSG+wa9J/RB7MAsGA1UdDwQEAwIBBjAPBgNVHRMBAf8E\nBTADAQH/MIGPBgNVHSMEgYcwgYSAFJWxtPCUtr3H2tERCSG+wa9J/RB7oWmkZzBl\nMQswCQYDVQQGEwJTRTEUMBIGA1UEChMLQWRkVHJ1c3QgQUIxHTAbBgNVBAsTFEFk\nZFRydXN0IFRUUCBOZXR3b3JrMSEwHwYDVQQDExhBZGRUcnVzdCBDbGFzcyAxIENB\nIFJvb3SCAQEwDQYJKoZIhvcNAQEFBQADggEBACxtZBsfzQ3duQH6lmM0MkhHma6X\n7f1yFqZzR1r0693p9db7RcwpiURdv0Y5PejuvE1Uhh4dbOMXJ0PhiVYrqW9yTkkz\n43J8KiOavD7/KCrto/8cI7pDVwlnTUtiBi34/2ydYB7YHEt9tTEv2dB8Xfjea4MY\neDdXL+gzB2ffHsdrKpV2ro9Xo/D0UrSpUwjP4E/TelOL/bscVjby/rK25Xa71SJl\npz/+0WatC7xrmYbvP33zGDLKe8bjq2RGlfgmadlVg3sslgf/WSxEo8bl6ancoWOA\nWiFeIc9TVPC6b4nbqKqVz4vjccweGyBECMB6tkD9xOQ14R0WHNC8K47Wcdk=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIEFTCCAv2gAwIBAgIBATANBgkqhkiG9w0BAQUFADBkMQswCQYDVQQGEwJTRTEU\nMBIGA1UEChMLQWRkVHJ1c3QgQUIxHTAbBgNVBAsTFEFkZFRydXN0IFRUUCBOZXR3\nb3JrMSAwHgYDVQQDExdBZGRUcnVzdCBQdWJsaWMgQ0EgUm9vdDAeFw0wMDA1MzAx\nMDQxNTBaFw0yMDA1MzAxMDQxNTBaMGQxCzAJBgNVBAYTAlNFMRQwEgYDVQQKEwtB\nZGRUcnVzdCBBQjEdMBsGA1UECxMUQWRkVHJ1c3QgVFRQIE5ldHdvcmsxIDAeBgNV\nBAMTF0FkZFRydXN0IFB1YmxpYyBDQSBSb290MIIBIjANBgkqhkiG9w0BAQEFAAOC\nAQ8AMIIBCgKCAQEA6Rowj4OIFMEg2Dybjxt+A3S72mnTRqX4jsIMEZBRpS9mVEBV\n6tsfSlbunyNu9DnLoblv8n75XYcmYZ4c+OLspoH4IcUkzBEMP9smcnrHAZcHF/nX\nGCwwfQ56HmIexkvA/X1id9NEHif2P0tEs7c42TkfYNVRknMDtABp4/MUTu7R3AnP\ndzRGULD4EfL+OHn3Bzn+UZKXC1sIXzSGAa2Il+tmzV7R/9x98oTaunet3IAIx6eH\n1lWfl2royBFkuucZKT8Rs3iQhCBSWxHveNCD9tVIkNAwHM+A+WD+eeSI8t0A65RF\n62WUaUC6wNW0uLp9BBGo6zEFlpROWCGOn9Bg/QIDAQABo4HRMIHOMB0GA1UdDgQW\nBBSBPjfYkrAfd59ctKtzquf2NGAv+jALBgNVHQ8EBAMCAQYwDwYDVR0TAQH/BAUw\nAwEB/zCBjgYDVR0jBIGGMIGDgBSBPjfYkrAfd59ctKtzquf2NGAv+qFopGYwZDEL\nMAkGA1UEBhMCU0UxFDASBgNVBAoTC0FkZFRydXN0IEFCMR0wGwYDVQQLExRBZGRU\ncnVzdCBUVFAgTmV0d29yazEgMB4GA1UEAxMXQWRkVHJ1c3QgUHVibGljIENBIFJv\nb3SCAQEwDQYJKoZIhvcNAQEFBQADggEBAAP3FUr4JNojVhaTdt02KLmuG7jD8WS6\nIBh4lSknVwW8fCr0uVFV2ocC3g8WFzH4qnkuCRO7r7IgGRLlk/lL+YPoRNWyQSW/\niHVv/xD8SlTQX/D67zZzfRs2RcYhbbQVuE7PnFylPVoAjgbjPGsye/Kf8Lb93/Ao\nGEjwxrzQvzSAlsJKsW2Ox5BF3i9nrEUEo3rcVZLJR2bYGozH7ZxOmuASu7VqTITh\n4SINhwBk/ox9Yjllpu9CtoAlEmEBqCQTcAARJl/6NVDFSMwGR+gn2HCNX2TmoUQm\nXiLsks3/QppEIW1cxeMiHV9HEufOX1362KqxMy3ZdvJOOjMMK7MtkAY=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIEHjCCAwagAwIBAgIBATANBgkqhkiG9w0BAQUFADBnMQswCQYDVQQGEwJTRTEU\nMBIGA1UEChMLQWRkVHJ1c3QgQUIxHTAbBgNVBAsTFEFkZFRydXN0IFRUUCBOZXR3\nb3JrMSMwIQYDVQQDExpBZGRUcnVzdCBRdWFsaWZpZWQgQ0EgUm9vdDAeFw0wMDA1\nMzAxMDQ0NTBaFw0yMDA1MzAxMDQ0NTBaMGcxCzAJBgNVBAYTAlNFMRQwEgYDVQQK\nEwtBZGRUcnVzdCBBQjEdMBsGA1UECxMUQWRkVHJ1c3QgVFRQIE5ldHdvcmsxIzAh\nBgNVBAMTGkFkZFRydXN0IFF1YWxpZmllZCBDQSBSb290MIIBIjANBgkqhkiG9w0B\nAQEFAAOCAQ8AMIIBCgKCAQEA5B6a/twJWoekn0e+EV+vhDTbYjx5eLfpMLXsDBwq\nxBb/4Oxx64r1EW7tTw2R0hIYLUkVAcKkIhPHEWT/IhKauY5cLwjPcWqzZwFZ8V1G\n87B4pfYOQnrjfxvM0PC3KP0q6p6zsLkEqv32x7SxuCqg+1jxGaBvcCV+PmlKfw8i\n2O+tCBGaKZnhqkRFmhJePp1tUvznoD1oL/BLcHwTOK28FSXx1s6rosAx1i+f4P8U\nWfyEk9mHfExUE+uf0S0R+Bg6Ot4l2ffTQO2kBhLEO+GRwVY18BTcZTYJbqukB8c1\n0cIDMzZbdSZtQvESa0NvS3GU+jQd7RNuyoB/mC9suWXY6QIDAQABo4HUMIHRMB0G\nA1UdDgQWBBQ5lYtii1zJ1IC6WA+XPxUIQ8yYpzALBgNVHQ8EBAMCAQYwDwYDVR0T\nAQH/BAUwAwEB/zCBkQYDVR0jBIGJMIGGgBQ5lYtii1zJ1IC6WA+XPxUIQ8yYp6Fr\npGkwZzELMAkGA1UEBhMCU0UxFDASBgNVBAoTC0FkZFRydXN0IEFCMR0wGwYDVQQL\nExRBZGRUcnVzdCBUVFAgTmV0d29yazEjMCEGA1UEAxMaQWRkVHJ1c3QgUXVhbGlm\naWVkIENBIFJvb3SCAQEwDQYJKoZIhvcNAQEFBQADggEBABmrder4i2VhlRO6aQTv\nhsoToMeqT2QbPxj2qC0sVY8FtzDqQmodwCVRLae/DLPt7wh/bDxGGuoYQ992zPlm\nhpwsaPXpF/gxsxjE1kh9I0xowX67ARRvxdlu3rsEQmr49lx95dr6h+sNNVJn0J6X\ndgWTP5XHAeZpVTh/EGGZyeNfpso+gmNIquIISD6q8rKFYqa0p9m9N5xotS1WfbC3\nP6CxB9bpT9zeRXEwMn8bLgn5v1Kh7sKAPgZcLlVAwRv1cEWw3F369nJad9Jjzc9Y\niQBCYz95OdBEsIJuQRno3eDBiFrRHnGTHyQwdOUeqN48Jzd/g66ed8/wMLH/S5no\nxqE=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIDTDCCAjSgAwIBAgIId3cGJyapsXwwDQYJKoZIhvcNAQELBQAwRDELMAkGA1UE\nBhMCVVMxFDASBgNVBAoMC0FmZmlybVRydXN0MR8wHQYDVQQDDBZBZmZpcm1UcnVz\ndCBDb21tZXJjaWFsMB4XDTEwMDEyOTE0MDYwNloXDTMwMTIzMTE0MDYwNlowRDEL\nMAkGA1UEBhMCVVMxFDASBgNVBAoMC0FmZmlybVRydXN0MR8wHQYDVQQDDBZBZmZp\ncm1UcnVzdCBDb21tZXJjaWFsMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC\nAQEA9htPZwcroRX1BiLLHwGy43NFBkRJLLtJJRTWzsO3qyxPxkEylFf6EqdbDuKP\nHx6GGaeqtS25Xw2Kwq+FNXkyLbscYjfysVtKPcrNcV/pQr6U6Mje+SJIZMblq8Yr\nba0F8PrVC8+a5fBQpIs7R6UjW3p6+DM/uO+Zl+MgwdYoic+U+7lF7eNAFxHUdPAL\nMeIrJmqbTFeurCA+ukV6BfO9m2kVrn1OIGPENXY6BwLJN/3HR+7o8XYdcxXyl6S1\nyHp52UKqK39c/s4mT6NmgTWvRLpUHhwwMmWd5jyTXlBOeuM61G7MGvv50jeuJCqr\nVwMiKA1JdX+3KNp1v47j3A55MQIDAQABo0IwQDAdBgNVHQ4EFgQUnZPGU4teyq8/\nnx4P5ZmVvCT2lI8wDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYwDQYJ\nKoZIhvcNAQELBQADggEBAFis9AQOzcAN/wr91LoWXym9e2iZWEnStB03TX8nfUYG\nXUPGhi4+c7ImfU+TqbbEKpqrIZcUsd6M06uJFdhrJNTxFq7YpFzUf1GO7RgBsZNj\nvbz4YYCanrHOQnDiqX0GJX0nof5v7LMeJNrjS1UaADs1tDvZ110w/YETifLCBivt\nZ8SOyUOyXGsViQK8YvxO8rUzqrJv0wqiUOP2O+guRMLbZjipM1ZI8W0bM40NjD9g\nN53Tym1+NH4Nn3J2ixufcv1SNUFFApYvHLKac0khsUlHRUe072o0EclNmsxZt9YC\nnlpOZbWUrhvfKbAW8b8Angc6F2S1BLUjIZkKlTuXfO8=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIDTDCCAjSgAwIBAgIIfE8EORzUmS0wDQYJKoZIhvcNAQEFBQAwRDELMAkGA1UE\nBhMCVVMxFDASBgNVBAoMC0FmZmlybVRydXN0MR8wHQYDVQQDDBZBZmZpcm1UcnVz\ndCBOZXR3b3JraW5nMB4XDTEwMDEyOTE0MDgyNFoXDTMwMTIzMTE0MDgyNFowRDEL\nMAkGA1UEBhMCVVMxFDASBgNVBAoMC0FmZmlybVRydXN0MR8wHQYDVQQDDBZBZmZp\ncm1UcnVzdCBOZXR3b3JraW5nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC\nAQEAtITMMxcua5Rsa2FSoOujz3mUTOWUgJnLVWREZY9nZOIG41w3SfYvm4SEHi3y\nYJ0wTsyEheIszx6e/jarM3c1RNg1lho9Nuh6DtjVR6FqaYvZ/Ls6rnla1fTWcbua\nkCNrmreIdIcMHl+5ni36q1Mr3Lt2PpNMCAiMHqIjHNRqrSK6mQEubWXLviRmVSRL\nQESxG9fhwoXA3hA/Pe24/PHxI1Pcv2WXb9n5QHGNfb2V1M6+oF4nI979ptAmDgAp\n6zxG8D1gvz9Q0twmQVGeFDdCBKNwV6gbh+0t+nvujArjqWaJGctB+d1ENmHP4ndG\nyH329JKBNv3bNPFyfvMMFr20FQIDAQABo0IwQDAdBgNVHQ4EFgQUBx/S55zawm6i\nQLSwelAQUHTEyL0wDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYwDQYJ\nKoZIhvcNAQEFBQADggEBAIlXshZ6qML91tmbmzTCnLQyFE2npN/svqe++EPbkTfO\ntDIuUFUaNU52Q3Eg75N3ThVwLofDwR1t3Mu1J9QsVtFSUzpE0nPIxBsFZVpikpzu\nQY0x2+c06lkh1QF612S4ZDnNye2v7UsDSKegmQGA3GWjNq5lWUhPgkvIZfFXHeVZ\nLgo/bNjR9eUJtGxUAArgFU2HdW23WJZa3W3SAKD0m0i+wzekujbgfIeFlxoVot4u\nolu9rxj5kFDNcFn4J2dHy8egBzp90SxdbBk6ZrV9/ZFvgrG+CJPbFEfxojfHRZ48\nx3evZKiT3/Zpg4Jg8klCNO1aAFSFHBY2kgxc+qatv9s=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIFRjCCAy6gAwIBAgIIbYwURrGmCu4wDQYJKoZIhvcNAQEMBQAwQTELMAkGA1UE\nBhMCVVMxFDASBgNVBAoMC0FmZmlybVRydXN0MRwwGgYDVQQDDBNBZmZpcm1UcnVz\ndCBQcmVtaXVtMB4XDTEwMDEyOTE0MTAzNloXDTQwMTIzMTE0MTAzNlowQTELMAkG\nA1UEBhMCVVMxFDASBgNVBAoMC0FmZmlybVRydXN0MRwwGgYDVQQDDBNBZmZpcm1U\ncnVzdCBQcmVtaXVtMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAxBLf\nqV/+Qd3d9Z+K4/as4Tx4mrzY8H96oDMq3I0gW64tb+eT2TZwamjPjlGjhVtnBKAQ\nJG9dKILBl1fYSCkTtuG+kU3fhQxTGJoeJKJPj/CihQvL9Cl/0qRY7iZNyaqoe5rZ\n+jjeRFcV5fiMyNlI4g0WJx0eyIOFJbe6qlVBzAMiSy2RjYvmia9mx+n/K+k8rNrS\ns8PhaJyJ+HoAVt70VZVs+7pk3WKL3wt3MutizCaam7uqYoNMtAZ6MMgpv+0GTZe5\nHMQxK9VfvFMSF5yZVylmd2EhMQcuJUmdGPLu8ytxjLW6OQdJd/zvLpKQBY0tL3d7\n70O/Nbua2Plzpyzy0FfuKE4mX4+QaAkvuPjcBukumj5Rp9EixAqnOEhss/n/fauG\nV+O61oV4d7pD6kh/9ti+I20ev9E2bFhc8e6kGVQa9QPSdubhjL08s9NIS+LI+H+S\nqHZGnEJlPqQewQcDWkYtuJfzt9WyVSHvutxMAJf7FJUnM7/oQ0dG0giZFmA7mn7S\n5u046uwBHjxIVkkJx0w3AJ6IDsBz4W9m6XJHMD4Q5QsDyZpCAGzFlH5hxIrff4Ia\nC1nEWTJ3s7xgaVY5/bQGeyzWZDbZvUjthB9+pSKPKrhC9IK31FOQeE4tGv2Bb0TX\nOwF0lkLgAOIua+rF7nKsu7/+6qqo+Nz2snmKtmcCAwEAAaNCMEAwHQYDVR0OBBYE\nFJ3AZ6YMItkm9UWrpmVSESfYRaxjMA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/\nBAQDAgEGMA0GCSqGSIb3DQEBDAUAA4ICAQCzV00QYk465KzquByvMiPIs0laUZx2\nKI15qldGF9X1Uva3ROgIRL8YhNILgM3FEv0AVQVhh0HctSSePMTYyPtwni94loMg\nNt58D2kTiKV1NpgIpsbfrM7jWNa3Pt668+s0QNiigfV4Py/VpfzZotReBA4Xrf5B\n8OWycvpEgjNC6C1Y91aMYj+6QrCcDFx+LmUmXFNPALJ4fqENmS2NuB2OosSw/WDQ\nMKSOyARiqcTtNd56l+0OOF6SL5Nwpamcb6d9Ex1+xghIsV5n61EIJenmJWtSKZGc\n0jlzCFfemQa0W50QBuHCAKi4HEoCChTQwUHK+4w1IX2COPKpVJEZNZOUbWo6xbLQ\nu4mGk+ibyQ86p3q4ofB4Rvr8Ny/lioTz3/4E2aFooC8k4gmVBtWVyuEklut89pMF\nu+1z6S3RdTnX5yTb2E5fQ4+e0BQ5v1VwSJlXMbSc7kqYA5YwH2AG7hsj/oFgIxpH\nYoWlzBk0gG+zrBrjn/B7SK3VAdlntqlyk+otZrWyuOQ9PLLvTIzq6we/qzWaVYa8\nGKa1qF60g2xraUDTn9zxw2lrueFtCfTxqlB2Cnp9ehehVZZCmTEJ3WARjQUwfuaO\nRtGdFNrHF+QFlozEJLUbzxQHskD4o55BhrwE0GuWyCqANP2/7waj3VjFhT0+j/6e\nKeC2uAloGRwYQw==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIB/jCCAYWgAwIBAgIIdJclisc/elQwCgYIKoZIzj0EAwMwRTELMAkGA1UEBhMC\nVVMxFDASBgNVBAoMC0FmZmlybVRydXN0MSAwHgYDVQQDDBdBZmZpcm1UcnVzdCBQ\ncmVtaXVtIEVDQzAeFw0xMDAxMjkxNDIwMjRaFw00MDEyMzExNDIwMjRaMEUxCzAJ\nBgNVBAYTAlVTMRQwEgYDVQQKDAtBZmZpcm1UcnVzdDEgMB4GA1UEAwwXQWZmaXJt\nVHJ1c3QgUHJlbWl1bSBFQ0MwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAAQNMF4bFZ0D\n0KF5Nbc6PJJ6yhUczWLznCZcBz3lVPqj1swS6vQUX+iOGasvLkjmrBhDeKzQN8O9\nss0s5kfiGuZjuD0uL3jET9v0D6RoTFVya5UdThhClXjMNzyR4ptlKymjQjBAMB0G\nA1UdDgQWBBSaryl6wBE1NSZRMADDav5A1a7WPDAPBgNVHRMBAf8EBTADAQH/MA4G\nA1UdDwEB/wQEAwIBBjAKBggqhkjOPQQDAwNnADBkAjAXCfOHiFBar8jAQr9HX/Vs\naobgxCd05DhT1wV/GzTjxi+zygk8N53X57hG8f2h4nECMEJZh0PUUd+60wkyWs6I\nflc9nF9Ca/UHLbXwgpP5WW+uZPpY5Yse42O+tYHNbwKMeQ==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIDoDCCAoigAwIBAgIBMTANBgkqhkiG9w0BAQUFADBDMQswCQYDVQQGEwJKUDEc\nMBoGA1UEChMTSmFwYW5lc2UgR292ZXJubWVudDEWMBQGA1UECxMNQXBwbGljYXRp\nb25DQTAeFw0wNzEyMTIxNTAwMDBaFw0xNzEyMTIxNTAwMDBaMEMxCzAJBgNVBAYT\nAkpQMRwwGgYDVQQKExNKYXBhbmVzZSBHb3Zlcm5tZW50MRYwFAYDVQQLEw1BcHBs\naWNhdGlvbkNBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAp23gdE6H\nj6UG3mii24aZS2QNcfAKBZuOquHMLtJqO8F6tJdhjYq+xpqcBrSGUeQ3DnR4fl+K\nf5Sk10cI/VBaVuRorChzoHvpfxiSQE8tnfWuREhzNgaeZCw7NCPbXCbkcXmP1G55\nIrmTwcrNwVbtiGrXoDkhBFcsovW8R0FPXjQilbUfKW1eSvNNcr5BViCH/OlQR9cw\nFO5cjFW6WY2H/CPek9AEjP3vbb3QesmlOmpyM8ZKDQUXKi17safY1vC+9D/qDiht\nQWEjdnjDuGWk81quzMKq2edY3rZ+nYVunyoKb58DKTCXKB28t89UKU5RMfkntigm\n/qJj5kEW8DOYRwIDAQABo4GeMIGbMB0GA1UdDgQWBBRUWssmP3HMlEYNllPqa0jQ\nk/5CdTAOBgNVHQ8BAf8EBAMCAQYwWQYDVR0RBFIwUKROMEwxCzAJBgNVBAYTAkpQ\nMRgwFgYDVQQKDA/ml6XmnKzlm73mlL/lupwxIzAhBgNVBAsMGuOCouODl+ODquOC\nseODvOOCt+ODp+ODs0NBMA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQEFBQAD\nggEBADlqRHZ3ODrso2dGD/mLBqj7apAxzn7s2tGJfHrrLgy9mTLnsCTWw//1sogJ\nhyzjVOGjprIIC8CFqMjSnHH2HZ9g/DgzE+Ge3Atf2hZQKXsvcJEPmbo0NI2VdMV+\neKlmXb3KIXdCEKxmJj3ekav9FfBv7WxfEPjzFvYDio+nEhEMy/0/ecGc/WLuo89U\nDNErXxc+4z6/wCs+CZv+iKZ+tJIX/COUgb1up8WMwusRRdv4QcmWdupwX3kSa+Sj\nB1oF7ydJzyGfikwJcGapJsErEU4z0g781mzSDjJkaP+tBXhfAx2o45CsJOAPQKdL\nrosot4LKGAfmt1t06SAZf7IbiVQ=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIDdzCCAl+gAwIBAgIIXDPLYixfszIwDQYJKoZIhvcNAQELBQAwPDEeMBwGA1UE\nAwwVQXRvcyBUcnVzdGVkUm9vdCAyMDExMQ0wCwYDVQQKDARBdG9zMQswCQYDVQQG\nEwJERTAeFw0xMTA3MDcxNDU4MzBaFw0zMDEyMzEyMzU5NTlaMDwxHjAcBgNVBAMM\nFUF0b3MgVHJ1c3RlZFJvb3QgMjAxMTENMAsGA1UECgwEQXRvczELMAkGA1UEBhMC\nREUwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCVhTuXbyo7LjvPpvMp\nNb7PGKw+qtn4TaA+Gke5vJrf8v7MPkfoepbCJI419KkM/IL9bcFyYie96mvr54rM\nVD6QUM+A1JX76LWC1BTFtqlVJVfbsVD2sGBkWXppzwO3bw2+yj5vdHLqqjAqc2K+\nSZFhyBH+DgMq92og3AIVDV4VavzjgsG1xZ1kCWyjWZgHJ8cblithdHFsQ/H3NYkQ\n4J7sVaE3IqKHBAUsR320HLliKWYoyrfhk/WklAOZuXCFteZI6o1Q/NnezG8HDt0L\ncp2AMBYHlT8oDv3FdU9T1nSatCQujgKRz3bFmx5VdJx4IbHwLfELn8LVlhgf8FQi\neowHAgMBAAGjfTB7MB0GA1UdDgQWBBSnpQaxLKYJYO7Rl+lwrrw7GWzbITAPBgNV\nHRMBAf8EBTADAQH/MB8GA1UdIwQYMBaAFKelBrEspglg7tGX6XCuvDsZbNshMBgG\nA1UdIAQRMA8wDQYLKwYBBAGwLQMEAQEwDgYDVR0PAQH/BAQDAgGGMA0GCSqGSIb3\nDQEBCwUAA4IBAQAmdzTblEiGKkGdLD4GkGDEjKwLVLgfuXvTBznk+j57sj1O7Z8j\nvZfza1zv7v1Apt+hk6EKhqzvINB5Ab149xnYJDE0BAGmuhWawyfc2E8PzBhj/5kP\nDpFrdRbhIfzYJsdHt6bPWHJxfrrhTZVHO8mvbaG0weyJ9rQPOLXiZNwlz6bb65pc\nmaHFCN795trV1lpFDMS3wrUU77QR/w4VtfX128a961qn8FYiqTxlVMYVqL2Gns2D\nlmh6cYGJ4Qvh6hEbaAjMaZ7snkGeRDImeuKHCnE96+RapNLbxc3G3mB/ufNPRJLv\nKrcYPqcZ2Qt9sTdBQrC6YB3y/gkRsPCHe6ed\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIGFDCCA/ygAwIBAgIIU+w77vuySF8wDQYJKoZIhvcNAQEFBQAwUTELMAkGA1UE\nBhMCRVMxQjBABgNVBAMMOUF1dG9yaWRhZCBkZSBDZXJ0aWZpY2FjaW9uIEZpcm1h\ncHJvZmVzaW9uYWwgQ0lGIEE2MjYzNDA2ODAeFw0wOTA1MjAwODM4MTVaFw0zMDEy\nMzEwODM4MTVaMFExCzAJBgNVBAYTAkVTMUIwQAYDVQQDDDlBdXRvcmlkYWQgZGUg\nQ2VydGlmaWNhY2lvbiBGaXJtYXByb2Zlc2lvbmFsIENJRiBBNjI2MzQwNjgwggIi\nMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDKlmuO6vj78aI14H9M2uDDUtd9\nthDIAl6zQyrET2qyyhxdKJp4ERppWVevtSBC5IsP5t9bpgOSL/UR5GLXMnE42QQM\ncas9UX4PB99jBVzpv5RvwSmCwLTaUbDBPLutN0pcyvFLNg4kq7/DhHf9qFD0sefG\nL9ItWY16Ck6WaVICqjaY7Pz6FIMMNx/Jkjd/14Et5cS54D40/mf0PmbR0/RAz15i\nNA9wBj4gGFrO93IbJWyTdBSTo3OxDqqHECNZXyAFGUftaI6SEspd/NYrspI8IM/h\nX68gvqB2f3bl7BqGYTM+53u0P6APjqK5am+5hyZvQWyIplD9amML9ZMWGxmPsu2b\nm8mQ9QEM3xk9Dz44I8kvjwzRAv4bVdZO0I08r0+k8/6vKtMFnXkIoctXMbScyJCy\nZ/QYFpM6/EfY0XiWMR+6KwxfXZmtY4laJCB22N/9q06mIqqdXuYnin1oKaPnirja\nEbsXLZmdEyRG98Xi2J+Of8ePdG1asuhy9azuJBCtLxTa/y2aRnFHvkLfuwHb9H/T\nKI8xWVvTyQKmtFLKbpf7Q8UIJm+K9Lv9nyiqDdVF8xM6HdjAeI9BZzwelGSuewvF\n6NkBiDkal4ZkQdU7hwxu+g/GvUgUvzlN1J5Bto+WHWOWk9mVBngxaJ43BjuAiUVh\nOSPHG0SjFeUc+JIwuwIDAQABo4HvMIHsMBIGA1UdEwEB/wQIMAYBAf8CAQEwDgYD\nVR0PAQH/BAQDAgEGMB0GA1UdDgQWBBRlzeurNR4APn7VdMActHNHDhpkLzCBpgYD\nVR0gBIGeMIGbMIGYBgRVHSAAMIGPMC8GCCsGAQUFBwIBFiNodHRwOi8vd3d3LmZp\ncm1hcHJvZmVzaW9uYWwuY29tL2NwczBcBggrBgEFBQcCAjBQHk4AUABhAHMAZQBv\nACAAZABlACAAbABhACAAQgBvAG4AYQBuAG8AdgBhACAANAA3ACAAQgBhAHIAYwBl\nAGwAbwBuAGEAIAAwADgAMAAxADcwDQYJKoZIhvcNAQEFBQADggIBABd9oPm03cXF\n661LJLWhAqvdpYhKsg9VSytXjDvlMd3+xDLx51tkljYyGOylMnfX40S2wBEqgLk9\nam58m9Ot/MPWo+ZkKXzR4Tgegiv/J2Wv+xYVxC5xhOW1//qkR71kMrv2JYSiJ0L1\nILDCExARzRAVukKQKtJE4ZYm6zFIEv0q2skGz3QeqUvVhyj5eTSSPi5E6PaPT481\nPyWzOdxjKpBrIF/EUhJOlywqrJ2X3kjyo2bbwtKDlaZmp54lD+kLM5FlClrD2VQS\n3a/DTg4fJl4N3LON7NWBcN7STyQF82xO9UxJZo3R/9ILJUFI/lGExkKvgATP0H5k\nSeTy36LssUzAKh3ntLFlosS88Zj0qnAHY7S42jtM+kAiMFsRpvAFDsYCA0irhpuF\n3dvd6qJ2gHN99ZwExEWN57kci57q13XRcrHedUTnQn3iV2t93Jm8PYMo6oCTjcVM\nZcFwgbg4/EMxsvYDNEeyrPsiBsse3RdHHF9mudMaotoRsaS8I8nkvof/uZS2+F0g\nStRf571oe2XyFR7SOqkt6dhrJKyXWERHrVkY8SFlcN7ONGCoQPHzPKTDKCOM/icz\nQ0CgFzzr6juwcqajuUpLXhZI9LK8yIySxZ2frHI2vDSANGupi5LAuBft7HZT9SQB\njLMi6Et8Vcad+qMUu2WFbm5PEn4KPJ2V\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIDdzCCAl+gAwIBAgIEAgAAuTANBgkqhkiG9w0BAQUFADBaMQswCQYDVQQGEwJJ\nRTESMBAGA1UEChMJQmFsdGltb3JlMRMwEQYDVQQLEwpDeWJlclRydXN0MSIwIAYD\nVQQDExlCYWx0aW1vcmUgQ3liZXJUcnVzdCBSb290MB4XDTAwMDUxMjE4NDYwMFoX\nDTI1MDUxMjIzNTkwMFowWjELMAkGA1UEBhMCSUUxEjAQBgNVBAoTCUJhbHRpbW9y\nZTETMBEGA1UECxMKQ3liZXJUcnVzdDEiMCAGA1UEAxMZQmFsdGltb3JlIEN5YmVy\nVHJ1c3QgUm9vdDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKMEuyKr\nmD1X6CZymrV51Cni4eiVgLGw41uOKymaZN+hXe2wCQVt2yguzmKiYv60iNoS6zjr\nIZ3AQSsBUnuId9Mcj8e6uYi1agnnc+gRQKfRzMpijS3ljwumUNKoUMMo6vWrJYeK\nmpYcqWe4PwzV9/lSEy/CG9VwcPCPwBLKBsua4dnKM3p31vjsufFoREJIE9LAwqSu\nXmD+tqYF/LTdB1kC1FkYmGP1pWPgkAx9XbIGevOF6uvUA65ehD5f/xXtabz5OTZy\ndc93Uk3zyZAsuT3lySNTPx8kmCFcB5kpvcY67Oduhjprl3RjM71oGDHweI12v/ye\njl0qhqdNkNwnGjkCAwEAAaNFMEMwHQYDVR0OBBYEFOWdWTCCR1jMrPoIVDaGezq1\nBE3wMBIGA1UdEwEB/wQIMAYBAf8CAQMwDgYDVR0PAQH/BAQDAgEGMA0GCSqGSIb3\nDQEBBQUAA4IBAQCFDF2O5G9RaEIFoN27TyclhAO992T9Ldcw46QQF+vaKSm2eT92\n9hkTI7gQCvlYpNRhcL0EYWoSihfVCr3FvDB81ukMJY2GQE/szKN+OMY3EU/t3Wgx\njkzSswF07r51XgdIGn9w/xZchMB5hbgF/X++ZRGjD8ACtPhSNzkE1akxehi/oCr0\nEpn3o0WC4zxe9Z2etciefC7IpJ5OCBRLbf1wbWsaY71k5h+3zvDyny67G7fyUIhz\nksLi4xaNmjICq44Y3ekQEe5+NauQrz4wlHrQMz2nZQ/1/I6eYs9HRCwBXbsdtTLS\nR9I4LtD+gdwyah617jzV/OeBHRnDJELqYzmp\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIDUzCCAjugAwIBAgIBATANBgkqhkiG9w0BAQUFADBLMQswCQYDVQQGEwJOTzEd\nMBsGA1UECgwUQnV5cGFzcyBBUy05ODMxNjMzMjcxHTAbBgNVBAMMFEJ1eXBhc3Mg\nQ2xhc3MgMiBDQSAxMB4XDTA2MTAxMzEwMjUwOVoXDTE2MTAxMzEwMjUwOVowSzEL\nMAkGA1UEBhMCTk8xHTAbBgNVBAoMFEJ1eXBhc3MgQVMtOTgzMTYzMzI3MR0wGwYD\nVQQDDBRCdXlwYXNzIENsYXNzIDIgQ0EgMTCCASIwDQYJKoZIhvcNAQEBBQADggEP\nADCCAQoCggEBAIs8B0XY9t/mx8q6jUPFR42wWsE425KEHK8T1A9vNkYgxC7McXA0\nojTTNy7Y3Tp3L8DrKehc0rWpkTSHIln+zNvnma+WwajHQN2lFYxuyHyXA8vmIPLX\nl18xoS830r7uvqmtqEyeIWZDO6i88wmjONVZJMHCR3axiFyCO7srpgTXjAePzdVB\nHfCuuCkslFJgNJQ72uA40Z0zPhX0kzLFANq1KWYOOngPIVJfAuWSeyXTkh4vFZ2B\n5J2O6O+JzhRMVB0cgRJNcKi+EAUXfh/RuFdV7c27UsKwHnjCTTZoy1YmwVLBvXb3\nWNVyfh9EdrsAiR0WnVE1703CVu9r4Iw7DekCAwEAAaNCMEAwDwYDVR0TAQH/BAUw\nAwEB/zAdBgNVHQ4EFgQUP42aWYv8e3uco684sDntkHGA1sgwDgYDVR0PAQH/BAQD\nAgEGMA0GCSqGSIb3DQEBBQUAA4IBAQAVGn4TirnoB6NLJzKyQJHyIdFkhb5jatLP\ngcIV1Xp+DCmsNx4cfHZSldq1fyOhKXdlyTKdqC5Wq2B2zha0jX94wNWZUYN/Xtm+\nDKhQ7SLHrQVMdvvt7h5HZPb3J31cKA9FxVxiXqaakZG3Uxcu3K1gnZZkOb1naLKu\nBctN518fV4bVIJwo+28TOPX2EZL2fZleHwzoq0QkKXJAPTZSr4xYkHPB7GEseaHs\nh7U/2k3ZIQAw3pDaDtMaSKk+hQsUi4y8QZ5q9w5wwDX3OaJdZtB7WZ+oRxKaJyOk\nLY4ng5IgodcVf/EuGO70SH8vf/GhGLWhC5SgYiAynB321O+/TIho\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIFWTCCA0GgAwIBAgIBAjANBgkqhkiG9w0BAQsFADBOMQswCQYDVQQGEwJOTzEd\nMBsGA1UECgwUQnV5cGFzcyBBUy05ODMxNjMzMjcxIDAeBgNVBAMMF0J1eXBhc3Mg\nQ2xhc3MgMiBSb290IENBMB4XDTEwMTAyNjA4MzgwM1oXDTQwMTAyNjA4MzgwM1ow\nTjELMAkGA1UEBhMCTk8xHTAbBgNVBAoMFEJ1eXBhc3MgQVMtOTgzMTYzMzI3MSAw\nHgYDVQQDDBdCdXlwYXNzIENsYXNzIDIgUm9vdCBDQTCCAiIwDQYJKoZIhvcNAQEB\nBQADggIPADCCAgoCggIBANfHXvfBB9R3+0Mh9PT1aeTuMgHbo4Yf5FkNuud1g1Lr\n6hxhFUi7HQfKjK6w3Jad6sNgkoaCKHOcVgb/S2TwDCo3SbXlzwx87vFKu3MwZfPV\nL4O2fuPn9Z6rYPnT8Z2SdIrkHJasW4DptfQxh6NR/Md+oW+OU3fUl8FVM5I+GC91\n1K2GScuVr1QGbNgGE41b/+EmGVnAJLqBcXmQRFBoJJRfuLMR8SlBYaNByyM21cHx\nMlAQTn/0hpPshNOOvEu/XAFOBz3cFIqUCqTqc/sLUegTBxj6DvEr0VQVfTzh97QZ\nQmdiXnfgolXsttlpF9U6r0TtSsWe5HonfOV116rLJeffawrbD02TTqigzXsu8lkB\narcNuAeBfos4GzjmCleZPe4h6KP1DBbdi+w0jpwqHAAVF41og9JwnxgIzRFo1clr\nUs3ERo/ctfPYV3Me6ZQ5BL/T3jjetFPsaRyifsSP5BtwrfKi+fv3FmRmaZ9JUaLi\nFRhnBkp/1Wy1TbMz4GHrXb7pmA8y1x1LPC5aAVKRCfLf6o3YBkBjqhHk/sM3nhRS\nP/TizPJhk9H9Z2vXUq6/aKtAQ6BXNVN48FP4YUIHZMbXb5tMOA1jrGKvNouicwoN\n9SG9dKpN6nIDSdvHXx1iY8f93ZHsM+71bbRuMGjeyNYmsHVee7QHIJihdjK4TWxP\nAgMBAAGjQjBAMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFMmAd+BikoL1Rpzz\nuvdMw964o605MA4GA1UdDwEB/wQEAwIBBjANBgkqhkiG9w0BAQsFAAOCAgEAU18h\n9bqwOlI5LJKwbADJ784g7wbylp7ppHR/ehb8t/W2+xUbP6umwHJdELFx7rxP462s\nA20ucS6vxOOto70MEae0/0qyexAQH6dXQbLArvQsWdZHEIjzIVEpMMpghq9Gqx3t\nOluwlN5E40EIosHsHdb9T7bWR9AUC8rmyrV7d35BH16Dx7aMOZawP5aBQW9gkOLo\n+fsicdl9sz1Gv7SEr5AcD48Saq/v7h56rgJKihcrdv6sVIkkLE8/trKnToyokZf7\nKcZ7XC25y2a2t6hbElGFtQl+Ynhw/qlqYLYdDnkM/crqJIByw5c/8nerQyIKx+u2\nDISCLIBrQYoIwOula9+ZEsuK1V6ADJHgJgg2SMX6OBE1/yWDLfJ6v9r9jv6ly0Us\nH8SIU653DtmadsWOLB2jutXsMq7Aqqz30XpN69QH4kj3Io6wpJ9qzo6ysmD0oyLQ\nI+uUWnpp3Q+/QFesa1lQ2aOZ4W7+jQF5JyMV3pKdewlNWudLSDBaGOYKbeaP4NK7\n5t98biGCwWg5TbSYWGZizEqQXsP6JwSxeRV0mcy+rSDeJmAc61ZRpqPq5KM/p/9h\n3PFaTWwyI0PurKju7koSCTxdccK+efrCh2gdC/1cacwG0Jp9VJkqyTkaGa9LKkPz\nY11aWOIv4x3kqdbQCtCev9eBCfHJxyYNrJgWVqA=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIFWTCCA0GgAwIBAgIBAjANBgkqhkiG9w0BAQsFADBOMQswCQYDVQQGEwJOTzEd\nMBsGA1UECgwUQnV5cGFzcyBBUy05ODMxNjMzMjcxIDAeBgNVBAMMF0J1eXBhc3Mg\nQ2xhc3MgMyBSb290IENBMB4XDTEwMTAyNjA4Mjg1OFoXDTQwMTAyNjA4Mjg1OFow\nTjELMAkGA1UEBhMCTk8xHTAbBgNVBAoMFEJ1eXBhc3MgQVMtOTgzMTYzMzI3MSAw\nHgYDVQQDDBdCdXlwYXNzIENsYXNzIDMgUm9vdCBDQTCCAiIwDQYJKoZIhvcNAQEB\nBQADggIPADCCAgoCggIBAKXaCpUWUOOV8l6ddjEGMnqb8RB2uACatVI2zSRHsJ8Y\nZLya9vrVediQYkwiL944PdbgqOkcLNt4EemOaFEVcsfzM4fkoF0LXOBXByow9c3E\nN3coTRiR5r/VUv1xLXA+58bEiuPwKAv0dpihi4dVsjoT/Lc+JzeOIuOoTyrvYLs9\ntznDDgFHmV0ST9tD+leh7fmdvhFHJlsTmKtdFoqwNxxXnUX/iJY2v7vKB3tvh2PX\n0DJq1l1sDPGzbjniazEuOQAnFN44wOwZZoYS6J1yFhNkUsepNxz9gjDthBgd9K5c\n/3ATAOux9TN6S9ZV+AWNS2mw9bMoNlwUxFFzTWsL8TQH2xc519woe2v1n/MuwU8X\nKhDzzMro6/1rqy6any2CbgTUUgGTLT2G/H783+9CHaZr77kgxve9oKeV/afmiSTY\nzIw0bOIjL9kSGiG5VZFvC5F5GQytQIgLcOJ60g7YaEi7ghM5EFjp2CoHxhLbWNvS\nO1UQRwUVZ2J+GGOmRj8JDlQyXr8NYnon74Do29lLBlo3WiXQCBJ31G8JUJc9yB3D\n34xFMFbG02SrZvPAXpacw8Tvw3xrizp5f7NJzz3iiZ+gMEuFuZyUJHmPfWupRWgP\nK9Dx2hzLabjKSWJtyNBjYt1gD1iqj6G8BaVmos8bdrKEZLFMOVLAMLrwjEsCsLa3\nAgMBAAGjQjBAMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFEe4zf/lb+74suwv\nTg75JbCOPGvDMA4GA1UdDwEB/wQEAwIBBjANBgkqhkiG9w0BAQsFAAOCAgEAACAj\nQTUEkMJAYmDv4jVM1z+s4jSQuKFvdvoWFqRINyzpkMLyPPgKn9iB5btb2iUspKdV\ncSQy9sgL8rxq+JOssgfCX5/bzMiKqr5qb+FJEMwx14C7u8jYog5kV+qi9cKpMRXS\nIGrs/CIBKM+GuIAeqcwRpTzyFrNHnfzSgCHEy9BHcEGhyoMZCCxt8l13nIoUE9Q2\nHJLw5QY33KbmkJs4j1xrG0aGQ0JfPgEHU1RdZX33inOhmlRaHylDFCfChQ+1iHsa\nO5S3HWCntZznKWlXWpuTekMwGwPXYshApqr8ZORK15FTAaggiG6cX0S5y2CBNOxv\n033aSF/rtJC8LakcC6wc1aJoIIAE1vyxjy+7SjENSoYc6+I2KSb12tjE8nVhz36u\ndmNKekBlk4f4HoCMhuWG1o8O/FMsYOgWYRqiPkN7zTlgVGr18okmAWiDSKIz6MkE\nkbIRNBE+6tBDGR8Dk5AM/1E9V/RBbuHLoL7ryWPNbczk+DaqaJ3tvV2XcEQNtg41\n3OEMXbugUZTLfhbrES+jkkXITHHZvMmZUldGL1DPvTVp9D0VzgalLA8+9oG6lLvD\nu79leNKGef9JOxqDDPDeeOzI8k1MGt6CKfjBWtrt7uYnXuhF0J0cUahoq0Tj0Itq\n4/g7u9xN12TyUb7mqqta6THuBrxzvxNiCp/HuZc=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIFaTCCA1GgAwIBAgIJAMMDmu5QkG4oMA0GCSqGSIb3DQEBBQUAMFIxCzAJBgNV\nBAYTAlNLMRMwEQYDVQQHEwpCcmF0aXNsYXZhMRMwEQYDVQQKEwpEaXNpZyBhLnMu\nMRkwFwYDVQQDExBDQSBEaXNpZyBSb290IFIxMB4XDTEyMDcxOTA5MDY1NloXDTQy\nMDcxOTA5MDY1NlowUjELMAkGA1UEBhMCU0sxEzARBgNVBAcTCkJyYXRpc2xhdmEx\nEzARBgNVBAoTCkRpc2lnIGEucy4xGTAXBgNVBAMTEENBIERpc2lnIFJvb3QgUjEw\nggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCqw3j33Jijp1pedxiy3QRk\nD2P9m5YJgNXoqqXinCaUOuiZc4yd39ffg/N4T0Dhf9Kn0uXKE5Pn7cZ3Xza1lK/o\nOI7bm+V8u8yN63Vz4STN5qctGS7Y1oprFOsIYgrY3LMATcMjfF9DCCMyEtztDK3A\nfQ+lekLZWnDZv6fXARz2m6uOt0qGeKAeVjGu74IKgEH3G8muqzIm1Cxr7X1r5OJe\nIgpFy4QxTaz+29FHuvlglzmxZcfe+5nkCiKxLU3lSCZpq+Kq8/v8kiky6bM+TR8n\noc2OuRf7JT7JbvN32g0S9l3HuzYQ1VTW8+DiR0jm3hTaYVKvJrT1cU/J19IG32PK\n/yHoWQbgCNWEFVP3Q+V8xaCJmGtzxmjOZd69fwX3se72V6FglcXM6pM6vpmumwKj\nrckWtc7dXpl4fho5frLABaTAgqWjR56M6ly2vGfb5ipN0gTco65F97yLnByn1tUD\n3AjLLhbKXEAz6GfDLuemROoRRRw1ZS0eRWEkG4IupZ0zXWX4Qfkuy5Q/H6MMMSRE\n7cderVC6xkGbrPAXZcD4XW9boAo0PO7X6oifmPmvTiT6l7Jkdtqr9O3jw2Dv1fkC\nyC2fg69naQanMVXVz0tv/wQFx1isXxYb5dKj6zHbHzMVTdDypVP1y+E9Tmgt2BLd\nqvLmTZtJ5cUoobqwWsagtQIDAQABo0IwQDAPBgNVHRMBAf8EBTADAQH/MA4GA1Ud\nDwEB/wQEAwIBBjAdBgNVHQ4EFgQUiQq0OJMa5qvum5EY+fU8PjXQ04IwDQYJKoZI\nhvcNAQEFBQADggIBADKL9p1Kyb4U5YysOMo6CdQbzoaz3evUuii+Eq5FLAR0rBNR\nxVgYZk2C2tXck8An4b58n1KeElb21Zyp9HWc+jcSjxyT7Ff+Bw+r1RL3D65hXlaA\nSfX8MPWbTx9BLxyE04nH4toCdu0Jz2zBuByDHBb6lM19oMgY0sidbvW9adRtPTXo\nHqJPYNcHKfyyo6SdbhWSVhlMCrDpfNIZTUJG7L399ldb3Zh+pE3McgODWF3vkzpB\nemOqfDqo9ayk0d2iLbYq/J8BjuIQscTK5GfbVSUZP/3oNn6z4eGBrxEWi1CXYBmC\nAMBrTXO40RMHPuq2MU/wQppt4hF05ZSsjYSVPCGvxdpHyN85YmLLW1AL14FABZyb\n7bq2ix4Eb5YgOe2kfSnbSM6C3NQCjR0EMVrHS/BsYVLXtFHCgWzN4funodKSds+x\nDzdYpPJScWc/DIh4gInByLUfkmO+p3qKViwaqKactV2zY9ATIKHrkWzQjX2v3wvk\nF7mGnjixlAxYjOBVqjtjbZqJYLhkKpLGN/R+Q0O3c+gB53+XD9fyexn9GtePyfqF\na3qdnom2piiZk4hA9z7NUaPK6u95RyG1/jLix8NRb76AdPCkwzryT+lf3xkK8jsT\nQ6wxpLPn6/wY1gGp8yqPNg7rtLG8t0zJa7+h89n07eLw4+1knj0vllJPgFOL\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIFaTCCA1GgAwIBAgIJAJK4iNuwisFjMA0GCSqGSIb3DQEBCwUAMFIxCzAJBgNV\nBAYTAlNLMRMwEQYDVQQHEwpCcmF0aXNsYXZhMRMwEQYDVQQKEwpEaXNpZyBhLnMu\nMRkwFwYDVQQDExBDQSBEaXNpZyBSb290IFIyMB4XDTEyMDcxOTA5MTUzMFoXDTQy\nMDcxOTA5MTUzMFowUjELMAkGA1UEBhMCU0sxEzARBgNVBAcTCkJyYXRpc2xhdmEx\nEzARBgNVBAoTCkRpc2lnIGEucy4xGTAXBgNVBAMTEENBIERpc2lnIFJvb3QgUjIw\nggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCio8QACdaFXS1tFPbCw3Oe\nNcJxVX6B+6tGUODBfEl45qt5WDza/3wcn9iXAng+a0EE6UG9vgMsRfYvZNSrXaNH\nPWSb6WiaxswbP7q+sos0Ai6YVRn8jG+qX9pMzk0DIaPY0jSTVpbLTAwAFjxfGs3I\nx2ymrdMxp7zo5eFm1tL7A7RBZckQrg4FY8aAamkw/dLukO8NJ9+flXP04SXabBbe\nQTg06ov80egEFGEtQX6sx3dOy1FU+16SGBsEWmjGycT6txOgmLcRK7fWV8x8nhfR\nyyX+hk4kLlYMeE2eARKmK6cBZW58Yh2EhN/qwGu1pSqVg8NTEQxzHQuyRpDRQjrO\nQG6Vrf/GlK1ul4SOfW+eioANSW1z4nuSHsPzwfPrLgVv2RvPN3YEyLRa5Beny912\nH9AZdugsBbPWnDTYltxhh5EF5EQIM8HauQhl1K6yNg3ruji6DOWbnuuNZt2Zz9aJ\nQfYEkoopKW1rOhzndX0CcQ7zwOe9yxndnWCywmZgtrEE7snmhrmaZkCo5xHtgUUD\ni/ZnWejBBhG93c+AAk9lQHhcR1DIm+YfgXvkRKhbhZri3lrVx/k6RGZL5DJUfORs\nnLMOPReisjQS1n6yqEm70XooQL6iFh/f5DcfEXP7kAplQ6INfPgGAVUzfbANuPT1\nrqVCV3w2EYx7XsQDnYx5nQIDAQABo0IwQDAPBgNVHRMBAf8EBTADAQH/MA4GA1Ud\nDwEB/wQEAwIBBjAdBgNVHQ4EFgQUtZn4r7CU9eMg1gqtzk5WpC5uQu0wDQYJKoZI\nhvcNAQELBQADggIBACYGXnDnZTPIgm7ZnBc6G3pmsgH2eDtpXi/q/075KMOYKmFM\ntCQSin1tERT3nLXK5ryeJ45MGcipvXrA1zYObYVybqjGom32+nNjf7xueQgcnYqf\nGopTpti72TVVsRHFqQOzVju5hJMiXn7B9hJSi+osZ7z+Nkz1uM/Rs0mSO9MpDpkb\nlvdhuDvEK7Z4bLQjb/D907JedR+Zlais9trhxTF7+9FGs9K8Z7RiVLoJ92Owk6Ka\n+elSLotgEqv89WBW7xBci8QaQtyDW2QOy7W81k/BfDxujRNt+3vrMNDcTa/F1bal\nTFtxyegxvug4BkihGuLq0t4SOVga/4AOgnXmt8kHbA7v/zjxmHHEt38OFdAlab0i\nnSvtBfZGR6ztwPDUO+Ls7pZbkBNOHlY667DvlruWIxG68kOGdGSVyCh13x01utI3\ngzhTODY7z2zp+WsO0PsE6E9312UBeIYMej4hYvF/Y3EMyZ9E26gnonW+boE+18Dr\nG5gPcFw0sorMwIUY6256s/daoQe/qUKS82Ail+QUoQebTnbAjn39pCXHR+3/H3Os\nzMOl6W8KjptlwlCFtaOgUxLMVYdh84GuEEZhvUQhuMI9dM9+JDX6HAcOmz0iyu8x\nL4ysEr3vQCj8KWefshNPZiTEUxnpHikV7+ZtsH8tZ/3zbBt1RqPlShfppNcL\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIICCTCCAY+gAwIBAgIQaEpYcIBr8I8C+vbe6LCQkDAKBggqhkjOPQQDAzBGMQsw\nCQYDVQQGEwJDTjEaMBgGA1UEChMRV29TaWduIENBIExpbWl0ZWQxGzAZBgNVBAMT\nEkNBIFdvU2lnbiBFQ0MgUm9vdDAeFw0xNDExMDgwMDU4NThaFw00NDExMDgwMDU4\nNThaMEYxCzAJBgNVBAYTAkNOMRowGAYDVQQKExFXb1NpZ24gQ0EgTGltaXRlZDEb\nMBkGA1UEAxMSQ0EgV29TaWduIEVDQyBSb290MHYwEAYHKoZIzj0CAQYFK4EEACID\nYgAE4f2OuEMkq5Z7hcK6C62N4DrjJLnSsb6IOsq/Srj57ywvr1FQPEd1bPiUt5v8\nKB7FVMxjnRZLU8HnIKvNrCXSf4/CwVqCXjCLelTOA7WRf6qU0NGKSMyCBSah1VES\n1ns2o0IwQDAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4E\nFgQUqv3VWqP2h4syhf3RMluARZPzA7gwCgYIKoZIzj0EAwMDaAAwZQIxAOSkhLCB\n1T2wdKyUpOgOPQB0TKGXa/kNUTyh2Tv0Daupn75OcsqF1NnstTJFGG+rrQIwfcf3\naWMvoeGY7xMQ0Xk/0f7qO3/eVvSQsRUR2LIiFdAvwyYua/GRspBl9JrmkO5K\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIFjTCCA3WgAwIBAgIEGErM1jANBgkqhkiG9w0BAQsFADBWMQswCQYDVQQGEwJD\nTjEwMC4GA1UECgwnQ2hpbmEgRmluYW5jaWFsIENlcnRpZmljYXRpb24gQXV0aG9y\naXR5MRUwEwYDVQQDDAxDRkNBIEVWIFJPT1QwHhcNMTIwODA4MDMwNzAxWhcNMjkx\nMjMxMDMwNzAxWjBWMQswCQYDVQQGEwJDTjEwMC4GA1UECgwnQ2hpbmEgRmluYW5j\naWFsIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MRUwEwYDVQQDDAxDRkNBIEVWIFJP\nT1QwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDXXWvNED8fBVnVBU03\nsQ7smCuOFR36k0sXgiFxEFLXUWRwFsJVaU2OFW2fvwwbwuCjZ9YMrM8irq93VCpL\nTIpTUnrD7i7es3ElweldPe6hL6P3KjzJIx1qqx2hp/Hz7KDVRM8Vz3IvHWOX6Jn5\n/ZOkVIBMUtRSqy5J35DNuF++P96hyk0g1CXohClTt7GIH//62pCfCqktQT+x8Rgp\n7hZZLDRJGqgG16iI0gNyejLi6mhNbiyWZXvKWfry4t3uMCz7zEasxGPrb382KzRz\nEpR/38wmnvFyXVBlWY9ps4deMm/DGIq1lY+wejfeWkU7xzbh72fROdOXW3NiGUgt\nhxwG+3SYIElz8AXSG7Ggo7cbcNOIabla1jj0Ytwli3i/+Oh+uFzJlU9fpy25IGvP\na931DfSCt/SyZi4QKPaXWnuWFo8BGS1sbn85WAZkgwGDg8NNkt0yxoekN+kWzqot\naK8KgWU6cMGbrU1tVMoqLUuFG7OA5nBFDWteNfB/O7ic5ARwiRIlk9oKmSJgamNg\nTnYGmE69g60dWIolhdLHZR4tjsbftsbhf4oEIRUpdPA+nJCdDC7xij5aqgwJHsfV\nPKPtl8MeNPo4+QgO48BdK4PRVmrJtqhUUy54Mmc9gn900PvhtgVguXDbjgv5E1hv\ncWAQUhC5wUEJ73IfZzF4/5YFjQIDAQABo2MwYTAfBgNVHSMEGDAWgBTj/i39KNAL\ntbq2osS/BqoFjJP7LzAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIBBjAd\nBgNVHQ4EFgQU4/4t/SjQC7W6tqLEvwaqBYyT+y8wDQYJKoZIhvcNAQELBQADggIB\nACXGumvrh8vegjmWPfBEp2uEcwPenStPuiB/vHiyz5ewG5zz13ku9Ui20vsXiObT\nej/tUxPQ4i9qecsAIyjmHjdXNYmEwnZPNDatZ8POQQaIxffu2Bq41gt/UP+TqhdL\njOztUmCypAbqTuv0axn96/Ua4CUqmtzHQTb3yHQFhDmVOdYLO6Qn+gjYXB74BGBS\nESgoA//vU2YApUo0FmZ8/Qmkrp5nGm9BC2sGE5uPhnEFtC+NiWYzKXZUmhH4J/qy\nP5Hgzg0b8zAarb8iXRvTvyUFTeGSGn+ZnzxEk8rUQElsgIfXBDrDMlI1Dlb4pd19\nxIsNER9Tyx6yF7Zod1rg1MvIB671Oi6ON7fQAUtDKXeMOZePglr4UeWJoBjnaH9d\nCi77o0cOPaYjesYBx4/IXr9tgFa+iiS6M+qf4TIRnvHST4D2G0CvOJ4RUHlzEhLN\n5mydLIhyPDCBBpEi6lmt2hkuIsKNuYyH4Ga8cyNfIWRjgEj1oDwYPZTISEEdQLpe\n/v5WOaHIz16eGWRGENoXkbcFgKyLmZJ956LYBws2J+dIeWCKw9cTXPhyQN9Ky8+Z\nAAoACxGV2lZFA4gKn2fQ1XmxqI1AbQ3CekD6819kR5LLU7m7Wc5P/dAVUwHY3+vZ\n5nbv0CO7O6l5s9UCKc2Jo5YPSjXnTkLAdc0Hz+Ys63su\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIDVTCCAj2gAwIBAgIESTMAATANBgkqhkiG9w0BAQUFADAyMQswCQYDVQQGEwJD\nTjEOMAwGA1UEChMFQ05OSUMxEzARBgNVBAMTCkNOTklDIFJPT1QwHhcNMDcwNDE2\nMDcwOTE0WhcNMjcwNDE2MDcwOTE0WjAyMQswCQYDVQQGEwJDTjEOMAwGA1UEChMF\nQ05OSUMxEzARBgNVBAMTCkNOTklDIFJPT1QwggEiMA0GCSqGSIb3DQEBAQUAA4IB\nDwAwggEKAoIBAQDTNfc/c3et6FtzF8LRb+1VvG7q6KR5smzDo+/hn7E7SIX1mlwh\nIhAsxYLO2uOabjfhhyzcuQxauohV3/2q2x8x6gHx3zkBwRP9SFIhxFXf2tizVHa6\ndLG3fdfA6PZZxU3Iva0fFNrfWEQlMhkqx35+jq44sDB7R3IJMfAw28Mbdim7aXZO\nV/kbZKKTVrdvmW7bCgScEeOAH8tjlBAKqeFkgjH5jCftppkA9nCTGPihNIaj3XrC\nGHn2emU1z5DrvTOTn1OrczvmmzQgLx3vqR1jGqCA2wMv+SYahtKNu6m+UjqHZ0gN\nv7Sg2Ca+I19zN38m5pIEo3/PIKe38zrKy5nLAgMBAAGjczBxMBEGCWCGSAGG+EIB\nAQQEAwIABzAfBgNVHSMEGDAWgBRl8jGtKvf33VKWCscCwQ7vptU7ETAPBgNVHRMB\nAf8EBTADAQH/MAsGA1UdDwQEAwIB/jAdBgNVHQ4EFgQUZfIxrSr3991SlgrHAsEO\n76bVOxEwDQYJKoZIhvcNAQEFBQADggEBAEs17szkrr/Dbq2flTtLP1se31cpolnK\nOOK5Gv+e5m4y3R6u6jW39ZORTtpC4cMXYFDy0VwmuYK36m3knITnA3kXr5g9lNvH\nugDnuL8BV8F3RTIMO/G0HAiw/VGgod2aHRM2mm23xzy54cXZF/qD1T0VoDy7Hgvi\nyJA/qIYM/PmLXoXLT1tLYhFHxUV8BS9BsZ4QaRuZluBVeftOhpm4lNqGOGqTo+fL\nbuXf6iFViZx9fX+Y9QCJ7uOEwFyWtcVG6kbghVW2G8kS1sHNzYDzAgE8yGnLRUhj\n2JTQ7IUOO04RZfSCjKY9ri4ilAnIXOo8gV0WKgOXFlUJ24pBgp5mmxE=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIEHTCCAwWgAwIBAgIQToEtioJl4AsC7j41AkblPTANBgkqhkiG9w0BAQUFADCB\ngTELMAkGA1UEBhMCR0IxGzAZBgNVBAgTEkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4G\nA1UEBxMHU2FsZm9yZDEaMBgGA1UEChMRQ09NT0RPIENBIExpbWl0ZWQxJzAlBgNV\nBAMTHkNPTU9ETyBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTAeFw0wNjEyMDEwMDAw\nMDBaFw0yOTEyMzEyMzU5NTlaMIGBMQswCQYDVQQGEwJHQjEbMBkGA1UECBMSR3Jl\nYXRlciBNYW5jaGVzdGVyMRAwDgYDVQQHEwdTYWxmb3JkMRowGAYDVQQKExFDT01P\nRE8gQ0EgTGltaXRlZDEnMCUGA1UEAxMeQ09NT0RPIENlcnRpZmljYXRpb24gQXV0\naG9yaXR5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0ECLi3LjkRv3\nUcEbVASY06m/weaKXTuH+7uIzg3jLz8GlvCiKVCZrts7oVewdFFxze1CkU1B/qnI\n2GqGd0S7WWaXUF601CxwRM/aN5VCaTwwxHGzUvAhTaHYujl8HJ6jJJ3ygxaYqhZ8\nQ5sVW7euNJH+1GImGEaaP+vB+fGQV+useg2L23IwambV4EajcNxo2f8ESIl33rXp\n+2dtQem8Ob0y2WIC8bGoPW43nOIv4tOiJovGuFVDiOEjPqXSJDlqR6sA1KGzqSX+\nDT+nHbrTUcELpNqsOO9VUCQFZUaTNE8tja3G1CEZ0o7KBWFxB3NH5YoZEr0ETc5O\nnKVIrLsm9wIDAQABo4GOMIGLMB0GA1UdDgQWBBQLWOWLxkwVN6RAqTCpIb5HNlpW\n/zAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB/zBJBgNVHR8EQjBAMD6g\nPKA6hjhodHRwOi8vY3JsLmNvbW9kb2NhLmNvbS9DT01PRE9DZXJ0aWZpY2F0aW9u\nQXV0aG9yaXR5LmNybDANBgkqhkiG9w0BAQUFAAOCAQEAPpiem/Yb6dc5t3iuHXIY\nSdOH5EOC6z/JqvWote9VfCFSZfnVDeFs9D6Mk3ORLgLETgdxb8CPOGEIqB6BCsAv\nIC9Bi5HcSEW88cbeunZrM8gALTFGTO3nnc+IlP8zwFboJIYmuNg4ON8qa90SzMc/\nRxdMosIGlgnW2/4/PEZB31jiVg88O8EckzXZOFKs7sjsLjBOlDW0JB9LeGna8gI4\nzJVSk/BwJVmcIGfE7vmLV2H0knZ9P4SNVbfo5azV8fUZVqZa+5Acr5Pr5RzUZ5dd\nBA6+C4OmF4O5MBKgxTMVBbkN+8cFduPYSo38NBejxiEovjBFMR7HeL5YYTisO+IB\nZQ==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIICiTCCAg+gAwIBAgIQH0evqmIAcFBUTAGem2OZKjAKBggqhkjOPQQDAzCBhTEL\nMAkGA1UEBhMCR0IxGzAZBgNVBAgTEkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4GA1UE\nBxMHU2FsZm9yZDEaMBgGA1UEChMRQ09NT0RPIENBIExpbWl0ZWQxKzApBgNVBAMT\nIkNPTU9ETyBFQ0MgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMDgwMzA2MDAw\nMDAwWhcNMzgwMTE4MjM1OTU5WjCBhTELMAkGA1UEBhMCR0IxGzAZBgNVBAgTEkdy\nZWF0ZXIgTWFuY2hlc3RlcjEQMA4GA1UEBxMHU2FsZm9yZDEaMBgGA1UEChMRQ09N\nT0RPIENBIExpbWl0ZWQxKzApBgNVBAMTIkNPTU9ETyBFQ0MgQ2VydGlmaWNhdGlv\nbiBBdXRob3JpdHkwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAAQDR3svdcmCFYX7deSR\nFtSrYpn1PlILBs5BAH+X4QokPB0BBO490o0JlwzgdeT6+3eKKvUDYEs2ixYjFq0J\ncfRK9ChQtP6IHG4/bC8vCVlbpVsLM5niwz2J+Wos77LTBumjQjBAMB0GA1UdDgQW\nBBR1cacZSBm8nZ3qQUfflMRId5nTeTAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/\nBAUwAwEB/zAKBggqhkjOPQQDAwNoADBlAjEA7wNbeqy3eApyt4jf/7VGFAkK+qDm\nfQjGGoe9GKhzvSbKYAydzpmfz1wPMOG+FDHqAjAU9JM8SaczepBGR7NjfRObTrdv\nGDeAU/7dIOA1mjbRxwG55tzd8/8dLDoWV9mSOdY=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIF2DCCA8CgAwIBAgIQTKr5yttjb+Af907YWwOGnTANBgkqhkiG9w0BAQwFADCB\nhTELMAkGA1UEBhMCR0IxGzAZBgNVBAgTEkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4G\nA1UEBxMHU2FsZm9yZDEaMBgGA1UEChMRQ09NT0RPIENBIExpbWl0ZWQxKzApBgNV\nBAMTIkNPTU9ETyBSU0EgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMTAwMTE5\nMDAwMDAwWhcNMzgwMTE4MjM1OTU5WjCBhTELMAkGA1UEBhMCR0IxGzAZBgNVBAgT\nEkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4GA1UEBxMHU2FsZm9yZDEaMBgGA1UEChMR\nQ09NT0RPIENBIExpbWl0ZWQxKzApBgNVBAMTIkNPTU9ETyBSU0EgQ2VydGlmaWNh\ndGlvbiBBdXRob3JpdHkwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCR\n6FSS0gpWsawNJN3Fz0RndJkrN6N9I3AAcbxT38T6KhKPS38QVr2fcHK3YX/JSw8X\npz3jsARh7v8Rl8f0hj4K+j5c+ZPmNHrZFGvnnLOFoIJ6dq9xkNfs/Q36nGz637CC\n9BR++b7Epi9Pf5l/tfxnQ3K9DADWietrLNPtj5gcFKt+5eNu/Nio5JIk2kNrYrhV\n/erBvGy2i/MOjZrkm2xpmfh4SDBF1a3hDTxFYPwyllEnvGfDyi62a+pGx8cgoLEf\nZd5ICLqkTqnyg0Y3hOvozIFIQ2dOciqbXL1MGyiKXCJ7tKuY2e7gUYPDCUZObT6Z\n+pUX2nwzV0E8jVHtC7ZcryxjGt9XyD+86V3Em69FmeKjWiS0uqlWPc9vqv9JWL7w\nqP/0uK3pN/u6uPQLOvnoQ0IeidiEyxPx2bvhiWC4jChWrBQdnArncevPDt09qZah\nSL0896+1DSJMwBGB7FY79tOi4lu3sgQiUpWAk2nojkxl8ZEDLXB0AuqLZxUpaVIC\nu9ffUGpVRr+goyhhf3DQw6KqLCGqR84onAZFdr+CGCe01a60y1Dma/RMhnEw6abf\nFobg2P9A3fvQQoh/ozM6LlweQRGBY84YcWsr7KaKtzFcOmpH4MN5WdYgGq/yapiq\ncrxXStJLnbsQ/LBMQeXtHT1eKJ2czL+zUdqnR+WEUwIDAQABo0IwQDAdBgNVHQ4E\nFgQUu69+Aj36pvE8hI6t7jiY7NkyMtQwDgYDVR0PAQH/BAQDAgEGMA8GA1UdEwEB\n/wQFMAMBAf8wDQYJKoZIhvcNAQEMBQADggIBAArx1UaEt65Ru2yyTUEUAJNMnMvl\nwFTPoCWOAvn9sKIN9SCYPBMtrFaisNZ+EZLpLrqeLppysb0ZRGxhNaKatBYSaVqM\n4dc+pBroLwP0rmEdEBsqpIt6xf4FpuHA1sj+nq6PK7o9mfjYcwlYRm6mnPTXJ9OV\n2jeDchzTc+CiR5kDOF3VSXkAKRzH7JsgHAckaVd4sjn8OoSgtZx8jb8uk2Intzna\nFxiuvTwJaP+EmzzV1gsD41eeFPfR60/IvYcjt7ZJQ3mFXLrrkguhxuhoqEwWsRqZ\nCuhTLJK7oQkYdQxlqHvLI7cawiiFwxv/0Cti76R7CZGYZ4wUAc1oBmpjIXUDgIiK\nboHGhfKppC3n9KUkEEeDys30jXlYsQab5xoq2Z0B15R97QNKyvDb6KkBPvVWmcke\njkk9u+UJueBPSZI9FoJAzMxZxuY67RIuaTxslbH9qh17f4a+Hg4yRvv7E491f0yL\nS0Zj/gA0QHDBw7mh3aZw4gSzQbzpgJHqZJx64SIDqZxubw5lT2yHh17zbqD5daWb\nQOhTsiedSrnAdyGN/4fy3ryM7xfft0kL0fJuMAsaDk527RH89elWsn2/x20Kk4yl\n0MC2Hb46TpSi125sC8KKfPog88Tk5c0NqMuRkrF8hey1FGlmDoLnzc7ILaZRfyHB\nNVOFBkpdn627G190\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIEvTCCA6WgAwIBAgIBADANBgkqhkiG9w0BAQUFADB/MQswCQYDVQQGEwJFVTEn\nMCUGA1UEChMeQUMgQ2FtZXJmaXJtYSBTQSBDSUYgQTgyNzQzMjg3MSMwIQYDVQQL\nExpodHRwOi8vd3d3LmNoYW1iZXJzaWduLm9yZzEiMCAGA1UEAxMZQ2hhbWJlcnMg\nb2YgQ29tbWVyY2UgUm9vdDAeFw0wMzA5MzAxNjEzNDNaFw0zNzA5MzAxNjEzNDRa\nMH8xCzAJBgNVBAYTAkVVMScwJQYDVQQKEx5BQyBDYW1lcmZpcm1hIFNBIENJRiBB\nODI3NDMyODcxIzAhBgNVBAsTGmh0dHA6Ly93d3cuY2hhbWJlcnNpZ24ub3JnMSIw\nIAYDVQQDExlDaGFtYmVycyBvZiBDb21tZXJjZSBSb290MIIBIDANBgkqhkiG9w0B\nAQEFAAOCAQ0AMIIBCAKCAQEAtzZV5aVdGDDg2olUkfzIx1L4L1DZ77F1c2VHfRtb\nunXF/KGIJPov7coISjlUxFF6tdpg6jg8gbLL8bvZkSM/SAFwdakFKq0fcfPJVD0d\nBmpAPrMMhe5cG3nCYsS4No41XQEMIwRHNaqbYE6gZj3LJgqcQKH0XZi/caulAGgq\n7YN6D6IUtdQis4CwPAxaUWktWBiP7Zme8a7ileb2R6jWDA+wWFjbw2Y3npuRVDM3\n0pQcakjJyfKl2qUMI/cjDpwyVV5xnIQFUZot/eZOKjRa3spAN2cMVCFVd9oKDMyX\nroDclDZK9D7ONhMeU+SsTjoF7Nuucpw4i9A5O4kKPnf+dQIBA6OCAUQwggFAMBIG\nA1UdEwEB/wQIMAYBAf8CAQwwPAYDVR0fBDUwMzAxoC+gLYYraHR0cDovL2NybC5j\naGFtYmVyc2lnbi5vcmcvY2hhbWJlcnNyb290LmNybDAdBgNVHQ4EFgQU45T1sU3p\n26EpW1eLTXYGduHRooowDgYDVR0PAQH/BAQDAgEGMBEGCWCGSAGG+EIBAQQEAwIA\nBzAnBgNVHREEIDAegRxjaGFtYmVyc3Jvb3RAY2hhbWJlcnNpZ24ub3JnMCcGA1Ud\nEgQgMB6BHGNoYW1iZXJzcm9vdEBjaGFtYmVyc2lnbi5vcmcwWAYDVR0gBFEwTzBN\nBgsrBgEEAYGHLgoDATA+MDwGCCsGAQUFBwIBFjBodHRwOi8vY3BzLmNoYW1iZXJz\naWduLm9yZy9jcHMvY2hhbWJlcnNyb290Lmh0bWwwDQYJKoZIhvcNAQEFBQADggEB\nAAxBl8IahsAifJ/7kPMa0QOx7xP5IV8EnNrJpY0nbJaHkb5BkAFyk+cefV/2icZd\np0AJPaxJRUXcLo0waLIJuvvDL8y6C98/d3tGfToSJI6WjzwFCm/SlCgdbQzALogi\n1djPHRPH8EjX1wWnz8dHnjs8NMiAT9QUu/wNUPf6s+xCX6ndbcj0dc97wXImsQEc\nXCz9ek60AcUFV7nnPKoF2YjpB0ZBzu9Bga5Y34OirsrXdx/nADydb47kMgkdTXg0\neDQ8lJsm7U9xxhl6vSAiSFr+S30Dt+dYvsYyTnQeaN2oaFuzPu5ifdmA6Ap1erfu\ntGWaIZDgqtCYvDi1czyL+Nw=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIExTCCA62gAwIBAgIBADANBgkqhkiG9w0BAQUFADB9MQswCQYDVQQGEwJFVTEn\nMCUGA1UEChMeQUMgQ2FtZXJmaXJtYSBTQSBDSUYgQTgyNzQzMjg3MSMwIQYDVQQL\nExpodHRwOi8vd3d3LmNoYW1iZXJzaWduLm9yZzEgMB4GA1UEAxMXR2xvYmFsIENo\nYW1iZXJzaWduIFJvb3QwHhcNMDMwOTMwMTYxNDE4WhcNMzcwOTMwMTYxNDE4WjB9\nMQswCQYDVQQGEwJFVTEnMCUGA1UEChMeQUMgQ2FtZXJmaXJtYSBTQSBDSUYgQTgy\nNzQzMjg3MSMwIQYDVQQLExpodHRwOi8vd3d3LmNoYW1iZXJzaWduLm9yZzEgMB4G\nA1UEAxMXR2xvYmFsIENoYW1iZXJzaWduIFJvb3QwggEgMA0GCSqGSIb3DQEBAQUA\nA4IBDQAwggEIAoIBAQCicKLQn0KuWxfH2H3PFIP8T8mhtxOviteePgQKkotgVvq0\nMi+ITaFgCPS3CU6gSS9J1tPfnZdan5QEcOw/Wdm3zGaLmFIoCQLfxS+EjXqXd7/s\nQJ0lcqu1PzKY+7e3/HKE5TWH+VX6ox8Oby4o3Wmg2UIQxvi1RMLQQ3/bvOSiPGpV\neAp3qdjqGTK3L/5cPxvusZjsyq16aUXjlg9V9ubtdepl6DJWk0aJqCWKZQbua795\nB9Dxt6/tLE2Su8CoX6dnfQTyFQhwrJLWfQTSM/tMtgsL+xrJxI0DqX5c8lCrEqWh\nz0hQpe/SyBoT+rB/sYIcd2oPX9wLlY/vQ37mRQklAgEDo4IBUDCCAUwwEgYDVR0T\nAQH/BAgwBgEB/wIBDDA/BgNVHR8EODA2MDSgMqAwhi5odHRwOi8vY3JsLmNoYW1i\nZXJzaWduLm9yZy9jaGFtYmVyc2lnbnJvb3QuY3JsMB0GA1UdDgQWBBRDnDafsJ4w\nTcbOX60Qq+UDpfqpFDAOBgNVHQ8BAf8EBAMCAQYwEQYJYIZIAYb4QgEBBAQDAgAH\nMCoGA1UdEQQjMCGBH2NoYW1iZXJzaWducm9vdEBjaGFtYmVyc2lnbi5vcmcwKgYD\nVR0SBCMwIYEfY2hhbWJlcnNpZ25yb290QGNoYW1iZXJzaWduLm9yZzBbBgNVHSAE\nVDBSMFAGCysGAQQBgYcuCgEBMEEwPwYIKwYBBQUHAgEWM2h0dHA6Ly9jcHMuY2hh\nbWJlcnNpZ24ub3JnL2Nwcy9jaGFtYmVyc2lnbnJvb3QuaHRtbDANBgkqhkiG9w0B\nAQUFAAOCAQEAPDtwkfkEVCeR4e3t/mh/YV3lQWVPMvEYBZRqHN4fcNs+ezICNLUM\nbKGKfKX0j//U2K0X1S0E0T9YgOKBWYi+wONGkyT+kL0mojAt6JcmVzWJdJYY9hXi\nryQZVgICsroPFOrGimbBhkVVi76SvpykBMdJPJ7oKXqJ1/6v/2j1pReQvayZzKWG\nVwlnRtvWFsJG8eSpUPWP0ZIV018+xgBJOm5YstHRJw0lyDL4IBHNfTIzSJRUTN3c\necQwn+uOuFW114hcxWokPbLTBQNRxgfvzBRydD1ucs4YKIxKoHflCStFREest2d/\nAYoFWpO+ocH/+OcOZ6RHSXZddZAa9SaP8A==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIDfDCCAmSgAwIBAgIQayXaioidfLwPBbOxemFFRDANBgkqhkiG9w0BAQsFADBY\nMQswCQYDVQQGEwJDTjEaMBgGA1UEChMRV29TaWduIENBIExpbWl0ZWQxLTArBgNV\nBAMTJENlcnRpZmljYXRpb24gQXV0aG9yaXR5IG9mIFdvU2lnbiBHMjAeFw0xNDEx\nMDgwMDU4NThaFw00NDExMDgwMDU4NThaMFgxCzAJBgNVBAYTAkNOMRowGAYDVQQK\nExFXb1NpZ24gQ0EgTGltaXRlZDEtMCsGA1UEAxMkQ2VydGlmaWNhdGlvbiBBdXRo\nb3JpdHkgb2YgV29TaWduIEcyMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC\nAQEAvsXEoCKASU+/2YcRxlPhuw+9YH+v9oIOH9ywjj2X4FA8jzrvZjtFB5sg+OPX\nJYY1kBaiXW8wGQiHC38Gsp1ij96vkqVg1CuAmlI/9ZqD6TRay9nVYlzmDuDfBpgO\ngHzKtB0TiGsOqCR3A9DuW/PKaZE1OVbFbeP3PU9ekzgkyhjpJMuSA93MHD0JcOQg\n5PGurLtzaaNjOg9FD6FKmsLRY6zLEPg95k4ot+vElbGs/V6r+kHLXZ1L3PR8du9n\nfwB6jdKgGlxNIuG12t12s9R23164i5jIFFTMaxeSt+BKv0mUYQs4kI9dJGwlezt5\n2eJ+na2fmKEG/HgUYFf47oB3sQIDAQABo0IwQDAOBgNVHQ8BAf8EBAMCAQYwDwYD\nVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQU+mCp62XF3RYUCE4MD42b4Pdkr2cwDQYJ\nKoZIhvcNAQELBQADggEBAFfDejaCnI2Y4qtAqkePx6db7XznPWZaOzG73/MWM5H8\nfHulwqZm46qwtyeYP0nXYGdnPzZPSsvxFPpahygc7Y9BMsaV+X3avXtbwrAh449G\n3CE4Q3RM+zD4F3LBMvzIkRfEzFg3TgvMWvchNSiDbGAtROtSjFA9tWwS1/oJu2yy\nSrHFieT801LYYRf+epSEj3m2M1m6D8QL4nCgS3gu+sif/a+RZQp4OBXllxcU3fng\nLDT4ONCEIgDAFFEYKwLcMFrw6AF8NTojrwjkr6qOKEJJLvD1mTS+7Q9LGOHSJDy7\nXUe3IfKN0QqZjuNuPq1w4I+5ysxugTH2e5x6eeRncRg=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIDqDCCApCgAwIBAgIJAP7c4wEPyUj/MA0GCSqGSIb3DQEBBQUAMDQxCzAJBgNV\nBAYTAkZSMRIwEAYDVQQKDAlEaGlteW90aXMxETAPBgNVBAMMCENlcnRpZ25hMB4X\nDTA3MDYyOTE1MTMwNVoXDTI3MDYyOTE1MTMwNVowNDELMAkGA1UEBhMCRlIxEjAQ\nBgNVBAoMCURoaW15b3RpczERMA8GA1UEAwwIQ2VydGlnbmEwggEiMA0GCSqGSIb3\nDQEBAQUAA4IBDwAwggEKAoIBAQDIaPHJ1tazNHUmgh7stL7qXOEm7RFHYeGifBZ4\nQCHkYJ5ayGPhxLGWkv8YbWkj4Sti993iNi+RB7lIzw7sebYs5zRLcAglozyHGxny\ngQcPOJAZ0xH+hrTy0V4eHpbNgGzOOzGTtvKg0KmVEn2lmsxryIRWijOp5yIVUxbw\nzBfsV1/pogqYCd7jX5xv3EjjhQsVWqa6n6xI4wmy9/Qy3l40vhx4XUJbzg4ij02Q\n130yGLMLLGq/jj8UEYkgDncUtT2UCIf3JR7VsmAA7G8qKCVuKj4YYxclPz5EIBb2\nJsglrgVKtOdjLPOMFlN+XPsRGgjBRmKfIrjxwo1p3Po6WAbfAgMBAAGjgbwwgbkw\nDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUGu3+QTmQtCRZvgHyUtVF9lo53BEw\nZAYDVR0jBF0wW4AUGu3+QTmQtCRZvgHyUtVF9lo53BGhOKQ2MDQxCzAJBgNVBAYT\nAkZSMRIwEAYDVQQKDAlEaGlteW90aXMxETAPBgNVBAMMCENlcnRpZ25hggkA/tzj\nAQ/JSP8wDgYDVR0PAQH/BAQDAgEGMBEGCWCGSAGG+EIBAQQEAwIABzANBgkqhkiG\n9w0BAQUFAAOCAQEAhQMeknH2Qq/ho2Ge6/PAD/Kl1NqV5ta+aDY9fm4fTIrv0Q8h\nbV6lUmPOEvjvKtpv6zf+EwLHyzs+ImvaYS5/1HI93TDhHkxAGYwP15zRgzB7mFnc\nfca5DClMoTOi62c6ZYTTluLtdkVwj7Ur3vkj1kluPBS1xp81HlDQwY9qcEQCYsuu\nHWhBp6pX6FOqB9IG9tUUBguRA3UsbHK1YZWaDYu5Def131TN3ubY1gkIl2PlwS6w\nt0QmwCbAr1UwnjvVNioZBPRcHv/PLLf/0P2HQBHVESO7SMAhqaQoLf0V+LBOK/Qw\nWyH8EZE0vkHve52Xdf+XlcCWWC/qu0bXu+TZLg==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIFnDCCA4SgAwIBAgIBATANBgkqhkiG9w0BAQUFADBjMQswCQYDVQQGEwJGUjET\nMBEGA1UEChMKQ2VydGlub21pczEXMBUGA1UECxMOMDAwMiA0MzM5OTg5MDMxJjAk\nBgNVBAMMHUNlcnRpbm9taXMgLSBBdXRvcml0w6kgUmFjaW5lMB4XDTA4MDkxNzA4\nMjg1OVoXDTI4MDkxNzA4Mjg1OVowYzELMAkGA1UEBhMCRlIxEzARBgNVBAoTCkNl\ncnRpbm9taXMxFzAVBgNVBAsTDjAwMDIgNDMzOTk4OTAzMSYwJAYDVQQDDB1DZXJ0\naW5vbWlzIC0gQXV0b3JpdMOpIFJhY2luZTCCAiIwDQYJKoZIhvcNAQEBBQADggIP\nADCCAgoCggIBAJ2Fn4bT46/HsmtuM+Cet0I0VZ35gb5j2CN2DpdUzZlMGvE5x4jY\nF1AMnmHawE5V3udauHpOd4cN5bjr+p5eex7Ezyh0x5P1FMYiKAT5kcOrJ3NqDi5N\n8y4oH3DfVS9O7cdxbwlyLu3VMpfQ8Vh30WC8Tl7bmoT2R2FFK/ZQpn9qcSdIhDWe\nrP5pqZ56XjUl+rSnSTV3lqc2W+HN3yNw2F1MpQiD8aYkOBOo7C+ooWfHpi2GR+6K\n/OybDnT0K0kCe5B1jPyZOQE51kqJ5Z52qz6WKDgmi92NjMD2AR5vpTESOH2VwnHu\n7XSu5DaiQ3XV8QCb4uTXzEIDS3h65X27uK4uIJPT5GHfceF2Z5c/tt9qc1pkIuVC\n28+BA5PY9OMQ4HL2AHCs8MF6DwV/zzRpRbWT5BnbUhYjBYkOjUjkJW+zeL9i9Qf6\nlSTClrLooyPCXQP8w9PlfMl1I9f09bze5N/NgL+RiH2nE7Q5uiy6vdFrzPOlKO1E\nnn1So2+WLhl+HPNbxxaOu2B9d2ZHVIIAEWBsMsGoOBvrbpgT1u449fCfDu/+MYHB\n0iSVL1N6aaLwD4ZFjliCK0wi1F6g530mJ0jfJUaNSih8hp75mxpZuWW/Bd22Ql09\n5gBIgl4g9xGC3srYn+Y3RyYe63j3YcNBZFgCQfna4NH4+ej9Uji29YnfAgMBAAGj\nWzBZMA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgEGMB0GA1UdDgQWBBQN\njLZh2kS40RR9w759XkjwzspqsDAXBgNVHSAEEDAOMAwGCiqBegFWAgIAAQEwDQYJ\nKoZIhvcNAQEFBQADggIBACQ+YAZ+He86PtvqrxyaLAEL9MW12Ukx9F1BjYkMTv9s\nov3/4gbIOZ/xWqndIlgVqIrTseYyCYIDbNc/CMf4uboAbbnW/FIyXaR/pDGUu7ZM\nOH8oMDX/nyNTt7buFHAAQCvaR6s0fl6nVjBhK4tDrP22iCj1a7Y+YEq6QpA0Z43q\n619FVDsXrIvkxmUP7tCMXWY5zjKn2BCXwH40nJ+U8/aGH88bc62UeYdocMMzpXDn\n2NU4lG9jeeu/Cg4I58UvD0KgKxRA/yHgBcUn4YQRE7rWhh1BCxMjidPJC+iKunqj\no3M3NYB9Ergzd0A4wPpeMNLytqOx1qKVl4GbUu1pTP+A5FPbVFsDbVRfsbjvJL1v\nnxHDx2TCDyhihWZeGnuyt++uNckZM6i4J9szVb9o4XVIRFb7zdNIu0eJOqxp9YDG\n5ERQL1TEqkPFMTFYvZbF6nVsmnWxTfj3l/+WFvKXTej28xH5On2KOG4Ey+HTRRWq\npdEdnV1j6CTmNhTih60bWfVEm/vXd3wfAXBioSAaosUaKPQhA+4u2cGA6rnZgtZb\ndsLLO7XSAPCjDuGtbkD326C00EauFddEwk01+dIL8hf2rGbVJLJP0RyZwG71fet0\nBLj5TXcJ17TPBzAJ8bgAVtkXFhYKK4bfjwEZGuW7gmP/vgt2Fl43N+bYdJeimUV5\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIFkjCCA3qgAwIBAgIBATANBgkqhkiG9w0BAQsFADBaMQswCQYDVQQGEwJGUjET\nMBEGA1UEChMKQ2VydGlub21pczEXMBUGA1UECxMOMDAwMiA0MzM5OTg5MDMxHTAb\nBgNVBAMTFENlcnRpbm9taXMgLSBSb290IENBMB4XDTEzMTAyMTA5MTcxOFoXDTMz\nMTAyMTA5MTcxOFowWjELMAkGA1UEBhMCRlIxEzARBgNVBAoTCkNlcnRpbm9taXMx\nFzAVBgNVBAsTDjAwMDIgNDMzOTk4OTAzMR0wGwYDVQQDExRDZXJ0aW5vbWlzIC0g\nUm9vdCBDQTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBANTMCQosP5L2\nfxSeC5yaah1AMGT9qt8OHgZbn1CF6s2Nq0Nn3rD6foCWnoR4kkjW4znuzuRZWJfl\nLieY6pOod5tK8O90gC3rMB+12ceAnGInkYjwSond3IjmFPnVAy//ldu9n+ws+hQV\nWZUKxkd8aRi5pwP5ynapz8dvtF4F/u7BUrJ1Mofs7SlmO/NKFoL21prbcpjp3vDF\nTKWrteoB4owuZH9kb/2jJZOLyKIOSY008B/sWEUuNKqEUL3nskoTuLAPrjhdsKkb\n5nPJWqHZZkCqqU2mNAKthH6yI8H7KsZn9DS2sJVqM09xRLWtwHkziOC/7aOgFLSc\nCbAK42C++PhmiM1b8XcF4LVzbsF9Ri6OSyemzTUK/eVNfaoqoynHWmgE6OXWk6Ri\nwsXm9E/G+Z8ajYJJGYrKWUM66A0ywfRMEwNvbqY/kXPLynNvEiCL7sCCeN5LLsJJ\nwx3tFvYk9CcbXFcx3FXuqB5vbKziRcxXV4p1VxngtViZSTYxPDMBbRZKzbgqg4SG\nm/lg0h9tkQPTYKbVPZrdd5A9NaSfD171UkRpucC63M9933zZxKyGIjK8e2uR73r4\nF2iw4lNVYC2vPsKD2NkJK/DAZNuHi5HMkesE/Xa0lZrmFAYb1TQdvtj/dBxThZng\nWVJKYe2InmtJiUZ+IFrZ50rlau7SZRFDAgMBAAGjYzBhMA4GA1UdDwEB/wQEAwIB\nBjAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBTvkUz1pcMw6C8I6tNxIqSSaHh0\n2TAfBgNVHSMEGDAWgBTvkUz1pcMw6C8I6tNxIqSSaHh02TANBgkqhkiG9w0BAQsF\nAAOCAgEAfj1U2iJdGlg+O1QnurrMyOMaauo++RLrVl89UM7g6kgmJs95Vn6RHJk/\n0KGRHCwPT5iVWVO90CLYiF2cN/z7ZMF4jIuaYAnq1fohX9B0ZedQxb8uuQsLrbWw\nF6YSjNRieOpWauwK0kDDPAUwPk2Ut59KA9N9J0u2/kTO+hkzGm2kQtHdzMjI1xZS\ng081lLMSVX3l4kLr5JyTCcBMWwerx20RoFAXlCOotQqSD7J6wWAsOMwaplv/8gzj\nqh8c3LigkyfeY+N/IZ865Z764BNqdeuWXGKRlI5nU7aJ+BIJy29SWwNyhlCVCNSN\nh4YVH5Uk2KRvms6knZtt0rJ2BobGVgjF6wnaNsIbW0G+YSrjcOa4pvi2WsS9Iff/\nql+hbHY5ZtbqTFXhADObE5hjyW/QASAJN1LnDE8+zbz1X5YnpyACleAu6AdBBR8V\nbtaw5BngDwKTACdyxYvRVB9dSsNAl35VpnzBMwQUAR1JIGkLGZOdblgi90AMRgwj\nY/M50n92Uaf0yKHxDHYiI0ZSKS3io0EHVmmY0gUJvGnHWmHNj4FgFU2A3ZDifcRQ\n8ow7bkrHxuaAKzyBvBGAFhAn1/DNP3nMcyrDflOR1m749fPH0FFNjkulW+YZFzvW\ngQncItzujrnEj1PhZ7szuIgVRs/taTX/dQ1G885x4cVrhkIGuUE=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIDkjCCAnqgAwIBAgIRAIW9S/PY2uNp9pTXX8OlRCMwDQYJKoZIhvcNAQEFBQAw\nPTELMAkGA1UEBhMCRlIxETAPBgNVBAoTCENlcnRwbHVzMRswGQYDVQQDExJDbGFz\ncyAyIFByaW1hcnkgQ0EwHhcNOTkwNzA3MTcwNTAwWhcNMTkwNzA2MjM1OTU5WjA9\nMQswCQYDVQQGEwJGUjERMA8GA1UEChMIQ2VydHBsdXMxGzAZBgNVBAMTEkNsYXNz\nIDIgUHJpbWFyeSBDQTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANxQ\nltAS+DXSCHh6tlJw/W/uz7kRy1134ezpfgSN1sxvc0NXYKwzCkTsA18cgCSR5aiR\nVhKC9+Ar9NuuYS6JEI1rbLqzAr3VNsVINyPi8Fo3UjMXEuLRYE2+L0ER4/YXJQyL\nkcAbmXuZVg2v7tK8R1fjeUl7NIknJITesezpWE7+Tt9avkGtrAjFGA7v0lPubNCd\nEgETjdyAYveVqUSISnFOYFWe2yMZeVYHDD9jC1yw4r5+FfyUM1hBOHTE4Y+L3yas\nH7WLO7dDWWuwJKZtkIvEcupdM5i3y95ee++U8Rs+yskhwcWYAqqi9lt3m/V+llU0\nHGdpwPFC40es/CgcZlUCAwEAAaOBjDCBiTAPBgNVHRMECDAGAQH/AgEKMAsGA1Ud\nDwQEAwIBBjAdBgNVHQ4EFgQU43Mt38sOKAze3bOkynm4jrvoMIkwEQYJYIZIAYb4\nQgEBBAQDAgEGMDcGA1UdHwQwMC4wLKAqoCiGJmh0dHA6Ly93d3cuY2VydHBsdXMu\nY29tL0NSTC9jbGFzczIuY3JsMA0GCSqGSIb3DQEBBQUAA4IBAQCnVM+IRBnL39R/\nAN9WM2K191EBkOvDP9GIROkkXe/nFL0gt5o8AP5tn9uQ3Nf0YtaLcF3n5QRIqWh8\nyfFC82x/xXp8HVGIutIKPidd3i1RTtMTZGnkLuPT55sJmabglZvOGtd/vjzOUrMR\nFcEPF80Du5wlFbqidon8BvEY0JNLDnyCt6X09l/+7UCmnYR0ObncHoUW2ikbhiMA\nybuJfm6AiB4vFLQDJKgybwOaRywwvlbGp0ICcBvqQNi6BQNwB6SW//1IMwrh3KWB\nkJtN3X3n57LNXMhqlfil9o3EXXgIvnsG1knPGTZQIy4I5p4FTUcY1Rbpsda2ENW7\nl7+ijrRU\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIFazCCA1OgAwIBAgISESBVg+QtPlRWhS2DN7cs3EYRMA0GCSqGSIb3DQEBDQUA\nMD4xCzAJBgNVBAYTAkZSMREwDwYDVQQKDAhDZXJ0cGx1czEcMBoGA1UEAwwTQ2Vy\ndHBsdXMgUm9vdCBDQSBHMTAeFw0xNDA1MjYwMDAwMDBaFw0zODAxMTUwMDAwMDBa\nMD4xCzAJBgNVBAYTAkZSMREwDwYDVQQKDAhDZXJ0cGx1czEcMBoGA1UEAwwTQ2Vy\ndHBsdXMgUm9vdCBDQSBHMTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIB\nANpQh7bauKk+nWT6VjOaVj0W5QOVsjQcmm1iBdTYj+eJZJ+622SLZOZ5KmHNr49a\niZFluVj8tANfkT8tEBXgfs+8/H9DZ6itXjYj2JizTfNDnjl8KvzsiNWI7nC9hRYt\n6kuJPKNxQv4c/dMcLRC4hlTqQ7jbxofaqK6AJc96Jh2qkbBIb6613p7Y1/oA/caP\n0FG7Yn2ksYyy/yARujVjBYZHYEMzkPZHogNPlk2dT8Hq6pyi/jQu3rfKG3akt62f\n6ajUeD94/vI4CTYd0hYCyOwqaK/1jpTvLRN6HkJKHRUxrgwEV/xhc/MxVoYxgKDE\nEW4wduOU8F8ExKyHcomYxZ3MVwia9Az8fXoFOvpHgDm2z4QTd28n6v+WZxcIbekN\n1iNQMLAVdBM+5S//Ds3EC0pd8NgAM0lm66EYfFkuPSi5YXHLtaW6uOrc4nBvCGrc\nh2c0798wct3zyT8j/zXhviEpIDCB5BmlIOklynMxdCm+4kLV87ImZsdo/Rmz5yCT\nmehd4F6H50boJZwKKSTUzViGUkAksnsPmBIgJPaQbEfIDbsYIC7Z/fyL8inqh3SV\n4EJQeIQEQWGw9CEjjy3LKCHyamz0GqbFFLQ3ZU+V/YDI+HLlJWvEYLF7bY5KinPO\nWftwenMGE9nTdDckQQoRb5fc5+R+ob0V8rqHDz1oihYHAgMBAAGjYzBhMA4GA1Ud\nDwEB/wQEAwIBBjAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBSowcCbkahDFXxd\nBie0KlHYlwuBsTAfBgNVHSMEGDAWgBSowcCbkahDFXxdBie0KlHYlwuBsTANBgkq\nhkiG9w0BAQ0FAAOCAgEAnFZvAX7RvUz1isbwJh/k4DgYzDLDKTudQSk0YcbX8ACh\n66Ryj5QXvBMsdbRX7gp8CXrc1cqh0DQT+Hern+X+2B50ioUHj3/MeXrKls3N/U/7\n/SMNkPX0XtPGYX2eEeAC7gkE2Qfdpoq3DIMku4NQkv5gdRE+2J2winq14J2by5BS\nS7CTKtQ+FjPlnsZlFT5kOwQ/2wyPX1wdaR+v8+khjPPvl/aatxm2hHSco1S1cE5j\n2FddUyGbQJJD+tZ3VTNPZNX70Cxqjm0lpu+F6ALEUz65noe8zDUa3qHpimOHZR4R\nKttjd5cUvpoUmRGywO6wT/gUITJDT5+rosuoD6o7BlXGEilXCNQ314cnrUlZp5Gr\nRHpejXDbl85IULFzk/bwg2D5zfHhMf1bfHEhYxQUqq/F3pN+aLHsIqKqkHWetUNy\n6mSjhEv9DKgma3GX7lZjZuhCVPnHHd/Qj1vfyDBviP4NxDMcU6ij/UgQ8uQKTuEV\nV/xuZDDCVRHc6qnNSlSsKWNEz0pAoNZoWRsz+e86i9sgktxChL8Bq4fA1SCC28a5\ng4VCXA9DO2pJNdWY9BW/+mGBDAkgGNLQFwzLSABQ6XaCjGTXOqAHVcweMcDvOrRl\n++O/QmueD6i9a5jc2NvLi6Td11n0bt3+qsOR0C5CB8AMTVPNJLFMWx5R9N/pkvo=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIICHDCCAaKgAwIBAgISESDZkc6uo+jF5//pAq/Pc7xVMAoGCCqGSM49BAMDMD4x\nCzAJBgNVBAYTAkZSMREwDwYDVQQKDAhDZXJ0cGx1czEcMBoGA1UEAwwTQ2VydHBs\ndXMgUm9vdCBDQSBHMjAeFw0xNDA1MjYwMDAwMDBaFw0zODAxMTUwMDAwMDBaMD4x\nCzAJBgNVBAYTAkZSMREwDwYDVQQKDAhDZXJ0cGx1czEcMBoGA1UEAwwTQ2VydHBs\ndXMgUm9vdCBDQSBHMjB2MBAGByqGSM49AgEGBSuBBAAiA2IABM0PW1aC3/BFGtat\n93nwHcmsltaeTpwftEIRyoa/bfuFo8XlGVzX7qY/aWfYeOKmycTbLXku54uNAm8x\nIk0G42ByRZ0OQneezs/lf4WbGOT8zC5y0xaTTsqZY1yhBSpsBqNjMGEwDgYDVR0P\nAQH/BAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFNqDYwJ5jtpMxjwj\nFNiPwyCrKGBZMB8GA1UdIwQYMBaAFNqDYwJ5jtpMxjwjFNiPwyCrKGBZMAoGCCqG\nSM49BAMDA2gAMGUCMHD+sAvZ94OX7PNVHdTcswYO/jOYnYs5kGuUIe22113WTNch\np+e/IQ8rzfcq3IUHnQIxAIYUFuXcsGXCwI4Un78kFmjlvPl5adytRSv3tjFzzAal\nU5ORGpOucGpnutee5WEaXw==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIDDDCCAfSgAwIBAgIDAQAgMA0GCSqGSIb3DQEBBQUAMD4xCzAJBgNVBAYTAlBM\nMRswGQYDVQQKExJVbml6ZXRvIFNwLiB6IG8uby4xEjAQBgNVBAMTCUNlcnR1bSBD\nQTAeFw0wMjA2MTExMDQ2MzlaFw0yNzA2MTExMDQ2MzlaMD4xCzAJBgNVBAYTAlBM\nMRswGQYDVQQKExJVbml6ZXRvIFNwLiB6IG8uby4xEjAQBgNVBAMTCUNlcnR1bSBD\nQTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAM6xwS7TT3zNJc4YPk/E\njG+AanPIW1H4m9LcuwBcsaD8dQPugfCI7iNS6eYVM42sLQnFdvkrOYCJ5JdLkKWo\nePhzQ3ukYbDYWMzhbGZ+nPMJXlVjhNWo7/OxLjBos8Q82KxujZlakE403Daaj4GI\nULdtlkIJ89eVgw1BS7Bqa/j8D35in2fE7SZfECYPCE/wpFcozo+47UX2bu4lXapu\nOb7kky/ZR6By6/qmW6/KUz/iDsaWVhFu9+lmqSbYf5VT7QqFiLpPKaVCjF62/IUg\nAKpoC6EahQGcxEZjgoi2IrHu/qpGWX7PNSzVttpd90gzFFS269lvzs2I1qsb2pY7\nHVkCAwEAAaMTMBEwDwYDVR0TAQH/BAUwAwEB/zANBgkqhkiG9w0BAQUFAAOCAQEA\nuI3O7+cUus/usESSbLQ5PqKEbq24IXfS1HeCh+YgQYHu4vgRt2PRFze+GXYkHAQa\nTOs9qmdvLdTN/mUxcMUbpgIKumB7bVjCmkn+YzILa+M6wKyrO7Do0wlRjBCDxjTg\nxSvgGrZgFCdsMneMvLJymM/NzD+5yCRCFNZX/OYmQ6kd5YCQzgNUKD73P9P4Te1q\nCjqTE5s7FCMTY5w/0YcneeVMUeMBrYVdGjux1XMQpNPyvG5k9VpWkKjHDkx0Dy5x\nO/fIR/RpbxXyEV6DHpx8Uq79AtoSqFlnGNu8cN2bsWntgM6JQEhqDjXKKWYVIZQs\n6GAqm4VKQPNriiTsBhYscw==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIDuzCCAqOgAwIBAgIDBETAMA0GCSqGSIb3DQEBBQUAMH4xCzAJBgNVBAYTAlBM\nMSIwIAYDVQQKExlVbml6ZXRvIFRlY2hub2xvZ2llcyBTLkEuMScwJQYDVQQLEx5D\nZXJ0dW0gQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkxIjAgBgNVBAMTGUNlcnR1bSBU\ncnVzdGVkIE5ldHdvcmsgQ0EwHhcNMDgxMDIyMTIwNzM3WhcNMjkxMjMxMTIwNzM3\nWjB+MQswCQYDVQQGEwJQTDEiMCAGA1UEChMZVW5pemV0byBUZWNobm9sb2dpZXMg\nUy5BLjEnMCUGA1UECxMeQ2VydHVtIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MSIw\nIAYDVQQDExlDZXJ0dW0gVHJ1c3RlZCBOZXR3b3JrIENBMIIBIjANBgkqhkiG9w0B\nAQEFAAOCAQ8AMIIBCgKCAQEA4/t9o3K6wvDJFIf1awFO4W5AB7ptJ11/91sts1rH\nUV+rpDKmYYe2bg+G0jACl/jXaVehGDldamR5xgFZrDwxSjh80gTSSyjoIF87B6LM\nTXPb865Px1bVWqeWifrzq2jUI4ZZJ88JJ7ysbnKDHDBy3+Ci6dLhdHUZvSqeexVU\nBBvXQzmtVSjF4hq79MDkrjhJM8x2hZ85RdKknvISjFH4fOQtf/WsX+sWn7Et0brM\nkUJ3TCXJkDhv2/DM+44el1k+1WBO5gUo7Ul5E0u6SNsv+XLTOcr+H9g0cvW0QM8x\nAcPs3hEtF10fuFDRXhmnad4HMyjKUJX5p1TLVIZQRan5SQIDAQABo0IwQDAPBgNV\nHRMBAf8EBTADAQH/MB0GA1UdDgQWBBQIds3LB/8k9sXN7buQvOKEN0Z19zAOBgNV\nHQ8BAf8EBAMCAQYwDQYJKoZIhvcNAQEFBQADggEBAKaorSLOAT2mo/9i0Eidi15y\nsHhE49wcrwn9I0j6vSrEuVUEtRCjjSfeC4Jj0O7eDDd5QVsisrCaQVymcODU0HfL\nI9MA4GxWL+FpDQ3Zqr8hgVDZBqWo/5U30Kr+4rP1mS1FhIrlQgnXdAIv94nYmem8\nJ9RHjboNRhx3zxSkHLmkMcScKHQDNP8zGSal6Q10tz6XxnboJ5ajZt3hrvJBW8qY\nVoNzcOSGGtIxQbovvi0TWnZvTuhOgQ4/WwMioBK+ZlgRSssDxLQqKi2WF+A5VLxI\n03YnnZotBqbJ7DnSq9ufmgsnAjUpsUCV5/nonFWIGUbWtzT1fs45mtk48VH3Tyw=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIF0jCCA7qgAwIBAgIQIdbQSk8lD8kyN/yqXhKN6TANBgkqhkiG9w0BAQ0FADCB\ngDELMAkGA1UEBhMCUEwxIjAgBgNVBAoTGVVuaXpldG8gVGVjaG5vbG9naWVzIFMu\nQS4xJzAlBgNVBAsTHkNlcnR1bSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTEkMCIG\nA1UEAxMbQ2VydHVtIFRydXN0ZWQgTmV0d29yayBDQSAyMCIYDzIwMTExMDA2MDgz\nOTU2WhgPMjA0NjEwMDYwODM5NTZaMIGAMQswCQYDVQQGEwJQTDEiMCAGA1UEChMZ\nVW5pemV0byBUZWNobm9sb2dpZXMgUy5BLjEnMCUGA1UECxMeQ2VydHVtIENlcnRp\nZmljYXRpb24gQXV0aG9yaXR5MSQwIgYDVQQDExtDZXJ0dW0gVHJ1c3RlZCBOZXR3\nb3JrIENBIDIwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQC9+Xj45tWA\nDGSdhhuWZGc/IjoedQF97/tcZ4zJzFxrqZHmuULlIEub2pt7uZld2ZuAS9eEQCsn\n0+i6MLs+CRqnSZXvK0AkwpfHp+6bJe+oCgCXhVqqndwpyeI1B+twTUrWwbNWuKFB\nOJvR+zF/j+Bf4bE/D44WSWDXBo0Y+aomEKsq09DRZ40bRr5HMNUuctHFY9rnY3lE\nfktjJImGLjQ/KUxSiyqnwOKRKIm5wFv5HdnnJ63/mgKXwcZQkpsCLL2puTRZCr+E\nSv/f/rOf69me4Jgj7KZrdxYq28ytOxykh9xGc14ZYmhFV+SQgkK7QtbwYeDBoz1m\no130GO6IyY0XRSmZMnUCMe4pJshrAua1YkV/NxVaI2iJ1D7eTiew8EAMvE0Xy02i\nsx7QBlrd9pPPV3WZ9fqGGmd4s7+W/jTcvedSVuWz5XV710GRBdxdaeOVDUO5/IOW\nOZV7bIBaTxNyxtd9KXpEulKkKtVBRgkg/iKgtlswjbyJDNXXcPiHUv3a76xRLgez\nTv7QCdpw75j6VuZt27VXS9zlLCUVyJ4ueE742pyehizKV/Ma5ciSixqClnrDvFAS\nadgOWkaLOusm+iPJtrCBvkIApPjW/jAux9JG9uWOdf3yzLnQh1vMBhBgu4M1t15n\n3kfsmUjxpKEV/q2MYo45VU85FrmxY53/twIDAQABo0IwQDAPBgNVHRMBAf8EBTAD\nAQH/MB0GA1UdDgQWBBS2oVQ5AsOgP46KvPrU+Bym0ToO/TAOBgNVHQ8BAf8EBAMC\nAQYwDQYJKoZIhvcNAQENBQADggIBAHGlDs7k6b8/ONWJWsQCYftMxRQXLYtPU2sQ\nF/xlhMcQSZDe28cmk4gmb3DWAl45oPePq5a1pRNcgRRtDoGCERuKTsZPpd1iHkTf\nCVn0W3cLN+mLIMb4Ck4uWBzrM9DPhmDJ2vuAL55MYIR4PSFk1vtBHxgP58l1cb29\nXN40hz5BsA72udY/CROWFC/emh1auVbONTqwX3BNXuMp8SMoclm2q8KMZiYcdywm\ndjWLKKdpoPk79SPdhRB0yZADVpHnr7pH1BKXESLjokmUbOe3lEu6LaTaM4tMpkT/\nWjzGHWTYtTHkpjx6qFcL2+1hGsvxznN3Y6SHb0xRONbkX8eftoEq5IVIeVheO/jb\nAoJnwTnbw3RLPTYe+SmTiGhbqEQZIfCn6IENLOiTNrQ3ssqwGyZ6miUfmpqAnksq\nP/ujmv5zMnHCnsZy4YpoJ/HkD7TETKVhk/iXEAcqMCWpuchxuO9ozC1+9eB+D4Ko\nb7a6bINDd82Kkhehnlt4Fj1F4jNy3eFmypnTycUm/Q1oBEauttmbjL4ZvrHG8hnj\nXALKLNhvSgfZyTXaQHXyxKcZb55CEJh15pWLYLztxRLXis7VmFxWlgPF7ncGNf/P\n5O4/E2Hu29othfDNrp2yGAlFw5Khchf8R7agCyzxxN5DaAhqXzvwdmP7zAYspsbi\nDrW5viSP\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIHTzCCBTegAwIBAgIJAKPaQn6ksa7aMA0GCSqGSIb3DQEBBQUAMIGuMQswCQYD\nVQQGEwJFVTFDMEEGA1UEBxM6TWFkcmlkIChzZWUgY3VycmVudCBhZGRyZXNzIGF0\nIHd3dy5jYW1lcmZpcm1hLmNvbS9hZGRyZXNzKTESMBAGA1UEBRMJQTgyNzQzMjg3\nMRswGQYDVQQKExJBQyBDYW1lcmZpcm1hIFMuQS4xKTAnBgNVBAMTIENoYW1iZXJz\nIG9mIENvbW1lcmNlIFJvb3QgLSAyMDA4MB4XDTA4MDgwMTEyMjk1MFoXDTM4MDcz\nMTEyMjk1MFowga4xCzAJBgNVBAYTAkVVMUMwQQYDVQQHEzpNYWRyaWQgKHNlZSBj\ndXJyZW50IGFkZHJlc3MgYXQgd3d3LmNhbWVyZmlybWEuY29tL2FkZHJlc3MpMRIw\nEAYDVQQFEwlBODI3NDMyODcxGzAZBgNVBAoTEkFDIENhbWVyZmlybWEgUy5BLjEp\nMCcGA1UEAxMgQ2hhbWJlcnMgb2YgQ29tbWVyY2UgUm9vdCAtIDIwMDgwggIiMA0G\nCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCvAMtwNyuAWko6bHiUfaN/Gh/2NdW9\n28sNRHI+JrKQUrpjOyhYb6WzbZSm891kDFX29ufyIiKAXuFixrYp4YFs8r/lfTJq\nVKAyGVn+H4vXPWCGhSRv4xGzdz4gljUha7MI2XAuZPeEklPWDrCQiorjh40G072Q\nDuKZoRuGDtqaCrsLYVAGUvGef3bsyw/QHg3PmTA9HMRFEFis1tPo1+XqxQEHd9ZR\n5gN/ikilTWh1uem8nk4ZcfUyS5xtYBkL+8ydddy/Js2Pk3g5eXNeJQ7KXOt3EgfL\nZEFHcpOrUMPrCXZkNNI5t3YRCQ12RcSprj1qr7V9ZS+UWBDsXHyvfuK2GNnQm05a\nSd+pZgvMPMZ4fKecHePOjlO+Bd5gD2vlGts/4+EhySnB8esHnFIbAURRPHsl18Tl\nUlRdJQfKFiC4reRB7noI/plvg6aRArBsNlVq5331lubKgdaX8ZSD6e2wsWsSaR6s\n+12pxZjptFtYer49okQ6Y1nUCyXeG0+95QGezdIp1Z8XGQpvvwyQ0wlf2eOKNcx5\nWk0ZN5K3xMGtr/R5JJqyAQuxr1yW84Ay+1w9mPGgP0revq+ULtlVmhduYJ1jbLhj\nya6BXBg14JC7vjxPNyK5fuvPnnchpj04gftI2jE9K+OJ9dC1vX7gUMQSibMjmhAx\nhduub+84Mxh2EQIDAQABo4IBbDCCAWgwEgYDVR0TAQH/BAgwBgEB/wIBDDAdBgNV\nHQ4EFgQU+SSsD7K1+HnA+mCIG8TZTQKeFxkwgeMGA1UdIwSB2zCB2IAU+SSsD7K1\n+HnA+mCIG8TZTQKeFxmhgbSkgbEwga4xCzAJBgNVBAYTAkVVMUMwQQYDVQQHEzpN\nYWRyaWQgKHNlZSBjdXJyZW50IGFkZHJlc3MgYXQgd3d3LmNhbWVyZmlybWEuY29t\nL2FkZHJlc3MpMRIwEAYDVQQFEwlBODI3NDMyODcxGzAZBgNVBAoTEkFDIENhbWVy\nZmlybWEgUy5BLjEpMCcGA1UEAxMgQ2hhbWJlcnMgb2YgQ29tbWVyY2UgUm9vdCAt\nIDIwMDiCCQCj2kJ+pLGu2jAOBgNVHQ8BAf8EBAMCAQYwPQYDVR0gBDYwNDAyBgRV\nHSAAMCowKAYIKwYBBQUHAgEWHGh0dHA6Ly9wb2xpY3kuY2FtZXJmaXJtYS5jb20w\nDQYJKoZIhvcNAQEFBQADggIBAJASryI1wqM58C7e6bXpeHxIvj99RZJe6dqxGfwW\nPJ+0W2aeaufDuV2I6A+tzyMP3iU6XsxPpcG1Lawk0lgH3qLPaYRgM+gQDROpI9CF\n5Y57pp49chNyM/WqfcZjHwj0/gF/JM8rLFQJ3uIrbZLGOU8W6jx+ekbURWpGqOt1\nglanq6B8aBMz9p0w8G8nOSQjKpD9kCk18pPfNKXG9/jvjA9iSnyu0/VU+I22mlaH\nFoI6M6taIgj3grrqLuBHmrS1RaMFO9ncLkVAO+rcf+g769HsJtg1pDDFOqxXnrN2\npSB7+R5KBWIBpih1YJeSDW4+TTdDDZIVnBgizVGZoCkaPF+KMjNbMMeJL0eYD6MD\nxvbxrN8y8NmBGuScvfaAFPDRLLmF9dijscilIeUcE5fuDr3fKanvNFNb0+RqE4QG\ntjICxFKuItLcsiFCGtpA8CnJ7AoMXOLQusxI0zcKzBIKinmwPQN/aUv0NCB9szTq\njktk9T79syNnFQ0EuPAtwQlRPLJsFfClI9eDdOTlLsn+mCdCxqvGnrDQWzilm1De\nfhiYtUU79nm06PcaewaD+9CL2rvHvRirCG88gGtAPxkZumWK5r7VXNM21+9AUiRg\nOGcEMeyP84LG3rlV8zsxkVrctQgVrXYlCg17LofiDKYGvCYQbTed7N14jHyAxfDZ\nd0jQ\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIID9zCCAt+gAwIBAgIESJ8AATANBgkqhkiG9w0BAQUFADCBijELMAkGA1UEBhMC\nQ04xMjAwBgNVBAoMKUNoaW5hIEludGVybmV0IE5ldHdvcmsgSW5mb3JtYXRpb24g\nQ2VudGVyMUcwRQYDVQQDDD5DaGluYSBJbnRlcm5ldCBOZXR3b3JrIEluZm9ybWF0\naW9uIENlbnRlciBFViBDZXJ0aWZpY2F0ZXMgUm9vdDAeFw0xMDA4MzEwNzExMjVa\nFw0zMDA4MzEwNzExMjVaMIGKMQswCQYDVQQGEwJDTjEyMDAGA1UECgwpQ2hpbmEg\nSW50ZXJuZXQgTmV0d29yayBJbmZvcm1hdGlvbiBDZW50ZXIxRzBFBgNVBAMMPkNo\naW5hIEludGVybmV0IE5ldHdvcmsgSW5mb3JtYXRpb24gQ2VudGVyIEVWIENlcnRp\nZmljYXRlcyBSb290MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAm35z\n7r07eKpkQ0H1UN+U8i6yjUqORlTSIRLIOTJCBumD1Z9S7eVnAztUwYyZmczpwA//\nDdmEEbK40ctb3B75aDFk4Zv6dOtouSCV98YPjUesWgbdYavi7NifFy2cyjw1l1Vx\nzUOFsUcW9SxTgHbP0wBkvUCZ3czY28Sf1hNfQYOL+Q2HklY0bBoQCxfVWhyXWIQ8\nhBouXJE0bhlffxdpxWXvayHG1VA6v2G5BY3vbzQ6sm8UY78WO5upKv23KzhmBsUs\n4qpnHkWnjQRmQvaPK++IIGmPMowUc9orhpFjIpryp9vOiYurXccUwVswah+xt54u\ngQEC7c+WXmPbqOY4twIDAQABo2MwYTAfBgNVHSMEGDAWgBR8cks5x8DbYqVPm6oY\nNJKiyoOCWTAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4E\nFgQUfHJLOcfA22KlT5uqGDSSosqDglkwDQYJKoZIhvcNAQEFBQADggEBACrDx0M3\nj92tpLIM7twUbY8opJhJywyA6vPtI2Z1fcXTIWd50XPFtQO3WKwMVC/GVhMPMdoG\n52U7HW8228gd+f2ABsqjPWYWqJ1MFn3AlUa1UeTiH9fqBk1jjZaM7+czV0I664zB\nechNdn3e9rG3geCg+aF4RhcaVpjwTj2rHO3sOdwHSPdj/gauwqRcalsyiMXHM4Ws\nZkJHwlgkmeHlPuV1LI5D1l08eB6olYIpUNHRFrrvwb562bTYzB5MRuF3sTGrvSrI\nzo9uoV1/A3U05K2JRVRevq4opbs/eHnrc7MKDf2+yfdWrPa37S+bISnHOLaVxATy\nwy39FCqQmbkHzJ8=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIDkzCCAnugAwIBAgIQFBOWgxRVjOp7Y+X8NId3RDANBgkqhkiG9w0BAQUFADA0\nMRMwEQYDVQQDEwpDb21TaWduIENBMRAwDgYDVQQKEwdDb21TaWduMQswCQYDVQQG\nEwJJTDAeFw0wNDAzMjQxMTMyMThaFw0yOTAzMTkxNTAyMThaMDQxEzARBgNVBAMT\nCkNvbVNpZ24gQ0ExEDAOBgNVBAoTB0NvbVNpZ24xCzAJBgNVBAYTAklMMIIBIjAN\nBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA8ORUaSvTx49qROR+WCf4C9DklBKK\n8Rs4OC8fMZwG1Cyn3gsqrhqg455qv588x26i+YtkbDqthVVRVKU4VbirgwTyP2Q2\n98CNQ0NqZtH3FyrV7zb6MBBC11PN+fozc0yz6YQgitZBJzXkOPqUm7h65HkfM/sb\n2CEJKHxNGGleZIp6GZPKfuzzcuc3B1hZKKxC+cX/zT/npfo4sdAMx9lSGlPWgcxC\nejVb7Us6eva1jsz/D3zkYDaHL63woSV9/9JLEYhwVKZBqGdTUkJe5DSe5L6j7Kpi\nXd3DTKaCQeQzC6zJMw9kglcq/QytNuEMrkvF7zuZ2SOzW120V+x0cAwqTwIDAQAB\no4GgMIGdMAwGA1UdEwQFMAMBAf8wPQYDVR0fBDYwNDAyoDCgLoYsaHR0cDovL2Zl\nZGlyLmNvbXNpZ24uY28uaWwvY3JsL0NvbVNpZ25DQS5jcmwwDgYDVR0PAQH/BAQD\nAgGGMB8GA1UdIwQYMBaAFEsBmz5WGmU2dst7l6qSBe4y5ygxMB0GA1UdDgQWBBRL\nAZs+VhplNnbLe5eqkgXuMucoMTANBgkqhkiG9w0BAQUFAAOCAQEA0Nmlfv4pYEWd\nfoPPbrxHbvUanlR2QnG0PFg/LUAlQvaBnPGJEMgOqnhPOAlXsDzACPw1jvFIUY0M\ncXS6hMTXcpuEfDhOZAYnKuGntewImbQKDdSFc8gS4TXt8QUxHXOZDOuWyt3T5oWq\n8Ir7dcHyCTxlZWTzTNity4hp8+SDtwy9F1qWF8pb/627HOkthIDYIb6FUtnUdLlp\nhbpN7Sgy6/lhSuTENh4Z3G+EER+V9YMoGKgzkkMn3V0TBEVPh9VGzT2ouvDzuFYk\nRes3x+F2T3I5GN9+dHLHcy056mDmrRGiVod7w2ia/viMcKjfZTL0pECMocJEAw6U\nAGegcQCCSA==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIEMjCCAxqgAwIBAgIBATANBgkqhkiG9w0BAQUFADB7MQswCQYDVQQGEwJHQjEb\nMBkGA1UECAwSR3JlYXRlciBNYW5jaGVzdGVyMRAwDgYDVQQHDAdTYWxmb3JkMRow\nGAYDVQQKDBFDb21vZG8gQ0EgTGltaXRlZDEhMB8GA1UEAwwYQUFBIENlcnRpZmlj\nYXRlIFNlcnZpY2VzMB4XDTA0MDEwMTAwMDAwMFoXDTI4MTIzMTIzNTk1OVowezEL\nMAkGA1UEBhMCR0IxGzAZBgNVBAgMEkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4GA1UE\nBwwHU2FsZm9yZDEaMBgGA1UECgwRQ29tb2RvIENBIExpbWl0ZWQxITAfBgNVBAMM\nGEFBQSBDZXJ0aWZpY2F0ZSBTZXJ2aWNlczCCASIwDQYJKoZIhvcNAQEBBQADggEP\nADCCAQoCggEBAL5AnfRu4ep2hxxNRUSOvkbIgwadwSr+GB+O5AL686tdUIoWMQua\nBtDFcCLNSS1UY8y2bmhGC1Pqy0wkwLxyTurxFa70VJoSCsN6sjNg4tqJVfMiWPPe\n3M/vg4aijJRPn2jymJBGhCfHdr/jzDUsi14HZGWCwEiwqJH5YZ92IFCokcdmtet4\nYgNW8IoaE+oxox6gmf049vYnMlhvB/VruPsUK6+3qszWY19zjNoFmag4qMsXeDZR\nrOme9Hg6jc8P2ULimAyrL58OAd7vn5lJ8S3frHRNG5i1R8XlKdH5kBjHYpy+g8cm\nez6KJcfA3Z3mNWgQIJ2P2N7Sw4ScDV7oL8kCAwEAAaOBwDCBvTAdBgNVHQ4EFgQU\noBEKIz6W8Qfs4q8p74Klf9AwpLQwDgYDVR0PAQH/BAQDAgEGMA8GA1UdEwEB/wQF\nMAMBAf8wewYDVR0fBHQwcjA4oDagNIYyaHR0cDovL2NybC5jb21vZG9jYS5jb20v\nQUFBQ2VydGlmaWNhdGVTZXJ2aWNlcy5jcmwwNqA0oDKGMGh0dHA6Ly9jcmwuY29t\nb2RvLm5ldC9BQUFDZXJ0aWZpY2F0ZVNlcnZpY2VzLmNybDANBgkqhkiG9w0BAQUF\nAAOCAQEACFb8AvCb6P+k+tZ7xkSAzk/ExfYAWMymtrwUSWgEdujm7l3sAg9g1o1Q\nGE8mTgHj5rCl7r+8dFRBv/38ErjHT1r0iWAFf2C3BUrz9vHCv8S5dIa2LX1rzNLz\nRt0vxuBqw8M0Ayx9lt1awg6nCpnBBYurDC/zXDrPbDdVCYfeU0BsWO/8tqtlbgT2\nG9w84FoVxp7Z8VlIMCFlA2zs6SFz7JsDoeA3raAVGI/6ugLOpyypEBMs1OUIJqsi\nl2D4kF501KKaU73yqWjgom7C12yxow+ev+to51byrvLjKzg6CYG1a4XXvi3tPxq3\nsmPi9WIsgtRqAEFQ8TmDn5XpNpaYbg==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIEPzCCAyegAwIBAgIBATANBgkqhkiG9w0BAQUFADB+MQswCQYDVQQGEwJHQjEb\nMBkGA1UECAwSR3JlYXRlciBNYW5jaGVzdGVyMRAwDgYDVQQHDAdTYWxmb3JkMRow\nGAYDVQQKDBFDb21vZG8gQ0EgTGltaXRlZDEkMCIGA1UEAwwbU2VjdXJlIENlcnRp\nZmljYXRlIFNlcnZpY2VzMB4XDTA0MDEwMTAwMDAwMFoXDTI4MTIzMTIzNTk1OVow\nfjELMAkGA1UEBhMCR0IxGzAZBgNVBAgMEkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4G\nA1UEBwwHU2FsZm9yZDEaMBgGA1UECgwRQ29tb2RvIENBIExpbWl0ZWQxJDAiBgNV\nBAMMG1NlY3VyZSBDZXJ0aWZpY2F0ZSBTZXJ2aWNlczCCASIwDQYJKoZIhvcNAQEB\nBQADggEPADCCAQoCggEBAMBxM4KK0HDrc4eCQNUd5MvJDkKQ+d40uaG6EfQlhfPM\ncm3ye5drswfxdySRXyWP9nQ95IDC+DwN879A6vfIUtFyb+/Iq0G4bi4XKpVpDM3S\nHpR7LZQdqnXXs5jLrLxkU0C8j6ysNstcrbvd4JQX7NFc0L/vpZXJkMWwrPsbQ996\nCF23uPJAGysnnlDOXmWCiIxe004MeuoIkbY2qitC++rCoznl2yY4rYsK7hljxxwk\n3wN42ubqwUcaCwtGCd0C/N7Lh1/XMGNooa7cMqG6vv5Eq2i2pRcV/b3Vp6ea5EQz\n6YiO/O1R65NxTq0B50SOqy3LqP4BSUjwwN3HaNiS/j0CAwEAAaOBxzCBxDAdBgNV\nHQ4EFgQUPNiTiMLAggnMAZkGkyDpnnAJY08wDgYDVR0PAQH/BAQDAgEGMA8GA1Ud\nEwEB/wQFMAMBAf8wgYEGA1UdHwR6MHgwO6A5oDeGNWh0dHA6Ly9jcmwuY29tb2Rv\nY2EuY29tL1NlY3VyZUNlcnRpZmljYXRlU2VydmljZXMuY3JsMDmgN6A1hjNodHRw\nOi8vY3JsLmNvbW9kby5uZXQvU2VjdXJlQ2VydGlmaWNhdGVTZXJ2aWNlcy5jcmww\nDQYJKoZIhvcNAQEFBQADggEBAIcBbSMdflsXfcFhMs+P5/OKlFlm4J4oqF7Tt/Q0\n5qo5spcWxYJvMqTpjOev/e/C6LlLqqP05tqNZSH7uoDrJiiFGv45jN5bBAS0VPmj\nZ55B+glSzAVIqMk/IQQezkhr/IXownuvf7fM+F86/TXGDe+X3EyrEeFryzHRbPtI\ngKvcnDe4IRRLDXE97IMzbtFuMhbsmMcWi1mmNKsFVy2T96oTy9IT4rcuO81rUBcJ\naD61JlfutuC23bkpgHl9j6PwpCikFcSF9CfUa7/lXORlAnZUtOM3ZiTTGWHIUhDl\nizeauan5Hb/qmZJhlv8BzaFfDbxxvA6sCx1HRR3B7Hzs/Sk=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIEQzCCAyugAwIBAgIBATANBgkqhkiG9w0BAQUFADB/MQswCQYDVQQGEwJHQjEb\nMBkGA1UECAwSR3JlYXRlciBNYW5jaGVzdGVyMRAwDgYDVQQHDAdTYWxmb3JkMRow\nGAYDVQQKDBFDb21vZG8gQ0EgTGltaXRlZDElMCMGA1UEAwwcVHJ1c3RlZCBDZXJ0\naWZpY2F0ZSBTZXJ2aWNlczAeFw0wNDAxMDEwMDAwMDBaFw0yODEyMzEyMzU5NTla\nMH8xCzAJBgNVBAYTAkdCMRswGQYDVQQIDBJHcmVhdGVyIE1hbmNoZXN0ZXIxEDAO\nBgNVBAcMB1NhbGZvcmQxGjAYBgNVBAoMEUNvbW9kbyBDQSBMaW1pdGVkMSUwIwYD\nVQQDDBxUcnVzdGVkIENlcnRpZmljYXRlIFNlcnZpY2VzMIIBIjANBgkqhkiG9w0B\nAQEFAAOCAQ8AMIIBCgKCAQEA33FvNlhTWvI2VFeAxHQIIO0Yfyod5jWaHiWsnOWW\nfnJSoBVC21ndZHoa0Lh73TkVvFVIxO06AOoxEbrycXQaZ7jPM8yoMa+j49d/vzMt\nTGo87IvDktJTdyR0nAducPy9C1t2ul/y/9c3S0pgePfw+spwtOpZqqPOSC+pw7IL\nfhdyFgymBwwbOM/JYrc/oJOlh0Hyt3BAd9i+FHzjqMB6juljatEPmsbS9Is6FARW\n1O24zG71++IsWL1/T2sr92AkWCTOJu80kTrV44HQsvAEAtdbtz6SrGsSivnkBbA7\nkUlcsutT6vifR4buv5XAwAaf0lteERv0xwQ1KdJVXOTt6wIDAQABo4HJMIHGMB0G\nA1UdDgQWBBTFe1i97doladL3WRaoszLAeydb9DAOBgNVHQ8BAf8EBAMCAQYwDwYD\nVR0TAQH/BAUwAwEB/zCBgwYDVR0fBHwwejA8oDqgOIY2aHR0cDovL2NybC5jb21v\nZG9jYS5jb20vVHJ1c3RlZENlcnRpZmljYXRlU2VydmljZXMuY3JsMDqgOKA2hjRo\ndHRwOi8vY3JsLmNvbW9kby5uZXQvVHJ1c3RlZENlcnRpZmljYXRlU2VydmljZXMu\nY3JsMA0GCSqGSIb3DQEBBQUAA4IBAQDIk4E7ibSvuIQSTI3S8NtwuleGFTQQuS9/\nHrCoiWChisJ3DFBKmwCL2Iv0QeLQg4pKHBQGsKNoBXAxMKdTmw7pSqBYaWcOrp32\npSxBvzwGa+RZzG0Q8ZZvH9/0BAKkn0U+yNj6NkZEUD+Cl5EfKNsYEYwq5GWDVxIS\njBc/lDb+XbDABHcTuPQV1T84zJQ6VdCsmPW6AF/ghhmBeC8owH7TzEIK9a5QoNE+\nxqFx7D+gIIxmOom0jtTYsU0lR+4viMi14QVFwL4Ucd56/Y57fU0IlqUSc/Atyjcn\ndBInTMu2l+nZrghtWjlA3QVHdWpaIbOjGM9O9y5Xt5hwXsjEeLBi\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIDoTCCAomgAwIBAgILBAAAAAABD4WqLUgwDQYJKoZIhvcNAQEFBQAwOzEYMBYG\nA1UEChMPQ3liZXJ0cnVzdCwgSW5jMR8wHQYDVQQDExZDeWJlcnRydXN0IEdsb2Jh\nbCBSb290MB4XDTA2MTIxNTA4MDAwMFoXDTIxMTIxNTA4MDAwMFowOzEYMBYGA1UE\nChMPQ3liZXJ0cnVzdCwgSW5jMR8wHQYDVQQDExZDeWJlcnRydXN0IEdsb2JhbCBS\nb290MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA+Mi8vRRQZhP/8NN5\n7CPytxrHjoXxEnOmGaoQ25yiZXRadz5RfVb23CO21O1fWLE3TdVJDm71aofW0ozS\nJ8bi/zafmGWgE07GKmSb1ZASzxQG9Dvj1Ci+6A74q05IlG2OlTEQXO2iLb3VOm2y\nHLtgwEZLAfVJrn5GitB0jaEMAs7u/OePuGtm839EAL9mJRQr3RAwHQeWP032a7iP\nt3sMpTjr3kfb1V05/Iin89cqdPHoWqI7n1C6poxFNcJQZZXcY4Lv3b93TZxiyWNz\nFtApD0mpSPCzqrdsxacwOUBdrsTiXSZT8M4cIwhhqJQZugRiQOwfOHB3EgZxpzAY\nXSUnpQIDAQABo4GlMIGiMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMBAf8EBTADAQH/\nMB0GA1UdDgQWBBS2CHsNesysIEyGVjJez6tuhS1wVzA/BgNVHR8EODA2MDSgMqAw\nhi5odHRwOi8vd3d3Mi5wdWJsaWMtdHJ1c3QuY29tL2NybC9jdC9jdHJvb3QuY3Js\nMB8GA1UdIwQYMBaAFLYIew16zKwgTIZWMl7Pq26FLXBXMA0GCSqGSIb3DQEBBQUA\nA4IBAQBW7wojoFROlZfJ+InaRcHUowAl9B8Tq7ejhVhpwjCt2BWKLePJzYFa+HMj\nWqd8BfP9IjsO0QbE2zZMcwSO5bAi5MXzLqXZI+O4Tkogp24CJJ8iYGd7ix1yCcUx\nXOl5n4BHPa2hCwcUPUf/A2kaDAtE52Mlp3+yybh2hO0j9n0Hq0V+09+zv+mKts2o\nomcrUtW3ZfA5TGOgkXmTUg9U3YO7n9GPp1Nzw8v/MOx8BLjYRB+TX3EJIrduPuoc\nA06dGiBh+4E37F78CkWr1+cXVdCg6mCbpvbjjFspwgZgFJ0tl0ypkxWdYcQBX0jW\nWL1WMRJOEcgh4LMRkWXbtKaIOM5V\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIEMzCCAxugAwIBAgIDCYPzMA0GCSqGSIb3DQEBCwUAME0xCzAJBgNVBAYTAkRF\nMRUwEwYDVQQKDAxELVRydXN0IEdtYkgxJzAlBgNVBAMMHkQtVFJVU1QgUm9vdCBD\nbGFzcyAzIENBIDIgMjAwOTAeFw0wOTExMDUwODM1NThaFw0yOTExMDUwODM1NTha\nME0xCzAJBgNVBAYTAkRFMRUwEwYDVQQKDAxELVRydXN0IEdtYkgxJzAlBgNVBAMM\nHkQtVFJVU1QgUm9vdCBDbGFzcyAzIENBIDIgMjAwOTCCASIwDQYJKoZIhvcNAQEB\nBQADggEPADCCAQoCggEBANOySs96R+91myP6Oi/WUEWJNTrGa9v+2wBoqOADER03\nUAifTUpolDWzU9GUY6cgVq/eUXjsKj3zSEhQPgrfRlWLJ23DEE0NkVJD2IfgXU42\ntSHKXzlABF9bfsyjxiupQB7ZNoTWSPOSHjRGICTBpFGOShrvUD9pXRl/RcPHAY9R\nySPocq60vFYJfxLLHLGvKZAKyVXMD9O0Gu1HNVpK7ZxzBCHQqr0ME7UAyiZsxGsM\nlFqVlNpQmvH/pStmMaTJOKDfHR+4CS7zp+hnUquVH+BGPtikw8paxTGA6Eian5Rp\n/hnd2HN8gcqW3o7tszIFZYQ05ub9VxC1X3a/L7AQDcUCAwEAAaOCARowggEWMA8G\nA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFP3aFMSfMN4hvR5COfyrYyNJ4PGEMA4G\nA1UdDwEB/wQEAwIBBjCB0wYDVR0fBIHLMIHIMIGAoH6gfIZ6bGRhcDovL2RpcmVj\ndG9yeS5kLXRydXN0Lm5ldC9DTj1ELVRSVVNUJTIwUm9vdCUyMENsYXNzJTIwMyUy\nMENBJTIwMiUyMDIwMDksTz1ELVRydXN0JTIwR21iSCxDPURFP2NlcnRpZmljYXRl\ncmV2b2NhdGlvbmxpc3QwQ6BBoD+GPWh0dHA6Ly93d3cuZC10cnVzdC5uZXQvY3Js\nL2QtdHJ1c3Rfcm9vdF9jbGFzc18zX2NhXzJfMjAwOS5jcmwwDQYJKoZIhvcNAQEL\nBQADggEBAH+X2zDI36ScfSF6gHDOFBJpiBSVYEQBrLLpME+bUMJm2H6NMLVwMeni\nacfzcNsgFYbQDfC+rAF1hM5+n02/t2A7nPPKHeJeaNijnZflQGDSNiH+0LS4F9p0\no3/U37CYAqxva2ssJSRyoWXuJVrl5jLn8t+rSfrzkGkj2wTZ51xY/GXUl77M/C4K\nzCUqNQT4YJEVdT1B/yMfGchs64JTBKbkTCJNjYy6zltz7GRUUG3RnFX7acM2w4y8\nPIWmawomDeCTmGCufsYkl4phX5GOZpIJhzbNi5stPvZR1FDUWSi9g/LMKHtThm3Y\nJohw1+qRzT65ysCQblrGXnRl11z+o+I=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIEQzCCAyugAwIBAgIDCYP0MA0GCSqGSIb3DQEBCwUAMFAxCzAJBgNVBAYTAkRF\nMRUwEwYDVQQKDAxELVRydXN0IEdtYkgxKjAoBgNVBAMMIUQtVFJVU1QgUm9vdCBD\nbGFzcyAzIENBIDIgRVYgMjAwOTAeFw0wOTExMDUwODUwNDZaFw0yOTExMDUwODUw\nNDZaMFAxCzAJBgNVBAYTAkRFMRUwEwYDVQQKDAxELVRydXN0IEdtYkgxKjAoBgNV\nBAMMIUQtVFJVU1QgUm9vdCBDbGFzcyAzIENBIDIgRVYgMjAwOTCCASIwDQYJKoZI\nhvcNAQEBBQADggEPADCCAQoCggEBAJnxhDRwui+3MKCOvXwEz75ivJn9gpfSegpn\nljgJ9hBOlSJzmY3aFS3nBfwZcyK3jpgAvDw9rKFs+9Z5JUut8Mxk2og+KbgPCdM0\n3TP1YtHhzRnp7hhPTFiu4h7WDFsVWtg6uMQYZB7jM7K1iXdODL/ZlGsTl28So/6Z\nqQTMFexgaDbtCHu39b+T7WYxg4zGcTSHThfqr4uRjRxWQa4iN1438h3Z0S0NL2lR\np75mpoo6Kr3HGrHhFPC+Oh25z1uxav60sUYgovseO3Dvk5h9jHOW8sXvhXCtKSb8\nHgQ+HKDYD8tSg2J87otTlZCpV6LqYQXY+U3EJ/pure3511H3a6UCAwEAAaOCASQw\nggEgMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFNOUikxiEyoZLsyvcop9Ntea\nHNxnMA4GA1UdDwEB/wQEAwIBBjCB3QYDVR0fBIHVMIHSMIGHoIGEoIGBhn9sZGFw\nOi8vZGlyZWN0b3J5LmQtdHJ1c3QubmV0L0NOPUQtVFJVU1QlMjBSb290JTIwQ2xh\nc3MlMjAzJTIwQ0ElMjAyJTIwRVYlMjAyMDA5LE89RC1UcnVzdCUyMEdtYkgsQz1E\nRT9jZXJ0aWZpY2F0ZXJldm9jYXRpb25saXN0MEagRKBChkBodHRwOi8vd3d3LmQt\ndHJ1c3QubmV0L2NybC9kLXRydXN0X3Jvb3RfY2xhc3NfM19jYV8yX2V2XzIwMDku\nY3JsMA0GCSqGSIb3DQEBCwUAA4IBAQA07XtaPKSUiO8aEXUHL7P+PPoeUSbrh/Yp\n3uDx1MYkCenBz1UbtDDZzhr+BlGmFaQt77JLvyAoJUnRpjZ3NOhk31KxEcdzes05\nnsKtjHEh8lprr988TlWvsoRlFIm5d8sqMb7Po23Pb0iUMkZv53GMoKaEGTcH8gNF\nCSuGdXzfX2lXANtu2KZyIktQ1HWYVt+3GP9DQ1CuekR78HlR10M9p9OB0/DJT7na\nxpeG0ILD5EJt/rDiZE4OJudANCa1CInXCGNjOCd1HjPqbqjdn5lPdE2BiYBL3ZqX\nKVwvvoFBuYz/6n1gBp7N1z3TLqMVvKjmJuVvw9y4AyHqnxbxLFS1\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIECTCCAvGgAwIBAgIQDV6ZCtadt3js2AdWO4YV2TANBgkqhkiG9w0BAQUFADBb\nMQswCQYDVQQGEwJVUzEgMB4GA1UEChMXRGlnaXRhbCBTaWduYXR1cmUgVHJ1c3Qx\nETAPBgNVBAsTCERTVCBBQ0VTMRcwFQYDVQQDEw5EU1QgQUNFUyBDQSBYNjAeFw0w\nMzExMjAyMTE5NThaFw0xNzExMjAyMTE5NThaMFsxCzAJBgNVBAYTAlVTMSAwHgYD\nVQQKExdEaWdpdGFsIFNpZ25hdHVyZSBUcnVzdDERMA8GA1UECxMIRFNUIEFDRVMx\nFzAVBgNVBAMTDkRTVCBBQ0VTIENBIFg2MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8A\nMIIBCgKCAQEAuT31LMmU3HWKlV1j6IR3dma5WZFcRt2SPp/5DgO0PWGSvSMmtWPu\nktKe1jzIDZBfZIGxqAgNTNj50wUoUrQBJcWVHAx+PhCEdc/BGZFjz+iokYi5Q1K7\ngLFViYsx+tC3dr5BPTCapCIlF3PoHuLTrCq9Wzgh1SpL11V94zpVvddtawJXa+ZH\nfAjIgrrep4c9oW24MFbCswKBXy314powGCi4ZtPLAZZv6opFVdbgnf9nKxcCpk4a\nahELfrd755jWjHZvwTvbUJN+5dCOHze4vbrGn2zpfDPyMjwmR/onJALJfh1biEIT\najV8fTXpLmaRcpPVMibEdPVTo7NdmvYJywIDAQABo4HIMIHFMA8GA1UdEwEB/wQF\nMAMBAf8wDgYDVR0PAQH/BAQDAgHGMB8GA1UdEQQYMBaBFHBraS1vcHNAdHJ1c3Rk\nc3QuY29tMGIGA1UdIARbMFkwVwYKYIZIAWUDAgEBATBJMEcGCCsGAQUFBwIBFjto\ndHRwOi8vd3d3LnRydXN0ZHN0LmNvbS9jZXJ0aWZpY2F0ZXMvcG9saWN5L0FDRVMt\naW5kZXguaHRtbDAdBgNVHQ4EFgQUCXIGThhDD+XWzMNqizF7eI+og7gwDQYJKoZI\nhvcNAQEFBQADggEBAKPYjtay284F5zLNAdMEA+V25FYrnJmQ6AgwbN99Pe7lv7Uk\nQIRJ4dEorsTCOlMwiPH1d25Ryvr/ma8kXxug/fKshMrfqfBfBC6tFr8hlxCBPeP/\nh40y3JTlR4peahPJlJU90u7INJXQgNStMgiAVDzgvVJT11J8smk/f3rPanTK+gQq\nnExaBqXpIK1FZg9p8d2/6eMyi/rgwYZNcjwu2JN4Cir42NInPRmJX1p7ijvMDNpR\nrscL9yuwNwXsvFcj4jjSm2jzVhKIT0J8uDHEtdvkyCE06UgRNe76x5JXxZ805Mf2\n9w4LTJxoeHtxMcfrHuBnQfO3oKfN5XozNmr6mis=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIDSjCCAjKgAwIBAgIQRK+wgNajJ7qJMDmGLvhAazANBgkqhkiG9w0BAQUFADA/\nMSQwIgYDVQQKExtEaWdpdGFsIFNpZ25hdHVyZSBUcnVzdCBDby4xFzAVBgNVBAMT\nDkRTVCBSb290IENBIFgzMB4XDTAwMDkzMDIxMTIxOVoXDTIxMDkzMDE0MDExNVow\nPzEkMCIGA1UEChMbRGlnaXRhbCBTaWduYXR1cmUgVHJ1c3QgQ28uMRcwFQYDVQQD\nEw5EU1QgUm9vdCBDQSBYMzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEB\nAN+v6ZdQCINXtMxiZfaQguzH0yxrMMpb7NnDfcdAwRgUi+DoM3ZJKuM/IUmTrE4O\nrz5Iy2Xu/NMhD2XSKtkyj4zl93ewEnu1lcCJo6m67XMuegwGMoOifooUMM0RoOEq\nOLl5CjH9UL2AZd+3UWODyOKIYepLYYHsUmu5ouJLGiifSKOeDNoJjj4XLh7dIN9b\nxiqKqy69cK3FCxolkHRyxXtqqzTWMIn/5WgTe1QLyNau7Fqckh49ZLOMxt+/yUFw\n7BZy1SbsOFU5Q9D8/RhcQPGX69Wam40dutolucbY38EVAjqr2m7xPi71XAicPNaD\naeQQmxkqtilX4+U9m5/wAl0CAwEAAaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAOBgNV\nHQ8BAf8EBAMCAQYwHQYDVR0OBBYEFMSnsaR7LHH62+FLkHX/xBVghYkQMA0GCSqG\nSIb3DQEBBQUAA4IBAQCjGiybFwBcqR7uKGY3Or+Dxz9LwwmglSBd49lZRNI+DT69\nikugdB/OEIKcdBodfpga3csTS7MgROSR6cz8faXbauX+5v3gTt23ADq1cEmv8uXr\nAvHRAosZy5Q6XkjEGB5YGV8eAlrwDPGxrancWYaLbumR9YbK+rlmM6pZW87ipxZz\nR8srzJmwN0jP41ZL9c8PDHIyh8bwRLtTcm1D9SZImlJnt1ir/md2cXjbDaJWFBM5\nJDGFoqgCWjBH4d1QB7wCCZAA62RjYJsWvIjJEubSfZGL+T0yjWW06XyxV3bqxbYo\nOb8VZRzI9neWagqNdwvYkQsEjgfbKbYK7p2CNTUQ\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIDnzCCAoegAwIBAgIBJjANBgkqhkiG9w0BAQUFADBxMQswCQYDVQQGEwJERTEc\nMBoGA1UEChMTRGV1dHNjaGUgVGVsZWtvbSBBRzEfMB0GA1UECxMWVC1UZWxlU2Vj\nIFRydXN0IENlbnRlcjEjMCEGA1UEAxMaRGV1dHNjaGUgVGVsZWtvbSBSb290IENB\nIDIwHhcNOTkwNzA5MTIxMTAwWhcNMTkwNzA5MjM1OTAwWjBxMQswCQYDVQQGEwJE\nRTEcMBoGA1UEChMTRGV1dHNjaGUgVGVsZWtvbSBBRzEfMB0GA1UECxMWVC1UZWxl\nU2VjIFRydXN0IENlbnRlcjEjMCEGA1UEAxMaRGV1dHNjaGUgVGVsZWtvbSBSb290\nIENBIDIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCrC6M14IspFLEU\nha88EOQ5bzVdSq7d6mGNlUn0b2SjGmBmpKlAIoTZ1KXleJMOaAGtuU1cOs7TuKhC\nQN/Po7qCWWqSG6wcmtoIKyUn+WkjR/Hg6yx6m/UTAtB+NHzCnjwAWav12gz1Mjwr\nrFDa1sPeg5TKqAyZMg4ISFZbavva4VhYAUlfckE8FQYBjl2tqriTtM2e66foai1S\nNNs671x1Udrb8zH57nGYMsRUFUQM+ZtV7a3fGAigo4aKSe5TBY8ZTNXeWHmb0moc\nQqvF1afPaA+W5OFhmHZhyJF81j4A4pFQh+GdCuatl9Idxjp9y7zaAzTVjlsB9WoH\ntxa2bkp/AgMBAAGjQjBAMB0GA1UdDgQWBBQxw3kbuvVT1xfgiXotF2wKsyudMzAP\nBgNVHRMECDAGAQH/AgEFMA4GA1UdDwEB/wQEAwIBBjANBgkqhkiG9w0BAQUFAAOC\nAQEAlGRZrTlk5ynrE/5aw4sTV8gEJPB0d8Bg42f76Ymmg7+Wgnxu1MM9756Abrsp\ntJh6sTtU6zkXR34ajgv8HzFZMQSyzhfzLMdiNlXiItiJVbSYSKpk+tYcNthEeFpa\nIzpXl/V6ME+un2pMSyuOoAPjPuCp1NJ70rOo4nI8rZ7/gFnkm0W09juwzTkZmDLl\n6iFhkOQxIY40sfcvNUqFENrnijchvllj4PKFiDFT1FQUhXB59C4Gdyd1Lx+4ivn+\nxbrYNuSD7Odlt79jWvNGr4GUN9RBjNYj1h7P9WgbRGOiWrqnNVmh5XAFmw4jV5mU\nCm26OWMohpLzGITY+9HPBVZkVw==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIDtzCCAp+gAwIBAgIQDOfg5RfYRv6P5WD8G/AwOTANBgkqhkiG9w0BAQUFADBl\nMQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3\nd3cuZGlnaWNlcnQuY29tMSQwIgYDVQQDExtEaWdpQ2VydCBBc3N1cmVkIElEIFJv\nb3QgQ0EwHhcNMDYxMTEwMDAwMDAwWhcNMzExMTEwMDAwMDAwWjBlMQswCQYDVQQG\nEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3d3cuZGlnaWNl\ncnQuY29tMSQwIgYDVQQDExtEaWdpQ2VydCBBc3N1cmVkIElEIFJvb3QgQ0EwggEi\nMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCtDhXO5EOAXLGH87dg+XESpa7c\nJpSIqvTO9SA5KFhgDPiA2qkVlTJhPLWxKISKityfCgyDF3qPkKyK53lTXDGEKvYP\nmDI2dsze3Tyoou9q+yHyUmHfnyDXH+Kx2f4YZNISW1/5WBg1vEfNoTb5a3/UsDg+\nwRvDjDPZ2C8Y/igPs6eD1sNuRMBhNZYW/lmci3Zt1/GiSw0r/wty2p5g0I6QNcZ4\nVYcgoc/lbQrISXwxmDNsIumH0DJaoroTghHtORedmTpyoeb6pNnVFzF1roV9Iq4/\nAUaG9ih5yLHa5FcXxH4cDrC0kqZWs72yl+2qp/C3xag/lRbQ/6GW6whfGHdPAgMB\nAAGjYzBhMA4GA1UdDwEB/wQEAwIBhjAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQW\nBBRF66Kv9JLLgjEtUYunpyGd823IDzAfBgNVHSMEGDAWgBRF66Kv9JLLgjEtUYun\npyGd823IDzANBgkqhkiG9w0BAQUFAAOCAQEAog683+Lt8ONyc3pklL/3cmbYMuRC\ndWKuh+vy1dneVrOfzM4UKLkNl2BcEkxY5NM9g0lFWJc1aRqoR+pWxnmrEthngYTf\nfwk8lOa4JiwgvT2zKIn3X/8i4peEH+ll74fg38FnSbNd67IJKusm7Xi+fT8r87cm\nNW1fiQG2SVufAQWbqz0lwcy2f8Lxb4bG+mRo64EtlOtCt/qMHt1i8b5QZ7dsvfPx\nH2sMNgcWfzd8qVttevESRmCD1ycEvkvOl77DZypoEd+A5wwzZr8TDRRu838fYxAe\n+o0bJW1sj6W3YQGx0qMmoRBxna3iw/nDmVG3KwcIzi7mULKn+gpFL6Lw8g==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIDljCCAn6gAwIBAgIQC5McOtY5Z+pnI7/Dr5r0SzANBgkqhkiG9w0BAQsFADBl\nMQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3\nd3cuZGlnaWNlcnQuY29tMSQwIgYDVQQDExtEaWdpQ2VydCBBc3N1cmVkIElEIFJv\nb3QgRzIwHhcNMTMwODAxMTIwMDAwWhcNMzgwMTE1MTIwMDAwWjBlMQswCQYDVQQG\nEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3d3cuZGlnaWNl\ncnQuY29tMSQwIgYDVQQDExtEaWdpQ2VydCBBc3N1cmVkIElEIFJvb3QgRzIwggEi\nMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDZ5ygvUj82ckmIkzTz+GoeMVSA\nn61UQbVH35ao1K+ALbkKz3X9iaV9JPrjIgwrvJUXCzO/GU1BBpAAvQxNEP4Htecc\nbiJVMWWXvdMX0h5i89vqbFCMP4QMls+3ywPgym2hFEwbid3tALBSfK+RbLE4E9Hp\nEgjAALAcKxHad3A2m67OeYfcgnDmCXRwVWmvo2ifv922ebPynXApVfSr/5Vh88lA\nbx3RvpO704gqu52/clpWcTs/1PPRCv4o76Pu2ZmvA9OPYLfykqGxvYmJHzDNw6Yu\nYjOuFgJ3RFrngQo8p0Quebg/BLxcoIfhG69Rjs3sLPr4/m3wOnyqi+RnlTGNAgMB\nAAGjQjBAMA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgGGMB0GA1UdDgQW\nBBTOw0q5mVXyuNtgv6l+vVa1lzan1jANBgkqhkiG9w0BAQsFAAOCAQEAyqVVjOPI\nQW5pJ6d1Ee88hjZv0p3GeDgdaZaikmkuOGybfQTUiaWxMTeKySHMq2zNixya1r9I\n0jJmwYrA8y8678Dj1JGG0VDjA9tzd29KOVPt3ibHtX2vK0LRdWLjSisCx1BL4Gni\nlmwORGYQRI+tBev4eaymG+g3NJ1TyWGqolKvSnAWhsI6yLETcDbYz+70CjTVW0z9\nB5yiutkBclzzTcHdDrEcDcRjvq30FPuJ7KJBDkzMyFdA0G4Dqs0MjomZmWzwPDCv\nON9vvKO+KSAnq3T/EyJ43pdSVR6DtVQgA+6uwE9W3jfMw3+qBCe703e4YtsXfJwo\nIhNzbM8m9Yop5w==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIICRjCCAc2gAwIBAgIQC6Fa+h3foLVJRK/NJKBs7DAKBggqhkjOPQQDAzBlMQsw\nCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3d3cu\nZGlnaWNlcnQuY29tMSQwIgYDVQQDExtEaWdpQ2VydCBBc3N1cmVkIElEIFJvb3Qg\nRzMwHhcNMTMwODAxMTIwMDAwWhcNMzgwMTE1MTIwMDAwWjBlMQswCQYDVQQGEwJV\nUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3d3cuZGlnaWNlcnQu\nY29tMSQwIgYDVQQDExtEaWdpQ2VydCBBc3N1cmVkIElEIFJvb3QgRzMwdjAQBgcq\nhkjOPQIBBgUrgQQAIgNiAAQZ57ysRGXtzbg/WPuNsVepRC0FFfLvC/8QdJ+1YlJf\nZn4f5dwbRXkLzMZTCp2NXQLZqVneAlr2lSoOjThKiknGvMYDOAdfVdp+CW7if17Q\nRSAPWXYQ1qAk8C3eNvJsKTmjQjBAMA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/\nBAQDAgGGMB0GA1UdDgQWBBTL0L2p4ZgFUaFNN6KDec6NHSrkhDAKBggqhkjOPQQD\nAwNnADBkAjAlpIFFAmsSS3V0T8gj43DydXLefInwz5FyYZ5eEJJZVrmDxxDnOOlY\nJjZ91eQ0hjkCMHw2U/Aw5WJjOpnitqM7mzT6HtoQknFekROn3aRukswy1vUhZscv\n6pZjamVFkpUBtA==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIDrzCCApegAwIBAgIQCDvgVpBCRrGhdWrJWZHHSjANBgkqhkiG9w0BAQUFADBh\nMQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3\nd3cuZGlnaWNlcnQuY29tMSAwHgYDVQQDExdEaWdpQ2VydCBHbG9iYWwgUm9vdCBD\nQTAeFw0wNjExMTAwMDAwMDBaFw0zMTExMTAwMDAwMDBaMGExCzAJBgNVBAYTAlVT\nMRUwEwYDVQQKEwxEaWdpQ2VydCBJbmMxGTAXBgNVBAsTEHd3dy5kaWdpY2VydC5j\nb20xIDAeBgNVBAMTF0RpZ2lDZXJ0IEdsb2JhbCBSb290IENBMIIBIjANBgkqhkiG\n9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4jvhEXLeqKTTo1eqUKKPC3eQyaKl7hLOllsB\nCSDMAZOnTjC3U/dDxGkAV53ijSLdhwZAAIEJzs4bg7/fzTtxRuLWZscFs3YnFo97\nnh6Vfe63SKMI2tavegw5BmV/Sl0fvBf4q77uKNd0f3p4mVmFaG5cIzJLv07A6Fpt\n43C/dxC//AH2hdmoRBBYMql1GNXRor5H4idq9Joz+EkIYIvUX7Q6hL+hqkpMfT7P\nT19sdl6gSzeRntwi5m3OFBqOasv+zbMUZBfHWymeMr/y7vrTC0LUq7dBMtoM1O/4\ngdW7jVg/tRvoSSiicNoxBN33shbyTApOB6jtSj1etX+jkMOvJwIDAQABo2MwYTAO\nBgNVHQ8BAf8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUA95QNVbR\nTLtm8KPiGxvDl7I90VUwHwYDVR0jBBgwFoAUA95QNVbRTLtm8KPiGxvDl7I90VUw\nDQYJKoZIhvcNAQEFBQADggEBAMucN6pIExIK+t1EnE9SsPTfrgT1eXkIoyQY/Esr\nhMAtudXH/vTBH1jLuG2cenTnmCmrEbXjcKChzUyImZOMkXDiqw8cvpOp/2PV5Adg\n06O/nVsJ8dWO41P0jmP6P6fbtGbfYmbW0W5BjfIttep3Sp+dWOIrWcBAI+0tKIJF\nPnlUkiaY4IBIqDfv8NZ5YBberOgOzW6sRBc4L0na4UU+Krk2U886UAb3LujEV0ls\nYSEY1QSteDwsOoBrp+uvFRTp2InBuThs4pFsiv9kuXclVzDAGySj4dzp30d8tbQk\nCAUw7C29C79Fv1C5qfPrmAESrciIxpg0X40KPMbp1ZWVbd4=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIDjjCCAnagAwIBAgIQAzrx5qcRqaC7KGSxHQn65TANBgkqhkiG9w0BAQsFADBh\nMQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3\nd3cuZGlnaWNlcnQuY29tMSAwHgYDVQQDExdEaWdpQ2VydCBHbG9iYWwgUm9vdCBH\nMjAeFw0xMzA4MDExMjAwMDBaFw0zODAxMTUxMjAwMDBaMGExCzAJBgNVBAYTAlVT\nMRUwEwYDVQQKEwxEaWdpQ2VydCBJbmMxGTAXBgNVBAsTEHd3dy5kaWdpY2VydC5j\nb20xIDAeBgNVBAMTF0RpZ2lDZXJ0IEdsb2JhbCBSb290IEcyMIIBIjANBgkqhkiG\n9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuzfNNNx7a8myaJCtSnX/RrohCgiN9RlUyfuI\n2/Ou8jqJkTx65qsGGmvPrC3oXgkkRLpimn7Wo6h+4FR1IAWsULecYxpsMNzaHxmx\n1x7e/dfgy5SDN67sH0NO3Xss0r0upS/kqbitOtSZpLYl6ZtrAGCSYP9PIUkY92eQ\nq2EGnI/yuum06ZIya7XzV+hdG82MHauVBJVJ8zUtluNJbd134/tJS7SsVQepj5Wz\ntCO7TG1F8PapspUwtP1MVYwnSlcUfIKdzXOS0xZKBgyMUNGPHgm+F6HmIcr9g+UQ\nvIOlCsRnKPZzFBQ9RnbDhxSJITRNrw9FDKZJobq7nMWxM4MphQIDAQABo0IwQDAP\nBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIBhjAdBgNVHQ4EFgQUTiJUIBiV\n5uNu5g/6+rkS7QYXjzkwDQYJKoZIhvcNAQELBQADggEBAGBnKJRvDkhj6zHd6mcY\n1Yl9PMWLSn/pvtsrF9+wX3N3KjITOYFnQoQj8kVnNeyIv/iPsGEMNKSuIEyExtv4\nNeF22d+mQrvHRAiGfzZ0JFrabA0UWTW98kndth/Jsw1HKj2ZL7tcu7XUIOGZX1NG\nFdtom/DzMNU+MeKNhJ7jitralj41E6Vf8PlwUHBHQRFXGU7Aj64GxJUTFy8bJZ91\n8rGOmaFvE7FBcf6IKshPECBV1/MUReXgRPTqh5Uykw7+U0b6LJ3/iyK5S9kJRaTe\npLiaWN0bfVKfjllDiIGknibVb63dDcY3fe0Dkhvld1927jyNxF1WW6LZZm6zNTfl\nMrY=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIICPzCCAcWgAwIBAgIQBVVWvPJepDU1w6QP1atFcjAKBggqhkjOPQQDAzBhMQsw\nCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3d3cu\nZGlnaWNlcnQuY29tMSAwHgYDVQQDExdEaWdpQ2VydCBHbG9iYWwgUm9vdCBHMzAe\nFw0xMzA4MDExMjAwMDBaFw0zODAxMTUxMjAwMDBaMGExCzAJBgNVBAYTAlVTMRUw\nEwYDVQQKEwxEaWdpQ2VydCBJbmMxGTAXBgNVBAsTEHd3dy5kaWdpY2VydC5jb20x\nIDAeBgNVBAMTF0RpZ2lDZXJ0IEdsb2JhbCBSb290IEczMHYwEAYHKoZIzj0CAQYF\nK4EEACIDYgAE3afZu4q4C/sLfyHS8L6+c/MzXRq8NOrexpu80JX28MzQC7phW1FG\nfp4tn+6OYwwX7Adw9c+ELkCDnOg/QW07rdOkFFk2eJ0DQ+4QE2xy3q6Ip6FrtUPO\nZ9wj/wMco+I+o0IwQDAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIBhjAd\nBgNVHQ4EFgQUs9tIpPmhxdiuNkHMEWNpYim8S8YwCgYIKoZIzj0EAwMDaAAwZQIx\nAK288mw/EkrRLTnDCgmXc/SINoyIJ7vmiI1Qhadj+Z4y3maTD/HMsQmP3Wyr+mt/\noAIwOWZbwmSNuJ5Q3KjVSaLtx9zRSX8XAbjIho9OjIgrqJqpisXRAL34VOKa5Vt8\nsycX\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIDxTCCAq2gAwIBAgIQAqxcJmoLQJuPC3nyrkYldzANBgkqhkiG9w0BAQUFADBs\nMQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3\nd3cuZGlnaWNlcnQuY29tMSswKQYDVQQDEyJEaWdpQ2VydCBIaWdoIEFzc3VyYW5j\nZSBFViBSb290IENBMB4XDTA2MTExMDAwMDAwMFoXDTMxMTExMDAwMDAwMFowbDEL\nMAkGA1UEBhMCVVMxFTATBgNVBAoTDERpZ2lDZXJ0IEluYzEZMBcGA1UECxMQd3d3\nLmRpZ2ljZXJ0LmNvbTErMCkGA1UEAxMiRGlnaUNlcnQgSGlnaCBBc3N1cmFuY2Ug\nRVYgUm9vdCBDQTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMbM5XPm\n+9S75S0tMqbf5YE/yc0lSbZxKsPVlDRnogocsF9ppkCxxLeyj9CYpKlBWTrT3JTW\nPNt0OKRKzE0lgvdKpVMSOO7zSW1xkX5jtqumX8OkhPhPYlG++MXs2ziS4wblCJEM\nxChBVfvLWokVfnHoNb9Ncgk9vjo4UFt3MRuNs8ckRZqnrG0AFFoEt7oT61EKmEFB\nIk5lYYeBQVCmeVyJ3hlKV9Uu5l0cUyx+mM0aBhakaHPQNAQTXKFx01p8VdteZOE3\nhzBWBOURtCmAEvF5OYiiAhF8J2a3iLd48soKqDirCmTCv2ZdlYTBoSUeh10aUAsg\nEsxBu24LUTi4S8sCAwEAAaNjMGEwDgYDVR0PAQH/BAQDAgGGMA8GA1UdEwEB/wQF\nMAMBAf8wHQYDVR0OBBYEFLE+w2kD+L9HAdSYJhoIAu9jZCvDMB8GA1UdIwQYMBaA\nFLE+w2kD+L9HAdSYJhoIAu9jZCvDMA0GCSqGSIb3DQEBBQUAA4IBAQAcGgaX3Nec\nnzyIZgYIVyHbIUf4KmeqvxgydkAQV8GK83rZEWWONfqe/EW1ntlMMUu4kehDLI6z\neM7b41N5cdblIZQB2lWHmiRk9opmzN6cN82oNLFpmyPInngiK3BD41VHMWEZ71jF\nhS9OMPagMRYjyOfiZRYzy78aG6A9+MpeizGLYAiJLQwGXFK3xPkKmNEVX58Svnw2\nYzi9RKR/5CYrCsSXaQ3pjOLAEFe4yHYSkVXySGnYvCoCWw9E1CAx2/S6cCZdkGCe\nvEsXCS+0yx5DaMkHJ8HSXPfqIbloEpw8nL+e/IBcm2PN7EeqJSdnoDfzAIJ9VNep\n+OkuE6N36B9K\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIFkDCCA3igAwIBAgIQBZsbV56OITLiOQe9p3d1XDANBgkqhkiG9w0BAQwFADBi\nMQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3\nd3cuZGlnaWNlcnQuY29tMSEwHwYDVQQDExhEaWdpQ2VydCBUcnVzdGVkIFJvb3Qg\nRzQwHhcNMTMwODAxMTIwMDAwWhcNMzgwMTE1MTIwMDAwWjBiMQswCQYDVQQGEwJV\nUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3d3cuZGlnaWNlcnQu\nY29tMSEwHwYDVQQDExhEaWdpQ2VydCBUcnVzdGVkIFJvb3QgRzQwggIiMA0GCSqG\nSIb3DQEBAQUAA4ICDwAwggIKAoICAQC/5pBzaN675F1KPDAiMGkz7MKnJS7JIT3y\nithZwuEppz1Yq3aaza57G4QNxDAf8xukOBbrVsaXbR2rsnnyyhHS5F/WBTxSD1If\nxp4VpX6+n6lXFllVcq9ok3DCsrp1mWpzMpTREEQQLt+C8weE5nQ7bXHiLQwb7iDV\nySAdYyktzuxeTsiT+CFhmzTrBcZe7FsavOvJz82sNEBfsXpm7nfISKhmV1efVFiO\nDCu3T6cw2Vbuyntd463JT17lNecxy9qTXtyOj4DatpGYQJB5w3jHtrHEtWoYOAMQ\njdjUN6QuBX2I9YI+EJFwq1WCQTLX2wRzKm6RAXwhTNS8rhsDdV14Ztk6MUSaM0C/\nCNdaSaTC5qmgZ92kJ7yhTzm1EVgX9yRcRo9k98FpiHaYdj1ZXUJ2h4mXaXpI8OCi\nEhtmmnTK3kse5w5jrubU75KSOp493ADkRSWJtppEGSt+wJS00mFt6zPZxd9LBADM\nfRyVw4/3IbKyEbe7f/LVjHAsQWCqsWMYRJUadmJ+9oCw++hkpjPRiQfhvbfmQ6QY\nuKZ3AeEPlAwhHbJUKSWJbOUOUlFHdL4mrLZBdd56rF+NP8m800ERElvlEFDrMcXK\nchYiCd98THU/Y+whX8QgUWtvsauGi0/C1kVfnSD8oR7FwI+isX4KJpn15GkvmB0t\n9dmpsh3lGwIDAQABo0IwQDAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIB\nhjAdBgNVHQ4EFgQU7NfjgtJxXWRM3y5nP+e6mK4cD08wDQYJKoZIhvcNAQEMBQAD\nggIBALth2X2pbL4XxJEbw6GiAI3jZGgPVs93rnD5/ZpKmbnJeFwMDF/k5hQpVgs2\nSV1EY+CtnJYYZhsjDT156W1r1lT40jzBQ0CuHVD1UvyQO7uYmWlrx8GnqGikJ9yd\n+SeuMIW59mdNOj6PWTkiU0TryF0Dyu1Qen1iIQqAyHNm0aAFYF/opbSnr6j3bTWc\nfFqK1qI4mfN4i/RN0iAL3gTujJtHgXINwBQy7zBZLq7gcfJW5GqXb5JQbZaNaHqa\nsjYUegbyJLkJEVDXCLG4iXqEI2FCKeWjzaIgQdfRnGTZ6iahixTXTBmyUEFxPT9N\ncCOGDErcgdLMMpSEDQgJlxxPwO5rIHQw0uA5NBCFIRUBCOhVMt5xSdkoF1BN5r5N\n0XWs0Mr7QbhDparTwwVETyw2m+L64kW4I1NsBm9nVX9GtUw/bihaeSbSpKhil9Ie\n4u1Ki7wb/UdKDd9nZn6yW0HQO+T0O/QEY+nvwlQAUaCKKsnOeMzV6ocEGLPOr0mI\nr/OSmbaz5mEP0oUA51Aa5BuVnRmhuZyxm7EAHu/QD09CbMkKvO5D+jpxpchNJqU1\n/YldvIViHTLSoCtU7ZpXwdv6EM8Zt4tKG48BtieVU+i2iW1bvGjUI+iLUaJW+fCm\ngKDWHrO8Dw9TdSmq6hN35N6MgSGtBxBHEa2HPQfRdbzP82Z+\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIGSzCCBDOgAwIBAgIIamg+nFGby1MwDQYJKoZIhvcNAQELBQAwgbIxCzAJBgNV\nBAYTAlRSMQ8wDQYDVQQHDAZBbmthcmExQDA+BgNVBAoMN0UtVHXEn3JhIEVCRyBC\naWxpxZ9pbSBUZWtub2xvamlsZXJpIHZlIEhpem1ldGxlcmkgQS7Fni4xJjAkBgNV\nBAsMHUUtVHVncmEgU2VydGlmaWthc3lvbiBNZXJrZXppMSgwJgYDVQQDDB9FLVR1\nZ3JhIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MB4XDTEzMDMwNTEyMDk0OFoXDTIz\nMDMwMzEyMDk0OFowgbIxCzAJBgNVBAYTAlRSMQ8wDQYDVQQHDAZBbmthcmExQDA+\nBgNVBAoMN0UtVHXEn3JhIEVCRyBCaWxpxZ9pbSBUZWtub2xvamlsZXJpIHZlIEhp\nem1ldGxlcmkgQS7Fni4xJjAkBgNVBAsMHUUtVHVncmEgU2VydGlmaWthc3lvbiBN\nZXJrZXppMSgwJgYDVQQDDB9FLVR1Z3JhIENlcnRpZmljYXRpb24gQXV0aG9yaXR5\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA4vU/kwVRHoViVF56C/UY\nB4Oufq9899SKa6VjQzm5S/fDxmSJPZQuVIBSOTkHS0vdhQd2h8y/L5VMzH2nPbxH\nD5hw+IyFHnSOkm0bQNGZDbt1bsipa5rAhDGvykPL6ys06I+XawGb1Q5KCKpbknSF\nQ9OArqGIW66z6l7LFpp3RMih9lRozt6Plyu6W0ACDGQXwLWTzeHxE2bODHnv0ZEo\nq1+gElIwcxmOj+GMB6LDu0rw6h8VqO4lzKRG+Bsi77MOQ7osJLjFLFzUHPhdZL3D\nk14opz8n8Y4e0ypQBaNV2cvnOVPAmJ6MVGKLJrD3fY185MaeZkJVgkfnsliNZvcH\nfC425lAcP9tDJMW/hkd5s3kc91r0E+xs+D/iWR+V7kI+ua2oMoVJl0b+SzGPWsut\ndEcf6ZG33ygEIqDUD13ieU/qbIWGvaimzuT6w+Gzrt48Ue7LE3wBf4QOXVGUnhMM\nti6lTPk5cDZvlsouDERVxcr6XQKj39ZkjFqzAQqptQpHF//vkUAqjqFGOjGY5RH8\nzLtJVor8udBhmm9lbObDyz51Sf6Pp+KJxWfXnUYTTjF2OySznhFlhqt/7x3U+Lzn\nrFpct1pHXFXOVbQicVtbC/DP3KBhZOqp12gKY6fgDT+gr9Oq0n7vUaDmUStVkhUX\nU8u3Zg5mTPj5dUyQ5xJwx0UCAwEAAaNjMGEwHQYDVR0OBBYEFC7j27JJ0JxUeVz6\nJyr+zE7S6E5UMA8GA1UdEwEB/wQFMAMBAf8wHwYDVR0jBBgwFoAULuPbsknQnFR5\nXPonKv7MTtLoTlQwDgYDVR0PAQH/BAQDAgEGMA0GCSqGSIb3DQEBCwUAA4ICAQAF\nNzr0TbdF4kV1JI+2d1LoHNgQk2Xz8lkGpD4eKexd0dCrfOAKkEh47U6YA5n+KGCR\nHTAduGN8qOY1tfrTYXbm1gdLymmasoR6d5NFFxWfJNCYExL/u6Au/U5Mh/jOXKqY\nGwXgAEZKgoClM4so3O0409/lPun++1ndYYRP0lSWE2ETPo+Aab6TR7U1Q9Jauz1c\n77NCR807VRMGsAnb/WP2OogKmW9+4c4bU2pEZiNRCHu8W1Ki/QY3OEBhj0qWuJA3\n+GbHeJAAFS6LrVE1Uweoa2iu+U48BybNCAVwzDk/dr2l02cmAYamU9JgO3xDf1WK\nvJUawSg5TB9D0pH0clmKuVb8P7Sd2nCcdlqMQ1DujjByTd//SffGqWfZbawCEeI6\nFiWnWAjLb1NBnEg4R2gz0dfHj9R0IdTDBZB6/86WiLEVKV0jq9BgoRJP3vQXzTLl\nyb/IQ639Lo7xr+L0mPoSHyDYwKcMhcWQ9DstliaxLL5Mq+ux0orJ23gTDx4JnW2P\nAJ8C2sH6H3p6CcRK5ogql5+Ji/03X186zjhZhkuvcQu02PJwT58yE+Owp1fl2tpD\ny4Q08ijE6m30Ku/Ba3ba+367hTzSU8JNvnHhRdH9I2cNE3X7z2VnIp2usAnRCf8d\nNL/+I5c30jn6PQ0GC7TbO6Orb1wdtn7os4I07QZcJA==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIF5zCCA8+gAwIBAgIITK9zQhyOdAIwDQYJKoZIhvcNAQEFBQAwgYAxODA2BgNV\nBAMML0VCRyBFbGVrdHJvbmlrIFNlcnRpZmlrYSBIaXptZXQgU2HEn2xhecSxY8Sx\nc8SxMTcwNQYDVQQKDC5FQkcgQmlsacWfaW0gVGVrbm9sb2ppbGVyaSB2ZSBIaXpt\nZXRsZXJpIEEuxZ4uMQswCQYDVQQGEwJUUjAeFw0wNjA4MTcwMDIxMDlaFw0xNjA4\nMTQwMDMxMDlaMIGAMTgwNgYDVQQDDC9FQkcgRWxla3Ryb25payBTZXJ0aWZpa2Eg\nSGl6bWV0IFNhxJ9sYXnEsWPEsXPEsTE3MDUGA1UECgwuRUJHIEJpbGnFn2ltIFRl\na25vbG9qaWxlcmkgdmUgSGl6bWV0bGVyaSBBLsWeLjELMAkGA1UEBhMCVFIwggIi\nMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDuoIRh0DpqZhAy2DE4f6en5f2h\n4fuXd7hxlugTlkaDT7byX3JWbhNgpQGR4lvFzVcfd2NR/y8927k/qqk153nQ9dAk\ntiHq6yOU/im/+4mRDGSaBUorzAzu8T2bgmmkTPiab+ci2hC6X5L8GCcKqKpE+i4s\ntPtGmggDg3KriORqcsnlZR9uKg+ds+g75AxuetpX/dfreYteIAbTdgtsApWjluTL\ndlHRKJ2hGvxEok3MenaoDT2/F08iiFD9rrbskFBKW5+VQarKD7JK/oCZTqNGFav4\nc0JqwmZ2sQomFd2TkuzbqV9UIlKRcF0T6kjsbgNs2d1s/OsNA/+mgxKb8amTD8Um\nTDGyY5lhcucqZJnSuOl14nypqZoaqsNW2xCaPINStnuWt6yHd6i58mcLlEOzrz5z\n+kI2sSXFCjEmN1ZnuqMLfdb3ic1nobc6HmZP9qBVFCVMLDMNpkGMvQQxahByCp0O\nLna9XvNRiYuoP1Vzv9s6xiQFlpJIqkuNKgPlV5EQ9GooFW5Hd4RcUXSfGenmHmMW\nOeMRFeNYGkS9y8RsZteEBt8w9DeiQyJ50hBs37vmExH8nYQKE3vwO9D8owrXieqW\nfo1IhR5kX9tUoqzVegJ5a9KK8GfaZXINFHDk6Y54jzJ0fFfy1tb0Nokb+Clsi7n2\nl9GkLqq+CxnCRelwXQIDAJ3Zo2MwYTAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB\n/wQEAwIBBjAdBgNVHQ4EFgQU587GT/wWZ5b6SqMHwQSny2re2kcwHwYDVR0jBBgw\nFoAU587GT/wWZ5b6SqMHwQSny2re2kcwDQYJKoZIhvcNAQEFBQADggIBAJuYml2+\n8ygjdsZs93/mQJ7ANtyVDR2tFcU22NU57/IeIl6zgrRdu0waypIN30ckHrMk2pGI\n6YNw3ZPX6bqz3xZaPt7gyPvT/Wwp+BVGoGgmzJNSroIBk5DKd8pNSe/iWtkqvTDO\nTLKBtjDOWU/aWR1qeqRFsIImgYZ29fUQALjuswnoT4cCB64kXPBfrAowzIpAoHME\nwfuJJPaaHFy3PApnNgUIMbOv2AFoKuB4j3TeuFGkjGwgPaL7s9QJ/XvCgKqTbCmY\nIai7FvOpEl90tYeY8pUm3zTvilORiF0alKM/fCL414i6poyWqD1SNGKfAB5UVUJn\nxk1Gj7sURT0KlhaOEKGXmdXTMIXM3rRyt7yKPBgpaP3ccQfuJDlq+u2lrDgv+R4Q\nDgZxGhBM/nV+/x5XOULK1+EVoVZVWRvRo68R2E7DpSvvkL/A7IITW43WciyTTo9q\nKd+FPNMN4KIYEsxVL0e3p5sC/kH2iExt2qkBR4NkJ2IQgtYSe14DHzSpyZH+r11t\nhie3I6p1GMog57AP14kOpmciY/SDQSsGS7tY1dHXt7kQY9iJSrSq3RZj9W6+YKH4\n7ejWkE8axsWgKdOnIaj1Wjz3x0miIZpKlVIglnKaZsv30oZDfCK+lvm9AahH3eU7\nQPl1K5srRmSGjR70j/sHd9DqSaIcjVIUpgqT\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIFVjCCBD6gAwIBAgIQ7is969Qh3hSoYqwE893EATANBgkqhkiG9w0BAQUFADCB\n8zELMAkGA1UEBhMCRVMxOzA5BgNVBAoTMkFnZW5jaWEgQ2F0YWxhbmEgZGUgQ2Vy\ndGlmaWNhY2lvIChOSUYgUS0wODAxMTc2LUkpMSgwJgYDVQQLEx9TZXJ2ZWlzIFB1\nYmxpY3MgZGUgQ2VydGlmaWNhY2lvMTUwMwYDVQQLEyxWZWdldSBodHRwczovL3d3\ndy5jYXRjZXJ0Lm5ldC92ZXJhcnJlbCAoYykwMzE1MDMGA1UECxMsSmVyYXJxdWlh\nIEVudGl0YXRzIGRlIENlcnRpZmljYWNpbyBDYXRhbGFuZXMxDzANBgNVBAMTBkVD\nLUFDQzAeFw0wMzAxMDcyMzAwMDBaFw0zMTAxMDcyMjU5NTlaMIHzMQswCQYDVQQG\nEwJFUzE7MDkGA1UEChMyQWdlbmNpYSBDYXRhbGFuYSBkZSBDZXJ0aWZpY2FjaW8g\nKE5JRiBRLTA4MDExNzYtSSkxKDAmBgNVBAsTH1NlcnZlaXMgUHVibGljcyBkZSBD\nZXJ0aWZpY2FjaW8xNTAzBgNVBAsTLFZlZ2V1IGh0dHBzOi8vd3d3LmNhdGNlcnQu\nbmV0L3ZlcmFycmVsIChjKTAzMTUwMwYDVQQLEyxKZXJhcnF1aWEgRW50aXRhdHMg\nZGUgQ2VydGlmaWNhY2lvIENhdGFsYW5lczEPMA0GA1UEAxMGRUMtQUNDMIIBIjAN\nBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAsyLHT+KXQpWIR4NA9h0X84NzJB5R\n85iKw5K4/0CQBXCHYMkAqbWUZRkiFRfCQ2xmRJoNBD45b6VLeqpjt4pEndljkYRm\n4CgPukLjbo73FCeTae6RDqNfDrHrZqJyTxIThmV6PttPB/SnCWDaOkKZx7J/sxaV\nHMf5NLWUhdWZXqBIoH7nF2W4onW4HvPlQn2v7fOKSGRdghST2MDk/7NQcvJ29rNd\nQlB50JQ+awwAvthrDk4q7D7SzIKiGGUzE3eeml0aE9jD2z3Il3rucO2n5nzbcc8t\nlGLfbdb1OL4/pYUKGbio2Al1QnDE6u/LDsg0qBIimAy4E5S2S+zw0JDnJwIDAQAB\no4HjMIHgMB0GA1UdEQQWMBSBEmVjX2FjY0BjYXRjZXJ0Lm5ldDAPBgNVHRMBAf8E\nBTADAQH/MA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4EFgQUoMOLRKo3pUW/l4Ba0fF4\nopvpXY0wfwYDVR0gBHgwdjB0BgsrBgEEAfV4AQMBCjBlMCwGCCsGAQUFBwIBFiBo\ndHRwczovL3d3dy5jYXRjZXJ0Lm5ldC92ZXJhcnJlbDA1BggrBgEFBQcCAjApGidW\nZWdldSBodHRwczovL3d3dy5jYXRjZXJ0Lm5ldC92ZXJhcnJlbCAwDQYJKoZIhvcN\nAQEFBQADggEBAKBIW4IB9k1IuDlVNZyAelOZ1Vr/sXE7zDkJlF7W2u++AVtd0x7Y\n/X1PzaBB4DSTv8vihpw3kpBWHNzrKQXlxJ7HNd+KDM3FIUPpqojlNcAZQmNaAl6k\nSBg6hW/cnbw/nZzBh7h6YQjpdwt/cKt63dmXLGQehb+8dJahw3oS7AwaboMMPOhy\nRp/7SNVel+axofjk70YllJyJ22k4vuxcDlbHZVHlUIiIv0LVKz3l+bqeLrPK9HOS\nAgu+TGbrIP65y7WZf+a2E/rKS03Z7lNGBjvGTq2TWoF+bCpLagVFjPIhpDGQh2xl\nnJ2lYJU6Un/10asIbvPuW/mIPX64b24D5EI=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIEAzCCAuugAwIBAgIQVID5oHPtPwBMyonY43HmSjANBgkqhkiG9w0BAQUFADB1\nMQswCQYDVQQGEwJFRTEiMCAGA1UECgwZQVMgU2VydGlmaXRzZWVyaW1pc2tlc2t1\nczEoMCYGA1UEAwwfRUUgQ2VydGlmaWNhdGlvbiBDZW50cmUgUm9vdCBDQTEYMBYG\nCSqGSIb3DQEJARYJcGtpQHNrLmVlMCIYDzIwMTAxMDMwMTAxMDMwWhgPMjAzMDEy\nMTcyMzU5NTlaMHUxCzAJBgNVBAYTAkVFMSIwIAYDVQQKDBlBUyBTZXJ0aWZpdHNl\nZXJpbWlza2Vza3VzMSgwJgYDVQQDDB9FRSBDZXJ0aWZpY2F0aW9uIENlbnRyZSBS\nb290IENBMRgwFgYJKoZIhvcNAQkBFglwa2lAc2suZWUwggEiMA0GCSqGSIb3DQEB\nAQUAA4IBDwAwggEKAoIBAQDIIMDs4MVLqwd4lfNE7vsLDP90jmG7sWLqI9iroWUy\neuuOF0+W2Ap7kaJjbMeMTC55v6kF/GlclY1i+blw7cNRfdCT5mzrMEvhvH2/UpvO\nbntl8jixwKIy72KyaOBhU8E2lf/slLo2rpwcpzIP5Xy0xm90/XsY6KxX7QYgSzIw\nWFv9zajmofxwvI6Sc9uXp3whrj3B9UiHbCe9nyV0gVWw93X2PaRka9ZP585ArQ/d\nMtO8ihJTmMmJ+xAdTX7Nfh9WDSFwhfYggx/2uh8Ej+p3iDXE/+pOoYtNP2MbRMNE\n1CV2yreN1x5KZmTNXMWcg+HCCIia7E6j8T4cLNlsHaFLAgMBAAGjgYowgYcwDwYD\nVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYwHQYDVR0OBBYEFBLyWj7qVhy/\nzQas8fElyalL1BSZMEUGA1UdJQQ+MDwGCCsGAQUFBwMCBggrBgEFBQcDAQYIKwYB\nBQUHAwMGCCsGAQUFBwMEBggrBgEFBQcDCAYIKwYBBQUHAwkwDQYJKoZIhvcNAQEF\nBQADggEBAHv25MANqhlHt01Xo/6tu7Fq1Q+e2+RjxY6hUFaTlrg4wCQiZrxTFGGV\nv9DHKpY5P30osxBAIWrEr7BSdxjhlthWXePdNl4dp1BUoMUq5KqMlIpPnTX/dqQG\nE5Gion0ARD9V04I8GtVbvFZMIi5GQ4okQC3zErg7cBqklrkar4dBGmoYDQZPxz5u\nuSlNDUmJEYcyW+ZLBMjkXOZ0c5RdFpgTlf7727FE5TpwrDdr5rMzcijJs1eg9gIW\niAYLtqZLICjU3j2LrTcFU3T+bsy8QxdxXvnFzBqpYe73dgzzcvRyrc9yAjYHR8/v\nGVCJYMzpJJUPwssd8m92kMfMdcGWxZ0=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIEKjCCAxKgAwIBAgIEOGPe+DANBgkqhkiG9w0BAQUFADCBtDEUMBIGA1UEChML\nRW50cnVzdC5uZXQxQDA+BgNVBAsUN3d3dy5lbnRydXN0Lm5ldC9DUFNfMjA0OCBp\nbmNvcnAuIGJ5IHJlZi4gKGxpbWl0cyBsaWFiLikxJTAjBgNVBAsTHChjKSAxOTk5\nIEVudHJ1c3QubmV0IExpbWl0ZWQxMzAxBgNVBAMTKkVudHJ1c3QubmV0IENlcnRp\nZmljYXRpb24gQXV0aG9yaXR5ICgyMDQ4KTAeFw05OTEyMjQxNzUwNTFaFw0yOTA3\nMjQxNDE1MTJaMIG0MRQwEgYDVQQKEwtFbnRydXN0Lm5ldDFAMD4GA1UECxQ3d3d3\nLmVudHJ1c3QubmV0L0NQU18yMDQ4IGluY29ycC4gYnkgcmVmLiAobGltaXRzIGxp\nYWIuKTElMCMGA1UECxMcKGMpIDE5OTkgRW50cnVzdC5uZXQgTGltaXRlZDEzMDEG\nA1UEAxMqRW50cnVzdC5uZXQgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgKDIwNDgp\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArU1LqRKGsuqjIAcVFmQq\nK0vRvwtKTY7tgHalZ7d4QMBzQshowNtTK91euHaYNZOLGp18EzoOH1u3Hs/lJBQe\nsYGpjX24zGtLA/ECDNyrpUAkAH90lKGdCCmziAv1h3edVc3kw37XamSrhRSGlVuX\nMlBvPci6Zgzj/L24ScF2iUkZ/cCovYmjZy/Gn7xxGWC4LeksyZB2ZnuU4q941mVT\nXTzWnLLPKQP5L6RQstRIzgUyVYr9smRMDuSYB3Xbf9+5CFVghTAp+XtIpGmG4zU/\nHoZdenoVve8AjhUiVBcAkCaTvA5JaJG/+EfTnZVCwQ5N328mz8MYIWJmQ3DW1cAH\n4QIDAQABo0IwQDAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB/zAdBgNV\nHQ4EFgQUVeSB0RGAvtiJuQijMfmhJAkWuXAwDQYJKoZIhvcNAQEFBQADggEBADub\nj1abMOdTmXx6eadNl9cZlZD7Bh/KM3xGY4+WZiT6QBshJ8rmcnPyT/4xmf3IDExo\nU8aAghOY+rat2l098c5u9hURlIIM7j+VrxGrD9cv3h8Dj1csHsm7mhpElesYT6Yf\nzX1XEC+bBAlahLVu2B064dae0Wx5XnkcFMXj0EyTO2U87d89vqbllRrDtRnDvV5b\nu/8j72gZyxKTJ1wDLW8w0B62GqzeWvfRqqgnpv55gcR5mTNXuhKwqeBCbJPKVt7+\nbYQLCIt+jerXmCHG8+c8eS9enNFMFY3h7CI3zJpDC5fcgJCNs2ebb0gIFVbPv/Er\nfF6adulZkMV8gzURZVE=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIEkTCCA3mgAwIBAgIERWtQVDANBgkqhkiG9w0BAQUFADCBsDELMAkGA1UEBhMC\nVVMxFjAUBgNVBAoTDUVudHJ1c3QsIEluYy4xOTA3BgNVBAsTMHd3dy5lbnRydXN0\nLm5ldC9DUFMgaXMgaW5jb3Jwb3JhdGVkIGJ5IHJlZmVyZW5jZTEfMB0GA1UECxMW\nKGMpIDIwMDYgRW50cnVzdCwgSW5jLjEtMCsGA1UEAxMkRW50cnVzdCBSb290IENl\ncnRpZmljYXRpb24gQXV0aG9yaXR5MB4XDTA2MTEyNzIwMjM0MloXDTI2MTEyNzIw\nNTM0MlowgbAxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1FbnRydXN0LCBJbmMuMTkw\nNwYDVQQLEzB3d3cuZW50cnVzdC5uZXQvQ1BTIGlzIGluY29ycG9yYXRlZCBieSBy\nZWZlcmVuY2UxHzAdBgNVBAsTFihjKSAyMDA2IEVudHJ1c3QsIEluYy4xLTArBgNV\nBAMTJEVudHJ1c3QgUm9vdCBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTCCASIwDQYJ\nKoZIhvcNAQEBBQADggEPADCCAQoCggEBALaVtkNC+sZtKm9I35RMOVcF7sN5EUFo\nNu3s/poBj6E4KPz3EEZmLk0eGrEaTsbRwJWIsMn/MYszA9u3g3s+IIRe7bJWKKf4\n4LlAcTfFy0cOlypowCKVYhXbR9n10Cv/gkvJrT7eTNuQgFA/CYqEAOwwCj0Yzfv9\nKlmaI5UXLEWeH25DeW0MXJj+SKfFI0dcXv1u5x609mhF0YaDW6KKjbHjKYD+JXGI\nrb68j6xSlkuqUY3kEzEZ6E5Nn9uss2rVvDlUccp6en+Q3X0dgNmBu1kmwhH+5pPi\n94DkZfs0Nw4pgHBNrziGLp5/V6+eF67rHMsoIV+2HNjnogQi+dPa2MsCAwEAAaOB\nsDCBrTAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB/zArBgNVHRAEJDAi\ngA8yMDA2MTEyNzIwMjM0MlqBDzIwMjYxMTI3MjA1MzQyWjAfBgNVHSMEGDAWgBRo\nkORnpKZTgMeGZqTx90tD+4S9bTAdBgNVHQ4EFgQUaJDkZ6SmU4DHhmak8fdLQ/uE\nvW0wHQYJKoZIhvZ9B0EABBAwDhsIVjcuMTo0LjADAgSQMA0GCSqGSIb3DQEBBQUA\nA4IBAQCT1DCw1wMgKtD5Y+iRDAUgqV8ZyntyTtSx29CW+1RaGSwMCPeyvIWonX9t\nO1KzKtvn1ISMY/YPyyYBkVBs9F8U4pN0wBOeMDpQ47RgxRzwIkSNcUesyBrJ6Zua\nAGAT/3B+XxFNSRuzFVJ7yVTav52Vr2ua2J7p8eRDjeIRRDq/r72DQnNSi6q7pynP\n9WQcCk3RvKqsnyrQ/39/2n3qse0wJcGE2jTSW3iDVuycNsMm4hH2Z0kdkquM++v/\neu6FSqdQgPCnXEqULl8FmTxSQeDNtGPPAUO6nIPcj2A781q0tHuu2guQOHXvgR1m\n0vdXcDazv/wor3ElhVsT/h5/WrQ8\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIC+TCCAoCgAwIBAgINAKaLeSkAAAAAUNCR+TAKBggqhkjOPQQDAzCBvzELMAkG\nA1UEBhMCVVMxFjAUBgNVBAoTDUVudHJ1c3QsIEluYy4xKDAmBgNVBAsTH1NlZSB3\nd3cuZW50cnVzdC5uZXQvbGVnYWwtdGVybXMxOTA3BgNVBAsTMChjKSAyMDEyIEVu\ndHJ1c3QsIEluYy4gLSBmb3IgYXV0aG9yaXplZCB1c2Ugb25seTEzMDEGA1UEAxMq\nRW50cnVzdCBSb290IENlcnRpZmljYXRpb24gQXV0aG9yaXR5IC0gRUMxMB4XDTEy\nMTIxODE1MjUzNloXDTM3MTIxODE1NTUzNlowgb8xCzAJBgNVBAYTAlVTMRYwFAYD\nVQQKEw1FbnRydXN0LCBJbmMuMSgwJgYDVQQLEx9TZWUgd3d3LmVudHJ1c3QubmV0\nL2xlZ2FsLXRlcm1zMTkwNwYDVQQLEzAoYykgMjAxMiBFbnRydXN0LCBJbmMuIC0g\nZm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxMzAxBgNVBAMTKkVudHJ1c3QgUm9vdCBD\nZXJ0aWZpY2F0aW9uIEF1dGhvcml0eSAtIEVDMTB2MBAGByqGSM49AgEGBSuBBAAi\nA2IABIQTydC6bUF74mzQ61VfZgIaJPRbiWlH47jCffHyAsWfoPZb1YsGGYZPUxBt\nByQnoaD41UcZYUx9ypMn6nQM72+WCf5j7HBdNq1nd67JnXxVRDqiY1Ef9eNi1KlH\nBz7MIKNCMEAwDgYDVR0PAQH/BAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0O\nBBYEFLdj5xrdjekIplWDpOBqUEFlEUJJMAoGCCqGSM49BAMDA2cAMGQCMGF52OVC\nR98crlOZF7ZvHH3hvxGU0QOIdeSNiaSKd0bebWHvAvX7td/M/k7//qnmpwIwW5nX\nhTcGtXsI/esni0qU+eH6p44mCOh8kmhtc9hvJqwhAriZtyZBWyVgrtBIGu4G\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIEPjCCAyagAwIBAgIESlOMKDANBgkqhkiG9w0BAQsFADCBvjELMAkGA1UEBhMC\nVVMxFjAUBgNVBAoTDUVudHJ1c3QsIEluYy4xKDAmBgNVBAsTH1NlZSB3d3cuZW50\ncnVzdC5uZXQvbGVnYWwtdGVybXMxOTA3BgNVBAsTMChjKSAyMDA5IEVudHJ1c3Qs\nIEluYy4gLSBmb3IgYXV0aG9yaXplZCB1c2Ugb25seTEyMDAGA1UEAxMpRW50cnVz\ndCBSb290IENlcnRpZmljYXRpb24gQXV0aG9yaXR5IC0gRzIwHhcNMDkwNzA3MTcy\nNTU0WhcNMzAxMjA3MTc1NTU0WjCBvjELMAkGA1UEBhMCVVMxFjAUBgNVBAoTDUVu\ndHJ1c3QsIEluYy4xKDAmBgNVBAsTH1NlZSB3d3cuZW50cnVzdC5uZXQvbGVnYWwt\ndGVybXMxOTA3BgNVBAsTMChjKSAyMDA5IEVudHJ1c3QsIEluYy4gLSBmb3IgYXV0\naG9yaXplZCB1c2Ugb25seTEyMDAGA1UEAxMpRW50cnVzdCBSb290IENlcnRpZmlj\nYXRpb24gQXV0aG9yaXR5IC0gRzIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK\nAoIBAQC6hLZy254Ma+KZ6TABp3bqMriVQRrJ2mFOWHLP/vaCeb9zYQYKpSfYs1/T\nRU4cctZOMvJyig/3gxnQaoCAAEUesMfnmr8SVycco2gvCoe9amsOXmXzHHfV1IWN\ncCG0szLni6LVhjkCsbjSR87kyUnEO6fe+1R9V77w6G7CebI6C1XiUJgWMhNcL3hW\nwcKUs/Ja5CeanyTXxuzQmyWC48zCxEXFjJd6BmsqEZ+pCm5IO2/b1BEZQvePB7/1\nU1+cPvQXLOZprE4yTGJ36rfo5bs0vBmLrpxR57d+tVOxMyLlbc9wPBr64ptntoP0\njaWvYkxN4FisZDQSA/i2jZRjJKRxAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwIBBjAP\nBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBRqciZ60B7vfec7aVHUbI2fkBJmqzAN\nBgkqhkiG9w0BAQsFAAOCAQEAeZ8dlsa2eT8ijYfThwMEYGprmi5ZiXMRrEPR9RP/\njTkrwPK9T3CMqS/qF8QLVJ7UG5aYMzyorWKiAHarWWluBh1+xLlEjZivEtRh2woZ\nRkfz6/djwUAFQKXSt/S1mja/qYh2iARVBCuch38aNzx+LaUa2NSJXsq9rD1s2G2v\n1fN2D807iDginWyTmsQ9v4IbZT+mD12q/OWyFcq1rca8PdCE6OoGcrBNOTJ4vz4R\nnAuknZoh8/CbCzB428Hch0P+vGOaysXCHMnHjf87ElgI5rY97HosTvuDls4MPGmH\nVHOkc8KT/1EQrBVUAdj8BbGJoX90g5pJ19xOe4pIb4tF9g==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIDIDCCAomgAwIBAgIENd70zzANBgkqhkiG9w0BAQUFADBOMQswCQYDVQQGEwJV\nUzEQMA4GA1UEChMHRXF1aWZheDEtMCsGA1UECxMkRXF1aWZheCBTZWN1cmUgQ2Vy\ndGlmaWNhdGUgQXV0aG9yaXR5MB4XDTk4MDgyMjE2NDE1MVoXDTE4MDgyMjE2NDE1\nMVowTjELMAkGA1UEBhMCVVMxEDAOBgNVBAoTB0VxdWlmYXgxLTArBgNVBAsTJEVx\ndWlmYXggU2VjdXJlIENlcnRpZmljYXRlIEF1dGhvcml0eTCBnzANBgkqhkiG9w0B\nAQEFAAOBjQAwgYkCgYEAwV2xWGcIYu6gmi0fCG2RFGiYCh7+2gRvE4RiIcPRfM6f\nBeC4AfBONOziipUEZKzxa1NfBbPLZ4C/QgKO/t0BCezhABRP/PvwDN1Dulsr4R+A\ncJkVV5MW8Q+XarfCaCMczE1ZMKxRHjuvK9buY0V7xdlfUNLjUA86iOe/FP3gx7kC\nAwEAAaOCAQkwggEFMHAGA1UdHwRpMGcwZaBjoGGkXzBdMQswCQYDVQQGEwJVUzEQ\nMA4GA1UEChMHRXF1aWZheDEtMCsGA1UECxMkRXF1aWZheCBTZWN1cmUgQ2VydGlm\naWNhdGUgQXV0aG9yaXR5MQ0wCwYDVQQDEwRDUkwxMBoGA1UdEAQTMBGBDzIwMTgw\nODIyMTY0MTUxWjALBgNVHQ8EBAMCAQYwHwYDVR0jBBgwFoAUSOZo+SvSspXXR9gj\nIBBPM5iQn9QwHQYDVR0OBBYEFEjmaPkr0rKV10fYIyAQTzOYkJ/UMAwGA1UdEwQF\nMAMBAf8wGgYJKoZIhvZ9B0EABA0wCxsFVjMuMGMDAgbAMA0GCSqGSIb3DQEBBQUA\nA4GBAFjOKer89961zgK5F7WF0bnj4JXMJTENAKaSbn+2kmOeUJXRmm/kEd5jhW6Y\n7qj/WsjTVbJmcVfewCHrPSqnI0kBBIZCe/zuf6IWUrVnZ9NA2zsmWLIodz2uFHdh\n1voqZiegDfqnc1zqcPGUIWVEX/r87yloqaKHee9570+sB3c4\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIICkDCCAfmgAwIBAgIBATANBgkqhkiG9w0BAQQFADBaMQswCQYDVQQGEwJVUzEc\nMBoGA1UEChMTRXF1aWZheCBTZWN1cmUgSW5jLjEtMCsGA1UEAxMkRXF1aWZheCBT\nZWN1cmUgR2xvYmFsIGVCdXNpbmVzcyBDQS0xMB4XDTk5MDYyMTA0MDAwMFoXDTIw\nMDYyMTA0MDAwMFowWjELMAkGA1UEBhMCVVMxHDAaBgNVBAoTE0VxdWlmYXggU2Vj\ndXJlIEluYy4xLTArBgNVBAMTJEVxdWlmYXggU2VjdXJlIEdsb2JhbCBlQnVzaW5l\nc3MgQ0EtMTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEAuucXkAJlsTRVPEnC\nUdXfp9E3j9HngXNBUmCbnaEXJnitx7HoJpQytd4zjTov2/KaelpzmKNc6fuKcxtc\n58O/gGzNqfTWK8D3+ZmqY6KxRwIP1ORROhI8bIpaVIRw28HFkM9yRcuoWcDNM50/\no5brhTMhHD4ePmBudpxnhcXIw2ECAwEAAaNmMGQwEQYJYIZIAYb4QgEBBAQDAgAH\nMA8GA1UdEwEB/wQFMAMBAf8wHwYDVR0jBBgwFoAUvqigdHJQa0S3ySPY+6j/s1dr\naGwwHQYDVR0OBBYEFL6ooHRyUGtEt8kj2Puo/7NXa2hsMA0GCSqGSIb3DQEBBAUA\nA4GBADDiAVGqx+pf2rnQZQ8w1j7aDRRJbpGTJxQx78T3LUX47Me/okENI7SS+RkA\nZ70Br83gcfxaz2TE4JaY0KNA4gGK7ycH8WUBikQtBmV1UsCGECAhX2xrD2yuCRyv\n8qIYNMR1pHMc8Y3c7635s3a0kr/clRAevsvIO1qEYBlWlKlV\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIICgjCCAeugAwIBAgIBBDANBgkqhkiG9w0BAQQFADBTMQswCQYDVQQGEwJVUzEc\nMBoGA1UEChMTRXF1aWZheCBTZWN1cmUgSW5jLjEmMCQGA1UEAxMdRXF1aWZheCBT\nZWN1cmUgZUJ1c2luZXNzIENBLTEwHhcNOTkwNjIxMDQwMDAwWhcNMjAwNjIxMDQw\nMDAwWjBTMQswCQYDVQQGEwJVUzEcMBoGA1UEChMTRXF1aWZheCBTZWN1cmUgSW5j\nLjEmMCQGA1UEAxMdRXF1aWZheCBTZWN1cmUgZUJ1c2luZXNzIENBLTEwgZ8wDQYJ\nKoZIhvcNAQEBBQADgY0AMIGJAoGBAM4vGbwXt3fek6lfWg0XTzQaDJj0ItlZ1MRo\nRvC0NcWFAyDGr0WlIVFFQesWWDYyb+JQYmT5/VGcqiTZ9J2DKocKIdMSODRsjQBu\nWqDZQu4aIZX5UkxVWsUPOE9G+m34LjXWHXzr4vCwdYDIqROsvojvOm6rXyo4YgKw\nEnv+j6YDAgMBAAGjZjBkMBEGCWCGSAGG+EIBAQQEAwIABzAPBgNVHRMBAf8EBTAD\nAQH/MB8GA1UdIwQYMBaAFEp4MlIR21kWNl7fwRQ2QGpHfEyhMB0GA1UdDgQWBBRK\neDJSEdtZFjZe38EUNkBqR3xMoTANBgkqhkiG9w0BAQQFAAOBgQB1W6ibAxHm6VZM\nzfmpTMANmvPMZWnmJXbMWbfWVMMdzZmsGd20hdXgPfxiIKeES1hl8eL5lSE/9dR+\nWB5Hh1Q+WKG1tfgq73HnvMP2sUlG4tega+VWeponmHxGYhTnyfxuAxJ5gDgdSIKN\n/Bf+KpYrtWKmpj29f5JZzVoqgrI3eQ==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIDVDCCAjygAwIBAgIDAjRWMA0GCSqGSIb3DQEBBQUAMEIxCzAJBgNVBAYTAlVT\nMRYwFAYDVQQKEw1HZW9UcnVzdCBJbmMuMRswGQYDVQQDExJHZW9UcnVzdCBHbG9i\nYWwgQ0EwHhcNMDIwNTIxMDQwMDAwWhcNMjIwNTIxMDQwMDAwWjBCMQswCQYDVQQG\nEwJVUzEWMBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEbMBkGA1UEAxMSR2VvVHJ1c3Qg\nR2xvYmFsIENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA2swYYzD9\n9BcjGlZ+W988bDjkcbd4kdS8odhM+KhDtgPpTSEHCIjaWC9mOSm9BXiLnTjoBbdq\nfnGk5sRgprDvgOSJKA+eJdbtg/OtppHHmMlCGDUUna2YRpIuT8rxh0PBFpVXLVDv\niS2Aelet8u5fa9IAjbkU+BQVNdnARqN7csiRv8lVK83Qlz6cJmTM386DGXHKTubU\n1XupGc1V3sjs0l44U+VcT4wt/lAjNvxm5suOpDkZALeVAjmRCw7+OC7RHQWa9k0+\nbw8HHa8sHo9gOeL6NlMTOdReJivbPagUvTLrGAMoUgRx5aszPeE4uwc2hGKceeoW\nMPRfwCvocWvk+QIDAQABo1MwUTAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBTA\nephojYn7qwVkDBF9qn1luMrMTjAfBgNVHSMEGDAWgBTAephojYn7qwVkDBF9qn1l\nuMrMTjANBgkqhkiG9w0BAQUFAAOCAQEANeMpauUvXVSOKVCUn5kaFOSPeCpilKIn\nZ57QzxpeR+nBsqTP3UEaBU6bS+5Kb1VSsyShNwrrZHYqLizz/Tt1kL/6cdjHPTfS\ntQWVYrmm3ok9Nns4d0iXrKYgjy6myQzCsplFAMfOEVEiIuCl6rYVSAlk6l5PdPcF\nPseKUgzbFbS9bZvlxrFUaKnjaZC2mqUPuLk/IH2uSrW4nOQdtqvmlKXBx4Ot2/Un\nhw4EbNX/3aBd7YdStysVAq45pmp06drE57xNNB6pXE0zX5IJL4hmXXeXxx12E6nV\n5fEWCRE11azbJHFwLJhWC9kXtNHjUStedejV0NxPNO3CBWaAocvmMw==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIDZjCCAk6gAwIBAgIBATANBgkqhkiG9w0BAQUFADBEMQswCQYDVQQGEwJVUzEW\nMBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEdMBsGA1UEAxMUR2VvVHJ1c3QgR2xvYmFs\nIENBIDIwHhcNMDQwMzA0MDUwMDAwWhcNMTkwMzA0MDUwMDAwWjBEMQswCQYDVQQG\nEwJVUzEWMBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEdMBsGA1UEAxMUR2VvVHJ1c3Qg\nR2xvYmFsIENBIDIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDvPE1A\nPRDfO1MA4Wf+lGAVPoWI8YkNkMgoI5kF6CsgncbzYEbYwbLVjDHZ3CB5JIG/NTL8\nY2nbsSpr7iFY8gjpeMtvy/wWUsiRxP89c96xPqfCfWbB9X5SJBri1WeR0IIQ13hL\nTytCOb1kLUCgsBDTOEhGiKEMuzozKmKY+wCdE1l/bztyqu6mD4b5BWHqZ38MN5aL\n5mkWRxHCJ1kDs6ZgwiFAVvqgx306E+PsV8ez1q6diYD3Aecs9pYrEw15LNnA5IZ7\nS4wMcoKK+xfNAGw6EzywhIdLFnopsk/bHdQL82Y3vdj2V7teJHq4PIu5+pIaGoSe\n2HSPqht/XvT+RSIhAgMBAAGjYzBhMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYE\nFHE4NvICMVNHK266ZUapEBVYIAUJMB8GA1UdIwQYMBaAFHE4NvICMVNHK266ZUap\nEBVYIAUJMA4GA1UdDwEB/wQEAwIBhjANBgkqhkiG9w0BAQUFAAOCAQEAA/e1K6td\nEPx7srJerJsOflN4WT5CBP51o62sgU7XAotexC3IUnbHLB/8gTKY0UvGkpMzNTEv\n/NgdRN3ggX+d6YvhZJFiCzkIjKx0nVnZellSlxG5FntvRdOW2TF9AjYPnDtuzywN\nA0ZF66D0f0hExghAzN4bcLUprbqLOzRldRtxIR0sFAqwlpW41uryZfspuk/qkZN0\nabby/+Ea0AzRdoXLiiW9l14sbxWZJue2Kf8i7MkCx1YAzUm5s2x7UwQa4qjJqhIF\nI8LO57sEAszAR6LkxCkvW0VXiVHuPOtSCP8HNR6fNWpHSlaY0VqFH4z1Ir+rzoPz\n4iIprn2DQKi6bA==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIDfDCCAmSgAwIBAgIQGKy1av1pthU6Y2yv2vrEoTANBgkqhkiG9w0BAQUFADBY\nMQswCQYDVQQGEwJVUzEWMBQGA1UEChMNR2VvVHJ1c3QgSW5jLjExMC8GA1UEAxMo\nR2VvVHJ1c3QgUHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTAeFw0wNjEx\nMjcwMDAwMDBaFw0zNjA3MTYyMzU5NTlaMFgxCzAJBgNVBAYTAlVTMRYwFAYDVQQK\nEw1HZW9UcnVzdCBJbmMuMTEwLwYDVQQDEyhHZW9UcnVzdCBQcmltYXJ5IENlcnRp\nZmljYXRpb24gQXV0aG9yaXR5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC\nAQEAvrgVe//UfH1nrYNke8hCUy3f9oQIIGHWAVlqnEQRr+92/ZV+zmEwu3qDXwK9\nAWbK7hWNb6EwnL2hhZ6UOvNWiAAxz9juapYC2e0DjPt1befquFUWBRaa9OBesYjA\nZIVcFU2Ix7e64HXprQU9nceJSOC7KMgD4TCTZF5SwFlwIjVXiIrxlQqD17wxcwE0\n7e9GceBrAqg1cmuXm2bgyxx5X9gaBGgeRwLmnWDiNpcB3841kt++Z8dtd1k7j53W\nkBWUvEI0EME5+bEnPn7WinXFsq+W06Lem+SYvn3h6YGttm/81w7a4DSwDRp35+MI\nmO9Y+pyEtzavwt+s0vQQBnBxNQIDAQABo0IwQDAPBgNVHRMBAf8EBTADAQH/MA4G\nA1UdDwEB/wQEAwIBBjAdBgNVHQ4EFgQULNVQQZcVi/CPNmFbSvtr2ZnJM5IwDQYJ\nKoZIhvcNAQEFBQADggEBAFpwfyzdtzRP9YZRqSa+S7iq8XEN3GHHoOo0Hnp3DwQ1\n6CePbJC/kRYkRj5KTs4rFtULUh38H2eiAkUxT87z+gOneZ1TatnaYzr4gNfTmeGl\n4b7UVXGYNTq+k+qurUKykG/g/CFNNWMziUnWm07Kx+dOCQD32sfvmWKZd7aVIl6K\noKv0uHiYyjgZmclynnjNS6yvGaBzEi38wkG6gZHaFloxt/m0cYASSJlyc1pZU8Fj\nUjPtp8nSOQJw+uCxQmYpqptR7TBUIhRf2asdweSU8Pj1K/fqynhG1riR/aYNKxoU\nAT6A8EKglQdebc3MS6RFjasS6LPeWuWgfOgPIh1a6Vk=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIICrjCCAjWgAwIBAgIQPLL0SAoA4v7rJDteYD7DazAKBggqhkjOPQQDAzCBmDEL\nMAkGA1UEBhMCVVMxFjAUBgNVBAoTDUdlb1RydXN0IEluYy4xOTA3BgNVBAsTMChj\nKSAyMDA3IEdlb1RydXN0IEluYy4gLSBGb3IgYXV0aG9yaXplZCB1c2Ugb25seTE2\nMDQGA1UEAxMtR2VvVHJ1c3QgUHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0\neSAtIEcyMB4XDTA3MTEwNTAwMDAwMFoXDTM4MDExODIzNTk1OVowgZgxCzAJBgNV\nBAYTAlVTMRYwFAYDVQQKEw1HZW9UcnVzdCBJbmMuMTkwNwYDVQQLEzAoYykgMjAw\nNyBHZW9UcnVzdCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxNjA0BgNV\nBAMTLUdlb1RydXN0IFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgLSBH\nMjB2MBAGByqGSM49AgEGBSuBBAAiA2IABBWx6P0DFUPlrOuHNxFi79KDNlJ9RVcL\nSo17VDs6bl8VAsBQps8lL33KSLjHUGMcKiEIfJo22Av+0SbFWDEwKCXzXV2juLal\ntJLtbCyf691DiaI8S0iRHVDsJt/WYC69IaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAO\nBgNVHQ8BAf8EBAMCAQYwHQYDVR0OBBYEFBVfNVdRVfslsq0DafwBo/q+EVXVMAoG\nCCqGSM49BAMDA2cAMGQCMGSWWaboCd6LuvpaiIjwH5HTRqjySkwCY/tsXzjbLkGT\nqQ7mndwxHLKgpxgceeHHNgIwOlavmnRs9vuD4DPTCF+hnMJbn0bWtsuRBmOiBucz\nrD6ogRLQy7rQkgu2npaqBA+K\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIID/jCCAuagAwIBAgIQFaxulBmyeUtB9iepwxgPHzANBgkqhkiG9w0BAQsFADCB\nmDELMAkGA1UEBhMCVVMxFjAUBgNVBAoTDUdlb1RydXN0IEluYy4xOTA3BgNVBAsT\nMChjKSAyMDA4IEdlb1RydXN0IEluYy4gLSBGb3IgYXV0aG9yaXplZCB1c2Ugb25s\neTE2MDQGA1UEAxMtR2VvVHJ1c3QgUHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhv\ncml0eSAtIEczMB4XDTA4MDQwMjAwMDAwMFoXDTM3MTIwMTIzNTk1OVowgZgxCzAJ\nBgNVBAYTAlVTMRYwFAYDVQQKEw1HZW9UcnVzdCBJbmMuMTkwNwYDVQQLEzAoYykg\nMjAwOCBHZW9UcnVzdCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxNjA0\nBgNVBAMTLUdlb1RydXN0IFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkg\nLSBHMzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANziXmJYHTNXOTIz\n+uvLh4yn1ErdBojqZI4xmKU4kB6Yzy5jK/BGvESyiaHAKAxJcCGVn2TAppMSAmUm\nhsalifD614SgcK9PGpc/BkTVyetyEH3kMSj7HGHmKAdEc5IiaacDiGydY8hS2pgn\n5whMcD60yRLBxWeDXTPzAxHsatBT4tG6NmCUgLthY2xbF37fQJQeqw3CIShwiP/W\nJmxsYAQlTlV+fe+/lEjetx3dcI0FX4ilm/LC7urRQEFtYjgdVgbFA0dRIBn8exAL\nDmKudlW/X3e+PkkBUz2YJQN2JFodtNuJ6nnltrM7P7pMKEF/BqxqjsHQ9gUdfeZC\nhuOl1UcCAwEAAaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYw\nHQYDVR0OBBYEFMR5yo6hTgMdHNxr2zFblD4/MH8tMA0GCSqGSIb3DQEBCwUAA4IB\nAQAtxRPPVoB7eni9n64smefv2t+UXglpp+duaIy9cr5HqQ6XErhK8WTTOd8lNNTB\nzU6B8A8ExCSzNJbGpqow32hhc9f5joWJ7w5elShKKiePEI4ufIbEAp7aDHdlDkQN\nkv39sxY2+hENHYwOB4lqKVb3cvTdFZx3NWZXqxNT2I7BQMXXExZacse3aQHEerGD\nAWh9jUGhlBjBJVz88P6DAod8DQ3PLghcSkANPuyBYeYk28rgDi0Hsj5W3I31QYUH\nSJsMC8tJP33st/3LjWeJGqvtux6jAAgIFyqCXDFdRootD4abdNlF+9RAsXqqaC2G\nspki4cErx5z481+oghLrGREt\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIFaDCCA1CgAwIBAgIBATANBgkqhkiG9w0BAQUFADBFMQswCQYDVQQGEwJVUzEW\nMBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEeMBwGA1UEAxMVR2VvVHJ1c3QgVW5pdmVy\nc2FsIENBMB4XDTA0MDMwNDA1MDAwMFoXDTI5MDMwNDA1MDAwMFowRTELMAkGA1UE\nBhMCVVMxFjAUBgNVBAoTDUdlb1RydXN0IEluYy4xHjAcBgNVBAMTFUdlb1RydXN0\nIFVuaXZlcnNhbCBDQTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAKYV\nVaCjxuAfjJ0hUNfBvitbtaSeodlyWL0AG0y/YckUHUWCq8YdgNY96xCcOq9tJPi8\ncQGeBvV8Xx7BDlXKg5pZMK4ZyzBIle0iN430SppyZj6tlcDgFgDgEB8rMQ7XlFTT\nQjOgNB0eRXbdT8oYN+yFFXoZCPzVx5zw8qkuEKmS5j1YPakWaDwvdSEYfyh3peFh\nF7em6fgemdtzbvQKoiFs7tqqhZJmr/Z6a4LauiIINQ/PQvE1+mrufislzDoR5G2v\nc7J2Ha3QsnhnGqQ5HFELZ1aD/ThdDc7d8Lsrlh/eezJS/R27tQahsiFepdaVaH/w\nmZ7cRQg+59IJDTWU3YBOU5fXtQlEIGQWFwMCTFMNaN7VqnJNk22CDtucvc+081xd\nVHppCZbW2xHBjXWotM85yM48vCR85mLK4b19p71XZQvk/iXttmkQ3CgaRr0BHdCX\nteGYO8A3ZNY9lO4L4fUorgtWv3GLIylBjobFS1J72HGrH4oVpjuDWtdYAVHGTEHZ\nf9hBZ3KiKN9gg6meyHv8U3NyWfWTehd2Ds735VzZC1U0oqpbtWpU5xPKV+yXbfRe\nBi9Fi1jUIxaS5BZuKGNZMN9QAZxjiRqf2xeUgnA3wySemkfWWspOqGmJch+RbNt+\nnhutxx9z3SxPGWX9f5NAEC7S8O08ni4oPmkmM8V7AgMBAAGjYzBhMA8GA1UdEwEB\n/wQFMAMBAf8wHQYDVR0OBBYEFNq7LqqwDLiIJlF0XG0D08DYj3rWMB8GA1UdIwQY\nMBaAFNq7LqqwDLiIJlF0XG0D08DYj3rWMA4GA1UdDwEB/wQEAwIBhjANBgkqhkiG\n9w0BAQUFAAOCAgEAMXjmx7XfuJRAyXHEqDXsRh3ChfMoWIawC/yOsjmPRFWrZIRc\naanQmjg8+uUfNeVE44B5lGiku8SfPeE0zTBGi1QrlaXv9z+ZhP015s8xxtxqv6fX\nIwjhmF7DWgh2qaavdy+3YL1ERmrvl/9zlcGO6JP7/TG37FcREUWbMPEaiDnBTzyn\nANXH/KttgCJwpQzgXQQpAvvLoJHRfNbDflDVnVi+QTjruXU8FdmbyUqDWcDaU/0z\nuzYYm4UPFd3uLax2k7nZAY1IEKj79TiG8dsKxr2EoyNB3tZ3b4XUhRxQ4K5RirqN\nPnbiucon8l+f725ZDQbYKxek0nxru18UGkiPGkzns0ccjkxFKyDuSN/n3QmOGKja\nQI2SJhFTYXNd673nxE0pN2HrrDktZy4W1vUAg4WhzH92xH3kt0tm7wNFYGm2DFKW\nkoRepqO1pD4r2czYG0eq8kTaT/kD6PAUyz/zg97QwVTjt+gKN02LIFkDMBmhLMi9\nER/frslKxfMnZmaGrGiR/9nmUxwPi1xpZQomyB40w11Re9epnAahNt3ViZS82eQt\nDF4JbAiXfKM9fJP/P6EUp8+1Xevb2xzEdt+Iub1FBZUbrvxGakyvSOPOrg/Sfuvm\nbJxPgWp6ZKy7PtXny3YuxadIwVyQD8vIP/rmMuGNG2+k5o7Y+SlIis5z/iw=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIFbDCCA1SgAwIBAgIBATANBgkqhkiG9w0BAQUFADBHMQswCQYDVQQGEwJVUzEW\nMBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEgMB4GA1UEAxMXR2VvVHJ1c3QgVW5pdmVy\nc2FsIENBIDIwHhcNMDQwMzA0MDUwMDAwWhcNMjkwMzA0MDUwMDAwWjBHMQswCQYD\nVQQGEwJVUzEWMBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEgMB4GA1UEAxMXR2VvVHJ1\nc3QgVW5pdmVyc2FsIENBIDIwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoIC\nAQCzVFLByT7y2dyxUxpZKeexw0Uo5dfR7cXFS6GqdHtXr0om/Nj1XqduGdt0DE81\nWzILAePb63p3NeqqWuDW6KFXlPCQo3RWlEQwAx5cTiuFJnSCegx2oG9NzkEtoBUG\nFF+3Qs17j1hhNNwqCPkuwwGmIkQcTAeC5lvO0Ep8BNMZcyfwqph/Lq9O64ceJHdq\nXbboW0W63MOhBW9Wjo8QJqVJwy7XQYci4E+GymC16qFjwAGXEHm9ADwSbSsVsaxL\nse4YuU6W3Nx2/zu+z18DwPw76L5GG//aQMJS9/7jOvdqdzXQ2o3rXhhqMcceujwb\nKNZrVMaqW9eiLBsZzKIC9ptZvTdrhrVtgrrY6slWvKk2WP0+GfPtDCapkzj4T8Fd\nIgbQl+rhrcZV4IErKIM6+vR7IVEAvlI4zs1meaj0gVbi0IMJR1FbUGrP20gaXT73\ny/Zl92zxlfgCOzJWgjl6W70viRu/obTo/3+NjN8D8WBOWBFM66M/ECuDmgFz2ZRt\nhAAnZqzwcEAJQpKtT5MNYQlRJNiS1QuUYbKHsu3/mjX/hVTK7URDrBs8FmtISgoc\nQIgfksILAAX/8sgCSqSqqcyZlpwvWOB94b67B9xfBHJcMTTD7F8t4D1kkCLm0ey4\nLt1ZrtmhN79UNdxzMk+MBB4zsslG8dhcyFVQyWi9qLo2CQIDAQABo2MwYTAPBgNV\nHRMBAf8EBTADAQH/MB0GA1UdDgQWBBR281Xh+qQ2+/CfXGJx7Tz0RzgQKzAfBgNV\nHSMEGDAWgBR281Xh+qQ2+/CfXGJx7Tz0RzgQKzAOBgNVHQ8BAf8EBAMCAYYwDQYJ\nKoZIhvcNAQEFBQADggIBAGbBxiPz2eAubl/oz66wsCVNK/g7WJtAJDday6sWSf+z\ndXkzoS9tcBc0kf5nfo/sm+VegqlVHy/c1FEHEv6sFj4sNcZj/NwQ6w2jqtB8zNHQ\nL1EuxBRa3ugZ4T7GzKQp5y6EqgYweHZUcyiYWTjgAA1i00J9IZ+uPTqM1fp3DRgr\nFg5fNuH8KrUwJM/gYwx7WBr+mbpCErGR9Hxo4sjoryzqyX6uuyo9DRXcNJW2GHSo\nag/HtPQTxORb7QrSpJdMKu0vbBKJPfEncKpqA1Ihn0CoZ1Dy81of398j9tx4TuaY\nT1U6U+Pv8vSfx3zYWK8pIpe44L2RLrB27FcRz+8pRPPphXpgY+RdM4kX2TGq2tbz\nGDVyz4crL2MjhF2EjD9XoIj8mZEoJmmZ1I+XRL6O1UixpCgp8RW04eWe3fiPpm8m\n1wk8OhwRDqZsN/etRIcsKMfYdIKz0G9KV7s1KSegi+ghp4dkNl3M2Basx7InQJJV\nOCiNUW7dFGdTbHFcJoRNdVq2fmBWqU2t+5sel/MN2dKXVHfaPRK34B7vCAas+YWH\n6aLcr34YEoP9VhdBLtUpgn2Z9DH2canPLAEnpQW5qrJITirvn5NSUZU8UnOOVkwX\nQMAJKOSLakhT2+zNVVXxxvjpoixMptEmX36vWkzaH6byHCx+rgIW0lbQL1dTR+iS\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIB4TCCAYegAwIBAgIRKjikHJYKBN5CsiilC+g0mAIwCgYIKoZIzj0EAwIwUDEk\nMCIGA1UECxMbR2xvYmFsU2lnbiBFQ0MgUm9vdCBDQSAtIFI0MRMwEQYDVQQKEwpH\nbG9iYWxTaWduMRMwEQYDVQQDEwpHbG9iYWxTaWduMB4XDTEyMTExMzAwMDAwMFoX\nDTM4MDExOTAzMTQwN1owUDEkMCIGA1UECxMbR2xvYmFsU2lnbiBFQ0MgUm9vdCBD\nQSAtIFI0MRMwEQYDVQQKEwpHbG9iYWxTaWduMRMwEQYDVQQDEwpHbG9iYWxTaWdu\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEuMZ5049sJQ6fLjkZHAOkrprlOQcJ\nFspjsbmG+IpXwVfOQvpzofdlQv8ewQCybnMO/8ch5RikqtlxP6jUuc6MHaNCMEAw\nDgYDVR0PAQH/BAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFFSwe61F\nuOJAf/sKbvu+M8k8o4TVMAoGCCqGSM49BAMCA0gAMEUCIQDckqGgE6bPA7DmxCGX\nkPoUVy0D7O48027KqGx2vKLeuwIgJ6iFJzWbVsaj8kfSt24bAgAXqmemFZHe+pTs\newv4n4Q=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIICHjCCAaSgAwIBAgIRYFlJ4CYuu1X5CneKcflK2GwwCgYIKoZIzj0EAwMwUDEk\nMCIGA1UECxMbR2xvYmFsU2lnbiBFQ0MgUm9vdCBDQSAtIFI1MRMwEQYDVQQKEwpH\nbG9iYWxTaWduMRMwEQYDVQQDEwpHbG9iYWxTaWduMB4XDTEyMTExMzAwMDAwMFoX\nDTM4MDExOTAzMTQwN1owUDEkMCIGA1UECxMbR2xvYmFsU2lnbiBFQ0MgUm9vdCBD\nQSAtIFI1MRMwEQYDVQQKEwpHbG9iYWxTaWduMRMwEQYDVQQDEwpHbG9iYWxTaWdu\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAER0UOlvt9Xb/pOdEh+J8LttV7HpI6SFkc\n8GIxLcB6KP4ap1yztsyX50XUWPrRd21DosCHZTQKH3rd6zwzocWdTaRvQZU4f8ke\nhOvRnkmSh5SHDDqFSmafnVmTTZdhBoZKo0IwQDAOBgNVHQ8BAf8EBAMCAQYwDwYD\nVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUPeYpSJvqB8ohREom3m7e0oPQn1kwCgYI\nKoZIzj0EAwMDaAAwZQIxAOVpEslu28YxuglB4Zf4+/2a4n0Sye18ZNPLBSWLVtmg\n515dTguDnFt2KaAJJiFqYgIwcdK1j1zqO+F4CYWodZI7yFz9SO8NdCKoCOJuxUnO\nxwy8p2Fp8fc74SrL+SvzZpA3\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIDdTCCAl2gAwIBAgILBAAAAAABFUtaw5QwDQYJKoZIhvcNAQEFBQAwVzELMAkG\nA1UEBhMCQkUxGTAXBgNVBAoTEEdsb2JhbFNpZ24gbnYtc2ExEDAOBgNVBAsTB1Jv\nb3QgQ0ExGzAZBgNVBAMTEkdsb2JhbFNpZ24gUm9vdCBDQTAeFw05ODA5MDExMjAw\nMDBaFw0yODAxMjgxMjAwMDBaMFcxCzAJBgNVBAYTAkJFMRkwFwYDVQQKExBHbG9i\nYWxTaWduIG52LXNhMRAwDgYDVQQLEwdSb290IENBMRswGQYDVQQDExJHbG9iYWxT\naWduIFJvb3QgQ0EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDaDuaZ\njc6j40+Kfvvxi4Mla+pIH/EqsLmVEQS98GPR4mdmzxzdzxtIK+6NiY6arymAZavp\nxy0Sy6scTHAHoT0KMM0VjU/43dSMUBUc71DuxC73/OlS8pF94G3VNTCOXkNz8kHp\n1Wrjsok6Vjk4bwY8iGlbKk3Fp1S4bInMm/k8yuX9ifUSPJJ4ltbcdG6TRGHRjcdG\nsnUOhugZitVtbNV4FpWi6cgKOOvyJBNPc1STE4U6G7weNLWLBYy5d4ux2x8gkasJ\nU26Qzns3dLlwR5EiUWMWea6xrkEmCMgZK9FGqkjWZCrXgzT/LCrBbBlDSgeF59N8\n9iFo7+ryUp9/k5DPAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMBAf8E\nBTADAQH/MB0GA1UdDgQWBBRge2YaRQ2XyolQL30EzTSo//z9SzANBgkqhkiG9w0B\nAQUFAAOCAQEA1nPnfE920I2/7LqivjTFKDK1fPxsnCwrvQmeU79rXqoRSLblCKOz\nyj1hTdNGCbM+w6DjY1Ub8rrvrTnhQ7k4o+YviiY776BQVvnGCv04zcQLcFGUl5gE\n38NflNUVyRRBnMRddWQVDf9VMOyGj/8N7yy5Y0b2qvzfvGn9LhJIZJrglfCm7ymP\nAbEVtQwdpf5pLGkkeB6zpxxxYu7KyJesF12KwvhHhm4qxFYxldBniYUr+WymXUad\nDKqC5JlR3XC321Y9YeRq4VzW9v493kHMB65jUr9TU/Qr6cf9tveCX4XSQRjbgbME\nHMUfpIBvFSDJ3gyICh3WZlXi/EjJKSZp4A==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIDujCCAqKgAwIBAgILBAAAAAABD4Ym5g0wDQYJKoZIhvcNAQEFBQAwTDEgMB4G\nA1UECxMXR2xvYmFsU2lnbiBSb290IENBIC0gUjIxEzARBgNVBAoTCkdsb2JhbFNp\nZ24xEzARBgNVBAMTCkdsb2JhbFNpZ24wHhcNMDYxMjE1MDgwMDAwWhcNMjExMjE1\nMDgwMDAwWjBMMSAwHgYDVQQLExdHbG9iYWxTaWduIFJvb3QgQ0EgLSBSMjETMBEG\nA1UEChMKR2xvYmFsU2lnbjETMBEGA1UEAxMKR2xvYmFsU2lnbjCCASIwDQYJKoZI\nhvcNAQEBBQADggEPADCCAQoCggEBAKbPJA6+Lm8omUVCxKs+IVSbC9N/hHD6ErPL\nv4dfxn+G07IwXNb9rfF73OX4YJYJkhD10FPe+3t+c4isUoh7SqbKSaZeqKeMWhG8\neoLrvozps6yWJQeXSpkqBy+0Hne/ig+1AnwblrjFuTosvNYSuetZfeLQBoZfXklq\ntTleiDTsvHgMCJiEbKjNS7SgfQx5TfC4LcshytVsW33hoCmEofnTlEnLJGKRILzd\nC9XZzPnqJworc5HGnRusyMvo4KD0L5CLTfuwNhv2GXqF4G3yYROIXJ/gkwpRl4pa\nzq+r1feqCapgvdzZX99yqWATXgAByUr6P6TqBwMhAo6CygPCm48CAwEAAaOBnDCB\nmTAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUm+IH\nV2ccHsBqBt5ZtJot39wZhi4wNgYDVR0fBC8wLTAroCmgJ4YlaHR0cDovL2NybC5n\nbG9iYWxzaWduLm5ldC9yb290LXIyLmNybDAfBgNVHSMEGDAWgBSb4gdXZxwewGoG\n3lm0mi3f3BmGLjANBgkqhkiG9w0BAQUFAAOCAQEAmYFThxxol4aR7OBKuEQLq4Gs\nJ0/WwbgcQ3izDJr86iw8bmEbTUsp9Z8FHSbBuOmDAGJFtqkIk7mpM0sYmsL4h4hO\n291xNBrBVNpGP+DTKqttVCL1OmLNIG+6KYnX3ZHu01yiPqFbQfXf5WRDLenVOavS\not+3i9DAgBkcRcAtjOj4LaR0VknFBbVPFd5uRHg5h6h+u/N5GJG79G+dwfCMNYxd\nAfvDbbnvRG15RjF+Cv6pgsH/76tuIMRQyV+dTZsXjAzlAcmgQWpzU/qlULRuJQ/7\nTBj0/VLZjmmx6BEP3ojY+x1J96relc8geMJgEtslQIxq/H5COEBkEveegeGTLg==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIDXzCCAkegAwIBAgILBAAAAAABIVhTCKIwDQYJKoZIhvcNAQELBQAwTDEgMB4G\nA1UECxMXR2xvYmFsU2lnbiBSb290IENBIC0gUjMxEzARBgNVBAoTCkdsb2JhbFNp\nZ24xEzARBgNVBAMTCkdsb2JhbFNpZ24wHhcNMDkwMzE4MTAwMDAwWhcNMjkwMzE4\nMTAwMDAwWjBMMSAwHgYDVQQLExdHbG9iYWxTaWduIFJvb3QgQ0EgLSBSMzETMBEG\nA1UEChMKR2xvYmFsU2lnbjETMBEGA1UEAxMKR2xvYmFsU2lnbjCCASIwDQYJKoZI\nhvcNAQEBBQADggEPADCCAQoCggEBAMwldpB5BngiFvXAg7aEyiie/QV2EcWtiHL8\nRgJDx7KKnQRfJMsuS+FggkbhUqsMgUdwbN1k0ev1LKMPgj0MK66X17YUhhB5uzsT\ngHeMCOFJ0mpiLx9e+pZo34knlTifBtc+ycsmWQ1z3rDI6SYOgxXG71uL0gRgykmm\nKPZpO/bLyCiR5Z2KYVc3rHQU3HTgOu5yLy6c+9C7v/U9AOEGM+iCK65TpjoWc4zd\nQQ4gOsC0p6Hpsk+QLjJg6VfLuQSSaGjlOCZgdbKfd/+RFO+uIEn8rUAVSNECMWEZ\nXriX7613t2Saer9fwRPvm2L7DWzgVGkWqQPabumDk3F2xmmFghcCAwEAAaNCMEAw\nDgYDVR0PAQH/BAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFI/wS3+o\nLkUkrk1Q+mOai97i3Ru8MA0GCSqGSIb3DQEBCwUAA4IBAQBLQNvAUKr+yAzv95ZU\nRUm7lgAJQayzE4aGKAczymvmdLm6AC2upArT9fHxD4q/c2dKg8dEe3jgr25sbwMp\njjM5RcOO5LlXbKr8EpbsU8Yt5CRsuZRj+9xTaGdWPoO4zzUhw8lo/s7awlOqzJCK\n6fBdRoyV3XpYKBovHd7NADdBj+1EbddTKJd+82cEHhXXipa0095MJ6RMG3NzdvQX\nmcIfeg7jLQitChws/zyrVQ4PkX4268NXSb7hLi18YIvDQVETI53O9zJrlAGomecs\nMx86OyXShkDOOyyGeMlhLxS67ttVb9+E7gUJTb0o2HLO02JQZR7rkpeDMdmztcpH\nWD9f\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIHSTCCBTGgAwIBAgIJAMnN0+nVfSPOMA0GCSqGSIb3DQEBBQUAMIGsMQswCQYD\nVQQGEwJFVTFDMEEGA1UEBxM6TWFkcmlkIChzZWUgY3VycmVudCBhZGRyZXNzIGF0\nIHd3dy5jYW1lcmZpcm1hLmNvbS9hZGRyZXNzKTESMBAGA1UEBRMJQTgyNzQzMjg3\nMRswGQYDVQQKExJBQyBDYW1lcmZpcm1hIFMuQS4xJzAlBgNVBAMTHkdsb2JhbCBD\naGFtYmVyc2lnbiBSb290IC0gMjAwODAeFw0wODA4MDExMjMxNDBaFw0zODA3MzEx\nMjMxNDBaMIGsMQswCQYDVQQGEwJFVTFDMEEGA1UEBxM6TWFkcmlkIChzZWUgY3Vy\ncmVudCBhZGRyZXNzIGF0IHd3dy5jYW1lcmZpcm1hLmNvbS9hZGRyZXNzKTESMBAG\nA1UEBRMJQTgyNzQzMjg3MRswGQYDVQQKExJBQyBDYW1lcmZpcm1hIFMuQS4xJzAl\nBgNVBAMTHkdsb2JhbCBDaGFtYmVyc2lnbiBSb290IC0gMjAwODCCAiIwDQYJKoZI\nhvcNAQEBBQADggIPADCCAgoCggIBAMDfVtPkOpt2RbQT2//BthmLN0EYlVJH6xed\nKYiONWwGMi5HYvNJBL99RDaxccy9Wglz1dmFRP+RVyXfXjaOcNFccUMd2drvXNL7\nG706tcuto8xEpw2uIRU/uXpbknXYpBI4iRmKt4DS4jJvVpyR1ogQC7N0ZJJ0YPP2\nzxhPYLIj0Mc7zmFLmY/CDNBAspjcDahOo7kKrmCgrUVSY7pmvWjg+b4aqIG7HkF4\nddPB/gBVsIdU6CeQNR1MM62X/JcumIS/LMmjv9GYERTtY/jKmIhYF5ntRQOXfjyG\nHoiMvvKRhI9lNNgATH23MRdaKXoKGCQwoze1eqkBfSbW+Q6OWfH9GzO1KTsXO0G2\nId3UwD2ln58fQ1DJu7xsepeY7s2MH/ucUa6LcL0nn3HAa6x9kGbo1106DbDVwo3V\nyJ2dwW3Q0L9R5OP4wzg2rtandeavhENdk5IMagfeOx2YItaswTXbo6Al/3K1dh3e\nbeksZixShNBFks4c5eUzHdwHU1SjqoI7mjcv3N2gZOnm3b2u/GSFHTynyQbehP9r\n6GsaPMWis0L7iwk+XwhSx2LE1AVxv8Rk5Pihg+g+EpuoHtQ2TS9x9o0o9oOpE9Jh\nwZG7SMA0j0GMS0zbaRL/UJScIINZc+18ofLx/d33SdNDWKBWY8o9PeU1VlnpDsog\nzCtLkykPAgMBAAGjggFqMIIBZjASBgNVHRMBAf8ECDAGAQH/AgEMMB0GA1UdDgQW\nBBS5CcqcHtvTbDprru1U8VuTBjUuXjCB4QYDVR0jBIHZMIHWgBS5CcqcHtvTbDpr\nru1U8VuTBjUuXqGBsqSBrzCBrDELMAkGA1UEBhMCRVUxQzBBBgNVBAcTOk1hZHJp\nZCAoc2VlIGN1cnJlbnQgYWRkcmVzcyBhdCB3d3cuY2FtZXJmaXJtYS5jb20vYWRk\ncmVzcykxEjAQBgNVBAUTCUE4Mjc0MzI4NzEbMBkGA1UEChMSQUMgQ2FtZXJmaXJt\nYSBTLkEuMScwJQYDVQQDEx5HbG9iYWwgQ2hhbWJlcnNpZ24gUm9vdCAtIDIwMDiC\nCQDJzdPp1X0jzjAOBgNVHQ8BAf8EBAMCAQYwPQYDVR0gBDYwNDAyBgRVHSAAMCow\nKAYIKwYBBQUHAgEWHGh0dHA6Ly9wb2xpY3kuY2FtZXJmaXJtYS5jb20wDQYJKoZI\nhvcNAQEFBQADggIBAICIf3DekijZBZRG/5BXqfEv3xoNa/p8DhxJJHkn2EaqbylZ\nUohwEurdPfWbU1Rv4WCiqAm57OtZfMY18dwY6fFn5a+6ReAJ3spED8IXDneRRXoz\nX1+WLGiLwUePmJs9wOzL9dWCkoQ10b42OFZyMVtHLaoXpGNR6woBrX/sdZ7LoR/x\nfxKxueRkf2fWIyr0uDldmOghp+G9PUIadJpwr2hsUF1Jz//7Dl3mLEfXgTpZALVz\na2Mg9jFFCDkO9HB+QHBaP9BrQql0PSgvAm11cpUJjUhjxsYjV5KTXjXBjfkK9yyd\nYhz2rXzdpjEetrHHfoUm+qRqtdpjMNHvkzeyZi99Bffnt0uYlDXA2TopwZ2yUDMd\nSqlapskD7+3056huirRXhOukP9DuqqqHW2Pok+JrqNS4cnhrG+055F3Lm6qH1U9O\nAP7Zap88MQ8oAgF9mOinsKJknnn4SPIVqczmyETrP3iZ8ntxPjzxmKfFGBI/5rso\nM0LpRQp8bfKGeS/Fghl9CYl8slR2iK7ewfPM4W7bMdaTrpmg7yVqc5iJWzouE4ge\nv8CSlDQb4ye3ix5vQv/n6TebUB0tovkC7stYWDpxvGjjqsGvHCgfotwjZT+B6q6Z\n09gwzxMNTxXJhLynSC34MCN32EZLeW32jO06f2ARePTpm67VVMB0gNELQp/B\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIEADCCAuigAwIBAgIBADANBgkqhkiG9w0BAQUFADBjMQswCQYDVQQGEwJVUzEh\nMB8GA1UEChMYVGhlIEdvIERhZGR5IEdyb3VwLCBJbmMuMTEwLwYDVQQLEyhHbyBE\nYWRkeSBDbGFzcyAyIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MB4XDTA0MDYyOTE3\nMDYyMFoXDTM0MDYyOTE3MDYyMFowYzELMAkGA1UEBhMCVVMxITAfBgNVBAoTGFRo\nZSBHbyBEYWRkeSBHcm91cCwgSW5jLjExMC8GA1UECxMoR28gRGFkZHkgQ2xhc3Mg\nMiBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTCCASAwDQYJKoZIhvcNAQEBBQADggEN\nADCCAQgCggEBAN6d1+pXGEmhW+vXX0iG6r7d/+TvZxz0ZWizV3GgXne77ZtJ6XCA\nPVYYYwhv2vLM0D9/AlQiVBDYsoHUwHU9S3/Hd8M+eKsaA7Ugay9qK7HFiH7Eux6w\nwdhFJ2+qN1j3hybX2C32qRe3H3I2TqYXP2WYktsqbl2i/ojgC95/5Y0V4evLOtXi\nEqITLdiOr18SPaAIBQi2XKVlOARFmR6jYGB0xUGlcmIbYsUfb18aQr4CUWWoriMY\navx4A6lNf4DD+qta/KFApMoZFv6yyO9ecw3ud72a9nmYvLEHZ6IVDd2gWMZEewo+\nYihfukEHU1jPEX44dMX4/7VpkI+EdOqXG68CAQOjgcAwgb0wHQYDVR0OBBYEFNLE\nsNKR1EwRcbNhyz2h/t2oatTjMIGNBgNVHSMEgYUwgYKAFNLEsNKR1EwRcbNhyz2h\n/t2oatTjoWekZTBjMQswCQYDVQQGEwJVUzEhMB8GA1UEChMYVGhlIEdvIERhZGR5\nIEdyb3VwLCBJbmMuMTEwLwYDVQQLEyhHbyBEYWRkeSBDbGFzcyAyIENlcnRpZmlj\nYXRpb24gQXV0aG9yaXR5ggEAMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQEFBQAD\nggEBADJL87LKPpH8EsahB4yOd6AzBhRckB4Y9wimPQoZ+YeAEW5p5JYXMP80kWNy\nOO7MHAGjHZQopDH2esRU1/blMVgDoszOYtuURXO1v0XJJLXVggKtI3lpjbi2Tc7P\nTMozI+gciKqdi0FuFskg5YmezTvacPd+mSYgFFQlq25zheabIZ0KbIIOqPjCDPoQ\nHmyW74cNxA9hi63ugyuV+I6ShHI56yDqg+2DzZduCLzrTia2cyvk0/ZM/iZx4mER\ndEr/VxqHD3VILs9RaRegAhJhldXRQLIQTO7ErBBDpqWeCtWVYpoNz4iCxTIM5Cuf\nReYNnyicsbkqWletNw+vHX/bvZ8=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIDxTCCAq2gAwIBAgIBADANBgkqhkiG9w0BAQsFADCBgzELMAkGA1UEBhMCVVMx\nEDAOBgNVBAgTB0FyaXpvbmExEzARBgNVBAcTClNjb3R0c2RhbGUxGjAYBgNVBAoT\nEUdvRGFkZHkuY29tLCBJbmMuMTEwLwYDVQQDEyhHbyBEYWRkeSBSb290IENlcnRp\nZmljYXRlIEF1dGhvcml0eSAtIEcyMB4XDTA5MDkwMTAwMDAwMFoXDTM3MTIzMTIz\nNTk1OVowgYMxCzAJBgNVBAYTAlVTMRAwDgYDVQQIEwdBcml6b25hMRMwEQYDVQQH\nEwpTY290dHNkYWxlMRowGAYDVQQKExFHb0RhZGR5LmNvbSwgSW5jLjExMC8GA1UE\nAxMoR28gRGFkZHkgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkgLSBHMjCCASIw\nDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAL9xYgjx+lk09xvJGKP3gElY6SKD\nE6bFIEMBO4Tx5oVJnyfq9oQbTqC023CYxzIBsQU+B07u9PpPL1kwIuerGVZr4oAH\n/PMWdYA5UXvl+TW2dE6pjYIT5LY/qQOD+qK+ihVqf94Lw7YZFAXK6sOoBJQ7Rnwy\nDfMAZiLIjWltNowRGLfTshxgtDj6AozO091GB94KPutdfMh8+7ArU6SSYmlRJQVh\nGkSBjCypQ5Yj36w6gZoOKcUcqeldHraenjAKOc7xiID7S13MMuyFYkMlNAJWJwGR\ntDtwKj9useiciAF9n9T521NtYJ2/LOdYq7hfRvzOxBsDPAnrSTFcaUaz4EcCAwEA\nAaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYwHQYDVR0OBBYE\nFDqahQcQZyi27/a9BUFuIMGU2g/eMA0GCSqGSIb3DQEBCwUAA4IBAQCZ21151fmX\nWWcDYfF+OwYxdS2hII5PZYe096acvNjpL9DbWu7PdIxztDhC2gV7+AJ1uP2lsdeu\n9tfeE8tTEH6KRtGX+rcuKxGrkLAngPnon1rpN5+r5N9ss4UXnT3ZJE95kTXWXwTr\ngIOrmgIttRD02JDHBHNA7XIloKmf7J6raBKZV8aPEjoJpL1E/QYVN8Gb5DKj7Tjo\n2GTzLH4U/ALqn83/B2gX2yKQOC16jdFU8WnjXzPKej17CuPKf1855eJ1usV2GDPO\nLPAvTK33sefOT6jEm0pUBsV/fdUID+Ic/n4XuKxe9tQWskMJDE32p2u0mYRlynqI\n4uJEvlz36hz1\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIICwzCCAkqgAwIBAgIBADAKBggqhkjOPQQDAjCBqjELMAkGA1UEBhMCR1IxDzAN\nBgNVBAcTBkF0aGVuczFEMEIGA1UEChM7SGVsbGVuaWMgQWNhZGVtaWMgYW5kIFJl\nc2VhcmNoIEluc3RpdHV0aW9ucyBDZXJ0LiBBdXRob3JpdHkxRDBCBgNVBAMTO0hl\nbGxlbmljIEFjYWRlbWljIGFuZCBSZXNlYXJjaCBJbnN0aXR1dGlvbnMgRUNDIFJv\nb3RDQSAyMDE1MB4XDTE1MDcwNzEwMzcxMloXDTQwMDYzMDEwMzcxMlowgaoxCzAJ\nBgNVBAYTAkdSMQ8wDQYDVQQHEwZBdGhlbnMxRDBCBgNVBAoTO0hlbGxlbmljIEFj\nYWRlbWljIGFuZCBSZXNlYXJjaCBJbnN0aXR1dGlvbnMgQ2VydC4gQXV0aG9yaXR5\nMUQwQgYDVQQDEztIZWxsZW5pYyBBY2FkZW1pYyBhbmQgUmVzZWFyY2ggSW5zdGl0\ndXRpb25zIEVDQyBSb290Q0EgMjAxNTB2MBAGByqGSM49AgEGBSuBBAAiA2IABJKg\nQehLgoRc4vgxEZmGZE4JJS+dQS8KrjVPdJWyUWRrjWvmP3CV8AVER6ZyOFB2lQJa\njq4onvktTpnvLEhvTCUp6NFxW98dwXU3tNf6e3pCnGoKVlp8aQuqgAkkbH7BRqNC\nMEAwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYwHQYDVR0OBBYEFLQi\nC4KZJAEOnLvkDv2/+5cgk5kqMAoGCCqGSM49BAMCA2cAMGQCMGfOFmI4oqxiRaep\nlSTAGiecMjvAwNW6qef4BENThe5SId6d9SWDPp5YSy/XZxMOIQIwBeF1Ad5o7Sof\nTUwJCA3sS61kFyjndc5FZXIhF8siQQ6ME5g4mlRtm8rifOoCWCKR\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIEMTCCAxmgAwIBAgIBADANBgkqhkiG9w0BAQUFADCBlTELMAkGA1UEBhMCR1Ix\nRDBCBgNVBAoTO0hlbGxlbmljIEFjYWRlbWljIGFuZCBSZXNlYXJjaCBJbnN0aXR1\ndGlvbnMgQ2VydC4gQXV0aG9yaXR5MUAwPgYDVQQDEzdIZWxsZW5pYyBBY2FkZW1p\nYyBhbmQgUmVzZWFyY2ggSW5zdGl0dXRpb25zIFJvb3RDQSAyMDExMB4XDTExMTIw\nNjEzNDk1MloXDTMxMTIwMTEzNDk1MlowgZUxCzAJBgNVBAYTAkdSMUQwQgYDVQQK\nEztIZWxsZW5pYyBBY2FkZW1pYyBhbmQgUmVzZWFyY2ggSW5zdGl0dXRpb25zIENl\ncnQuIEF1dGhvcml0eTFAMD4GA1UEAxM3SGVsbGVuaWMgQWNhZGVtaWMgYW5kIFJl\nc2VhcmNoIEluc3RpdHV0aW9ucyBSb290Q0EgMjAxMTCCASIwDQYJKoZIhvcNAQEB\nBQADggEPADCCAQoCggEBAKlTAOMupvaO+mDYLZU++CwqVE7NuYRhlFhPjz2L5EPz\ndYmNUeTDN9KKiE15HrcS3UN4SoqS5tdI1Q+kOilENbgH9mgdVc04UfCMJDGFr4PJ\nfel3r+0ae50X+bOdOFAPplp5kYCvN66m0zH7tSYJnTxa71HFK9+WXesyHgLacEns\nbgzImjeN9/E2YEsmLIKe0HjzDQ9jpFEw4fkrJxIH2Oq9GGKYsFk3fb7u8yBRQlqD\n75O6aRXxYp2fmTmCobd0LovUxQt7L/DICto9eQqakxylKHJzkUOap9FNhYS5qXSP\nFEDH3N6sQWRstBmbAmNtJGSPRLIl6s5ddAxjMlyNh+UCAwEAAaOBiTCBhjAPBgNV\nHRMBAf8EBTADAQH/MAsGA1UdDwQEAwIBBjAdBgNVHQ4EFgQUppFC/RNhSiOeCKQp\n5dgTBCPuQSUwRwYDVR0eBEAwPqA8MAWCAy5ncjAFggMuZXUwBoIELmVkdTAGggQu\nb3JnMAWBAy5ncjAFgQMuZXUwBoEELmVkdTAGgQQub3JnMA0GCSqGSIb3DQEBBQUA\nA4IBAQAf73lB4XtuP7KMhjdCSk4cNx6NZrokgclPEg8hwAOXhiVtXdMiKahsog2p\n6z0GW5k6x8zDmjR/qw7IThzh+uTczQ2+vyT+bOdrwg3IBp5OjWEopmr95fZi6hg8\nTqBTnbI6nOulnJEWtk2C4AwFSKls9cz4y51JtPACpf1wA+2KIaWuE4ZJwzNzvoc7\ndIsXRSZMFpGD/md9zU1jZ/rzAxKWeAaNsWftjj++n08C9bMJL/NMh98qy5V8Acys\nNnq/onN694/BtZqhFLKPM58N7yLcZnuEvUUXBj08yrl3NI/K6s8/MT7jiOOASSXI\nl7WdmplNsDz4SgCbZN2fOUvRJ9e4\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIGCzCCA/OgAwIBAgIBADANBgkqhkiG9w0BAQsFADCBpjELMAkGA1UEBhMCR1Ix\nDzANBgNVBAcTBkF0aGVuczFEMEIGA1UEChM7SGVsbGVuaWMgQWNhZGVtaWMgYW5k\nIFJlc2VhcmNoIEluc3RpdHV0aW9ucyBDZXJ0LiBBdXRob3JpdHkxQDA+BgNVBAMT\nN0hlbGxlbmljIEFjYWRlbWljIGFuZCBSZXNlYXJjaCBJbnN0aXR1dGlvbnMgUm9v\ndENBIDIwMTUwHhcNMTUwNzA3MTAxMTIxWhcNNDAwNjMwMTAxMTIxWjCBpjELMAkG\nA1UEBhMCR1IxDzANBgNVBAcTBkF0aGVuczFEMEIGA1UEChM7SGVsbGVuaWMgQWNh\nZGVtaWMgYW5kIFJlc2VhcmNoIEluc3RpdHV0aW9ucyBDZXJ0LiBBdXRob3JpdHkx\nQDA+BgNVBAMTN0hlbGxlbmljIEFjYWRlbWljIGFuZCBSZXNlYXJjaCBJbnN0aXR1\ndGlvbnMgUm9vdENBIDIwMTUwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoIC\nAQDC+Kk/G4n8PDwEXT2QNrCROnk8ZlrvbTkBSRq0t89/TSNTt5AA4xMqKKYx8ZEA\n4yjsriFBzh/a/X0SWwGDD7mwX5nh8hKDgE0GPt+sr+ehiGsxr/CL0BgzuNtFajT0\nAoAkKAoCFZVedioNmToUW/bLy1O8E00BiDeUJRtCvCLYjqOWXjrZMts+6PAQZe10\n4S+nfK8nNLspfZu2zwnI5dMK/IhlZXQK3HMcXM1AsRzUtoSMTFDPaI6oWa7CJ06C\nojXdFPQf/7J31Ycvqm59JCfnxssm5uX+Zwdj2EUN3TpZZTlYepKZcj2chF6IIbjV\n9Cz82XBST3i4vTwri5WY9bPRaM8gFH5MXF/ni+X1NYEZN9cRCLdmvtNKzoNXADrD\ngfgXy5I2XdGj2HUb4Ysn6npIQf1FGQatJ5lOwXBH3bWfgVMS5bGMSF0xQxfjjMZ6\nY5ZLKTBOhE5iGV48zpeQpX8B653g+IuJ3SWYPZK2fu/Z8VFRfS0myGlZYeCsargq\nNhEEelC9MoS+L9xy1dcdFkfkR2YgP/SWxa+OAXqlD3pk9Q0Yh9muiNX6hME6wGko\nLfINaFGq46V3xqSQDqE3izEjR8EJCOtu93ib14L8hCCZSRm2Ekax+0VVFqmjZayc\nBw/qa9wfLgZy7IaIEuQt218FL+TwA9MmM+eAws1CoRc0CwIDAQABo0IwQDAPBgNV\nHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4EFgQUcRVnyMjJvXVd\nctA4GGqd83EkVAswDQYJKoZIhvcNAQELBQADggIBAHW7bVRLqhBYRjTyYtcWNl0I\nXtVsyIe9tC5G8jH4fOpCtZMWVdyhDBKg2mF+D1hYc2Ryx+hFjtyp8iY/xnmMsVMI\nM4GwVhO+5lFc2JsKT0ucVlMC6U/2DWDqTUJV6HwbISHTGzrMd/K4kPFox/la/vot\n9L/J9UUbzjgQKjeKeaO04wlshYaT/4mWJ3iBj2fjRnRUjtkNaeJK9E10A/+yd+2V\nZ5fkscWrv2oj6NSU4kQoYsRL4vDY4ilrGnB+JGGTe08DMiUNRSQrlrRGar9KC/ea\nj8GsGsVn82800vpzY4zvFrCopEYq+OsS7HK07/grfoxSwIuEVPkvPuNVqNxmsdnh\nX9izjFk0WaSrT2y7HxjbdavYy5LNlDhhDgcGH0tGEPEVvo2FXDtKK4F5D7Rpn0lQ\nl033DlZdwJVqwjbDG2jJ9SrcR5q+ss7FJej6A7na+RZukYT1HCjI/CbM1xyQVqdf\nbzoEvM14iQuODy+jqk+iGxI9FghAD/FGTNeqewjBCvVtJ94Cj8rDtSvK6evIIVM4\npcw72Hc3MKJP2W/R8kCtQXoXxdZKNYm3QdV8hn9VTYNKpXMgwDqvkPGaJI7ZjnHK\ne7iG2rKPmT4dEw0SEe7Uq/DpFXYC5ODfqiAeW2GFZECpkJcNrVPSWh2HagCXZWK0\nvm9qp/UsQu0yrbYhnr68\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIDMDCCAhigAwIBAgICA+gwDQYJKoZIhvcNAQEFBQAwRzELMAkGA1UEBhMCSEsx\nFjAUBgNVBAoTDUhvbmdrb25nIFBvc3QxIDAeBgNVBAMTF0hvbmdrb25nIFBvc3Qg\nUm9vdCBDQSAxMB4XDTAzMDUxNTA1MTMxNFoXDTIzMDUxNTA0NTIyOVowRzELMAkG\nA1UEBhMCSEsxFjAUBgNVBAoTDUhvbmdrb25nIFBvc3QxIDAeBgNVBAMTF0hvbmdr\nb25nIFBvc3QgUm9vdCBDQSAxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC\nAQEArP84tulmAknjorThkPlAj3n54r15/gK97iSSHSL22oVyaf7XPwnU3ZG1ApzQ\njVrhVcNQhrkpJsLj2aDxaQMoIIBFIi1WpztUlVYiWR8o3x8gPW2iNr4joLFutbEn\nPzlTCeqrauh0ssJlXI6/fMN4hM2eFvz1Lk8gKgifd/PFHsSaUmYeSF7jEAaPIpjh\nZY4bXSNmO7ilMlHIhqqhqZ5/dpTCpmy3QfDVyAY45tQM4vM7TG1QjMSDJ8EThFk9\nnnV0ttgCXjqQesBCNnLsak3c78QA3xMYV18meMjWCnl3v/evt3a5pQuEF10Q6m/h\nq5URX208o1xNg1vysxmKgIsLhwIDAQABoyYwJDASBgNVHRMBAf8ECDAGAQH/AgED\nMA4GA1UdDwEB/wQEAwIBxjANBgkqhkiG9w0BAQUFAAOCAQEADkbVPK7ih9legYsC\nmEEIjEy82tvuJxuC52pF7BaLT4Wg87JwvVqWuspube5Gi27nKi6Wsxkz67SfqLI3\n7piol7Yutmcn1KZJ/RyTZXaeQi/cImyaT/JaFTmxcdcrUehtHJjA2Sr0oYJ71clB\noiMBdDhViw+5LmeiIAQ32pwL0xch4I+XeTRvhEgCIDMb5jREn5Fw9IBehEPCKdJs\nEhTkYY2sEJCehFC78JZvRZ+K88psT/oROhUVRsPNH4NbLUES7VBnQRM9IauUiqpO\nfMGx+6fWtScvl6tu4B3i0RwsH0Ti/L6RoZz71ilTc4afU9hDDl3WY4JxHYB0yvbi\nAmvZWg==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIEAjCCAuqgAwIBAgIFORFFEJQwDQYJKoZIhvcNAQEFBQAwgYUxCzAJBgNVBAYT\nAkZSMQ8wDQYDVQQIEwZGcmFuY2UxDjAMBgNVBAcTBVBhcmlzMRAwDgYDVQQKEwdQ\nTS9TR0ROMQ4wDAYDVQQLEwVEQ1NTSTEOMAwGA1UEAxMFSUdDL0ExIzAhBgkqhkiG\n9w0BCQEWFGlnY2FAc2dkbi5wbS5nb3V2LmZyMB4XDTAyMTIxMzE0MjkyM1oXDTIw\nMTAxNzE0MjkyMlowgYUxCzAJBgNVBAYTAkZSMQ8wDQYDVQQIEwZGcmFuY2UxDjAM\nBgNVBAcTBVBhcmlzMRAwDgYDVQQKEwdQTS9TR0ROMQ4wDAYDVQQLEwVEQ1NTSTEO\nMAwGA1UEAxMFSUdDL0ExIzAhBgkqhkiG9w0BCQEWFGlnY2FAc2dkbi5wbS5nb3V2\nLmZyMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAsh/R0GLFMzvABIaI\ns9z4iPf930Pfeo2aSVz2TqrMHLmh6yeJ8kbpO0px1R2OLc/mratjUMdUC24SyZA2\nxtgv2pGqaMVy/hcKshd+ebUyiHDKcMCWSo7kVc0dJ5S/znIq7Fz5cyD+vfcuiWe4\nu0dzEvfRNWk68gq5rv9GQkaiv6GFGvm/5P9JhfejcIYyHF2fYPepraX/z9E0+X1b\nF8bc1g4oa8Ld8fUzaJ1O/Id8NhLWo4DoQw1VYZTqZDdH6nfK0LJYBcNdfrGoRpAx\nVs5wKpayMLh35nnAvSk7/ZR3TL0gzUEl4C7HG7vupARB0l2tEmqKm0f7yd1GQOGd\nPDPQtQIDAQABo3cwdTAPBgNVHRMBAf8EBTADAQH/MAsGA1UdDwQEAwIBRjAVBgNV\nHSAEDjAMMAoGCCqBegF5AQEBMB0GA1UdDgQWBBSjBS8YYFDCiQrdKyFP/45OqDAx\nNjAfBgNVHSMEGDAWgBSjBS8YYFDCiQrdKyFP/45OqDAxNjANBgkqhkiG9w0BAQUF\nAAOCAQEABdwm2Pp3FURo/C9mOnTgXeQp/wYHE4RKq89toB9RlPhJy3Q2FLwV3duJ\nL92PoF189RLrn544pEfMs5bZvpwlqwN+Mw+VgQ39FuCIvjfwbF3QMZsyK10XZZOY\nYLxuj7GoPB7ZHPOpJkL5ZB3C55L29B5aqhlSXa/oovdgoPaN8In1buAKBQGVyYsg\nCrpa/JosPL3Dt8ldeCUFP1YUmwza+zpI/pdpXsoQhvdOlgQITeywvl3cO45Pwf2a\nNjSaTFR+FwNIlQgRHAdvhQh+XU3Endv7rs6y0bO4g2wdsrN58dhwmX7wEwLOXt1R\n0982gaEbeC9xs/FZTEYYKKuF0mBWWg==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIFazCCA1OgAwIBAgIRAIIQz7DSQONZRGPgu2OCiwAwDQYJKoZIhvcNAQELBQAw\nTzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh\ncmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMTUwNjA0MTEwNDM4\nWhcNMzUwNjA0MTEwNDM4WjBPMQswCQYDVQQGEwJVUzEpMCcGA1UEChMgSW50ZXJu\nZXQgU2VjdXJpdHkgUmVzZWFyY2ggR3JvdXAxFTATBgNVBAMTDElTUkcgUm9vdCBY\nMTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAK3oJHP0FDfzm54rVygc\nh77ct984kIxuPOZXoHj3dcKi/vVqbvYATyjb3miGbESTtrFj/RQSa78f0uoxmyF+\n0TM8ukj13Xnfs7j/EvEhmkvBioZxaUpmZmyPfjxwv60pIgbz5MDmgK7iS4+3mX6U\nA5/TR5d8mUgjU+g4rk8Kb4Mu0UlXjIB0ttov0DiNewNwIRt18jA8+o+u3dpjq+sW\nT8KOEUt+zwvo/7V3LvSye0rgTBIlDHCNAymg4VMk7BPZ7hm/ELNKjD+Jo2FR3qyH\nB5T0Y3HsLuJvW5iB4YlcNHlsdu87kGJ55tukmi8mxdAQ4Q7e2RCOFvu396j3x+UC\nB5iPNgiV5+I3lg02dZ77DnKxHZu8A/lJBdiB3QW0KtZB6awBdpUKD9jf1b0SHzUv\nKBds0pjBqAlkd25HN7rOrFleaJ1/ctaJxQZBKT5ZPt0m9STJEadao0xAH0ahmbWn\nOlFuhjuefXKnEgV4We0+UXgVCwOPjdAvBbI+e0ocS3MFEvzG6uBQE3xDk3SzynTn\njh8BCNAw1FtxNrQHusEwMFxIt4I7mKZ9YIqioymCzLq9gwQbooMDQaHWBfEbwrbw\nqHyGO0aoSCqI3Haadr8faqU9GY/rOPNk3sgrDQoo//fb4hVC1CLQJ13hef4Y53CI\nrU7m2Ys6xt0nUW7/vGT1M0NPAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNV\nHRMBAf8EBTADAQH/MB0GA1UdDgQWBBR5tFnme7bl5AFzgAiIyBpY9umbbjANBgkq\nhkiG9w0BAQsFAAOCAgEAVR9YqbyyqFDQDLHYGmkgJykIrGF1XIpu+ILlaS/V9lZL\nubhzEFnTIZd+50xx+7LSYK05qAvqFyFWhfFQDlnrzuBZ6brJFe+GnY+EgPbk6ZGQ\n3BebYhtF8GaV0nxvwuo77x/Py9auJ/GpsMiu/X1+mvoiBOv/2X/qkSsisRcOj/KK\nNFtY2PwByVS5uCbMiogziUwthDyC3+6WVwW6LLv3xLfHTjuCvjHIInNzktHCgKQ5\nORAzI4JMPJ+GslWYHb4phowim57iaztXOoJwTdwJx4nLCgdNbOhdjsnvzqvHu7Ur\nTkXWStAmzOVyyghqpZXjFaH3pO3JLF+l+/+sKAIuvtd7u+Nxe5AW0wdeRlN8NwdC\njNPElpzVmbUq4JUagEiuTDkHzsxHpFKVK7q4+63SM1N95R1NbdWhscdCb+ZAJzVc\noyi3B43njTOQ5yOf+1CceWxG1bQVs5ZufpsMljq4Ui0/1lvh+wjChP4kqKOJ2qxq\n4RgqsahDYVvTH9w7jXbyLeiNdd8XM2w9U/t7y0Ff/9yi0GE44Za4rF2LN9d11TPA\nmRGunUHBcnWEvgJBQl9nJEiU0Zsnvgc/ubhPgXRR4Xq37Z0j4r7g1SgEEzwxA57d\nemyPxgcYxn/eR44/KJ4EBs+lVDR3veyJm+kXQ99b21/+jh5Xos1AnX5iItreGCc=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIFYDCCA0igAwIBAgIQCgFCgAAAAUUjyES1AAAAAjANBgkqhkiG9w0BAQsFADBK\nMQswCQYDVQQGEwJVUzESMBAGA1UEChMJSWRlblRydXN0MScwJQYDVQQDEx5JZGVu\nVHJ1c3QgQ29tbWVyY2lhbCBSb290IENBIDEwHhcNMTQwMTE2MTgxMjIzWhcNMzQw\nMTE2MTgxMjIzWjBKMQswCQYDVQQGEwJVUzESMBAGA1UEChMJSWRlblRydXN0MScw\nJQYDVQQDEx5JZGVuVHJ1c3QgQ29tbWVyY2lhbCBSb290IENBIDEwggIiMA0GCSqG\nSIb3DQEBAQUAA4ICDwAwggIKAoICAQCnUBneP5k91DNG8W9RYYKyqU+PZ4ldhNlT\n3Qwo2dfw/66VQ3KZ+bVdfIrBQuExUHTRgQ18zZshq0PirK1ehm7zCYofWjK9ouuU\n+ehcCuz/mNKvcbO0U59Oh++SvL3sTzIwiEsXXlfEU8L2ApeN2WIrvyQfYo3fw7gp\nS0l4PJNgiCL8mdo2yMKi1CxUAGc1bnO/AljwpN3lsKImesrgNqUZFvX9t++uP0D1\nbVoE/c40yiTcdCMbXTMTEl3EASX2MN0CXZ/g1Ue9tOsbobtJSdifWwLziuQkkORi\nT0/Br4sOdBeo0XKIanoBScy0RnnGF7HamB4HWfp1IYVl3ZBWzvurpWCdxJ35UrCL\nvYf5jysjCiN2O/cz4ckA82n5S6LgTrx+kzmEB/dEcH7+B1rlsazRGMzyNeVJSQjK\nVsk9+w8YfYs7wRPCTY/JTw436R+hDmrfYi7LNQZReSzIJTj0+kuniVyc0uMNOYZK\ndHzVWYfCP04MXFL0PfdSgvHqo6z9STQaKPNBiDoT7uje/5kdX7rL6B7yuVBgwDHT\nc+XvvqDtMwt0viAgxGds8AgDelWAf0ZOlqf0Hj7h9tgJ4TNkK2PXMl6f+cB7D3hv\nl7yTmvmcEpB4eoCHFddydJxVdHixuuFucAS6T6C6aMN7/zHwcz09lCqxC0EOoP5N\niGVreTO01wIDAQABo0IwQDAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB\n/zAdBgNVHQ4EFgQU7UQZwNPwBovupHu+QucmVMiONnYwDQYJKoZIhvcNAQELBQAD\nggIBAA2ukDL2pkt8RHYZYR4nKM1eVO8lvOMIkPkp165oCOGUAFjvLi5+U1KMtlwH\n6oi6mYtQlNeCgN9hCQCTrQ0U5s7B8jeUeLBfnLOic7iPBZM4zY0+sLj7wM+x8uwt\nLRvM7Kqas6pgghstO8OEPVeKlh6cdbjTMM1gCIOQ045U8U1mwF10A0Cj7oV+wh93\nnAbowacYXVKV7cndJZ5t+qntozo00Fl72u1Q8zW/7esUTTHHYPTa8Yec4kjixsU3\n+wYQ+nVZZjFHKdp2mhzpgq7vmrlR94gjmmmVYjzlVYA211QC//G5Xc7UI2/YRYRK\nW2XviQzdFKcgyxilJbQN+QHwotL0AMh0jqEqSI5l2xPE4iUXfeu+h1sXIFRRk0pT\nAwvsXcoz7WL9RccvW9xYoIA55vrX/hMUpu09lEpCdNTDd1lzzY9GvlU47/rokTLq\nl1gEIt44w8y8bckzOmoKaT+gyOpyj4xjhiO9bTyWnpXgSUyqorkqG5w2gXjtw+hG\n4iZZRHUe2XWJUc0QhJ1hYMtd+ZciTY6Y5uN/9lu7rs3KSoFrXgvzUeF0K+l+J6fZ\nmUlO+KWA2yUPHGNiiskzZ2s8EIPGrd6ozRaOjfAHN3Gf8qv8QfXBi+wAN10J5U6A\n7/qxXDgGpRtK4dw4LTzcqx+QGtVKnO7RcGzM7vRX+Bi6hG6H\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIFZjCCA06gAwIBAgIQCgFCgAAAAUUjz0Z8AAAAAjANBgkqhkiG9w0BAQsFADBN\nMQswCQYDVQQGEwJVUzESMBAGA1UEChMJSWRlblRydXN0MSowKAYDVQQDEyFJZGVu\nVHJ1c3QgUHVibGljIFNlY3RvciBSb290IENBIDEwHhcNMTQwMTE2MTc1MzMyWhcN\nMzQwMTE2MTc1MzMyWjBNMQswCQYDVQQGEwJVUzESMBAGA1UEChMJSWRlblRydXN0\nMSowKAYDVQQDEyFJZGVuVHJ1c3QgUHVibGljIFNlY3RvciBSb290IENBIDEwggIi\nMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQC2IpT8pEiv6EdrCvsnduTyP4o7\nekosMSqMjbCpwzFrqHd2hCa2rIFCDQjrVVi7evi8ZX3yoG2LqEfpYnYeEe4IFNGy\nRBb06tD6Hi9e28tzQa68ALBKK0CyrOE7S8ItneShm+waOh7wCLPQ5CQ1B5+ctMlS\nbdsHyo+1W/CD80/HLaXIrcuVIKQxKFdYWuSNG5qrng0M8gozOSI5Cpcu81N3uURF\n/YTLNiCBWS2ab21ISGHKTN9T0a9SvESfqy9rg3LvdYDaBjMbXcjaY8ZNzaxmMc3R\n3j6HEDbhuaR672BQssvKplbgN6+rNBM5Jeg5ZuSYeqoSmJxZZoY+rfGwyj4GD3vw\nEUs3oERte8uojHH01bWRNszwFcYr3lEXsZdMUD2xlVl8BX0tIdUAvwFnol57plzy\n9yLxkA2T26pEUWbMfXYD62qoKjgZl3YNa4ph+bz27nb9cCvdKTz4Ch5bQhyLVi9V\nGxyhLrXHFub4qjySjmm2AcG1hp2JDws4lFTo6tyePSW8Uybt1as5qsVATFSrsrTZ\n2fjXctscvG29ZV/viDUqZi/u9rNl8DONfJhBaUYPQxxp+pu10GFqzcpL2UyQRqsV\nWaFHVCkugyhfHMKiq3IXAAaOReyL4jM9f9oZRORicsPfIsbyVtTdX5Vy7W1f90gD\nW/3FKqD2cyOEEBsB5wIDAQABo0IwQDAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/\nBAUwAwEB/zAdBgNVHQ4EFgQU43HgntinQtnbcZFrlJPrw6PRFKMwDQYJKoZIhvcN\nAQELBQADggIBAEf63QqwEZE4rU1d9+UOl1QZgkiHVIyqZJnYWv6IAcVYpZmxI1Qj\nt2odIFflAWJBF9MJ23XLblSQdf4an4EKwt3X9wnQW3IV5B4Jaj0z8yGa5hV+rVHV\nDRDtfULAj+7AmgjVQdZcDiFpboBhDhXAuM/FSRJSzL46zNQuOAXeNf0fb7iAaJg9\nTaDKQGXSc3z1i9kKlT/YPyNtGtEqJBnZhbMX73huqVjRI9PHE+1yJX9dsXNw0H8G\nlwmEKYBhHfpe/3OsoOOJuBxxFcbeMX8S3OFtm6/n6J91eEyrRjuazr8FGF1NFTwW\nmhlQBJqymm9li1JfPFgEKCXAZmExfrngdbkaqIHWchezxQMxNRF4eKLg6TCMf4Df\nWN88uieW4oA0beOY02QnrEh+KHdcxiVhJfiFDGX6xDIvpZgF5PgLZxYWxoK4Mhn5\n+bl53B/N66+rDt0b20XkeucC4pVd/GnwU2lhlXV5C15V5jgclKlZM57IcXR5f1GJ\ntshquDDIajjDbp7hNxbqBWJMWxJH7ae0s1hWx0nzfxJoCTFx8G34Tkf71oXuxVhA\nGaQdp/lLQzfcaFpPz+vCZHTetBXZ9FRUGi8c15dxVJCO2SCdUyt/q4/i6jC8UDfv\n8Ue1fXwsBOxonbRJRBD0ckscZOf85muQ3Wl9af0AVqW3rLatt8o+Ae+c\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIF8TCCA9mgAwIBAgIQALC3WhZIX7/hy/WL1xnmfTANBgkqhkiG9w0BAQsFADA4\nMQswCQYDVQQGEwJFUzEUMBIGA1UECgwLSVpFTlBFIFMuQS4xEzARBgNVBAMMCkl6\nZW5wZS5jb20wHhcNMDcxMjEzMTMwODI4WhcNMzcxMjEzMDgyNzI1WjA4MQswCQYD\nVQQGEwJFUzEUMBIGA1UECgwLSVpFTlBFIFMuQS4xEzARBgNVBAMMCkl6ZW5wZS5j\nb20wggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDJ03rKDx6sp4boFmVq\nscIbRTJxldn+EFvMr+eleQGPicPK8lVx93e+d5TzcqQsRNiekpsUOqHnJJAKClaO\nxdgmlOHZSOEtPtoKct2jmRXagaKH9HtuJneJWK3W6wyyQXpzbm3benhB6QiIEn6H\nLmYRY2xU+zydcsC8Lv/Ct90NduM61/e0aL6i9eOBbsFGb12N4E3GVFWJGjMxCrFX\nuaOKmMPsOzTFlUFpfnXCPCDFYbpRR6AgkJOhkEvzTnyFRVSa0QUmQbC1TR0zvsQD\nyCV8wXDbO/QJLVQnSKwv4cSsPsjLkkxTOTcj7NMB+eAJRE1NZMDhDVqHIrytG6P+\nJrUV86f8hBnp7KGItERphIPzidF0BqnMC9bC3ieFUCbKF7jJeodWLBoBHmy+E60Q\nrLUk9TiRodZL2vG70t5HtfG8gfZZa88ZU+mNFctKy6lvROUbQc/hhqfK0GqfvEyN\nBjNaooXlkDWgYlwWTvDjovoDGrQscbNYLN57C9saD+veIR8GdwYDsMnvmfzAuU8L\nhij+0rnq49qlw0dpEuDb8PYZi+17cNcC1u2HGCgsBCRMd+RIihrGO5rUD8r6ddIB\nQFqNeb+Lz0vPqhbBleStTIo+F5HUsWLlguWABKQDfo2/2n+iD5dPDNMN+9fR5XJ+\nHMh3/1uaD7euBUbl8agW7EekFwIDAQABo4H2MIHzMIGwBgNVHREEgagwgaWBD2lu\nZm9AaXplbnBlLmNvbaSBkTCBjjFHMEUGA1UECgw+SVpFTlBFIFMuQS4gLSBDSUYg\nQTAxMzM3MjYwLVJNZXJjLlZpdG9yaWEtR2FzdGVpeiBUMTA1NSBGNjIgUzgxQzBB\nBgNVBAkMOkF2ZGEgZGVsIE1lZGl0ZXJyYW5lbyBFdG9yYmlkZWEgMTQgLSAwMTAx\nMCBWaXRvcmlhLUdhc3RlaXowDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMC\nAQYwHQYDVR0OBBYEFB0cZQ6o8iV7tJHP5LGx5r1VdGwFMA0GCSqGSIb3DQEBCwUA\nA4ICAQB4pgwWSp9MiDrAyw6lFn2fuUhfGI8NYjb2zRlrrKvV9pF9rnHzP7MOeIWb\nlaQnIUdCSnxIOvVFfLMMjlF4rJUT3sb9fbgakEyrkgPH7UIBzg/YsfqikuFgba56\nawmqxinuaElnMIAkejEWOVt+8Rwu3WwJrfIxwYJOubv5vr8qhT/AQKM6WfxZSzwo\nJNu0FXWuDYi6LnPAvViH5ULy617uHjAimcs30cQhbIHsvm0m5hzkQiCeR7Csg1lw\nLDXWrzY0tM07+DKo7+N4ifuNRSzanLh+QBxh5z6ikixL8s36mLYp//Pye6kfLqCT\nVyvehQP5aTfLnnhqBbTFMXiJ7HqnheG5ezzevh55hM6fcA5ZwjUukCox2eRFekGk\nLhObNA5me0mrZJfQRsN5nXJQY6aYWwa9SG3YOYNw6DXwBdGqvOPbyALqfP2C2sJb\nUjWumDqtujWTI6cfSN01RpiyEGjkpTHCClguGYEQyVB1/OpaFs4R1+7vUIgtYf8/\nQnMFlEPVjjxOAToZpR9GTnfQXeWBIiGH/pR9hNiTrdZoQ0iy2+tzJOeRf1SktoA+\nnaM8THLCV8Sg1Mw4J87VBp6iSNnpn86CcDaTmjvfliHjWbcM2pE38P1ZWrOZyGls\nQyYBNWNgVYkDOnXYukrZVP/u3oDYLdE41V4tC5h9Pmzb/CaIxw==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIE5jCCA86gAwIBAgIEO45L/DANBgkqhkiG9w0BAQUFADBdMRgwFgYJKoZIhvcN\nAQkBFglwa2lAc2suZWUxCzAJBgNVBAYTAkVFMSIwIAYDVQQKExlBUyBTZXJ0aWZp\ndHNlZXJpbWlza2Vza3VzMRAwDgYDVQQDEwdKdXVyLVNLMB4XDTAxMDgzMDE0MjMw\nMVoXDTE2MDgyNjE0MjMwMVowXTEYMBYGCSqGSIb3DQEJARYJcGtpQHNrLmVlMQsw\nCQYDVQQGEwJFRTEiMCAGA1UEChMZQVMgU2VydGlmaXRzZWVyaW1pc2tlc2t1czEQ\nMA4GA1UEAxMHSnV1ci1TSzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEB\nAIFxNj4zB9bjMI0TfncyRsvPGbJgMUaXhvSYRqTCZUXP00B841oiqBB4M8yIsdOB\nSvZiF3tfTQou0M+LI+5PAk676w7KvRhj6IAcjeEcjT3g/1tf6mTll+g/mX8MCgkz\nABpTpyHhOEvWgxutr2TC+Rx6jGZITWYfGAriPrsfB2WThbkasLnE+w0R9vXW+RvH\nLCu3GFH+4Hv2qEivbDtPL+/40UceJlfwUR0zlv/vWT3aTdEVNMfqPxZIe5EcgEMP\nPbgFPtGzlc3Yyg/CQ2fbt5PgIoIuvvVoKIO5wTtpeyDaTpxt4brNj3pssAki14sL\n2xzVWiZbDcDq5WDQn/413z8CAwEAAaOCAawwggGoMA8GA1UdEwEB/wQFMAMBAf8w\nggEWBgNVHSAEggENMIIBCTCCAQUGCisGAQQBzh8BAQEwgfYwgdAGCCsGAQUFBwIC\nMIHDHoHAAFMAZQBlACAAcwBlAHIAdABpAGYAaQBrAGEAYQB0ACAAbwBuACAAdgDk\nAGwAagBhAHMAdABhAHQAdQBkACAAQQBTAC0AaQBzACAAUwBlAHIAdABpAGYAaQB0\nAHMAZQBlAHIAaQBtAGkAcwBrAGUAcwBrAHUAcwAgAGEAbABhAG0ALQBTAEsAIABz\nAGUAcgB0AGkAZgBpAGsAYQBhAHQAaQBkAGUAIABrAGkAbgBuAGkAdABhAG0AaQBz\nAGUAawBzMCEGCCsGAQUFBwIBFhVodHRwOi8vd3d3LnNrLmVlL2Nwcy8wKwYDVR0f\nBCQwIjAgoB6gHIYaaHR0cDovL3d3dy5zay5lZS9qdXVyL2NybC8wHQYDVR0OBBYE\nFASqekej5ImvGs8KQKcYP2/v6X2+MB8GA1UdIwQYMBaAFASqekej5ImvGs8KQKcY\nP2/v6X2+MA4GA1UdDwEB/wQEAwIB5jANBgkqhkiG9w0BAQUFAAOCAQEAe8EYlFOi\nCfP+JmeaUOTDBS8rNXiRTHyoERF5TElZrMj3hWVcRrs7EKACr81Ptcw2Kuxd/u+g\nkcm2k298gFTsxwhwDY77guwqYHhpNjbRxZyLabVAyJRld/JXIWY7zoVAtjNjGr95\nHvxcHdMdkxuLDF2FvZkwMhgJkVLpfKG6/2SSmuz+Ne6ML678IIbsSt4beDI3poHS\nna9aEhbKmVv8b20OxaAehsmR0FyYgl9jDIpaq9iVpszLita/ZEuOyoqysOkhMp6q\nqIWYNIE5ITuoOlIyPfZrN4YGWhWY3PARZv40ILcD9EEQfTmEeZZyY7aWAuVrua0Z\nTbvGRNs2yyqcjg==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIHqDCCBpCgAwIBAgIRAMy4579OKRr9otxmpRwsDxEwDQYJKoZIhvcNAQEFBQAw\ncjELMAkGA1UEBhMCSFUxETAPBgNVBAcTCEJ1ZGFwZXN0MRYwFAYDVQQKEw1NaWNy\nb3NlYyBMdGQuMRQwEgYDVQQLEwtlLVN6aWdubyBDQTEiMCAGA1UEAxMZTWljcm9z\nZWMgZS1Temlnbm8gUm9vdCBDQTAeFw0wNTA0MDYxMjI4NDRaFw0xNzA0MDYxMjI4\nNDRaMHIxCzAJBgNVBAYTAkhVMREwDwYDVQQHEwhCdWRhcGVzdDEWMBQGA1UEChMN\nTWljcm9zZWMgTHRkLjEUMBIGA1UECxMLZS1Temlnbm8gQ0ExIjAgBgNVBAMTGU1p\nY3Jvc2VjIGUtU3ppZ25vIFJvb3QgQ0EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAw\nggEKAoIBAQDtyADVgXvNOABHzNuEwSFpLHSQDCHZU4ftPkNEU6+r+ICbPHiN1I2u\nuO/TEdyB5s87lozWbxXGd36hL+BfkrYn13aaHUM86tnsL+4582pnS4uCzyL4ZVX+\nLMsvfUh6PXX5qqAnu3jCBspRwn5mS6/NoqdNAoI/gqyFxuEPkEeZlApxcpMqyabA\nvjxWTHOSJ/FrtfX9/DAFYJLG65Z+AZHCabEeHXtTRbjcQR/Ji3HWVBTji1R4P770\nYjtb9aPs1ZJ04nQw7wHb4dSrmZsqa/i9phyGI0Jf7Enemotb9HI6QMVJPqW+jqpx\n62z69Rrkav17fVVA71hu5tnVvCSrwe+3AgMBAAGjggQ3MIIEMzBnBggrBgEFBQcB\nAQRbMFkwKAYIKwYBBQUHMAGGHGh0dHBzOi8vcmNhLmUtc3ppZ25vLmh1L29jc3Aw\nLQYIKwYBBQUHMAKGIWh0dHA6Ly93d3cuZS1zemlnbm8uaHUvUm9vdENBLmNydDAP\nBgNVHRMBAf8EBTADAQH/MIIBcwYDVR0gBIIBajCCAWYwggFiBgwrBgEEAYGoGAIB\nAQEwggFQMCgGCCsGAQUFBwIBFhxodHRwOi8vd3d3LmUtc3ppZ25vLmh1L1NaU1ov\nMIIBIgYIKwYBBQUHAgIwggEUHoIBEABBACAAdABhAG4A+gBzAO0AdAB2AOEAbgB5\nACAA6QByAHQAZQBsAG0AZQB6AOkAcwDpAGgAZQB6ACAA6QBzACAAZQBsAGYAbwBn\nAGEAZADhAHMA4QBoAG8AegAgAGEAIABTAHoAbwBsAGcA4QBsAHQAYQB0APMAIABT\nAHoAbwBsAGcA4QBsAHQAYQB0AOEAcwBpACAAUwB6AGEAYgDhAGwAeQB6AGEAdABh\nACAAcwB6AGUAcgBpAG4AdAAgAGsAZQBsAGwAIABlAGwAagDhAHIAbgBpADoAIABo\nAHQAdABwADoALwAvAHcAdwB3AC4AZQAtAHMAegBpAGcAbgBvAC4AaAB1AC8AUwBa\nAFMAWgAvMIHIBgNVHR8EgcAwgb0wgbqggbeggbSGIWh0dHA6Ly93d3cuZS1zemln\nbm8uaHUvUm9vdENBLmNybIaBjmxkYXA6Ly9sZGFwLmUtc3ppZ25vLmh1L0NOPU1p\nY3Jvc2VjJTIwZS1Temlnbm8lMjBSb290JTIwQ0EsT1U9ZS1Temlnbm8lMjBDQSxP\nPU1pY3Jvc2VjJTIwTHRkLixMPUJ1ZGFwZXN0LEM9SFU/Y2VydGlmaWNhdGVSZXZv\nY2F0aW9uTGlzdDtiaW5hcnkwDgYDVR0PAQH/BAQDAgEGMIGWBgNVHREEgY4wgYuB\nEGluZm9AZS1zemlnbm8uaHWkdzB1MSMwIQYDVQQDDBpNaWNyb3NlYyBlLVN6aWdu\nw7MgUm9vdCBDQTEWMBQGA1UECwwNZS1TemlnbsOzIEhTWjEWMBQGA1UEChMNTWlj\ncm9zZWMgS2Z0LjERMA8GA1UEBxMIQnVkYXBlc3QxCzAJBgNVBAYTAkhVMIGsBgNV\nHSMEgaQwgaGAFMegSXUWYYTbMUuE0vE3QJDvTtz3oXakdDByMQswCQYDVQQGEwJI\nVTERMA8GA1UEBxMIQnVkYXBlc3QxFjAUBgNVBAoTDU1pY3Jvc2VjIEx0ZC4xFDAS\nBgNVBAsTC2UtU3ppZ25vIENBMSIwIAYDVQQDExlNaWNyb3NlYyBlLVN6aWdubyBS\nb290IENBghEAzLjnv04pGv2i3GalHCwPETAdBgNVHQ4EFgQUx6BJdRZhhNsxS4TS\n8TdAkO9O3PcwDQYJKoZIhvcNAQEFBQADggEBANMTnGZjWS7KXHAM/IO8VbH0jgds\nZifOwTsgqRy7RlRw7lrMoHfqaEQn6/Ip3Xep1fvj1KcExJW4C+FEaGAHQzAxQmHl\n7tnlJNUb3+FKG6qfx1/4ehHqE5MAyopYse7tDk2016g2JnzgOsHVV4Lxdbb9iV/a\n86g4nzUGCM4ilb7N1fy+W955a9x6qWVmvrElWl/tftOsRm1M9DKHtCAE4Gx4sHfR\nhUZLphK3dehKyVZs15KrnfVJONJPU+NVkBHbmJbGSfI+9J8b4PeI3CVimUTYc78/\nMPMMNz7UwiiAc7EBt51alhQBS6kRnSlqLtBdgcDPsiBDxwPgN05dCtxZICU=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIECjCCAvKgAwIBAgIJAMJ+QwRORz8ZMA0GCSqGSIb3DQEBCwUAMIGCMQswCQYD\nVQQGEwJIVTERMA8GA1UEBwwIQnVkYXBlc3QxFjAUBgNVBAoMDU1pY3Jvc2VjIEx0\nZC4xJzAlBgNVBAMMHk1pY3Jvc2VjIGUtU3ppZ25vIFJvb3QgQ0EgMjAwOTEfMB0G\nCSqGSIb3DQEJARYQaW5mb0BlLXN6aWduby5odTAeFw0wOTA2MTYxMTMwMThaFw0y\nOTEyMzAxMTMwMThaMIGCMQswCQYDVQQGEwJIVTERMA8GA1UEBwwIQnVkYXBlc3Qx\nFjAUBgNVBAoMDU1pY3Jvc2VjIEx0ZC4xJzAlBgNVBAMMHk1pY3Jvc2VjIGUtU3pp\nZ25vIFJvb3QgQ0EgMjAwOTEfMB0GCSqGSIb3DQEJARYQaW5mb0BlLXN6aWduby5o\ndTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAOn4j/NjrdqG2KfgQvvP\nkd6mJviZpWNwrZuuyjNAfW2WbqEORO7hE52UQlKavXWFdCyoDh2Tthi3jCyoz/tc\ncbna7P7ofo/kLx2yqHWH2Leh5TvPmUpG0IMZfcChEhyVbUr02MelTTMuhTlAdX4U\nfIASmFDHQWe4oIBhVKZsTh/gnQ4H6cm6M+f+wFUoLAKApxn1ntxVUwOXewdI/5n7\nN4okxFnMUBBjjqqpGrCEGob5X7uxUG6k0QrM1XF+H6cbfPVTbiJfyyvm1HxdrtbC\nxkzlBQHZ7Vf8wSN5/PrIJIOV87VqUQHQd9bpEqH5GoP7ghu5sJf0dgYzQ0mg/wu1\n+rUCAwEAAaOBgDB+MA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgEGMB0G\nA1UdDgQWBBTLD8bfQkPMPcu1SCOhGnqmKrs0aDAfBgNVHSMEGDAWgBTLD8bfQkPM\nPcu1SCOhGnqmKrs0aDAbBgNVHREEFDASgRBpbmZvQGUtc3ppZ25vLmh1MA0GCSqG\nSIb3DQEBCwUAA4IBAQDJ0Q5eLtXMs3w+y/w9/w0olZMEyL/azXm4Q5DwpL7v8u8h\nmLzU1F0G9u5C7DBsoKqpyvGvivo/C3NqPuouQH4frlRheesuCDfXI/OMn74dseGk\nddug4lQUsbocKaQY9hK6ohQU4zE1yED/t+AFdlfBHFny+L/k7SViXITwfn4fs775\ntyERzAMBVnCnEJIeGzSBHq2cGsMEPO0CYdYeBvNfOofyK/FFh+U9rNHHV4S9a67c\n2Pm2G2JwCz02yULyMtd6YebS2z3PyKnJm9zbWETXbzivf3jTo60adbocwTZ8jx5t\nHMN1Rq41Bab2XD0h7lbwyYIiLXpUq3DDfSJlgnCW\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIEFTCCAv2gAwIBAgIGSUEs5AAQMA0GCSqGSIb3DQEBCwUAMIGnMQswCQYDVQQG\nEwJIVTERMA8GA1UEBwwIQnVkYXBlc3QxFTATBgNVBAoMDE5ldExvY2sgS2Z0LjE3\nMDUGA1UECwwuVGFuw7pzw610dsOhbnlraWFkw7NrIChDZXJ0aWZpY2F0aW9uIFNl\ncnZpY2VzKTE1MDMGA1UEAwwsTmV0TG9jayBBcmFueSAoQ2xhc3MgR29sZCkgRsWR\ndGFuw7pzw610dsOhbnkwHhcNMDgxMjExMTUwODIxWhcNMjgxMjA2MTUwODIxWjCB\npzELMAkGA1UEBhMCSFUxETAPBgNVBAcMCEJ1ZGFwZXN0MRUwEwYDVQQKDAxOZXRM\nb2NrIEtmdC4xNzA1BgNVBAsMLlRhbsO6c8OtdHbDoW55a2lhZMOzayAoQ2VydGlm\naWNhdGlvbiBTZXJ2aWNlcykxNTAzBgNVBAMMLE5ldExvY2sgQXJhbnkgKENsYXNz\nIEdvbGQpIEbFkXRhbsO6c8OtdHbDoW55MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8A\nMIIBCgKCAQEAxCRec75LbRTDofTjl5Bu0jBFHjzuZ9lk4BqKf8owyoPjIMHj9DrT\nlF8afFttvzBPhCf2nx9JvMaZCpDyD/V/Q4Q3Y1GLeqVw/HpYzY6b7cNGbIRwXdrz\nAZAj/E4wqX7hJ2Pn7WQ8oLjJM2P+FpD/sLj916jAwJRDC7bVWaaeVtAkH3B5r9s5\nVA1lddkVQZQBr17s9o3x/61k/iCa11zr/qYfCGSji3ZVrR47KGAuhyXoqq8fxmRG\nILdwfzzeSNuWU7c5d+Qa4scWhHaXWy+7GRWF+GmF9ZmnqfI0p6m2pgP8b4Y9VHx2\nBJtr+UBdADTHLpl1neWIA6pN+APSQnbAGwIDAKiLo0UwQzASBgNVHRMBAf8ECDAG\nAQH/AgEEMA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4EFgQUzPpnk/C2uNClwB7zU/2M\nU9+D15YwDQYJKoZIhvcNAQELBQADggEBAKt/7hwWqZw8UQCgwBEIBaeZ5m8BiFRh\nbvG5GK1Krf6BQCOUL/t1fC8oS2IkgYIL9WHxHG64YTjrgfpioTtaYtOUZcTh5m2C\n+C8lcLIhJsFyUR+MLMOEkMNaj7rP9KdlpeuY0fsFskZ1FSNqb4VjMIDw1Z4fKRzC\nbLBQWV2QWzuoDTDPv31/zvGdg73JRm4gpvlhUbohL3u+pRVjodSVh/GeufOJ8z2F\nuLjbvrW5KfnaNwUASZQDhETnv0Mxz3WLJdH0pmT1kvarBes96aULNmLazAZfNou2\nXjG4Kvte9nHfRCaexOYNkbQudZWAUWpLMKawYqGT8ZvYzsRjdT9ZR7E=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIID5jCCAs6gAwIBAgIQV8szb8JcFuZHFhfjkDFo4DANBgkqhkiG9w0BAQUFADBi\nMQswCQYDVQQGEwJVUzEhMB8GA1UEChMYTmV0d29yayBTb2x1dGlvbnMgTC5MLkMu\nMTAwLgYDVQQDEydOZXR3b3JrIFNvbHV0aW9ucyBDZXJ0aWZpY2F0ZSBBdXRob3Jp\ndHkwHhcNMDYxMjAxMDAwMDAwWhcNMjkxMjMxMjM1OTU5WjBiMQswCQYDVQQGEwJV\nUzEhMB8GA1UEChMYTmV0d29yayBTb2x1dGlvbnMgTC5MLkMuMTAwLgYDVQQDEydO\nZXR3b3JrIFNvbHV0aW9ucyBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkwggEiMA0GCSqG\nSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDkvH6SMG3G2I4rC7xGzuAnlt7e+foS0zwz\nc7MEL7xxjOWftiJgPl9dzgn/ggwbmlFQGiaJ3dVhXRncEg8tCqJDXRfQNJIg6nPP\nOCwGJgl6cvf6UDL4wpPTaaIjzkGxzOTVHzbRijr4jGPiFFlp7Q3Tf2vouAPlT2rl\nmGNpSAW+Lv8ztumXWWn4Zxmuk2GWRBXTcrA/vGp97Eh/jcOrqnErU2lBUzS1sLnF\nBgrEsEX1QV1uiUV7PTsmjHTC5dLRfbIR1PtYMiKagMnc/Qzpf14Dl847ABSHJ3A4\nqY5usyd2mFHgBeMhqxrVhSI8KbWaFsWAqPS7azCPL0YCorEMIuDTAgMBAAGjgZcw\ngZQwHQYDVR0OBBYEFCEwyfsA106Y2oeqKtCnLrFAMadMMA4GA1UdDwEB/wQEAwIB\nBjAPBgNVHRMBAf8EBTADAQH/MFIGA1UdHwRLMEkwR6BFoEOGQWh0dHA6Ly9jcmwu\nbmV0c29sc3NsLmNvbS9OZXR3b3JrU29sdXRpb25zQ2VydGlmaWNhdGVBdXRob3Jp\ndHkuY3JsMA0GCSqGSIb3DQEBBQUAA4IBAQC7rkvnt1frf6ott3NHhWrB5KUd5Oc8\n6fRZZXe1eltajSU24HqXLjjAV2CDmAaDn7l2em5Q4LqILPxFzBiwmZVRDuwduIj/\nh1AcgsLj4DKAv6ALR8jDMe+ZZzKATxcheQxpXN5eNK4CtSbqUN9/GGUsyfJj4akH\n/nxxH2szJGoeBfcFaMBqEssuXmHLrijTfsK0ZpEmXzwuJF/LWA/rKOyvEZbz3Htv\nwKeI8lN3s2Berq4o2jUsbzRF0ybh3uxbTydrFny9RAQYgrOJeRcQcT16ohZO9QHN\npGxlaKFJdlxDydi8NmdspZS11My5vWo1ViHe2MPr+8ukYEywVaCge1ey\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIID8TCCAtmgAwIBAgIQQT1yx/RrH4FDffHSKFTfmjANBgkqhkiG9w0BAQUFADCB\nijELMAkGA1UEBhMCQ0gxEDAOBgNVBAoTB1dJU2VLZXkxGzAZBgNVBAsTEkNvcHly\naWdodCAoYykgMjAwNTEiMCAGA1UECxMZT0lTVEUgRm91bmRhdGlvbiBFbmRvcnNl\nZDEoMCYGA1UEAxMfT0lTVEUgV0lTZUtleSBHbG9iYWwgUm9vdCBHQSBDQTAeFw0w\nNTEyMTExNjAzNDRaFw0zNzEyMTExNjA5NTFaMIGKMQswCQYDVQQGEwJDSDEQMA4G\nA1UEChMHV0lTZUtleTEbMBkGA1UECxMSQ29weXJpZ2h0IChjKSAyMDA1MSIwIAYD\nVQQLExlPSVNURSBGb3VuZGF0aW9uIEVuZG9yc2VkMSgwJgYDVQQDEx9PSVNURSBX\nSVNlS2V5IEdsb2JhbCBSb290IEdBIENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8A\nMIIBCgKCAQEAy0+zAJs9Nt350UlqaxBJH+zYK7LG+DKBKUOVTJoZIyEVRd7jyBxR\nVVuuk+g3/ytr6dTqvirdqFEr12bDYVxgAsj1znJ7O7jyTmUIms2kahnBAbtzptf2\nw93NvKSLtZlhuAGio9RN1AU9ka34tAhxZK9w8RxrfvbDd50kc3vkDIzh2TbhmYsF\nmQvtRTEJysIA2/dyoJaqlYfQjse2YXMNdmaM3Bu0Y6Kff5MTMPGhJ9vZ/yxViJGg\n4E8HsChWjBgbl0SOid3gF27nKu+POQoxhILYQBRJLnpB5Kf+42TMwVlxSywhp1t9\n4B3RLoGbw9ho972WG6xwsRYUC9tguSYBBQIDAQABo1EwTzALBgNVHQ8EBAMCAYYw\nDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUswN+rja8sHnR3JQmthG+IbJphpQw\nEAYJKwYBBAGCNxUBBAMCAQAwDQYJKoZIhvcNAQEFBQADggEBAEuh/wuHbrP5wUOx\nSPMowB0uyQlB+pQAHKSkq0lPjz0e701vvbyk9vImMMkQyh2I+3QZH4VFvbBsUfk2\nftv1TDI6QU9bR8/oCy22xBmddMVHxjtqD6wU2zz0c5ypBd8A3HR4+vg1YFkCExh8\nvPtNsCBtQ7tgMHpnM1zFmdH4LTlSc/uMqpclXHLZCB6rTjzjgTGfA6b7wP4piFXa\nhNVQA7bihKOmNqoROgHhGEvWRGizPflTdISzRpFGlgC3gCy24eMQ4tui5yiPAZZi\nFj4A4xylNoEYokxSdsARo27mHbrjWr42U8U+dY+GaSlYU7Wcu2+fXMUY7N0v4ZjJ\n/L7fCg0=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIDtTCCAp2gAwIBAgIQdrEgUnTwhYdGs/gjGvbCwDANBgkqhkiG9w0BAQsFADBt\nMQswCQYDVQQGEwJDSDEQMA4GA1UEChMHV0lTZUtleTEiMCAGA1UECxMZT0lTVEUg\nRm91bmRhdGlvbiBFbmRvcnNlZDEoMCYGA1UEAxMfT0lTVEUgV0lTZUtleSBHbG9i\nYWwgUm9vdCBHQiBDQTAeFw0xNDEyMDExNTAwMzJaFw0zOTEyMDExNTEwMzFaMG0x\nCzAJBgNVBAYTAkNIMRAwDgYDVQQKEwdXSVNlS2V5MSIwIAYDVQQLExlPSVNURSBG\nb3VuZGF0aW9uIEVuZG9yc2VkMSgwJgYDVQQDEx9PSVNURSBXSVNlS2V5IEdsb2Jh\nbCBSb290IEdCIENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA2Be3\nHEokKtaXscriHvt9OO+Y9bI5mE4nuBFde9IllIiCFSZqGzG7qFshISvYD06fWvGx\nWuR51jIjK+FTzJlFXHtPrby/h0oLS5daqPZI7H17Dc0hBt+eFf1Biki3IPShehtX\n1F1Q/7pn2COZH8g/497/b1t3sWtuuMlk9+HKQUYOKXHQuSP8yYFfTvdv37+ErXNk\nu7dCjmn21HYdfp2nuFeKUWdy19SouJVUQHMD9ur06/4oQnc/nSMbsrY9gBQHTC5P\n99UKFg29ZkM3fiNDecNAhvVMKdqOmq0NpQSHiB6F4+lT1ZvIiwNjeOvgGUpuuy9r\nM2RYk61pv48b74JIxwIDAQABo1EwTzALBgNVHQ8EBAMCAYYwDwYDVR0TAQH/BAUw\nAwEB/zAdBgNVHQ4EFgQUNQ/INmNe4qPs+TtmFc5RUuORmj0wEAYJKwYBBAGCNxUB\nBAMCAQAwDQYJKoZIhvcNAQELBQADggEBAEBM+4eymYGQfp3FsLAmzYh7KzKNbrgh\ncViXfa43FK8+5/ea4n32cZiZBKpDdHij40lhPnOMTZTg+XHEthYOU3gf1qKHLwI5\ngSk8rxWYITD+KJAAjNHhy/peyP34EEY7onhCkRd0VQreUGdNZtGn//3ZwLWoo4rO\nZvUPQ82nK1d7Y0Zqqi5S2PTt4W2tKZB4SLrhI6qjiey1q5bAtEuiHZeeevJuQHHf\naPFlTc58Bd9TZaml8LGXBHAVRgOY1NK/VLSgWH1Sb9pWJmLU2NuJMW8c8CLC02Ic\nNc1MaRVUGpCY3useX8p3x8uOPUNpnJpY0CQ73xtAln41rYHHTnG6iBM=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIFbzCCA1egAwIBAgISESCzkFU5fX82bWTCp59rY45nMA0GCSqGSIb3DQEBCwUA\nMEAxCzAJBgNVBAYTAkZSMRIwEAYDVQQKDAlPcGVuVHJ1c3QxHTAbBgNVBAMMFE9w\nZW5UcnVzdCBSb290IENBIEcxMB4XDTE0MDUyNjA4NDU1MFoXDTM4MDExNTAwMDAw\nMFowQDELMAkGA1UEBhMCRlIxEjAQBgNVBAoMCU9wZW5UcnVzdDEdMBsGA1UEAwwU\nT3BlblRydXN0IFJvb3QgQ0EgRzEwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIK\nAoICAQD4eUbalsUwXopxAy1wpLuwxQjczeY1wICkES3d5oeuXT2R0odsN7faYp6b\nwiTXj/HbpqbfRm9RpnHLPhsxZ2L3EVs0J9V5ToybWL0iEA1cJwzdMOWo010hOHQX\n/uMftk87ay3bfWAfjH1MBcLrARYVmBSO0ZB3Ij/swjm4eTrwSSTilZHcYTSSjFR0\n77F9jAHiOH3BX2pfJLKOYheteSCtqx234LSWSE9mQxAGFiQD4eCcjsZGT44ameGP\nuY4zbGneWK2gDqdkVBFpRGZPTBKnjix9xNRbxQA0MMHZmf4yzgeEtE7NCv82TWLx\np2NX5Ntqp66/K7nJ5rInieV+mhxNaMbBGN4zK1FGSxyO9z0M+Yo0FMT7MzUj8czx\nKselu7Cizv5Ta01BG2Yospb6p64KTrk5M0ScdMGTHPjgniQlQ/GbI4Kq3ywgsNw2\nTgOzfALU5nsaqocTvz6hdLubDuHAk5/XpGbKuxs74zD0M1mKB3IDVedzagMxbm+W\nG+Oin6+Sx+31QrclTDsTBM8clq8cIqPQqwWyTBIjUtz9GVsnnB47ev1CI9sjgBPw\nvFEVVJSmdz7QdFG9URQIOTfLHzSpMJ1ShC5VkLG631UAC9hWLbFJSXKAqWLXwPYY\nEQRVzXR7z2FwefR7LFxckvzluFqrTJOVoSfupb7PcSNCupt2LQIDAQABo2MwYTAO\nBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUl0YhVyE1\n2jZVx/PxN3DlCPaTKbYwHwYDVR0jBBgwFoAUl0YhVyE12jZVx/PxN3DlCPaTKbYw\nDQYJKoZIhvcNAQELBQADggIBAB3dAmB84DWn5ph76kTOZ0BP8pNuZtQ5iSas000E\nPLuHIT839HEl2ku6q5aCgZG27dmxpGWX4m9kWaSW7mDKHyP7Rbr/jyTwyqkxf3kf\ngLMtMrpkZ2CvuVnN35pJ06iCsfmYlIrM4LvgBBuZYLFGZdwIorJGnkSI6pN+VxbS\nFXJfLkur1J1juONI5f6ELlgKn0Md/rcYkoZDSw6cMoYsYPXpSOqV7XAp8dUv/TW0\nV8/bhUiZucJvbI/NeJWsZCj9VrDDb8O+WVLhX4SPgPL0DTatdrOjteFkdjpY3H1P\nXlZs5VVZV6Xf8YpmMIzUUmI4d7S+KNfKNsSbBfD4Fdvb8e80nR14SohWZ25g/4/I\ni+GOvUKpMwpZQhISKvqxnUOOBZuZ2mKtVzazHbYNeS2WuOvyDEsMpZTGMKcmGS3t\nTAZQMPH9WD25SxdfGbRqhFS0OE85og2WaMMolP3tLR9Ka0OWLpABEPs4poEL0L91\n09S5zvE/bw4cHjdx5RiHdRk/ULlepEU0rbDK5uUTdg8xFKmOLZTW1YVNcxVPS/Ky\nPu1svf0OnWZzsD2097+o4BGkxK51CUpjAEggpsadCwmKtODmzj7HPiY46SvepghJ\nAwSQiumPv+i2tCqjI40cHLI5kqiPAlxAOXXUc0ECd97N4EOH1uS6SsNsEn/+KuYj\n1oxx\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIFbzCCA1egAwIBAgISESChaRu/vbm9UpaPI+hIvyYRMA0GCSqGSIb3DQEBDQUA\nMEAxCzAJBgNVBAYTAkZSMRIwEAYDVQQKDAlPcGVuVHJ1c3QxHTAbBgNVBAMMFE9w\nZW5UcnVzdCBSb290IENBIEcyMB4XDTE0MDUyNjAwMDAwMFoXDTM4MDExNTAwMDAw\nMFowQDELMAkGA1UEBhMCRlIxEjAQBgNVBAoMCU9wZW5UcnVzdDEdMBsGA1UEAwwU\nT3BlblRydXN0IFJvb3QgQ0EgRzIwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIK\nAoICAQDMtlelM5QQgTJT32F+D3Y5z1zCU3UdSXqWON2ic2rxb95eolq5cSG+Ntmh\n/LzubKh8NBpxGuga2F8ORAbtp+Dz0mEL4DKiltE48MLaARf85KxP6O6JHnSrT78e\nCbY2albz4e6WiWYkBuTNQjpK3eCasMSCRbP+yatcfD7J6xcvDH1urqWPyKwlCm/6\n1UWY0jUJ9gNDlP7ZvyCVeYCYitmJNbtRG6Q3ffyZO6v/v6wNj0OxmXsWEH4db0fE\nFY8ElggGQgT4hNYdvJGmQr5J1WqIP7wtUdGejeBSzFfdNTVY27SPJIjki9/ca1TS\ngSuyzpJLHB9G+h3Ykst2Z7UJmQnlrBcUVXDGPKBWCgOz3GIZ38i1MH/1PCZ1Eb3X\nG7OHngevZXHloM8apwkQHZOJZlvoPGIytbU6bumFAYueQ4xncyhZW+vj3CzMpSZy\nYhK05pyDRPZRpOLAeiRXyg6lPzq1O4vldu5w5pLeFlwoW5cZJ5L+epJUzpM5ChaH\nvGOz9bGTXOBut9Dq+WIyiET7vycotjCVXRIouZW+j1MY5aIYFuJWpLIsEPUdN6b4\nt/bQWVyJ98LVtZR00dX+G7bw5tYee9I8y6jj9RjzIR9u701oBnstXW5DiabA+aC/\ngh7PU3+06yzbXfZqfUAkBXKJOAGTy3HCOV0GEfZvePg3DTmEJwIDAQABo2MwYTAO\nBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUajn6QiL3\n5okATV59M4PLuG53hq8wHwYDVR0jBBgwFoAUajn6QiL35okATV59M4PLuG53hq8w\nDQYJKoZIhvcNAQENBQADggIBAJjLq0A85TMCl38th6aP1F5Kr7ge57tx+4BkJamz\nGj5oXScmp7oq4fBXgwpkTx4idBvpkF/wrM//T2h6OKQQbA2xx6R3gBi2oihEdqc0\nnXGEL8pZ0keImUEiyTCYYW49qKgFbdEfwFFEVn8nNQLdXpgKQuswv42hm1GqO+qT\nRmTFAHneIWv2V6CG1wZy7HBGS4tz3aAhdT7cHcCP009zHIXZ/n9iyJVvttN7jLpT\nwm+bREx50B1ws9efAvSyB7DH5fitIw6mVskpEndI2S9G/Tvw/HRwkqWOOAgfZDC2\nt0v7NqwQjqBSM2OdAzVWxWm9xiNaJ5T2pBL4LTM8oValX9YZ6e18CL13zSdkzJTa\nTkZQh+D5wVOAHrut+0dSixv9ovneDiK3PTNZbNTe9ZUGMg1RGUFcPk8G97krgCf2\no6p6fAbhQ8MTOWIaNr3gKC6UAuQpLmBVrkA9sHSSXvAgZJY/X0VdiLWK2gKgW0VU\n3jg9CcCoSmVGFvyqv1ROTVu+OEO3KMqLM6oaJbolXCkvW0pujOotnCr2BXbgd5eA\niN1nE28daCSLT7d0geX0YJ96Vdc+N9oWaz53rK4YcJUIeSkDiv7BO7M/Gg+kO14f\nWKGVyasvc0rQLW6aWQ9VGHgtPFGml4vmu7JwqkwR3v98KzfUetF3NI/n+UL3PIEM\nS1IK\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIICITCCAaagAwIBAgISESDm+Ez8JLC+BUCs2oMbNGA/MAoGCCqGSM49BAMDMEAx\nCzAJBgNVBAYTAkZSMRIwEAYDVQQKDAlPcGVuVHJ1c3QxHTAbBgNVBAMMFE9wZW5U\ncnVzdCBSb290IENBIEczMB4XDTE0MDUyNjAwMDAwMFoXDTM4MDExNTAwMDAwMFow\nQDELMAkGA1UEBhMCRlIxEjAQBgNVBAoMCU9wZW5UcnVzdDEdMBsGA1UEAwwUT3Bl\nblRydXN0IFJvb3QgQ0EgRzMwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAARK7liuTcpm\n3gY6oxH84Bjwbhy6LTAMidnW7ptzg6kjFYwvWYpa3RTqnVkrQ7cG7DK2uu5Bta1d\noYXM6h0UZqNnfkbilPPntlahFVmhTzeXuSIevRHr9LIfXsMUmuXZl5mjYzBhMA4G\nA1UdDwEB/wQEAwIBBjAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBRHd8MUi2I5\nDMlv4VBN0BBY3JWIbTAfBgNVHSMEGDAWgBRHd8MUi2I5DMlv4VBN0BBY3JWIbTAK\nBggqhkjOPQQDAwNpADBmAjEAj6jcnboMBBf6Fek9LykBl7+BFjNAk2z8+e2AcG+q\nj9uEwov1NcoG3GRvaBbhj5G5AjEA2Euly8LQCGzpGPta3U1fJAuwACEl74+nBCZx\n4nxp5V2a+EEfOzmTk51V6s2N8fvB\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIJhjCCB26gAwIBAgIBCzANBgkqhkiG9w0BAQsFADCCAR4xPjA8BgNVBAMTNUF1\ndG9yaWRhZCBkZSBDZXJ0aWZpY2FjaW9uIFJhaXogZGVsIEVzdGFkbyBWZW5lem9s\nYW5vMQswCQYDVQQGEwJWRTEQMA4GA1UEBxMHQ2FyYWNhczEZMBcGA1UECBMQRGlz\ndHJpdG8gQ2FwaXRhbDE2MDQGA1UEChMtU2lzdGVtYSBOYWNpb25hbCBkZSBDZXJ0\naWZpY2FjaW9uIEVsZWN0cm9uaWNhMUMwQQYDVQQLEzpTdXBlcmludGVuZGVuY2lh\nIGRlIFNlcnZpY2lvcyBkZSBDZXJ0aWZpY2FjaW9uIEVsZWN0cm9uaWNhMSUwIwYJ\nKoZIhvcNAQkBFhZhY3JhaXpAc3VzY2VydGUuZ29iLnZlMB4XDTEwMTIyODE2NTEw\nMFoXDTIwMTIyNTIzNTk1OVowgdExJjAkBgkqhkiG9w0BCQEWF2NvbnRhY3RvQHBy\nb2NlcnQubmV0LnZlMQ8wDQYDVQQHEwZDaGFjYW8xEDAOBgNVBAgTB01pcmFuZGEx\nKjAoBgNVBAsTIVByb3ZlZWRvciBkZSBDZXJ0aWZpY2Fkb3MgUFJPQ0VSVDE2MDQG\nA1UEChMtU2lzdGVtYSBOYWNpb25hbCBkZSBDZXJ0aWZpY2FjaW9uIEVsZWN0cm9u\naWNhMQswCQYDVQQGEwJWRTETMBEGA1UEAxMKUFNDUHJvY2VydDCCAiIwDQYJKoZI\nhvcNAQEBBQADggIPADCCAgoCggIBANW39KOUM6FGqVVhSQ2oh3NekS1wwQYalNo9\n7BVCwfWMrmoX8Yqt/ICV6oNEolt6Vc5Pp6XVurgfoCfAUFM+jbnADrgV3NZs+J74\nBCXfgI8Qhd19L3uA3VcAZCP4bsm+lU/hdezgfl6VzbHvvnpC2Mks0+saGiKLt38G\nieU89RLAu9MLmV+QfI4tL3czkkohRqipCKzx9hEC2ZUWno0vluYC3XXCFCpa1sl9\nJcLB/KpnheLsvtF8PPqv1W7/U0HU9TI4seJfxPmOEO8GqQKJ/+MMbpfg353bIdD0\nPghpbNjU5Db4g7ayNo+c7zo3Fn2/omnXO1ty0K+qP1xmk6wKImG20qCZyFSTXai2\n0b1dCl53lKItwIKOvMoDKjSuc/HUtQy9vmebVOvh+qBa7Dh+PsHMosdEMXXqP+UH\n0quhJZb25uSgXTcYOWEAM11G1ADEtMo88aKjPvM6/2kwLkDd9p+cJsmWN63nOaK/\n6mnbVSKVUyqUtd+tFjiBdWbjxywbk5yqjKPK2Ww8F22c3HxT4CAnQzb5EuE8XL1m\nv6JpIzi4mWCZDlZTOpx+FIywBm/xhnaQr/2v/pDGj59/i5IjnOcVdo/Vi5QTcmn7\nK2FjiO/mpF7moxdqWEfLcU8UC17IAggmosvpr2uKGcfLFFb14dq12fy/czja+eev\nbqQ34gcnAgMBAAGjggMXMIIDEzASBgNVHRMBAf8ECDAGAQH/AgEBMDcGA1UdEgQw\nMC6CD3N1c2NlcnRlLmdvYi52ZaAbBgVghl4CAqASDBBSSUYtRy0yMDAwNDAzNi0w\nMB0GA1UdDgQWBBRBDxk4qpl/Qguk1yeYVKIXTC1RVDCCAVAGA1UdIwSCAUcwggFD\ngBStuyIdxuDSAaj9dlBSk+2YwU2u06GCASakggEiMIIBHjE+MDwGA1UEAxM1QXV0\nb3JpZGFkIGRlIENlcnRpZmljYWNpb24gUmFpeiBkZWwgRXN0YWRvIFZlbmV6b2xh\nbm8xCzAJBgNVBAYTAlZFMRAwDgYDVQQHEwdDYXJhY2FzMRkwFwYDVQQIExBEaXN0\ncml0byBDYXBpdGFsMTYwNAYDVQQKEy1TaXN0ZW1hIE5hY2lvbmFsIGRlIENlcnRp\nZmljYWNpb24gRWxlY3Ryb25pY2ExQzBBBgNVBAsTOlN1cGVyaW50ZW5kZW5jaWEg\nZGUgU2VydmljaW9zIGRlIENlcnRpZmljYWNpb24gRWxlY3Ryb25pY2ExJTAjBgkq\nhkiG9w0BCQEWFmFjcmFpekBzdXNjZXJ0ZS5nb2IudmWCAQowDgYDVR0PAQH/BAQD\nAgEGME0GA1UdEQRGMESCDnByb2NlcnQubmV0LnZloBUGBWCGXgIBoAwMClBTQy0w\nMDAwMDKgGwYFYIZeAgKgEgwQUklGLUotMzE2MzUzNzMtNzB2BgNVHR8EbzBtMEag\nRKBChkBodHRwOi8vd3d3LnN1c2NlcnRlLmdvYi52ZS9sY3IvQ0VSVElGSUNBRE8t\nUkFJWi1TSEEzODRDUkxERVIuY3JsMCOgIaAfhh1sZGFwOi8vYWNyYWl6LnN1c2Nl\ncnRlLmdvYi52ZTA3BggrBgEFBQcBAQQrMCkwJwYIKwYBBQUHMAGGG2h0dHA6Ly9v\nY3NwLnN1c2NlcnRlLmdvYi52ZTBBBgNVHSAEOjA4MDYGBmCGXgMBAjAsMCoGCCsG\nAQUFBwIBFh5odHRwOi8vd3d3LnN1c2NlcnRlLmdvYi52ZS9kcGMwDQYJKoZIhvcN\nAQELBQADggIBACtZ6yKZu4SqT96QxtGGcSOeSwORR3C7wJJg7ODU523G0+1ng3dS\n1fLld6c2suNUvtm7CpsR72H0xpkzmfWvADmNg7+mvTV+LFwxNG9s2/NkAZiqlCxB\n3RWGymspThbASfzXg0gTB1GEMVKIu4YXx2sviiCtxQuPcD4quxtxj7mkoP3Yldmv\nWb8lK5jpY5MvYB7Eqvh39YtsL+1+LrVPQA3uvFd359m21D+VJzog1eWuq2w1n8Gh\nHVnchIHuTQfiSLaeS5UtQbHh6N5+LwUeaO6/u5BlOsju6rEYNxxik6SgMexxbJHm\npHmJWhSnFFAFTKQAVzAswbVhltw+HoSvOULP5dAssSS830DD7X9jSr3hTxJkhpXz\nsOfIt+FTvZLm8wyWuevo5pLtp4EJFAv8lXrPj9Y0TzYS3F7RNHXGRoAvlQSMx4bE\nqCaJqD8Zm4G7UaRKhqsLEQ+xrmNTbSjq3TNWOByyrYDT13K9mmyZY+gAu0F2Bbdb\nmRiKw7gSXFbPVgx96OLP7bx0R/vu0xdOIk9W/1DzLuY5poLWccret9W6aAjtmcz9\nopLLabid+Qqkpj5PkygqYWwHJgD/ll9ohri4zspV4KuxPX+Y1zMOWj3YeMLEYC/H\nYvBhkdI4sPaeVdtAgAUSM84dkpvRabP/v/GSCmE1P93+hvS84Bpxs2Km\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIF0DCCBLigAwIBAgIEOrZQizANBgkqhkiG9w0BAQUFADB/MQswCQYDVQQGEwJC\nTTEZMBcGA1UEChMQUXVvVmFkaXMgTGltaXRlZDElMCMGA1UECxMcUm9vdCBDZXJ0\naWZpY2F0aW9uIEF1dGhvcml0eTEuMCwGA1UEAxMlUXVvVmFkaXMgUm9vdCBDZXJ0\naWZpY2F0aW9uIEF1dGhvcml0eTAeFw0wMTAzMTkxODMzMzNaFw0yMTAzMTcxODMz\nMzNaMH8xCzAJBgNVBAYTAkJNMRkwFwYDVQQKExBRdW9WYWRpcyBMaW1pdGVkMSUw\nIwYDVQQLExxSb290IENlcnRpZmljYXRpb24gQXV0aG9yaXR5MS4wLAYDVQQDEyVR\ndW9WYWRpcyBSb290IENlcnRpZmljYXRpb24gQXV0aG9yaXR5MIIBIjANBgkqhkiG\n9w0BAQEFAAOCAQ8AMIIBCgKCAQEAv2G1lVO6V/z68mcLOhrfEYBklbTRvM16z/Yp\nli4kVEAkOPcahdxYTMukJ0KX0J+DisPkBgNbAKVRHnAEdOLB1Dqr1607BxgFjv2D\nrOpm2RgbaIr1VxqYuvXtdj182d6UajtLF8HVj71lODqV0D1VNk7feVcxKh7YWWVJ\nWCCYfqtffp/p1k3sg3Spx2zY7ilKhSoGFPlU5tPaZQeLYzcS19Dsw3sgQUSj7cug\nF+FxZc4dZjH3dgEZyH0DWLaVSR2mEiboxgx24ONmy+pdpibu5cxfvWenAScOospU\nxbF6lR1xHkopigPcakXBpBlebzbNw6Kwt/5cOOJSvPhEQ+aQuwIDAQABo4ICUjCC\nAk4wPQYIKwYBBQUHAQEEMTAvMC0GCCsGAQUFBzABhiFodHRwczovL29jc3AucXVv\ndmFkaXNvZmZzaG9yZS5jb20wDwYDVR0TAQH/BAUwAwEB/zCCARoGA1UdIASCAREw\nggENMIIBCQYJKwYBBAG+WAABMIH7MIHUBggrBgEFBQcCAjCBxxqBxFJlbGlhbmNl\nIG9uIHRoZSBRdW9WYWRpcyBSb290IENlcnRpZmljYXRlIGJ5IGFueSBwYXJ0eSBh\nc3N1bWVzIGFjY2VwdGFuY2Ugb2YgdGhlIHRoZW4gYXBwbGljYWJsZSBzdGFuZGFy\nZCB0ZXJtcyBhbmQgY29uZGl0aW9ucyBvZiB1c2UsIGNlcnRpZmljYXRpb24gcHJh\nY3RpY2VzLCBhbmQgdGhlIFF1b1ZhZGlzIENlcnRpZmljYXRlIFBvbGljeS4wIgYI\nKwYBBQUHAgEWFmh0dHA6Ly93d3cucXVvdmFkaXMuYm0wHQYDVR0OBBYEFItLbe3T\nKbkGGew5Oanwl4Rqy+/fMIGuBgNVHSMEgaYwgaOAFItLbe3TKbkGGew5Oanwl4Rq\ny+/foYGEpIGBMH8xCzAJBgNVBAYTAkJNMRkwFwYDVQQKExBRdW9WYWRpcyBMaW1p\ndGVkMSUwIwYDVQQLExxSb290IENlcnRpZmljYXRpb24gQXV0aG9yaXR5MS4wLAYD\nVQQDEyVRdW9WYWRpcyBSb290IENlcnRpZmljYXRpb24gQXV0aG9yaXR5ggQ6tlCL\nMA4GA1UdDwEB/wQEAwIBBjANBgkqhkiG9w0BAQUFAAOCAQEAitQUtf70mpKnGdSk\nfnIYj9lofFIk3WdvOXrEql494liwTXCYhGHoG+NpGA7O+0dQoE7/8CQfvbLO9Sf8\n7C9TqnN7Az10buYWnuulLsS/VidQK2K6vkscPFVcQR0kvoIgR13VRH56FmjffU1R\ncHhXHTMe/QKZnAzNCgVPx7uOpHX6Sm2xgI4JVrmcGmD+XcHXetwReNDWXcG31a0y\nmQM6isxUJTkxgXsTIlG6Rmyhu576BGxJJnSP0nPrzDCi5upZIof4l/UO/erMkqQW\nxFIY6iHOsfHmhIHluqmGKPJDWl0Snawe2ajlCmqnf6CHKc/yiU3U7MXi5nrQNiOK\nSnQ2+Q==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIFYDCCA0igAwIBAgIUeFhfLq0sGUvjNwc1NBMotZbUZZMwDQYJKoZIhvcNAQEL\nBQAwSDELMAkGA1UEBhMCQk0xGTAXBgNVBAoTEFF1b1ZhZGlzIExpbWl0ZWQxHjAc\nBgNVBAMTFVF1b1ZhZGlzIFJvb3QgQ0EgMSBHMzAeFw0xMjAxMTIxNzI3NDRaFw00\nMjAxMTIxNzI3NDRaMEgxCzAJBgNVBAYTAkJNMRkwFwYDVQQKExBRdW9WYWRpcyBM\naW1pdGVkMR4wHAYDVQQDExVRdW9WYWRpcyBSb290IENBIDEgRzMwggIiMA0GCSqG\nSIb3DQEBAQUAA4ICDwAwggIKAoICAQCgvlAQjunybEC0BJyFuTHK3C3kEakEPBtV\nwedYMB0ktMPvhd6MLOHBPd+C5k+tR4ds7FtJwUrVu4/sh6x/gpqG7D0DmVIB0jWe\nrNrwU8lmPNSsAgHaJNM7qAJGr6Qc4/hzWHa39g6QDbXwz8z6+cZM5cOGMAqNF341\n68Xfuw6cwI2H44g4hWf6Pser4BOcBRiYz5P1sZK0/CPTz9XEJ0ngnjybCKOLXSoh\n4Pw5qlPafX7PGglTvF0FBM+hSo+LdoINofjSxxR3W5A2B4GbPgb6Ul5jxaYA/qXp\nUhtStZI5cgMJYr2wYBZupt0lwgNm3fME0UDiTouG9G/lg6AnhF4EwfWQvTA9xO+o\nabw4m6SkltFi2mnAAZauy8RRNOoMqv8hjlmPSlzkYZqn0ukqeI1RPToV7qJZjqlc\n3sX5kCLliEVx3ZGZbHqfPT2YfF72vhZooF6uCyP8Wg+qInYtyaEQHeTTRCOQiJ/G\nKubX9ZqzWB4vMIkIG1SitZgj7Ah3HJVdYdHLiZxfokqRmu8hqkkWCKi9YSgxyXSt\nhfbZxbGL0eUQMk1fiyA6PEkfM4VZDdvLCXVDaXP7a3F98N/ETH3Goy7IlXnLc6KO\nTk0k+17kBL5yG6YnLUlamXrXXAkgt3+UuU/xDRxeiEIbEbfnkduebPRq34wGmAOt\nzCjvpUfzUwIDAQABo0IwQDAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIB\nBjAdBgNVHQ4EFgQUo5fW816iEOGrRZ88F2Q87gFwnMwwDQYJKoZIhvcNAQELBQAD\nggIBABj6W3X8PnrHX3fHyt/PX8MSxEBd1DKquGrX1RUVRpgjpeaQWxiZTOOtQqOC\nMTaIzen7xASWSIsBx40Bz1szBpZGZnQdT+3Btrm0DWHMY37XLneMlhwqI2hrhVd2\ncDMT/uFPpiN3GPoajOi9ZcnPP/TJF9zrx7zABC4tRi9pZsMbj/7sPtPKlL92CiUN\nqXsCHKnQO18LwIE6PWThv6ctTr1NxNgpxiIY0MWscgKCP6o6ojoilzHdCGPDdRS5\nYCgtW2jgFqlmgiNR9etT2DGbe+m3nUvriBbP+V04ikkwj+3x6xn0dxoxGE1nVGwv\nb2X52z3sIexe9PSLymBlVNFxZPT5pqOBMzYzcfCkeF9OrYMh3jRJjehZrJ3ydlo2\n8hP0r+AJx2EqbPfgna67hkooby7utHnNkDPDs3b69fBsnQGQ+p6Q9pxyz0fawx/k\nNSBT8lTR32GDpgLiJTjehTItXnOQUl1CxM49S+H5GYQd1aJQzEH7QRTDvdbJWqNj\nZgKAvQU6O0ec7AAmTPWIUb+oI38YB7AL7YsmoWTTYUrrXJ/es69nA7Mf3W1daWhp\nq1467HxpvMc7hU6eFbm0FU/DlXpY18ls6Wy58yljXrQs8C097Vpl4KlbQMJImYFt\nnh8GKjwStIsPm6Ik8KaN1nrgS7ZklmOVhMJKzRwuJIczYOXD\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIFtzCCA5+gAwIBAgICBQkwDQYJKoZIhvcNAQEFBQAwRTELMAkGA1UEBhMCQk0x\nGTAXBgNVBAoTEFF1b1ZhZGlzIExpbWl0ZWQxGzAZBgNVBAMTElF1b1ZhZGlzIFJv\nb3QgQ0EgMjAeFw0wNjExMjQxODI3MDBaFw0zMTExMjQxODIzMzNaMEUxCzAJBgNV\nBAYTAkJNMRkwFwYDVQQKExBRdW9WYWRpcyBMaW1pdGVkMRswGQYDVQQDExJRdW9W\nYWRpcyBSb290IENBIDIwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCa\nGMpLlA0ALa8DKYrwD4HIrkwZhR0In6spRIXzL4GtMh6QRr+jhiYaHv5+HBg6XJxg\nFyo6dIMzMH1hVBHL7avg5tKifvVrbxi3Cgst/ek+7wrGsxDp3MJGF/hd/aTa/55J\nWpzmM+Yklvc/ulsrHHo1wtZn/qtmUIttKGAr79dgw8eTvI02kfN/+NsRE8Scd3bB\nrrcCaoF6qUWD4gXmuVbBlDePSHFjIuwXZQeVikvfj8ZaCuWw419eaxGrDPmF60Tp\n+ARz8un+XJiM9XOva7R+zdRcAitMOeGylZUtQofX1bOQQ7dsE/He3fbE+Ik/0XX1\nksOR1YqI0JDs3G3eicJlcZaLDQP9nL9bFqyS2+r+eXyt66/3FsvbzSUr5R/7mp/i\nUcw6UwxI5g69ybR2BlLmEROFcmMDBOAENisgGQLodKcftslWZvB1JdxnwQ5hYIiz\nPtGo/KPaHbDRsSNU30R2be1B2MGyIrZTHN81Hdyhdyox5C315eXbyOD/5YDXC2Og\n/zOhD7osFRXql7PSorW+8oyWHhqPHWykYTe5hnMz15eWniN9gqRMgeKh0bpnX5UH\noycR7hYQe7xFSkyyBNKr79X9DFHOUGoIMfmR2gyPZFwDwzqLID9ujWc9Otb+fVuI\nyV77zGHcizN300QyNQliBJIWENieJ0f7OyHj+OsdWwIDAQABo4GwMIGtMA8GA1Ud\nEwEB/wQFMAMBAf8wCwYDVR0PBAQDAgEGMB0GA1UdDgQWBBQahGK8SEwzJQTU7tD2\nA8QZRtGUazBuBgNVHSMEZzBlgBQahGK8SEwzJQTU7tD2A8QZRtGUa6FJpEcwRTEL\nMAkGA1UEBhMCQk0xGTAXBgNVBAoTEFF1b1ZhZGlzIExpbWl0ZWQxGzAZBgNVBAMT\nElF1b1ZhZGlzIFJvb3QgQ0EgMoICBQkwDQYJKoZIhvcNAQEFBQADggIBAD4KFk2f\nBluornFdLwUvZ+YTRYPENvbzwCYMDbVHZF34tHLJRqUDGCdViXh9duqWNIAXINzn\ng/iN/Ae42l9NLmeyhP3ZRPx3UIHmfLTJDQtyU/h2BwdBR5YM++CCJpNVjP4iH2Bl\nfF/nJrP3MpCYUNQ3cVX2kiF495V5+vgtJodmVjB3pjd4M1IQWK4/YY7yarHvGH5K\nWWPKjaJW1acvvFYfzznB4vsKqBUsfU16Y8Zsl0Q80m/DShcK+JDSV6IZUaUtl0Ha\nB0+pUNqQjZRG4T7wlP0QADj1O+hA4bRuVhogzG9Yje0uRY/W6ZM/57Es3zrWIozc\nhLsib9D45MY56QSIPMO661V6bYCZJPVsAfv4l7CUW+v90m/xd2gNNWQjrLhVoQPR\nTUIZ3Ph1WVaj+ahJefivDrkRoHy3au000LYmYjgahwz46P0u05B/B5EqHdZ+XIWD\nmbA4CD/pXvk1B+TJYm5Xf6dQlfe6yJvmjqIBxdZmv3lh8zwc4bmCXF2gw+nYSL0Z\nohEUGW6yhhtoPkg3Goi3XZZenMfvJ2II4pEZXNLxId26F0KCl3GBUzGpn/Z9Yr9y\n4aOTHcyKJloJONDO1w2AFrR4pTqHTI2KpdVGl/IsELm8VCLAAVBpQ570su9t+Oza\n8eOx79+Rj1QqCyXBJhnEUhAFZdWCEOrCMc0u\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIFYDCCA0igAwIBAgIURFc0JFuBiZs18s64KztbpybwdSgwDQYJKoZIhvcNAQEL\nBQAwSDELMAkGA1UEBhMCQk0xGTAXBgNVBAoTEFF1b1ZhZGlzIExpbWl0ZWQxHjAc\nBgNVBAMTFVF1b1ZhZGlzIFJvb3QgQ0EgMiBHMzAeFw0xMjAxMTIxODU5MzJaFw00\nMjAxMTIxODU5MzJaMEgxCzAJBgNVBAYTAkJNMRkwFwYDVQQKExBRdW9WYWRpcyBM\naW1pdGVkMR4wHAYDVQQDExVRdW9WYWRpcyBSb290IENBIDIgRzMwggIiMA0GCSqG\nSIb3DQEBAQUAA4ICDwAwggIKAoICAQChriWyARjcV4g/Ruv5r+LrI3HimtFhZiFf\nqq8nUeVuGxbULX1QsFN3vXg6YOJkApt8hpvWGo6t/x8Vf9WVHhLL5hSEBMHfNrMW\nn4rjyduYNM7YMxcoRvynyfDStNVNCXJJ+fKH46nafaF9a7I6JaltUkSs+L5u+9ym\nc5GQYaYDFCDy54ejiK2toIz/pgslUiXnFgHVy7g1gQyjO/Dh4fxaXc6AcW34Sas+\nO7q414AB+6XrW7PFXmAqMaCvN+ggOp+oMiwMzAkd056OXbxMmO7FGmh77FOm6RQ1\no9/NgJ8MSPsc9PG/Srj61YxxSscfrf5BmrODXfKEVu+lV0POKa2Mq1W/xPtbAd0j\nIaFYAI7D0GoT7RPjEiuA3GfmlbLNHiJuKvhB1PLKFAeNilUSxmn1uIZoL1NesNKq\nIcGY5jDjZ1XHm26sGahVpkUG0CM62+tlXSoREfA7T8pt9DTEceT/AFr2XK4jYIVz\n8eQQsSWu1ZK7E8EM4DnatDlXtas1qnIhO4M15zHfeiFuuDIIfR0ykRVKYnLP43eh\nvNURG3YBZwjgQQvD6xVu+KQZ2aKrr+InUlYrAoosFCT5v0ICvybIxo/gbjh9Uy3l\n7ZizlWNof/k19N+IxWA1ksB8aRxhlRbQ694Lrz4EEEVlWFA4r0jyWbYW8jwNkALG\ncC4BrTwV1wIDAQABo0IwQDAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIB\nBjAdBgNVHQ4EFgQU7edvdlq/YOxJW8ald7tyFnGbxD0wDQYJKoZIhvcNAQELBQAD\nggIBAJHfgD9DCX5xwvfrs4iP4VGyvD11+ShdyLyZm3tdquXK4Qr36LLTn91nMX66\nAarHakE7kNQIXLJgapDwyM4DYvmL7ftuKtwGTTwpD4kWilhMSA/ohGHqPHKmd+RC\nroijQ1h5fq7KpVMNqT1wvSAZYaRsOPxDMuHBR//47PERIjKWnML2W2mWeyAMQ0Ga\nW/ZZGYjeVYg3UQt4XAoeo0L9x52ID8DyeAIkVJOviYeIyUqAHerQbj5hLja7NQ4n\nlv1mNDthcnPxFlxHBlRJAHpYErAK74X9sbgzdWqTHBLmYF5vHX/JHyPLhGGfHoJE\n+V+tYlUkmlKY7VHnoX6XOuYvHxHaU4AshZ6rNRDbIl9qxV6XU/IyAgkwo1jwDQHV\ncsaxfGl7w/U2Rcxhbl5MlMVerugOXou/983g7aEOGzPuVBj+D77vfoRrQ+NwmNtd\ndbINWQeFFSM51vHfqSYP1kjHs6Yi9TM3WpVHn3u6GBVv/9YUZINJ0gpnIdsPNWNg\nKCLjsZWDzYWm3S8P52dSbrsvhXz1SnPnxT7AvSESBT/8twNJAlvIJebiVDj1eYeM\nHVOyToV7BjjHLPj4sHKNJeV3UvQDHEimUF+IIDBu8oJDqz2XhOdT+yHBTw8imoa4\nWSr2Rz0ZiC3oheGe7IUIarFsNMkd7EgrO3jtZsSOeWmD3n+M\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIGnTCCBIWgAwIBAgICBcYwDQYJKoZIhvcNAQEFBQAwRTELMAkGA1UEBhMCQk0x\nGTAXBgNVBAoTEFF1b1ZhZGlzIExpbWl0ZWQxGzAZBgNVBAMTElF1b1ZhZGlzIFJv\nb3QgQ0EgMzAeFw0wNjExMjQxOTExMjNaFw0zMTExMjQxOTA2NDRaMEUxCzAJBgNV\nBAYTAkJNMRkwFwYDVQQKExBRdW9WYWRpcyBMaW1pdGVkMRswGQYDVQQDExJRdW9W\nYWRpcyBSb290IENBIDMwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDM\nV0IWVJzmmNPTTe7+7cefQzlKZbPoFog02w1ZkXTPkrgEQK0CSzGrvI2RaNggDhoB\n4hp7Thdd4oq3P5kazethq8Jlph+3t723j/z9cI8LoGe+AaJZz3HmDyl2/7FWeUUr\nH556VOijKTVopAFPD6QuN+8bv+OPEKhyq1hX51SGyMnzW9os2l2ObjyjPtr7guXd\n8lyyBTNvijbO0BNO/79KDDRMpsMhvVAEVeuxu537RR5kFd5VAYwCdrXLoT9Cabwv\nvWhDFlaJKjdhkf2mrk7AyxRllDdLkgbvBNDInIjbC3uBr7E9KsRlOni27tyAsdLT\nmZw67mtaa7ONt9XOnMK+pUsvFrGeaDsGb659n/je7Mwpp5ijJUMv7/FfJuGITfhe\nbtfZFG4ZM2mnO4SJk8RTVROhUXhA+LjJou57ulJCg54U7QVSWllWp5f8nT8KKdjc\nT5EOE7zelaTfi5m+rJsziO+1ga8bxiJTyPbH7pcUsMV8eFLI8M5ud2CEpukqdiDt\nWAEXMJPpGovgc2PZapKUSU60rUqFxKMiMPwJ7Wgic6aIDFUhWMXhOp8q3crhkODZ\nc6tsgLjoC2SToJyMGf+z0gzskSaHirOi4XCPLArlzW1oUevaPwV/izLmE1xr/l9A\n4iLItLRkT9a6fUg+qGkM17uGcclzuD87nSVL2v9A6wIDAQABo4IBlTCCAZEwDwYD\nVR0TAQH/BAUwAwEB/zCB4QYDVR0gBIHZMIHWMIHTBgkrBgEEAb5YAAMwgcUwgZMG\nCCsGAQUFBwICMIGGGoGDQW55IHVzZSBvZiB0aGlzIENlcnRpZmljYXRlIGNvbnN0\naXR1dGVzIGFjY2VwdGFuY2Ugb2YgdGhlIFF1b1ZhZGlzIFJvb3QgQ0EgMyBDZXJ0\naWZpY2F0ZSBQb2xpY3kgLyBDZXJ0aWZpY2F0aW9uIFByYWN0aWNlIFN0YXRlbWVu\ndC4wLQYIKwYBBQUHAgEWIWh0dHA6Ly93d3cucXVvdmFkaXNnbG9iYWwuY29tL2Nw\nczALBgNVHQ8EBAMCAQYwHQYDVR0OBBYEFPLAE+CCQz777i9nMpY1XNu4ywLQMG4G\nA1UdIwRnMGWAFPLAE+CCQz777i9nMpY1XNu4ywLQoUmkRzBFMQswCQYDVQQGEwJC\nTTEZMBcGA1UEChMQUXVvVmFkaXMgTGltaXRlZDEbMBkGA1UEAxMSUXVvVmFkaXMg\nUm9vdCBDQSAzggIFxjANBgkqhkiG9w0BAQUFAAOCAgEAT62gLEz6wPJv92ZVqyM0\n7ucp2sNbtrCD2dDQ4iH782CnO11gUyeim/YIIirnv6By5ZwkajGxkHon24QRiSem\nd1o417+shvzuXYO8BsbRd2sPbSQvS3pspweWyuOEn62Iix2rFo1bZhfZFvSLgNLd\n+LJ2w/w4E6oM3kJpK27zPOuAJ9v1pkQNn1pVWQvVDVJIxa6f8i+AxeoyUDUSly7B\n4f/xI4hROJ/yZlZ25w9Rl6VSDE1JUZU2Pb+iSwwQHYaZTKrzchGT5Or2m9qoXadN\nt54CrnMAyNojA+j56hl0YgCUyyIgvpSnWbWCar6ZeXqp8kokUvd0/bpO5qgdAm6x\nDYBEwa7TIzdfu4V8K5Iu6H6li92Z4b8nby1dqnuH/grdS/yO9SbkbnBCbjPsMZ57\nk8HkyWkaPcBrTiJt7qtYTcbQQcEr6k8Sh17rRdhs9ZgC06DYVYoGmRmioHfRMJ6s\nzHXug/WwYjnPbFfiTNKRCw51KBuav/0aQ/HKd/s7j2G4aSgWQgRecCocIdiP4b0j\nWy10QJLZYxkNc91pvGJHvOB0K7Lrfb5BG7XARsWhIstfTsEokt4YutUqKLsRixeT\nmJlglFwjz1onl14LBQaTNx47aTbrqZ5hHY8y2o4M1nQ+ewkk2gF3R8Q7zTSMmfXK\n4SVhM7JZG+Ju1zdXtg2pEto=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIFYDCCA0igAwIBAgIULvWbAiin23r/1aOp7r0DoM8Sah0wDQYJKoZIhvcNAQEL\nBQAwSDELMAkGA1UEBhMCQk0xGTAXBgNVBAoTEFF1b1ZhZGlzIExpbWl0ZWQxHjAc\nBgNVBAMTFVF1b1ZhZGlzIFJvb3QgQ0EgMyBHMzAeFw0xMjAxMTIyMDI2MzJaFw00\nMjAxMTIyMDI2MzJaMEgxCzAJBgNVBAYTAkJNMRkwFwYDVQQKExBRdW9WYWRpcyBM\naW1pdGVkMR4wHAYDVQQDExVRdW9WYWRpcyBSb290IENBIDMgRzMwggIiMA0GCSqG\nSIb3DQEBAQUAA4ICDwAwggIKAoICAQCzyw4QZ47qFJenMioKVjZ/aEzHs286IxSR\n/xl/pcqs7rN2nXrpixurazHb+gtTTK/FpRp5PIpM/6zfJd5O2YIyC0TeytuMrKNu\nFoM7pmRLMon7FhY4futD4tN0SsJiCnMK3UmzV9KwCoWdcTzeo8vAMvMBOSBDGzXR\nU7Ox7sWTaYI+FrUoRqHe6okJ7UO4BUaKhvVZR74bbwEhELn9qdIoyhA5CcoTNs+c\nra1AdHkrAj80//ogaX3T7mH1urPnMNA3I4ZyYUUpSFlob3emLoG+B01vr87ERROR\nFHAGjx+f+IdpsQ7vw4kZ6+ocYfx6bIrc1gMLnia6Et3UVDmrJqMz6nWB2i3ND0/k\nA9HvFZcba5DFApCTZgIhsUfei5pKgLlVj7WiL8DWM2fafsSntARE60f75li59wzw\neyuxwHApw0BiLTtIadwjPEjrewl5qW3aqDCYz4ByA4imW0aucnl8CAMhZa634Ryl\nsSqiMd5mBPfAdOhx3v89WcyWJhKLhZVXGqtrdQtEPREoPHtht+KPZ0/l7DxMYIBp\nVzgeAVuNVejH38DMdyM0SXV89pgR6y3e7UEuFAUCf+D+IOs15xGsIs5XPd7JMG0Q\nA4XN8f+MFrXBsj6IbGB/kE+V9/YtrQE5BwT6dYB9v0lQ7e/JxHwc64B+27bQ3RP+\nydOc17KXqQIDAQABo0IwQDAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIB\nBjAdBgNVHQ4EFgQUxhfQvKjqAkPyGwaZXSuQILnXnOQwDQYJKoZIhvcNAQELBQAD\nggIBADRh2Va1EodVTd2jNTFGu6QHcrxfYWLopfsLN7E8trP6KZ1/AvWkyaiTt3px\nKGmPc+FSkNrVvjrlt3ZqVoAh313m6Tqe5T72omnHKgqwGEfcIHB9UqM+WXzBusnI\nFUBhynLWcKzSt/Ac5IYp8M7vaGPQtSCKFWGafoaYtMnCdvvMujAWzKNhxnQT5Wvv\noxXqA/4Ti2Tk08HS6IT7SdEQTXlm66r99I0xHnAUrdzeZxNMgRVhvLfZkXdxGYFg\nu/BYpbWcC/ePIlUnwEsBbTuZDdQdm2NnL9DuDcpmvJRPpq3t/O5jrFc/ZSXPsoaP\n0Aj/uHYUbt7lJ+yreLVTubY/6CD50qi+YUbKh4yE8/nxoGibIh6BJpsQBJFxwAYf\n3KDTuVan45gtf4Od34wrnDKOMpTwATwiKp9Dwi7DmDkHOHv8XgBCH/MyJnmDhPbl\n8MFREsALHgQjDFSlTC9JxUrRtm5gDWv8a4uFJGS3iQ6rJUdbPM9+Sb3H6QrG2vd+\nDhcI00iX0HGS8A85PjRqHH3Y8iKuu2n0M7SmSFXRDw4m6Oy2Cy2nhTXN/VnIn9HN\nPlopNLk9hM6xZdRZkZFWdSHBd575euFgndOtBBj0fOtek49TSiIp+EgrPk2GrFt/\nywaZWWDYWGWVjUTR939+J399roD1B0y2PpxxVJkES/1Y+Zj0\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIDYTCCAkmgAwIBAgIQCgEBAQAAAnwAAAAKAAAAAjANBgkqhkiG9w0BAQUFADA6\nMRkwFwYDVQQKExBSU0EgU2VjdXJpdHkgSW5jMR0wGwYDVQQLExRSU0EgU2VjdXJp\ndHkgMjA0OCBWMzAeFw0wMTAyMjIyMDM5MjNaFw0yNjAyMjIyMDM5MjNaMDoxGTAX\nBgNVBAoTEFJTQSBTZWN1cml0eSBJbmMxHTAbBgNVBAsTFFJTQSBTZWN1cml0eSAy\nMDQ4IFYzMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAt49VcdKA3Xtp\neafwGFAyPGJn9gqVB93mG/Oe2dJBVGutn3y+Gc37RqtBaB4Y6lXIL5F4iSj7Jylg\n/9+PjDvJSZu1pJTOAeo+tWN7fyb9Gd3AIb2E0S1PRsNO3Ng3OTsor8udGuorryGl\nwSMiuLgbWhOHV4PR8CDn6E8jQrAApX2J6elhc5SYcSa8LWrg903w8bYqODGBDSnh\nAMFRD0xS+ARaqn1y07iHKrtjEAMqs6FPDVpeRrc9DvV07Jmf+T0kgYim3WBU6JU2\nPcYJk5qjEoAAVZkZR73QpXzDuvsf9/UP+Ky5tfQ3mBMY3oVbtwyCO4dvlTlYMNpu\nAWgXIszACwIDAQABo2MwYTAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIB\nBjAfBgNVHSMEGDAWgBQHw1EwpKrpRa41JPr/JCwz0LGdjDAdBgNVHQ4EFgQUB8NR\nMKSq6UWuNST6/yQsM9CxnYwwDQYJKoZIhvcNAQEFBQADggEBAF8+hnZuuDU8TjYc\nHnmYv/3VEhF5Ug7uMYm83X/50cYVIeiKAVQNOvtUudZj1LGqlk2iQk3UUx+LEN5/\nZb5gEydxiKRz44Rj0aRV4VCT5hsOedBnvEbIvz8XDZXmxpBp3ue0L96VfdASPz0+\nf00/FGj1EVDVwfSQpQgdMWD/YIwjVAqv/qFuxdF6Kmh4zx6CCiC0H63lhbJqaHVO\nrSU3lIW+vaHU6rcMSzyd6BIA8F+sDeGscGNz9395nzIlQnQFgCi/vcEkllgVsRch\n6YlL2weIZ/QVrXA+L02FO8K32/6YaCOJ4XQP3vTFhGMpG8zLB8kApKnXwiJPZ9d3\n7CAFYd4=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIGizCCBXOgAwIBAgIEO0XlaDANBgkqhkiG9w0BAQUFADBoMQswCQYDVQQGEwJF\nUzEfMB0GA1UEChMWR2VuZXJhbGl0YXQgVmFsZW5jaWFuYTEPMA0GA1UECxMGUEtJ\nR1ZBMScwJQYDVQQDEx5Sb290IENBIEdlbmVyYWxpdGF0IFZhbGVuY2lhbmEwHhcN\nMDEwNzA2MTYyMjQ3WhcNMjEwNzAxMTUyMjQ3WjBoMQswCQYDVQQGEwJFUzEfMB0G\nA1UEChMWR2VuZXJhbGl0YXQgVmFsZW5jaWFuYTEPMA0GA1UECxMGUEtJR1ZBMScw\nJQYDVQQDEx5Sb290IENBIEdlbmVyYWxpdGF0IFZhbGVuY2lhbmEwggEiMA0GCSqG\nSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDGKqtXETcvIorKA3Qdyu0togu8M1JAJke+\nWmmmO3I2F0zo37i7L3bhQEZ0ZQKQUgi0/6iMweDHiVYQOTPvaLRfX9ptI6GJXiKj\nSgbwJ/BXufjpTjJ3Cj9BZPPrZe52/lSqfR0grvPXdMIKX/UIKFIIzFVd0g/bmoGl\nu6GzwZTNVOAydTGRGmKy3nXiz0+J2ZGQD0EbtFpKd71ng+CT516nDOeB0/RSrFOy\nA8dEJvt55cs0YFAQexvba9dHq198aMpunUEDEO5rmXteJajCq+TA81yc477OMUxk\nHl6AovWDfgzWyoxVjr7gvkkHD6MkQXpYHYTqWBLI4bft75PelAgxAgMBAAGjggM7\nMIIDNzAyBggrBgEFBQcBAQQmMCQwIgYIKwYBBQUHMAGGFmh0dHA6Ly9vY3NwLnBr\naS5ndmEuZXMwEgYDVR0TAQH/BAgwBgEB/wIBAjCCAjQGA1UdIASCAiswggInMIIC\nIwYKKwYBBAG/VQIBADCCAhMwggHoBggrBgEFBQcCAjCCAdoeggHWAEEAdQB0AG8A\ncgBpAGQAYQBkACAAZABlACAAQwBlAHIAdABpAGYAaQBjAGEAYwBpAPMAbgAgAFIA\nYQDtAHoAIABkAGUAIABsAGEAIABHAGUAbgBlAHIAYQBsAGkAdABhAHQAIABWAGEA\nbABlAG4AYwBpAGEAbgBhAC4ADQAKAEwAYQAgAEQAZQBjAGwAYQByAGEAYwBpAPMA\nbgAgAGQAZQAgAFAAcgDhAGMAdABpAGMAYQBzACAAZABlACAAQwBlAHIAdABpAGYA\naQBjAGEAYwBpAPMAbgAgAHEAdQBlACAAcgBpAGcAZQAgAGUAbAAgAGYAdQBuAGMA\naQBvAG4AYQBtAGkAZQBuAHQAbwAgAGQAZQAgAGwAYQAgAHAAcgBlAHMAZQBuAHQA\nZQAgAEEAdQB0AG8AcgBpAGQAYQBkACAAZABlACAAQwBlAHIAdABpAGYAaQBjAGEA\nYwBpAPMAbgAgAHMAZQAgAGUAbgBjAHUAZQBuAHQAcgBhACAAZQBuACAAbABhACAA\nZABpAHIAZQBjAGMAaQDzAG4AIAB3AGUAYgAgAGgAdAB0AHAAOgAvAC8AdwB3AHcA\nLgBwAGsAaQAuAGcAdgBhAC4AZQBzAC8AYwBwAHMwJQYIKwYBBQUHAgEWGWh0dHA6\nLy93d3cucGtpLmd2YS5lcy9jcHMwHQYDVR0OBBYEFHs100DSHHgZZu90ECjcPk+y\neAT8MIGVBgNVHSMEgY0wgYqAFHs100DSHHgZZu90ECjcPk+yeAT8oWykajBoMQsw\nCQYDVQQGEwJFUzEfMB0GA1UEChMWR2VuZXJhbGl0YXQgVmFsZW5jaWFuYTEPMA0G\nA1UECxMGUEtJR1ZBMScwJQYDVQQDEx5Sb290IENBIEdlbmVyYWxpdGF0IFZhbGVu\nY2lhbmGCBDtF5WgwDQYJKoZIhvcNAQEFBQADggEBACRhTvW1yEICKrNcda3Fbcrn\nlD+laJWIwVTAEGmiEi8YPyVQqHxK6sYJ2fR1xkDar1CdPaUWu20xxsdzCkj+IHLt\nb8zog2EWRpABlUt9jppSCS/2bxzkoXHPjCpaF3ODR00PNvsETUlR4hTJZGH71BTg\n9J63NI8KJr2XXPR5OkowGcytT6CYirQxlyric21+eLj4iIlPsSKRZEv1UN4D2+XF\nducTZnV+ZfsBn5OHiJ35Rld8TWCvmHMTI6QgkYH60GFmuH3Rr9ZvHmw96RH9qfmC\nIoaZM3Fa6hlXPZHNqcCjbgcTpsnt+GijnsNacgmHKNHEc8RzGF9QdRYxn7fofMM=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIEezCCA2OgAwIBAgIQNxkY5lNUfBq1uMtZWts1tzANBgkqhkiG9w0BAQUFADCB\nrjELMAkGA1UEBhMCREUxIDAeBgNVBAgTF0JhZGVuLVd1ZXJ0dGVtYmVyZyAoQlcp\nMRIwEAYDVQQHEwlTdHV0dGdhcnQxKTAnBgNVBAoTIERldXRzY2hlciBTcGFya2Fz\nc2VuIFZlcmxhZyBHbWJIMT4wPAYDVQQDEzVTLVRSVVNUIEF1dGhlbnRpY2F0aW9u\nIGFuZCBFbmNyeXB0aW9uIFJvb3QgQ0EgMjAwNTpQTjAeFw0wNTA2MjIwMDAwMDBa\nFw0zMDA2MjEyMzU5NTlaMIGuMQswCQYDVQQGEwJERTEgMB4GA1UECBMXQmFkZW4t\nV3VlcnR0ZW1iZXJnIChCVykxEjAQBgNVBAcTCVN0dXR0Z2FydDEpMCcGA1UEChMg\nRGV1dHNjaGVyIFNwYXJrYXNzZW4gVmVybGFnIEdtYkgxPjA8BgNVBAMTNVMtVFJV\nU1QgQXV0aGVudGljYXRpb24gYW5kIEVuY3J5cHRpb24gUm9vdCBDQSAyMDA1OlBO\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA2bVKwdMz6tNGs9HiTNL1\ntoPQb9UY6ZOvJ44TzbUlNlA0EmQpoVXhOmCTnijJ4/Ob4QSwI7+Vio5bG0F/WsPo\nTUzVJBY+h0jUJ67m91MduwwA7z5hca2/OnpYH5Q9XIHV1W/fuJvS9eXLg3KSwlOy\nggLrra1fFi2SU3bxibYs9cEv4KdKb6AwajLrmnQDaHgTncovmwsdvs91DSaXm8f1\nXgqfeN+zvOyauu9VjxuapgdjKRdZYgkqeQd3peDRF2npW932kKvimAoA0SVtnteF\nhy+S8dF2g08LOlk3KC8zpxdQ1iALCvQm+Z845y2kuJuJja2tyWp9iRe79n+Ag3rm\n7QIDAQABo4GSMIGPMBIGA1UdEwEB/wQIMAYBAf8CAQAwDgYDVR0PAQH/BAQDAgEG\nMCkGA1UdEQQiMCCkHjAcMRowGAYDVQQDExFTVFJvbmxpbmUxLTIwNDgtNTAdBgNV\nHQ4EFgQUD8oeXHngovMpttKFswtKtWXsa1IwHwYDVR0jBBgwFoAUD8oeXHngovMp\nttKFswtKtWXsa1IwDQYJKoZIhvcNAQEFBQADggEBAK8B8O0ZPCjoTVy7pWMciDMD\npwCHpB8gq9Yc4wYfl35UvbfRssnV2oDsF9eK9XvCAPbpEW+EoFolMeKJ+aQAPzFo\nLtU96G7m1R08P7K9n3frndOMusDXtk3sU5wPBG7qNWdX4wple5A64U8+wwCSersF\niXOMy6ZNwPv2AtawB6MDwidAnwzkhYItr5pCHdDHjfhA7p0GVxzZotiAFP7hYy0y\nh9WUUpY6RsZxlj33mA6ykaqP2vROJAA5VeitF7nTNCtKqUDMFypVZUF0Qn71wK/I\nk63yGFs9iQzbRzkk+OBM8h+wPQrKBU6JIRrjKpms/H+h8Q8bHz2eBIPdltkdOpQ=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIID2DCCAsCgAwIBAgIQYFbFSyNAW2TU7SXa2dYeHjANBgkqhkiG9w0BAQsFADCB\nhTELMAkGA1UEBhMCREUxKTAnBgNVBAoTIERldXRzY2hlciBTcGFya2Fzc2VuIFZl\ncmxhZyBHbWJIMScwJQYDVQQLEx5TLVRSVVNUIENlcnRpZmljYXRpb24gU2Vydmlj\nZXMxIjAgBgNVBAMTGVMtVFJVU1QgVW5pdmVyc2FsIFJvb3QgQ0EwHhcNMTMxMDIy\nMDAwMDAwWhcNMzgxMDIxMjM1OTU5WjCBhTELMAkGA1UEBhMCREUxKTAnBgNVBAoT\nIERldXRzY2hlciBTcGFya2Fzc2VuIFZlcmxhZyBHbWJIMScwJQYDVQQLEx5TLVRS\nVVNUIENlcnRpZmljYXRpb24gU2VydmljZXMxIjAgBgNVBAMTGVMtVFJVU1QgVW5p\ndmVyc2FsIFJvb3QgQ0EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCo\n4wvfETeFgpq1bGZ8YT/ARxodRuOwVWTluII5KAd+F//0m4rwkYHqOD8heGxI7Gsv\notOKcrKn19nqf7TASWswJYmM67fVQGGY4tw8IJLNZUpynxqOjPolFb/zIYMoDYuv\nWRGCQ1ybTSVRf1gYY2A7s7WKi1hjN0hIkETCQN1d90NpKZhcEmVeq5CSS2bf1XUS\nU1QYpt6K1rtXAzlZmRgFDPn9FcaQZEYXgtfCSkE9/QC+V3IYlHcbU1qJAfYzcg6T\nOtzoHv0FBda8c+CI3KtP7LUYhk95hA5IKmYq3TLIeGXIC51YAQVx7YH1aBduyw20\nS9ih7K446xxYL6FlAzQvAgMBAAGjQjBAMA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0P\nAQH/BAQDAgEGMB0GA1UdDgQWBBSafdfr639UmEUptCCrbQuWIxmkwjANBgkqhkiG\n9w0BAQsFAAOCAQEATpYS2353XpInniEXGIJ22D+8pQkEZoiJrdtVszNqxmXEj03z\nMjbceQSWqXcy0Zf1GGuMuu3OEdBEx5LxtESO7YhSSJ7V/Vn4ox5R+wFS5V/let2q\nJE8ii912RvaloA812MoPmLkwXSBvwoEevb3A/hXTOCoJk5gnG5N70Cs0XmilFU/R\nUsOgyqCDRR319bdZc11ZAY+qwkcvFHHVKeMQtUeTJcwjKdq3ctiR1OwbSIoi5MEq\n9zpok59FGW5Dt8z+uJGaYRo2aWNkkijzb2GShROfyQcsi1fc65551cLeCNVUsldO\nKjKNoeI60RAgIjl9NEVvcTvDHfz/sk+o4vYwHg==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIDcjCCAlqgAwIBAgIUPopdB+xV0jLVt+O2XwHrLdzk1uQwDQYJKoZIhvcNAQEL\nBQAwUTELMAkGA1UEBhMCUEwxKDAmBgNVBAoMH0tyYWpvd2EgSXpiYSBSb3psaWN6\nZW5pb3dhIFMuQS4xGDAWBgNVBAMMD1NaQUZJUiBST09UIENBMjAeFw0xNTEwMTkw\nNzQzMzBaFw0zNTEwMTkwNzQzMzBaMFExCzAJBgNVBAYTAlBMMSgwJgYDVQQKDB9L\ncmFqb3dhIEl6YmEgUm96bGljemVuaW93YSBTLkEuMRgwFgYDVQQDDA9TWkFGSVIg\nUk9PVCBDQTIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC3vD5QqEvN\nQLXOYeeWyrSh2gwisPq1e3YAd4wLz32ohswmUeQgPYUM1ljj5/QqGJ3a0a4m7utT\n3PSQ1hNKDJA8w/Ta0o4NkjrcsbH/ON7Dui1fgLkCvUqdGw+0w8LBZwPd3BucPbOw\n3gAeqDRHu5rr/gsUvTaE2g0gv/pby6kWIK05YO4vdbbnl5z5Pv1+TW9NL++IDWr6\n3fE9biCloBK0TXC5ztdyO4mTp4CEHCdJckm1/zuVnsHMyAHs6A6KCpbns6aH5db5\nBSsNl0BwPLqsdVqc1U2dAgrSS5tmS0YHF2Wtn2yIANwiieDhZNRnvDF5YTy7ykHN\nXGoAyDw4jlivAgMBAAGjQjBAMA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQD\nAgEGMB0GA1UdDgQWBBQuFqlKGLXLzPVvUPMjX/hd56zwyDANBgkqhkiG9w0BAQsF\nAAOCAQEAtXP4A9xZWx126aMqe5Aosk3AM0+qmrHUuOQn/6mWmc5G4G18TKI4pAZw\n8PRBEew/R40/cof5O/2kbytTAOD/OblqBw7rHRz2onKQy4I9EYKL0rufKq8h5mOG\nnXkZ7/e7DDWQw4rtTw/1zBLZpD67oPwglV9PJi8RI4NOdQcPv5vRtB3pEAT+ymCP\noky4rc/hkA/NrgrHXXu3UNLUYfrVFdvXn4dRVOul4+vJhaAlIDf7js4MNIThPIGy\nd05DpYhfhmehPea0XGG2Ptv+tyjFogeutcrKjSoS75ftwjCkySp6+/NNIxuZMzSg\nLvWpCz/UXeHPhJ/iGcJfitYgHuNztw==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIDbTCCAlWgAwIBAgIBATANBgkqhkiG9w0BAQUFADBYMQswCQYDVQQGEwJKUDEr\nMCkGA1UEChMiSmFwYW4gQ2VydGlmaWNhdGlvbiBTZXJ2aWNlcywgSW5jLjEcMBoG\nA1UEAxMTU2VjdXJlU2lnbiBSb290Q0ExMTAeFw0wOTA0MDgwNDU2NDdaFw0yOTA0\nMDgwNDU2NDdaMFgxCzAJBgNVBAYTAkpQMSswKQYDVQQKEyJKYXBhbiBDZXJ0aWZp\nY2F0aW9uIFNlcnZpY2VzLCBJbmMuMRwwGgYDVQQDExNTZWN1cmVTaWduIFJvb3RD\nQTExMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA/XeqpRyQBTvLTJsz\ni1oURaTnkBbR31fSIRCkF/3frNYfp+TbfPfs37gD2pRY/V1yfIw/XwFndBWW4wI8\nh9uuywGOwvNmxoVF9ALGOrVisq/6nL+k5tSAMJjzDbaTj6nU2DbysPyKyiyhFTOV\nMdrAG/LuYpmGYz+/3ZMqg6h2uRMft85OQoWPIucuGvKVCbIFtUROd6EgvanyTgp9\nUK31BQ1FT0Zx/Sg+U/sE2C3XZR1KG/rPO7AxmjVuyIsG0wCR8pQIZUyxNAYAeoni\n8McDWc/V1uinMrPmmECGxc0nEovMe863ETxiYAcjPitAbpSACW22s293bzUIUPsC\nh8U+iQIDAQABo0IwQDAdBgNVHQ4EFgQUW/hNT7KlhtQ60vFjmqC+CfZXt94wDgYD\nVR0PAQH/BAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQEFBQADggEB\nAKChOBZmLqdWHyGcBvod7bkixTgm2E5P7KN/ed5GIaGHd48HCJqypMWvDzKYC3xm\nKbabfSVSSUOrTC4rbnpwrxYO4wJs+0LmGJ1F2FXI6Dvd5+H0LgscNFxsWEr7jIhQ\nX5Ucv+2rIrVls4W6ng+4reV6G4pQOh29Dbx7VFALuUKvVaAYga1lme++5Jy/xIWr\nQbJUb9wlze144o4MjQlJ3WN7WmmWAiGovVJZ6X01y8hSyn+B/tlr0/cR7SXf+Of5\npPpyl4RTDaXQMhhRdlkUbA/r7F+AjHVDg8OFmP9Mni0N5HeDk061lgeLKBObjBmN\nQSdJQO7e5iNEOdyhIta6A/I=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIDuDCCAqCgAwIBAgIQDPCOXAgWpa1Cf/DrJxhZ0DANBgkqhkiG9w0BAQUFADBI\nMQswCQYDVQQGEwJVUzEgMB4GA1UEChMXU2VjdXJlVHJ1c3QgQ29ycG9yYXRpb24x\nFzAVBgNVBAMTDlNlY3VyZVRydXN0IENBMB4XDTA2MTEwNzE5MzExOFoXDTI5MTIz\nMTE5NDA1NVowSDELMAkGA1UEBhMCVVMxIDAeBgNVBAoTF1NlY3VyZVRydXN0IENv\ncnBvcmF0aW9uMRcwFQYDVQQDEw5TZWN1cmVUcnVzdCBDQTCCASIwDQYJKoZIhvcN\nAQEBBQADggEPADCCAQoCggEBAKukgeWVzfX2FI7CT8rU4niVWJxB4Q2ZQCQXOZEz\nZum+4YOvYlyJ0fwkW2Gz4BERQRwdbvC4u/jep4G6pkjGnx29vo6pQT64lO0pGtSO\n0gMdA+9tDWccV9cGrcrI9f4Or2YlSASWC12juhbDCE/RRvgUXPLIXgGZbf2IzIao\nwW8xQmxSPmjL8xk037uHGFaAJsTQ3MBv396gwpEWoGQRS0S8Hvbn+mPeZqx2pHGj\n7DaUaHp3pLHnDi+BeuK1cobvomuL8A/b01k/unK8RCSc43Oz969XL0Imnal0ugBS\n8kvNU3xHCzaFDmapCJcWNFfBZveA4+1wVMeT4C4oFVmHursCAwEAAaOBnTCBmjAT\nBgkrBgEEAYI3FAIEBh4EAEMAQTALBgNVHQ8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB\n/zAdBgNVHQ4EFgQUQjK2FvoE/f5dS3rD/fdMQB1aQ68wNAYDVR0fBC0wKzApoCeg\nJYYjaHR0cDovL2NybC5zZWN1cmV0cnVzdC5jb20vU1RDQS5jcmwwEAYJKwYBBAGC\nNxUBBAMCAQAwDQYJKoZIhvcNAQEFBQADggEBADDtT0rhWDpSclu1pqNlGKa7UTt3\n6Z3q059c4EVlew3KW+JwULKUBRSuSceNQQcSc5R+DCMh/bwQf2AQWnL1mA6s7Ll/\n3XpvXdMc9P+IBWlCqQVxyLesJugutIxq/3HcuLHfmbx8IVQr5Fiiu1cprp6poxkm\nD5kuCLDv/WnPmRoJjeOnnyvJNjR7JLN4TJUXpAYmHrZkUjZfYGfZnMUFdAvnZyPS\nCPyI6a6Lf+Ew9Dd+/cYy2i2eRDAwbO4H3tI0/NL/QPZL9GZGBlSm8jIKYyYwa5vR\n3ItHuuG51WLQoqD0ZwV4KWMabwTW+MZMo5qxN7SN5ShLHZ4swrhovO0C7jE=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIDvDCCAqSgAwIBAgIQB1YipOjUiolN9BPI8PjqpTANBgkqhkiG9w0BAQUFADBK\nMQswCQYDVQQGEwJVUzEgMB4GA1UEChMXU2VjdXJlVHJ1c3QgQ29ycG9yYXRpb24x\nGTAXBgNVBAMTEFNlY3VyZSBHbG9iYWwgQ0EwHhcNMDYxMTA3MTk0MjI4WhcNMjkx\nMjMxMTk1MjA2WjBKMQswCQYDVQQGEwJVUzEgMB4GA1UEChMXU2VjdXJlVHJ1c3Qg\nQ29ycG9yYXRpb24xGTAXBgNVBAMTEFNlY3VyZSBHbG9iYWwgQ0EwggEiMA0GCSqG\nSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCvNS7YrGxVaQZx5RNoJLNP2MwhR/jxYDiJ\niQPpvepeRlMJ3Fz1Wuj3RSoC6zFh1ykzTM7HfAo3fg+6MpjhHZevj8fcyTiW89sa\n/FHtaMbQbqR8JNGuQsiWUGMu4P51/pinX0kuleM5M2SOHqRfkNJnPLLZ/kG5VacJ\njnIFHovdRIWCQtBJwB1g8NEXLJXr9qXBkqPFwqcIYA1gBBCWeZ4WNOaptvolRTnI\nHmX5k/Wq8VLcmZg9pYYaDDUz+kulBAYVHDGA76oYa8J719rO+TMg1fW9ajMtgQT7\nsFzUnKPiXB3jqUJ1XnvUd+85VLrJChgbEplJL4hL/VBi0XPnj3pDAgMBAAGjgZ0w\ngZowEwYJKwYBBAGCNxQCBAYeBABDAEEwCwYDVR0PBAQDAgGGMA8GA1UdEwEB/wQF\nMAMBAf8wHQYDVR0OBBYEFK9EBMJBfkiD2045AuzshHrmzsmkMDQGA1UdHwQtMCsw\nKaAnoCWGI2h0dHA6Ly9jcmwuc2VjdXJldHJ1c3QuY29tL1NHQ0EuY3JsMBAGCSsG\nAQQBgjcVAQQDAgEAMA0GCSqGSIb3DQEBBQUAA4IBAQBjGghAfaReUw132HquHw0L\nURYD7xh8yOOvaliTFGCRsoTciE6+OYo68+aCiV0BN7OrJKQVDpI1WkpEXk5X+nXO\nH0jOZvQ8QCaSmGwb7iRGDBezUqXbpZGRzzfTb+cnCDpOGR86p1hcF895P4vkp9Mm\nI50mD1hp/Ed+stCNi5O/KU9DaXR2Z0vPB4zmAve14bRDtUstFJ/53CYNv6ZHdAbY\niNE6KTCEztI5gGIbqMdXSbxqVVFnFUq+NQfk1XWYN3kwFNspnWzFacxHVaIw98xc\nf8LDmBxrThaA63p4ZUWiABqvDA1VZDRIuJK58bRQKfJPIx/abKwfROHdI3hRW8cW\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIDfTCCAmWgAwIBAgIBADANBgkqhkiG9w0BAQUFADBgMQswCQYDVQQGEwJKUDEl\nMCMGA1UEChMcU0VDT00gVHJ1c3QgU3lzdGVtcyBDTy4sTFRELjEqMCgGA1UECxMh\nU2VjdXJpdHkgQ29tbXVuaWNhdGlvbiBFViBSb290Q0ExMB4XDTA3MDYwNjAyMTIz\nMloXDTM3MDYwNjAyMTIzMlowYDELMAkGA1UEBhMCSlAxJTAjBgNVBAoTHFNFQ09N\nIFRydXN0IFN5c3RlbXMgQ08uLExURC4xKjAoBgNVBAsTIVNlY3VyaXR5IENvbW11\nbmljYXRpb24gRVYgUm9vdENBMTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC\nggEBALx/7FebJOD+nLpCeamIivqA4PUHKUPqjgo0No0c+qe1OXj/l3X3L+SqawSE\nRMqm4miO/VVQYg+kcQ7OBzgtQoVQrTyWb4vVog7P3kmJPdZkLjjlHmy1V4qe70gO\nzXppFodEtZDkBp2uoQSXWHnvIEqCa4wiv+wfD+mEce3xDuS4GBPMVjZd0ZoeUWs5\nbmB2iDQL87PRsJ3KYeJkHcFGB7hj3R4zZbOOCVVSPbW9/wfrrWFVGCypaZhKqkDF\nMxRldAD5kd6vA0jFQFTcD4SQaCDFkpbcLuUCRarAX1T4bepJz11sS6/vmsJWXMY1\nVkJqMF/Cq/biPT+zyRGPMUzXn0kCAwEAAaNCMEAwHQYDVR0OBBYEFDVK9U2vP9eC\nOKyrcWUXdYydVZPmMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMBAf8EBTADAQH/MA0G\nCSqGSIb3DQEBBQUAA4IBAQCoh+ns+EBnXcPBZsdAS5f8hxOQWsTvoMpfi7ent/HW\ntWS3irO4G8za+6xmiEHO6Pzk2x6Ipu0nUBsCMCRGef4Eh3CXQHPRwMFXGZpppSeZ\nq51ihPZRwSzJIxXYKLerJRO1RuGGAv8mjMSIkh1W/hln8lXkgKNrnKt34VFxDSDb\nEJrbvXZ5B3eZKK2aXtqxT0QsNY6llsf9g/BYxnnWmHyojf6GPgcWkuF75x3sM3Z+\nQi5KhfmRiWiEA4Glm5q+4zfFVKtWOxgtQaQM+ELbmaDgcm+7XeEWT1MKZPlO9L9O\nVL14bIjqv5wTJMJwaaJ/D8g8rQjJsJhAoyrniIPtd490\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIDdzCCAl+gAwIBAgIBADANBgkqhkiG9w0BAQsFADBdMQswCQYDVQQGEwJKUDEl\nMCMGA1UEChMcU0VDT00gVHJ1c3QgU3lzdGVtcyBDTy4sTFRELjEnMCUGA1UECxMe\nU2VjdXJpdHkgQ29tbXVuaWNhdGlvbiBSb290Q0EyMB4XDTA5MDUyOTA1MDAzOVoX\nDTI5MDUyOTA1MDAzOVowXTELMAkGA1UEBhMCSlAxJTAjBgNVBAoTHFNFQ09NIFRy\ndXN0IFN5c3RlbXMgQ08uLExURC4xJzAlBgNVBAsTHlNlY3VyaXR5IENvbW11bmlj\nYXRpb24gUm9vdENBMjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANAV\nOVKxUrO6xVmCxF1SrjpDZYBLx/KWvNs2l9amZIyoXvDjChz335c9S672XewhtUGr\nzbl+dp+++T42NKA7wfYxEUV0kz1XgMX5iZnK5atq1LXaQZAQwdbWQonCv/Q4EpVM\nVAX3NuRFg3sUZdbcDE3R3n4MqzvEFb46VqZab3ZpUql6ucjrappdUtAtCms1FgkQ\nhNBqyjoGADdH5H5XTz+L62e4iKrFvlNVspHEfbmwhRkGeC7bYRr6hfVKkaHnFtWO\nojnflLhwHyg/i/xAXmODPIMqGplrz95Zajv8bxbXH/1KEOtOghY6rCcMU/Gt1SSw\nawNQwS08Ft1ENCcadfsCAwEAAaNCMEAwHQYDVR0OBBYEFAqFqXdlBZh8QIH4D5cs\nOPEK7DzPMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3\nDQEBCwUAA4IBAQBMOqNErLlFsceTfsgLCkLfZOoc7llsCLqJX2rKSpWeeo8HxdpF\ncoJxDjrSzG+ntKEju/Ykn8sX/oymzsLS28yN/HH8AynBbF0zX2S2ZTuJbxh2ePXc\nokgfGT+Ok+vx+hfuzU7jBBJV1uXk3fs+BXziHV7Gp7yXT2g69ekuCkO2r1dcYmh8\nt/2jioSgrGK+KwmHNPBqAbubKVY8/gA3zyNs8U6qtnRGEmyR7jTV7JqR50S+kDFy\n1UkC9gLl9B/rfNmWVan/7Ir5mUf/NVoCqgTLiluHcSmRvaS0eg29mvVXIwAHIRc/\nSjnRBUkLp7Y3gaVdjKozXoEofKd9J+sAro03\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIDWjCCAkKgAwIBAgIBADANBgkqhkiG9w0BAQUFADBQMQswCQYDVQQGEwJKUDEY\nMBYGA1UEChMPU0VDT00gVHJ1c3QubmV0MScwJQYDVQQLEx5TZWN1cml0eSBDb21t\ndW5pY2F0aW9uIFJvb3RDQTEwHhcNMDMwOTMwMDQyMDQ5WhcNMjMwOTMwMDQyMDQ5\nWjBQMQswCQYDVQQGEwJKUDEYMBYGA1UEChMPU0VDT00gVHJ1c3QubmV0MScwJQYD\nVQQLEx5TZWN1cml0eSBDb21tdW5pY2F0aW9uIFJvb3RDQTEwggEiMA0GCSqGSIb3\nDQEBAQUAA4IBDwAwggEKAoIBAQCzs/5/022x7xZ8V6UMbXaKL0u/ZPtM7orw8yl8\n9f/uKuDp6bpbZCKamm8sOiZpUQWZJtzVHGpxxpp9Hp3dfGzGjGdnSj74cbAZJ6kJ\nDKaVv0uMDPpVmDvY6CKhS3E4eayXkmmziX7qIWgGmBSWh9JhNrxtJ1aeV+7AwFb9\nMs+k2Y7CI9eNqPPYJayX5HA49LY6tJ07lyZDo6G8SVlyTCMwhwFY9k6+HGhWZq/N\nQV3Is00qVUarH9oe4kA92819uZKAnDfdDJZkndwi92SL32HeFZRSFaB9UslLqCHJ\nxrHty8OVYNEP8Ktw+N/LTX7s1vqr2b1/VPKl6Xn62dZ2JChzAgMBAAGjPzA9MB0G\nA1UdDgQWBBSgc0mZaNyFW2XjmygvV5+9M7wHSDALBgNVHQ8EBAMCAQYwDwYDVR0T\nAQH/BAUwAwEB/zANBgkqhkiG9w0BAQUFAAOCAQEAaECpqLvkT115swW1F7NgE+vG\nkl3g0dNq/vu+m22/xwVtWSDEHPC32oRYAmP6SBbvT6UL90qY8j+eG61Ha2POCEfr\nUj94nK9NrvjVT8+amCoQQTlSxN3Zmw7vkwGusi7KaEIkQmywszo+zenaSMQVy+n5\nBw+SUEmK3TGXX8npN6o7WWWXlDLJs58+OmJYxUmtYg5xpTKqL8aJdkNAExNnPaJU\nJRDL8Try2frbSVa7pv6nQTXD4IhhyYjH3zYQIphZ6rBK+1YWc26sTfcioU+tHXot\nRSflMMFe8toTyyVCUZVHA4xsIcx0Qu1T/zOLjw9XARYvz6buyXAiFL39vmwLAw==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIDIDCCAgigAwIBAgIBHTANBgkqhkiG9w0BAQUFADA5MQswCQYDVQQGEwJGSTEP\nMA0GA1UEChMGU29uZXJhMRkwFwYDVQQDExBTb25lcmEgQ2xhc3MyIENBMB4XDTAx\nMDQwNjA3Mjk0MFoXDTIxMDQwNjA3Mjk0MFowOTELMAkGA1UEBhMCRkkxDzANBgNV\nBAoTBlNvbmVyYTEZMBcGA1UEAxMQU29uZXJhIENsYXNzMiBDQTCCASIwDQYJKoZI\nhvcNAQEBBQADggEPADCCAQoCggEBAJAXSjWdyvANlsdE+hY3/Ei9vX+ALTU74W+o\nZ6m/AxxNjG8yR9VBaKQTBME1DJqEQ/xcHf+Js+gXGM2RX/uJ4+q/Tl18GybTdXnt\n5oTjV+WtKcT0OijnpXuENmmz/V52vaMtmdOQTiMofRhj8VQ7Jp12W5dCsv+u8E7s\n3TmVToMGf+dJQMjFAbJUWmYdPfz56TwKnoG4cPABi+QjVHzIrviQHgCWctRUz2Ej\nvOr7nQKV0ba5cTppCD8PtOFCx4j1P5iop7oc4HFx71hXgVB6XGt0Rg6DA5jDjqhu\n8nYybieDwnPz3BjotJPqdURrBGAgcVeHnfO+oJAjPYok4doh28MCAwEAAaMzMDEw\nDwYDVR0TAQH/BAUwAwEB/zARBgNVHQ4ECgQISqCqWITTXjwwCwYDVR0PBAQDAgEG\nMA0GCSqGSIb3DQEBBQUAA4IBAQBazof5FnIVV0sd2ZvnoiYw7JNn39Yt0jSv9zil\nzqsWuasvfDXLrNAPtEwr/IDva4yRXzZ299uzGxnq9LIR/WFxRL8oszodv7ND6J+/\n3DEIcbCdjdY0RzKQxmUk96BKfARzjzlvF4xytb1LyHr4e4PDKE6cCepnP7JnBBvD\nFNr450kkkdAdavphOe9r5yF1BgfYErQhIHBCcYHaPJo2vqZbDWpsmh+Re/n570K6\nTk6ezAyNlNzZRZxe7EJQY670XcSxEtzKO6gunRRaBXW37Ndj4ro1tgQIkejanZz2\nZrUYrAqmVCY0M9IbwdR/GjqOC6oybtv8TyWf2TLHllpwrN9M\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIFcDCCA1igAwIBAgIEAJiWjTANBgkqhkiG9w0BAQsFADBYMQswCQYDVQQGEwJO\nTDEeMBwGA1UECgwVU3RhYXQgZGVyIE5lZGVybGFuZGVuMSkwJwYDVQQDDCBTdGFh\ndCBkZXIgTmVkZXJsYW5kZW4gRVYgUm9vdCBDQTAeFw0xMDEyMDgxMTE5MjlaFw0y\nMjEyMDgxMTEwMjhaMFgxCzAJBgNVBAYTAk5MMR4wHAYDVQQKDBVTdGFhdCBkZXIg\nTmVkZXJsYW5kZW4xKTAnBgNVBAMMIFN0YWF0IGRlciBOZWRlcmxhbmRlbiBFViBS\nb290IENBMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA48d+ifkkSzrS\nM4M1LGns3Amk41GoJSt5uAg94JG6hIXGhaTK5skuU6TJJB79VWZxXSzFYGgEt9nC\nUiY4iKTWO0Cmws0/zZiTs1QUWJZV1VD+hq2kY39ch/aO5ieSZxeSAgMs3NZmdO3d\nZ//BYY1jTw+bbRcwJu+r0h8QoPnFfxZpgQNH7R5ojXKhTbImxrpsX23Wr9GxE46p\nrfNeaXUmGD5BKyF/7otdBwadQ8QpCiv8Kj6GyzyDOvnJDdrFmeK8eEEzduG/L13l\npJhQDBXd4Pqcfzho0LKmeqfRMb1+ilgnQ7O6M5HTp5gVXJrm0w912fxBmJc+qiXb\nj5IusHsMX/FjqTf5m3VpTCgmJdrV8hJwRVXj33NeN/UhbJCONVrJ0yPr08C+eKxC\nKFhmpUZtcALXEPlLVPxdhkqHz3/KRawRWrUgUY0viEeXOcDPusBCAUCZSCELa6fS\n/ZbV0b5GnUngC6agIk440ME8MLxwjyx1zNDFjFE7PZQIZCZhfbnDZY8UnCHQqv0X\ncgOPvZuM5l5Tnrmd74K74bzickFbIZTTRTeU0d8JOV3nI6qaHcptqAqGhYqCvkIH\n1vI4gnPah1vlPNOePqc7nvQDs/nxfRN0Av+7oeX6AHkcpmZBiFxgV6YuCcS6/ZrP\npx9Aw7vMWgpVSzs4dlG4Y4uElBbmVvMCAwEAAaNCMEAwDwYDVR0TAQH/BAUwAwEB\n/zAOBgNVHQ8BAf8EBAMCAQYwHQYDVR0OBBYEFP6rAJCYniT8qcwaivsnuL8wbqg7\nMA0GCSqGSIb3DQEBCwUAA4ICAQDPdyxuVr5Os7aEAJSrR8kN0nbHhp8dB9O2tLsI\neK9p0gtJ3jPFrK3CiAJ9Brc1AsFgyb/E6JTe1NOpEyVa/m6irn0F3H3zbPB+po3u\n2dfOWBfoqSmuc0iH55vKbimhZF8ZE/euBhD/UcabTVUlT5OZEAFTdfETzsemQUHS\nv4ilf0X8rLiltTMMgsT7B/Zq5SWEXwbKwYY5EdtYzXc7LMJMD16a4/CrPmEbUCTC\nwPTxGfARKbalGAKb12NMcIxHowNDXLldRqANb/9Zjr7dn3LDWyvfjFvO5QxGbJKy\nCqNMVEIYFRIYvdr8unRu/8G2oGTYqV9Vrp9canaW2HNnh/tNf1zuacpzEPuKqf2e\nvTY4SUmH9A4U8OmHuD+nT3pajnnUk+S7aFKErGzp85hwVXIy+TSrK0m1zSBi5Dp6\nZ2Orltxtrpfs/J92VoguZs9btsmksNcFuuEnL5O7Jiqik7Ab846+HUCjuTaPPoIa\nGl6I6lD4WeKDRikL40Rc4ZW2aZCaFG+XroHPaO+Zmr615+F/+PoTRxZMzG0IQOeL\neG9QgkRQP2YGiqtDhFZKDyAthg710tvSeopLzaXoTvFeJiUBWSOgftL2fiFX1ye8\nFVdMpEbB4IMeDExNH08GGeL5qPQ6gqGyeUN51q1veieQA6TqJIc/2b3Z6fJfUEkc\n7uzXLg==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIFyjCCA7KgAwIBAgIEAJiWjDANBgkqhkiG9w0BAQsFADBaMQswCQYDVQQGEwJO\nTDEeMBwGA1UECgwVU3RhYXQgZGVyIE5lZGVybGFuZGVuMSswKQYDVQQDDCJTdGFh\ndCBkZXIgTmVkZXJsYW5kZW4gUm9vdCBDQSAtIEcyMB4XDTA4MDMyNjExMTgxN1oX\nDTIwMDMyNTExMDMxMFowWjELMAkGA1UEBhMCTkwxHjAcBgNVBAoMFVN0YWF0IGRl\nciBOZWRlcmxhbmRlbjErMCkGA1UEAwwiU3RhYXQgZGVyIE5lZGVybGFuZGVuIFJv\nb3QgQ0EgLSBHMjCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAMVZ5291\nqj5LnLW4rJ4L5PnZyqtdj7U5EILXr1HgO+EASGrP2uEGQxGZqhQlEq0i6ABtQ8Sp\nuOUfiUtnvWFI7/3S4GCI5bkYYCjDdyutsDeqN95kWSpGV+RLufg3fNU254DBtvPU\nZ5uW6M7XxgpT0GtJlvOjCwV3SPcl5XCsMBQgJeN/dVrlSPhOewMHBPqCYYdu8DvE\npMfQ9XQ+pV0aCPKbJdL2rAQmPlU6Yiile7Iwr/g3wtG61jj99O9JMDeZJiFIhQGp\n5Rbn3JBV3w/oOM2ZNyFPXfUib2rFEhZgF1XyZWampzCROME4HYYEhLoaJXhena/M\nUGDWE4dS7WMfbWV9whUYdMrhfmQpjHLYFhN9C0lK8SgbIHRrxT3dsKpICT0ugpTN\nGmXZK4iambwYfp/ufWZ8Pr2UuIHOzZgweMFvZ9C+X+Bo7d7iscksWXiSqt8rYGPy\n5V6548r6f1CGPqI0GAwJaCgRHOThuVw+R7oyPxjMW4T182t0xHJ04eOLoEq9jWYv\n6q012iDTiIJh8BIitrzQ1aTsr1SIJSQ8p22xcik/Plemf1WvbibG/ufMQFxRRIEK\neN5KzlW/HdXZt1bv8Hb/C3m1r737qWmRRpdogBQ2HbN/uymYNqUg+oJgYjOk7Na6\nB6duxc8UpufWkjTYgfX8HV2qXB72o007uPc5AgMBAAGjgZcwgZQwDwYDVR0TAQH/\nBAUwAwEB/zBSBgNVHSAESzBJMEcGBFUdIAAwPzA9BggrBgEFBQcCARYxaHR0cDov\nL3d3dy5wa2lvdmVyaGVpZC5ubC9wb2xpY2llcy9yb290LXBvbGljeS1HMjAOBgNV\nHQ8BAf8EBAMCAQYwHQYDVR0OBBYEFJFoMocVHYnitfGsNig0jQt8YojrMA0GCSqG\nSIb3DQEBCwUAA4ICAQCoQUpnKpKBglBu4dfYszk78wIVCVBR7y29JHuIhjv5tLyS\nCZa59sCrI2AGeYwRTlHSeYAz+51IvuxBQ4EffkdAHOV6CMqqi3WtFMTC6GY8ggen\n5ieCWxjmD27ZUD6KQhgpxrRW/FYQoAUXvQwjf/ST7ZwaUb7dRUG/kSS0H4zpX897\nIZmflZ85OkYcbPnNe5yQzSipx6lVu6xiNGI1E0sUOlWDuYaNkqbG9AclVMwWVxJK\ngnjIFNkXgiYtXSAfea7+1HAWFpWD2DU5/1JddRwWxRNVz0fMdWVSSt7wsKfkCpYL\n+63C4iWEst3kvX5ZbJvw8NjnyvLplzh+ib7M+zkXYT9y2zqR2GUBGR2tUKRXCnxL\nvJxxcypFURmFzI79R6d0lR2o0a9OF7FpJsKqeFdbxU2n5Z4FF5TKsl+gSRiNNOkm\nbEgeqmiSBeGCc1qb3AdbCG19ndeNIdn8FCCqwkXfP+cAslHkwvgFuXkajDTznlvk\nN1trSt8sV4pAWja63XVECDdCcAz+3F4hoKOKwJCcaNpQ5kUQR3i2TtJlycM33+FC\nY7BXN0Ute4qcvwXqZVUz9zkQxSgqIXobisQk+T8VyJoVIPVVYpbtbZNQvOSqeK3Z\nywplh6ZmwcSBo3c6WB4L7oOLnR7SUqTMHW+wmG2UMbX4cQrcufx9MmDm66+KAQ==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIFdDCCA1ygAwIBAgIEAJiiOTANBgkqhkiG9w0BAQsFADBaMQswCQYDVQQGEwJO\nTDEeMBwGA1UECgwVU3RhYXQgZGVyIE5lZGVybGFuZGVuMSswKQYDVQQDDCJTdGFh\ndCBkZXIgTmVkZXJsYW5kZW4gUm9vdCBDQSAtIEczMB4XDTEzMTExNDExMjg0MloX\nDTI4MTExMzIzMDAwMFowWjELMAkGA1UEBhMCTkwxHjAcBgNVBAoMFVN0YWF0IGRl\nciBOZWRlcmxhbmRlbjErMCkGA1UEAwwiU3RhYXQgZGVyIE5lZGVybGFuZGVuIFJv\nb3QgQ0EgLSBHMzCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAL4yolQP\ncPssXFnrbMSkUeiFKrPMSjTysF/zDsccPVMeiAho2G89rcKezIJnByeHaHE6n3WW\nIkYFsO2tx1ueKt6c/DrGlaf1F2cY5y9JCAxcz+bMNO14+1Cx3Gsy8KL+tjzk7FqX\nxz8ecAgwoNzFs21v0IJyEavSgWhZghe3eJJg+szeP4TrjTgzkApyI/o1zCZxMdFy\nKJLZWyNtZrVtB0LrpjPOktvA9mxjeM3KTj215VKb8b475lRgsGYeCasH/lSJEULR\n9yS6YHgamPfJEf0WwTUaVHXvQ9Plrk7O53vDxk5hUUurmkVLoR9BvUhTFXFkC4az\n5S6+zqQbwSmEorXLCCN2QyIkHxcE1G6cxvx/K2Ya7Irl1s9N9WMJtxU51nus6+N8\n6U78dULI7ViVDAZCopz35HCz33JvWjdAidiFpNfxC95DGdRKWCyMijmev4SH8RY7\nNgzp07TKbBlBUgmhHbBqv4LvcFEhMtwFdozL92TkA1CvjJFnq8Xy7ljY3r735zHP\nbMk7ccHViLVlvMDoFxcHErVc0qsgk7TmgoNwNsXNo42ti+yjwUOH5kPiNL6VizXt\nBznaqB16nzaeErAMZRKQFWDZJkBE41ZgpRDUajz9QdwOWke275dhdU/Z/seyHdTt\nXUmzqWrLZoQT1Vyg3N9udwbRcXXIV2+vD3dbAgMBAAGjQjBAMA8GA1UdEwEB/wQF\nMAMBAf8wDgYDVR0PAQH/BAQDAgEGMB0GA1UdDgQWBBRUrfrHkleuyjWcLhL75Lpd\nINyUVzANBgkqhkiG9w0BAQsFAAOCAgEAMJmdBTLIXg47mAE6iqTnB/d6+Oea31BD\nU5cqPco8R5gu4RV78ZLzYdqQJRZlwJ9UXQ4DO1t3ApyEtg2YXzTdO2PCwyiBwpwp\nLiniyMMB8jPqKqrMCQj3ZWfGzd/TtiunvczRDnBfuCPRy5FOCvTIeuXZYzbB1N/8\nIpf3YF3qKS9Ysr1YvY2WTxB1v0h7PVGHoTx0IsL8B3+A3MSs/mrBcDCw6Y5p4ixp\ngZQJut3+TcCDjJRYwEYgr5wfAvg1VUkvRtTA8KCWAg8zxXHzniN9lLf9OtMJgwYh\n/WA9rjLA0u6NpvDntIJ8CsxwyXmA+P5M9zWEGYox+wrZ13+b8KKaa8MFSu1BYBQw\n0aoRQm7TIwIEC8Zl3d1Sd9qBa7Ko+gE4uZbqKmxnl4mUnrzhVNXkanjvSr0rmj1A\nfsbAddJu+2gw7OyLnflJNZoaLNmzlTnVHpL3prllL+U9bTpITAjc5CgSKL59NVzq\n4BZ+Extq1z7XnvwtdbLBFNUjA9tbbws+eC8N3jONFrdI54OagQ97wUNNVQQXOEpR\n1VmiiXTTn74eS9fGbbeIJG9gkaSChVtWQbzQRKtqE77RLFi3EjNYsjdj3BP1lB0/\nQFH1T/U67cjF68IeHRaVesd+QnGTbksVtzDfqu1XhUisHWrdOWnk4Xl4vs4Fv6EM\n94B7IWcnMFk=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIEDzCCAvegAwIBAgIBADANBgkqhkiG9w0BAQUFADBoMQswCQYDVQQGEwJVUzEl\nMCMGA1UEChMcU3RhcmZpZWxkIFRlY2hub2xvZ2llcywgSW5jLjEyMDAGA1UECxMp\nU3RhcmZpZWxkIENsYXNzIDIgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMDQw\nNjI5MTczOTE2WhcNMzQwNjI5MTczOTE2WjBoMQswCQYDVQQGEwJVUzElMCMGA1UE\nChMcU3RhcmZpZWxkIFRlY2hub2xvZ2llcywgSW5jLjEyMDAGA1UECxMpU3RhcmZp\nZWxkIENsYXNzIDIgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwggEgMA0GCSqGSIb3\nDQEBAQUAA4IBDQAwggEIAoIBAQC3Msj+6XGmBIWtDBFk385N78gDGIc/oav7PKaf\n8MOh2tTYbitTkPskpD6E8J7oX+zlJ0T1KKY/e97gKvDIr1MvnsoFAZMej2YcOadN\n+lq2cwQlZut3f+dZxkqZJRRU6ybH838Z1TBwj6+wRir/resp7defqgSHo9T5iaU0\nX9tDkYI22WY8sbi5gv2cOj4QyDvvBmVmepsZGD3/cVE8MC5fvj13c7JdBmzDI1aa\nK4UmkhynArPkPw2vCHmCuDY96pzTNbO8acr1zJ3o/WSNF4Azbl5KXZnJHoe0nRrA\n1W4TNSNe35tfPe/W93bC6j67eA0cQmdrBNj41tpvi/JEoAGrAgEDo4HFMIHCMB0G\nA1UdDgQWBBS/X7fRzt0fhvRbVazc1xDCDqmI5zCBkgYDVR0jBIGKMIGHgBS/X7fR\nzt0fhvRbVazc1xDCDqmI56FspGowaDELMAkGA1UEBhMCVVMxJTAjBgNVBAoTHFN0\nYXJmaWVsZCBUZWNobm9sb2dpZXMsIEluYy4xMjAwBgNVBAsTKVN0YXJmaWVsZCBD\nbGFzcyAyIENlcnRpZmljYXRpb24gQXV0aG9yaXR5ggEAMAwGA1UdEwQFMAMBAf8w\nDQYJKoZIhvcNAQEFBQADggEBAAWdP4id0ckaVaGsafPzWdqbAYcaT1epoXkJKtv3\nL7IezMdeatiDh6GX70k1PncGQVhiv45YuApnP+yz3SFmH8lU+nLMPUxA2IGvd56D\neruix/U0F47ZEUD0/CwqTRV/p2JdLiXTAAsgGh1o+Re49L2L7ShZ3U0WixeDyLJl\nxy16paq8U4Zt3VekyvggQQto8PT7dL5WXXp59fkdheMtlb71cZBDzI0fmgAKhynp\nVSJYACPq4xJDKVtHCN2MQWplBqjlIapBtJUhlbl90TSrE9atvNziPTnNvT51cKEY\nWQPJIrSPnNVeKtelttQKbfi3QBFGmh95DmK/D5fs4C8fF5Q=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIID3TCCAsWgAwIBAgIBADANBgkqhkiG9w0BAQsFADCBjzELMAkGA1UEBhMCVVMx\nEDAOBgNVBAgTB0FyaXpvbmExEzARBgNVBAcTClNjb3R0c2RhbGUxJTAjBgNVBAoT\nHFN0YXJmaWVsZCBUZWNobm9sb2dpZXMsIEluYy4xMjAwBgNVBAMTKVN0YXJmaWVs\nZCBSb290IENlcnRpZmljYXRlIEF1dGhvcml0eSAtIEcyMB4XDTA5MDkwMTAwMDAw\nMFoXDTM3MTIzMTIzNTk1OVowgY8xCzAJBgNVBAYTAlVTMRAwDgYDVQQIEwdBcml6\nb25hMRMwEQYDVQQHEwpTY290dHNkYWxlMSUwIwYDVQQKExxTdGFyZmllbGQgVGVj\naG5vbG9naWVzLCBJbmMuMTIwMAYDVQQDEylTdGFyZmllbGQgUm9vdCBDZXJ0aWZp\nY2F0ZSBBdXRob3JpdHkgLSBHMjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC\nggEBAL3twQP89o/8ArFvW59I2Z154qK3A2FWGMNHttfKPTUuiUP3oWmb3ooa/RMg\nnLRJdzIpVv257IzdIvpy3Cdhl+72WoTsbhm5iSzchFvVdPtrX8WJpRBSiUZV9Lh1\nHOZ/5FSuS/hVclcCGfgXcVnrHigHdMWdSL5stPSksPNkN3mSwOxGXn/hbVNMYq/N\nHwtjuzqd+/x5AJhhdM8mgkBj87JyahkNmcrUDnXMN/uLicFZ8WJ/X7NfZTD4p7dN\ndloedl40wOiWVpmKs/B/pM293DIxfJHP4F8R+GuqSVzRmZTRouNjWwl2tVZi4Ut0\nHZbUJtQIBFnQmA4O5t78w+wfkPECAwEAAaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAO\nBgNVHQ8BAf8EBAMCAQYwHQYDVR0OBBYEFHwMMh+n2TB/xH1oo2Kooc6rB1snMA0G\nCSqGSIb3DQEBCwUAA4IBAQARWfolTwNvlJk7mh+ChTnUdgWUXuEok21iXQnCoKjU\nsHU48TRqneSfioYmUeYs0cYtbpUgSpIB7LiKZ3sx4mcujJUDJi5DnUox9g61DLu3\n4jd/IroAow57UvtruzvE03lRTs2Q9GcHGcg8RnoNAX3FWOdt5oUwF5okxBDgBPfg\n8n/Uqgr/Qh037ZTlZFkSIHc40zI+OIF1lnP6aI+xy84fxez6nH7PfrHxBy22/L/K\npL/QlwVKvOoYKAKQvVR4CSFx09F9HdkWsKlhPdAKACL8x3vLCWRFCztAgfd9fDL1\nmMpYjn0q7pBZc2T5NnReJaH1ZgUufzkVqSr7UIuOhWn0\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIID7zCCAtegAwIBAgIBADANBgkqhkiG9w0BAQsFADCBmDELMAkGA1UEBhMCVVMx\nEDAOBgNVBAgTB0FyaXpvbmExEzARBgNVBAcTClNjb3R0c2RhbGUxJTAjBgNVBAoT\nHFN0YXJmaWVsZCBUZWNobm9sb2dpZXMsIEluYy4xOzA5BgNVBAMTMlN0YXJmaWVs\nZCBTZXJ2aWNlcyBSb290IENlcnRpZmljYXRlIEF1dGhvcml0eSAtIEcyMB4XDTA5\nMDkwMTAwMDAwMFoXDTM3MTIzMTIzNTk1OVowgZgxCzAJBgNVBAYTAlVTMRAwDgYD\nVQQIEwdBcml6b25hMRMwEQYDVQQHEwpTY290dHNkYWxlMSUwIwYDVQQKExxTdGFy\nZmllbGQgVGVjaG5vbG9naWVzLCBJbmMuMTswOQYDVQQDEzJTdGFyZmllbGQgU2Vy\ndmljZXMgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkgLSBHMjCCASIwDQYJKoZI\nhvcNAQEBBQADggEPADCCAQoCggEBANUMOsQq+U7i9b4Zl1+OiFOxHz/Lz58gE20p\nOsgPfTz3a3Y4Y9k2YKibXlwAgLIvWX/2h/klQ4bnaRtSmpDhcePYLQ1Ob/bISdm2\n8xpWriu2dBTrz/sm4xq6HZYuajtYlIlHVv8loJNwU4PahHQUw2eeBGg6345AWh1K\nTs9DkTvnVtYAcMtS7nt9rjrnvDH5RfbCYM8TWQIrgMw0R9+53pBlbQLPLJGmpufe\nhRhJfGZOozptqbXuNC66DQO4M99H67FrjSXZm86B0UVGMpZwh94CDklDhbZsc7tk\n6mFBrMnUVN+HL8cisibMn1lUaJ/8viovxFUcdUBgF4UCVTmLfwUCAwEAAaNCMEAw\nDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYwHQYDVR0OBBYEFJxfAN+q\nAdcwKziIorhtSpzyEZGDMA0GCSqGSIb3DQEBCwUAA4IBAQBLNqaEd2ndOxmfZyMI\nbw5hyf2E3F/YNoHN2BtBLZ9g3ccaaNnRbobhiCPPE95Dz+I0swSdHynVv/heyNXB\nve6SbzJ08pGCL72CQnqtKrcgfU28elUSwhXqvfdqlS5sdJ/PHLTyxQGjhdByPq1z\nqwubdQxtRbeOlKyWN7Wg0I8VRw7j6IPdj/3vQQF3zCepYoUz8jcI73HPdwbeyBkd\niEDPfUYd/x7H4c7/I9vG+o1VTqkC50cRRj70/b17KSa7qWFiNyi2LSr2EIZkyXCn\n0q23KXB56jzaYyWf/Wi3MOxw+3WKt21gZ7IeyLnp2KhvAotnDU0mV3HaIPzBSlCN\nsSi6\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIHyTCCBbGgAwIBAgIBATANBgkqhkiG9w0BAQUFADB9MQswCQYDVQQGEwJJTDEW\nMBQGA1UEChMNU3RhcnRDb20gTHRkLjErMCkGA1UECxMiU2VjdXJlIERpZ2l0YWwg\nQ2VydGlmaWNhdGUgU2lnbmluZzEpMCcGA1UEAxMgU3RhcnRDb20gQ2VydGlmaWNh\ndGlvbiBBdXRob3JpdHkwHhcNMDYwOTE3MTk0NjM2WhcNMzYwOTE3MTk0NjM2WjB9\nMQswCQYDVQQGEwJJTDEWMBQGA1UEChMNU3RhcnRDb20gTHRkLjErMCkGA1UECxMi\nU2VjdXJlIERpZ2l0YWwgQ2VydGlmaWNhdGUgU2lnbmluZzEpMCcGA1UEAxMgU3Rh\ncnRDb20gQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwggIiMA0GCSqGSIb3DQEBAQUA\nA4ICDwAwggIKAoICAQDBiNsJvGxGfHiflXu1M5DycmLWwTYgIiRezul38kMKogZk\npMyONvg45iPwbm2xPN1yo4UcodM9tDMr0y+v/uqwQVlntsQGfQqedIXWeUyAN3rf\nOQVSWff0G0ZDpNKFhdLDcfN1YjS6LIp/Ho/u7TTQEceWzVI9ujPW3U3eCztKS5/C\nJi/6tRYccjV3yjxd5srhJosaNnZcAdt0FCX+7bWgiA/deMotHweXMAEtcnn6RtYT\nKqi5pquDSR3l8u/d5AGOGAqPY1MWhWKpDhk6zLVmpsJrdAfkK+F2PrRt2PZE4XNi\nHzvEvqBTViVsUQn3qqvKv3b9bZvzndu/PWa8DFaqr5hIlTpL36dYUNk4dalb6kMM\nAv+Z6+hsTXBbKWWc3apdzK8BMewM69KN6Oqce+Zu9ydmDBpI125C4z/eIT574Q1w\n+2OqqGwaVLRcJXrJosmLFqa7LH4XXgVNWG4SHQHuEhANxjJ/GP/89PrNbpHoNkm+\nGkhpi8KWTRoSsmkXwQqQ1vp5Iki/untp+HDH+no32NgN0nZPV/+Qt+OR0t3vwmC3\nZzrd/qqc8NSLf3Iizsafl7b4r4qgEKjZ+xjGtrVcUjyJthkqcwEKDwOzEmDyei+B\n26Nu/yYwl/WL3YlXtq09s68rxbd2AvCl1iuahhQqcvbjM4xdCUsT37uMdBNSSwID\nAQABo4ICUjCCAk4wDAYDVR0TBAUwAwEB/zALBgNVHQ8EBAMCAa4wHQYDVR0OBBYE\nFE4L7xqkQFulF2mHMMo0aEPQQa7yMGQGA1UdHwRdMFswLKAqoCiGJmh0dHA6Ly9j\nZXJ0LnN0YXJ0Y29tLm9yZy9zZnNjYS1jcmwuY3JsMCugKaAnhiVodHRwOi8vY3Js\nLnN0YXJ0Y29tLm9yZy9zZnNjYS1jcmwuY3JsMIIBXQYDVR0gBIIBVDCCAVAwggFM\nBgsrBgEEAYG1NwEBATCCATswLwYIKwYBBQUHAgEWI2h0dHA6Ly9jZXJ0LnN0YXJ0\nY29tLm9yZy9wb2xpY3kucGRmMDUGCCsGAQUFBwIBFilodHRwOi8vY2VydC5zdGFy\ndGNvbS5vcmcvaW50ZXJtZWRpYXRlLnBkZjCB0AYIKwYBBQUHAgIwgcMwJxYgU3Rh\ncnQgQ29tbWVyY2lhbCAoU3RhcnRDb20pIEx0ZC4wAwIBARqBl0xpbWl0ZWQgTGlh\nYmlsaXR5LCByZWFkIHRoZSBzZWN0aW9uICpMZWdhbCBMaW1pdGF0aW9ucyogb2Yg\ndGhlIFN0YXJ0Q29tIENlcnRpZmljYXRpb24gQXV0aG9yaXR5IFBvbGljeSBhdmFp\nbGFibGUgYXQgaHR0cDovL2NlcnQuc3RhcnRjb20ub3JnL3BvbGljeS5wZGYwEQYJ\nYIZIAYb4QgEBBAQDAgAHMDgGCWCGSAGG+EIBDQQrFilTdGFydENvbSBGcmVlIFNT\nTCBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTANBgkqhkiG9w0BAQUFAAOCAgEAFmyZ\n9GYMNPXQhV59CuzaEE44HF7fpiUFS5Eyweg78T3dRAlbB0mKKctmArexmvclmAk8\njhvh3TaHK0u7aNM5Zj2gJsfyOZEdUauCe37Vzlrk4gNXcGmXCPleWKYK34wGmkUW\nFjgKXlf2Ysd6AgXmvB618p70qSmD+LIU424oh0TDkBreOKk8rENNZEXO3SipXPJz\newT4F+irsfMuXGRuczE6Eri8sxHkfY+BUZo7jYn0TZNmezwD7dOaHZrzZVD1oNB1\nny+v8OqCQ5j4aZyJecRDjkZy42Q2Eq/3JR44iZB3fsNrarnDy0RLrHiQi+fHLB5L\nEUTINFInzQpdn4XBidUaePKVEFMy3YCEZnXZtWgo+2EuvoSoOMCZEoalHmdkrQYu\nL6lwhceWD3yJZfWOQ1QOq92lgDmUYMA0yZZwLKMS9R9Ie70cfmu3nZD0Ijuu+Pwq\nyvqCUqDvr0tVk+vBtfAii6w0TiYiBKGHLHVKt+V9E9e4DGTANtLJL4YSjCMJwRuC\nO3NJo2pXh5Tl1njFmUNj403gdy3hZZlyaQQaRwnmDwFWJPsfvw55qVguucQJAX6V\num0ABj6y6koQOdjQK/W/7HW/lwLFCRsI3FU34oH7N4RDYiDK51ZLZer+bMEkkySh\nNOsF/5oirpt9P/FlUQqmMGqz9IgcgA38corog14=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIHhzCCBW+gAwIBAgIBLTANBgkqhkiG9w0BAQsFADB9MQswCQYDVQQGEwJJTDEW\nMBQGA1UEChMNU3RhcnRDb20gTHRkLjErMCkGA1UECxMiU2VjdXJlIERpZ2l0YWwg\nQ2VydGlmaWNhdGUgU2lnbmluZzEpMCcGA1UEAxMgU3RhcnRDb20gQ2VydGlmaWNh\ndGlvbiBBdXRob3JpdHkwHhcNMDYwOTE3MTk0NjM3WhcNMzYwOTE3MTk0NjM2WjB9\nMQswCQYDVQQGEwJJTDEWMBQGA1UEChMNU3RhcnRDb20gTHRkLjErMCkGA1UECxMi\nU2VjdXJlIERpZ2l0YWwgQ2VydGlmaWNhdGUgU2lnbmluZzEpMCcGA1UEAxMgU3Rh\ncnRDb20gQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwggIiMA0GCSqGSIb3DQEBAQUA\nA4ICDwAwggIKAoICAQDBiNsJvGxGfHiflXu1M5DycmLWwTYgIiRezul38kMKogZk\npMyONvg45iPwbm2xPN1yo4UcodM9tDMr0y+v/uqwQVlntsQGfQqedIXWeUyAN3rf\nOQVSWff0G0ZDpNKFhdLDcfN1YjS6LIp/Ho/u7TTQEceWzVI9ujPW3U3eCztKS5/C\nJi/6tRYccjV3yjxd5srhJosaNnZcAdt0FCX+7bWgiA/deMotHweXMAEtcnn6RtYT\nKqi5pquDSR3l8u/d5AGOGAqPY1MWhWKpDhk6zLVmpsJrdAfkK+F2PrRt2PZE4XNi\nHzvEvqBTViVsUQn3qqvKv3b9bZvzndu/PWa8DFaqr5hIlTpL36dYUNk4dalb6kMM\nAv+Z6+hsTXBbKWWc3apdzK8BMewM69KN6Oqce+Zu9ydmDBpI125C4z/eIT574Q1w\n+2OqqGwaVLRcJXrJosmLFqa7LH4XXgVNWG4SHQHuEhANxjJ/GP/89PrNbpHoNkm+\nGkhpi8KWTRoSsmkXwQqQ1vp5Iki/untp+HDH+no32NgN0nZPV/+Qt+OR0t3vwmC3\nZzrd/qqc8NSLf3Iizsafl7b4r4qgEKjZ+xjGtrVcUjyJthkqcwEKDwOzEmDyei+B\n26Nu/yYwl/WL3YlXtq09s68rxbd2AvCl1iuahhQqcvbjM4xdCUsT37uMdBNSSwID\nAQABo4ICEDCCAgwwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYwHQYD\nVR0OBBYEFE4L7xqkQFulF2mHMMo0aEPQQa7yMB8GA1UdIwQYMBaAFE4L7xqkQFul\nF2mHMMo0aEPQQa7yMIIBWgYDVR0gBIIBUTCCAU0wggFJBgsrBgEEAYG1NwEBATCC\nATgwLgYIKwYBBQUHAgEWImh0dHA6Ly93d3cuc3RhcnRzc2wuY29tL3BvbGljeS5w\nZGYwNAYIKwYBBQUHAgEWKGh0dHA6Ly93d3cuc3RhcnRzc2wuY29tL2ludGVybWVk\naWF0ZS5wZGYwgc8GCCsGAQUFBwICMIHCMCcWIFN0YXJ0IENvbW1lcmNpYWwgKFN0\nYXJ0Q29tKSBMdGQuMAMCAQEagZZMaW1pdGVkIExpYWJpbGl0eSwgcmVhZCB0aGUg\nc2VjdGlvbiAqTGVnYWwgTGltaXRhdGlvbnMqIG9mIHRoZSBTdGFydENvbSBDZXJ0\naWZpY2F0aW9uIEF1dGhvcml0eSBQb2xpY3kgYXZhaWxhYmxlIGF0IGh0dHA6Ly93\nd3cuc3RhcnRzc2wuY29tL3BvbGljeS5wZGYwEQYJYIZIAYb4QgEBBAQDAgAHMDgG\nCWCGSAGG+EIBDQQrFilTdGFydENvbSBGcmVlIFNTTCBDZXJ0aWZpY2F0aW9uIEF1\ndGhvcml0eTANBgkqhkiG9w0BAQsFAAOCAgEAjo/n3JR5fPGFf59Jb2vKXfuM/gTF\nwWLRfUKKvFO3lANmMD+x5wqnUCBVJX92ehQN6wQOQOY+2IirByeDqXWmN3PH/UvS\nTa0XQMhGvjt/UfzDtgUx3M2FIk5xt/JxXrAaxrqTi3iSSoX4eA+D/i+tLPfkpLst\n0OcNOrg+zvZ49q5HJMqjNTbOx8aHmNrs++myziebiMMEofYLWWivydsQD032ZGNc\npRJvkrKTlMeIFw6Ttn5ii5B/q06f/ON1FE8qMt9bDeD1e5MNq6HPh+GlBEXoPBKl\nCcWw0bdT82AUuoVpaiF8H3VhFyAXe2w7QSlc4axa0c2Mm+tgHRns9+Ww2vl5GKVF\nP0lDV9LdJNUso/2RjSe15esUBppMeyG7Oq0wBhjA2MFrLH9ZXF2RsXAiV+uKa0hK\n1Q8p7MZAwC+ITGgBF3f0JBlPvfrhsiAhS90a2Cl9qrjeVOwhVYBsHvUwyKMQ5bLm\nKhQxw4UtjJixhlpPiVktucf3HMiKf8CdBUrmQk9io20ppB+Fq9vlgcitKj1MXVuE\nJnHEhV5xJMqlG2zYYdMa4FTbzrqpMrUi9nNBCV24F10OD5mQ1kfabwo6YigUZ4LZ\n8dCAWZvLMdibD4x3TrVoivJs9iQOLWxwxXPR3hTQcY+203sC9uO41Alua551hDnm\nfyWl8kgAwKQB2j8=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIFYzCCA0ugAwIBAgIBOzANBgkqhkiG9w0BAQsFADBTMQswCQYDVQQGEwJJTDEW\nMBQGA1UEChMNU3RhcnRDb20gTHRkLjEsMCoGA1UEAxMjU3RhcnRDb20gQ2VydGlm\naWNhdGlvbiBBdXRob3JpdHkgRzIwHhcNMTAwMTAxMDEwMDAxWhcNMzkxMjMxMjM1\nOTAxWjBTMQswCQYDVQQGEwJJTDEWMBQGA1UEChMNU3RhcnRDb20gTHRkLjEsMCoG\nA1UEAxMjU3RhcnRDb20gQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgRzIwggIiMA0G\nCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQC2iTZbB7cgNr2Cu+EWIAOVeq8Oo1XJ\nJZlKxdBWQYeQTSFgpBSHO839sj60ZwNq7eEPS8CRhXBF4EKe3ikj1AENoBB5uNsD\nvfOpL9HG4A/LnooUCri99lZi8cVytjIl2bLzvWXFDSxu1ZJvGIsAQRSCb0AgJnoo\nD/Uefyf3lLE3PbfHkffiAez9lInhzG7TNtYKGXmu1zSCZf98Qru23QumNK9LYP5/\nQ0kGi4xDuFby2X8hQxfqp0iVAXV16iulQ5XqFYSdCI0mblWbq9zSOdIxHWDirMxW\nRST1HFSr7obdljKF+ExP6JV2tgXdNiNnvP8V4so75qbsO+wmETRIjfaAKxojAuuK\nHDp2KntWFhxyKrOq42ClAJ8Em+JvHhRYW6Vsi1g8w7pOOlz34ZYrPu8HvKTlXcxN\nnw3h3Kq74W4a7I/htkxNeXJdFzULHdfBR9qWJODQcqhaX2YtENwvKhOuJv4KHBnM\n0D4LnMgJLvlblnpHnOl68wVQdJVznjAJ85eCXuaPOQgeWeU1FEIT/wCc976qUM/i\nUUjXuG+v+E5+M5iSFGI6dWPPe/regjupuznixL0sAA7IF6wT700ljtizkC+p2il9\nHa90OrInwMEePnWjFqmveiJdnxMaz6eg6+OGCtP95paV1yPIN93EfKo2rJgaErHg\nTuixO/XWb/Ew1wIDAQABo0IwQDAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQE\nAwIBBjAdBgNVHQ4EFgQUS8W0QGutHLOlHGVuRjaJhwUMDrYwDQYJKoZIhvcNAQEL\nBQADggIBAHNXPyzVlTJ+N9uWkusZXn5T50HsEbZH77Xe7XRcxfGOSeD8bpkTzZ+K\n2s06Ctg6Wgk/XzTQLwPSZh0avZyQN8gMjgdalEVGKua+etqhqaRpEpKwfTbURIfX\nUfEpY9Z1zRbkJ4kd+MIySP3bmdCPX1R0zKxnNBFi2QwKN4fRoxdIjtIXHfbX/dtl\n6/2o1PXWT6RbdejF0mCy2wl+JYt7ulKSnj7oxXehPOBKc2thz4bcQ///If4jXSRK\n9dNtD2IEBVeC2m6kMyV5Sy5UGYvMLD0w6dEG/+gyRr61M3Z3qAFdlsHB1b6uJcDJ\nHgoJIIihDsnzb02CVAAgp9KP5DlUFy6NHrgbuxu9mk47EDTcnIhT76IxW1hPkWLI\nwpqazRVdOKnWvvgTtZ8SafJQYqz7Fzf07rh1Z2AQ+4NQ+US1dZxAF7L+/XldblhY\nXzD8AK6vM8EOTmy6p6ahfzLbOOCxchcKK5HsamMm7YnUeMx0HgX4a/6ManY5Ka5l\nIxKVCCIcl85bBu4M4ru8H0ST9tg4RQUh7eStqxK2A6RCLi3ECToDZ2mEmuFZkIoo\nhdVddLHRDiBYmxOlsGOm7XtH/UVVMKTumtTm4ofvmMkyghEpIrwACjFeLQ/Ajulr\nso8uBtjRkcfGEvRM/TAXw8HaOFvjqermobp573PYtlNXLfbQ4ddI\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIFujCCA6KgAwIBAgIJALtAHEP1Xk+wMA0GCSqGSIb3DQEBBQUAMEUxCzAJBgNV\nBAYTAkNIMRUwEwYDVQQKEwxTd2lzc1NpZ24gQUcxHzAdBgNVBAMTFlN3aXNzU2ln\nbiBHb2xkIENBIC0gRzIwHhcNMDYxMDI1MDgzMDM1WhcNMzYxMDI1MDgzMDM1WjBF\nMQswCQYDVQQGEwJDSDEVMBMGA1UEChMMU3dpc3NTaWduIEFHMR8wHQYDVQQDExZT\nd2lzc1NpZ24gR29sZCBDQSAtIEcyMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIIC\nCgKCAgEAr+TufoskDhJuqVAtFkQ7kpJcyrhdhJJCEyq8ZVeCQD5XJM1QiyUqt2/8\n76LQwB8CJEoTlo8jE+YoWACjR8cGp4QjK7u9lit/VcyLwVcfDmJlD909Vopz2q5+\nbbqBHH5CjCA12UNNhPqE21Is8w4ndwtrvxEvcnifLtg+5hg3Wipy+dpikJKVyh+c\n6bM8K8vzARO/Ws/BtQpgvd21mWRTuKCWs2/iJneRjOBiEAKfNA+k1ZIzUd6+jbqE\nemA8atufK+ze3gE/bk3lUIbLtK/tREDFylqM2tIrfKjuvqblCqoOpd8FUrdVxyJd\nMmqXl2MT28nbeTZ7hTpKxVKJ+STnnXepgv9VHKVxaSvRAiTysybUa9oEVeXBCsdt\nMDeQKuSeFDNeFhdVxVu1yzSJkvGdJo+hB9TGsnhQ2wwMC3wLjEHXuendjIj3o02y\nMszYF9rNt85mndT9Xv+9lz4pded+p2JYryU0pUHHPbwNUMoDAw8IWh+Vc3hiv69y\nFGkOpeUDDniOJihC8AcLYiAQZzlG+qkDzAQ4embvIIO1jEpWjpEA/I5cgt6IoMPi\naG59je883WX0XaxR7ySArqpWl2/5rX3aYT+YdzylkbYcjCbaZaIJbcHiVOO5ykxM\ngI93e2CaHt+28kgeDrpOVG2Y4OGiGqJ3UM/EY5LsRxmd6+ZrzsECAwEAAaOBrDCB\nqTAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUWyV7\nlqRlUX64OfPAeGZe6Drn8O4wHwYDVR0jBBgwFoAUWyV7lqRlUX64OfPAeGZe6Drn\n8O4wRgYDVR0gBD8wPTA7BglghXQBWQECAQEwLjAsBggrBgEFBQcCARYgaHR0cDov\nL3JlcG9zaXRvcnkuc3dpc3NzaWduLmNvbS8wDQYJKoZIhvcNAQEFBQADggIBACe6\n45R88a7A3hfm5djV9VSwg/S7zV4Fe0+fdWavPOhWfvxyeDgD2StiGwC5+OlgzczO\nUYrHUDFu4Up+GC9pWbY9ZIEr44OE5iKHjn3g7gKZYbge9LgriBIWhMIxkziWMaa5\nO1M/wySTVltpkuzFwbs4AOPsF6m43Md8AYOfMke6UiI0HTJ6CVanfCU2qT1L2sCC\nbwq7EsiHSycR+R4tx5M/nttfJmtS2S6K8RTGRI0Vqbe/vd6mGu6uLftIdxf+u+yv\nGPUqUfA5hJeVbG4bwyvEdGB5JbAKJ9/fXtI5z0V9QkvfsywexcZdylU6oJxpmo/a\n77KwPJ+HbBIrZXAVUjEaJM9vMSNQH4xPjyPDdEFjHFWoFN0+4FFQz/EbMFYOkrCC\nhdiDyyJkvC24JdVUorgG6q2SpCSgwYa1ShNqR88uC1aVVMvOmttqtKay20EIhid3\n92qgQmwLOM7XdVAyksLfKzAiSNDVQTglXaTpXZ/GlHXQRf0wl0OPkKsKx4ZzYEpp\nLd6leNcG2mqeSz53OiATIgHQv2ieY2BrNU0LbbqhPcCT4H8js1WtciVORvnSFu+w\nZMEBnunKoGqYDs/YYPIvSbjkQuE4NRb0yG5P94FW6LqjviOvrv1vA+ACOzB2+htt\nQc8Bsem4yWb02ybzOqR08kkkW8mw0FfB+j564ZfJ\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIFwTCCA6mgAwIBAgIITrIAZwwDXU8wDQYJKoZIhvcNAQEFBQAwSTELMAkGA1UE\nBhMCQ0gxFTATBgNVBAoTDFN3aXNzU2lnbiBBRzEjMCEGA1UEAxMaU3dpc3NTaWdu\nIFBsYXRpbnVtIENBIC0gRzIwHhcNMDYxMDI1MDgzNjAwWhcNMzYxMDI1MDgzNjAw\nWjBJMQswCQYDVQQGEwJDSDEVMBMGA1UEChMMU3dpc3NTaWduIEFHMSMwIQYDVQQD\nExpTd2lzc1NpZ24gUGxhdGludW0gQ0EgLSBHMjCCAiIwDQYJKoZIhvcNAQEBBQAD\nggIPADCCAgoCggIBAMrfogLi2vj8Bxax3mCq3pZcZB/HL37PZ/pEQtZ2Y5Wu669y\nIIpFR4ZieIbWIDkm9K6j/SPnpZy1IiEZtzeTIsBQnIJ71NUERFzLtMKfkr4k2Htn\nIuJpX+UFeNSH2XFwMyVTtIc7KZAoNppVRDBopIOXfw0enHb/FZ1glwCNioUD7IC+\n6ixuEFGSzH7VozPY1kneWCqv9hbrS3uQMpe5up1Y8fhXSQQeol0GcN1x2/ndi5ob\njM89o03Oy3z2u5yg+gnOI2Ky6Q0f4nIoj5+saCB9bzuohTEJfwvH6GXp43gOCWcw\nizSC+13gzJ2BbWLuCB4ELE6b7P6pT1/9aXjvCR+htL/68++QHkwFix7qepF6w9fl\n+zC8bBsQWJj3Gl/QKTIDE0ZNYWqFTFJ0LwYfexHihJfGmfNtf9dng34TaNhxKFrY\nzt3oEBSa/m0jh26OWnA81Y0JAKeqvLAxN23IhBQeW71FYyBrS3SMvds6DsHPWhaP\npZjydomyExI7C3d3rLvlPClKknLKYRorXkzig3R3+jVIeoVNjZpTxN94ypeRSCtF\nKwH3HBqi7Ri6Cr2D+m+8jVeTO9TUps4e8aCxzqv9KyiaTxvXw3LbpMS/XUz13XuW\nae5ogObnmLo2t/5u7Su9IPhlGdpVCX4l3P5hYnL5fhgC72O00Puv5TtjjGePAgMB\nAAGjgawwgakwDgYDVR0PAQH/BAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0O\nBBYEFFCvzAeHFUdvOMW0ZdHelarp35zMMB8GA1UdIwQYMBaAFFCvzAeHFUdvOMW0\nZdHelarp35zMMEYGA1UdIAQ/MD0wOwYJYIV0AVkBAQEBMC4wLAYIKwYBBQUHAgEW\nIGh0dHA6Ly9yZXBvc2l0b3J5LnN3aXNzc2lnbi5jb20vMA0GCSqGSIb3DQEBBQUA\nA4ICAQAIhab1Fgz8RBrBY+D5VUYI/HAcQiiWjrfFwUF1TglxeeVtlspLpYhg0DB0\nuMoI3LQwnkAHFmtllXcBrqS3NQuB2nEVqXQXOHtYyvkv+8Bldo1bAbl93oI9ZLi+\nFHSjClTTLJUYFzX1UWs/j6KWYTl4a0vlpqD4U99REJNi54Av4tHgvI42Rncz7Lj7\njposiU0xEQ8mngS7twSNC/K5/FqdOxa3L8iYq/6KUFkuozv8KV2LwUvJ4ooTHbG/\nu0IdUt1O2BReEMYxB+9xJ/cbOQncguqLs5WGXv312l0xpuAxtpTmREl0xRbl9x8D\nYSjFyMsSoEJL+WuICI20MhjzdZ/EfwBPBZWcoxcCw7NTm6ogOSkrZvqdr16zktK1\npuEa+S1BaYEUtLS17Yk9zvupnTVCRLEcFHOBzyoBNZox1S2PbYTfgE1X4z/FhHXa\nicYwu+uPyyIIoK6q8QNsOktNCaUOcsZWayFCTiMlFGiudgp8DAdwZPmaL/YFOSbG\nDI8Zf0NebvRbFS/bYV3mZy8/CJT5YLSYMdp08YSTcU1f+2BY0fvEwW2JorsgH51x\nkcsymxM9Pn2SUjWskpSi0xjCfMfqr3YFFt1nJ8J+HAciIfNAChs0B0QTwoRqjt8Z\nWr9/6x3iGjjRXK9HkmuAtTClyY3YqzGBH9/CZjfTk6mFhnll0g==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIFvTCCA6WgAwIBAgIITxvUL1S7L0swDQYJKoZIhvcNAQEFBQAwRzELMAkGA1UE\nBhMCQ0gxFTATBgNVBAoTDFN3aXNzU2lnbiBBRzEhMB8GA1UEAxMYU3dpc3NTaWdu\nIFNpbHZlciBDQSAtIEcyMB4XDTA2MTAyNTA4MzI0NloXDTM2MTAyNTA4MzI0Nlow\nRzELMAkGA1UEBhMCQ0gxFTATBgNVBAoTDFN3aXNzU2lnbiBBRzEhMB8GA1UEAxMY\nU3dpc3NTaWduIFNpbHZlciBDQSAtIEcyMIICIjANBgkqhkiG9w0BAQEFAAOCAg8A\nMIICCgKCAgEAxPGHf9N4Mfc4yfjDmUO8x/e8N+dOcbpLj6VzHVxumK4DV644N0Mv\nFz0fyM5oEMF4rhkDKxD6LHmD9ui5aLlV8gREpzn5/ASLHvGiTSf5YXu6t+WiE7br\nYT7QbNHm+/pe7R20nqA1W6GSy/BJkv6FCgU+5tkL4k+73JU3/JHpMjUi0R86TieF\nnbAVlDLaYQ1HTWBCrpJH6INaUFjpiou5XaHc3ZlKHzZnu0jkg7Y360g6rw9njxcH\n6ATK72oxh9TAtvmUcXtnZLi2kUpCe2UuMGoM9ZDulebyzYLs2aFK7PayS+VFheZt\neJMELpyCbTapxDFkH4aDCyr0NQp4yVXPQbBH6TCfmb5hqAaEuSh6XzjZG6k4sIN/\nc8HDO0gqgg8hm7jMqDXDhBuDsz6+pJVpATqJAHgE2cn0mRmrVn5bi4Y5FZGkECwJ\nMoBgs5PAKrYYC51+jUnyEEp/+dVGLxmSo5mnJqy7jDzmDrxHB9xzUfFwZC8I+bRH\nHTBsROopN4WSaGa8gzj+ezku01DwH/teYLappvonQfGbGHLy9YR0SslnxFSuSGTf\njNFusB3hB48IHpmccelM2KX3RxIfdNFRnobzwqIjQAtz20um53MGjMGg6cFZrEb6\n5i/4z3GcRm25xBWNOHkDRUjvxF3XCO6HOSKGsg0PWEP3calILv3q1h8CAwEAAaOB\nrDCBqTAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQU\nF6DNweRBtjpbO8tFnb0cwpj6hlgwHwYDVR0jBBgwFoAUF6DNweRBtjpbO8tFnb0c\nwpj6hlgwRgYDVR0gBD8wPTA7BglghXQBWQEDAQEwLjAsBggrBgEFBQcCARYgaHR0\ncDovL3JlcG9zaXRvcnkuc3dpc3NzaWduLmNvbS8wDQYJKoZIhvcNAQEFBQADggIB\nAHPGgeAn0i0P4JUw4ppBf1AsX19iYamGamkYDHRJ1l2E6kFSGG9YrVBWIGrGvShp\nWJHckRE1qTodvBqlYJ7YH39FkWnZfrt4csEGDyrOj4VwYaygzQu4OSlWhDJOhrs9\nxCrZ1x9y7v5RoSJBsXECYxqCsGKrXlcSH9/L3XWgwF15kIwb4FDm3jH+mHtwX6WQ\n2K34ArZv02DdQEsixT2tOnqfGhpHkXkzuoLcMmkDlm4fS/Bx/uNncqCxv1yL5PqZ\nIseEuRuNI5c/7SXgz2W79WEE790eslpBIlqhn10s6FvJbakMDHiqYMZWjwFaDGi8\naRl5xB9+lwW/xekkUV7U1UtT7dkjWjYDZaPBA61BMPNGG4WQr2W11bHkFlt4dR2X\nem1ZqSqPe97Dh4kQmUlzeMg9vVE1dCrV8X5pGyq7O70luJpaPXJhkGaH7gzWTdQR\ndAtq/gsD/KNVV4n+SsuuWxcFyPKNIzFTONItaj+CuY0IavdeQXRuwxF+B6wpYJE/\nOMpXEA29MC/HpeZBoNquBYeaoKRlbEwJDIm6uNO5wJOKMPqN5ZprFQFOZ6raYlY+\nhAhm0sQ2fac+EPyI4NSA5QC9qvNOBqN6avlicuMJT+ubDgEj8Z+7fNzcbBGXJbLy\ntGMU0gYqZ4yD9c7qB9iaah7s5Aq7KkzrCWA5zspi2C5u\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIF2TCCA8GgAwIBAgIQXAuFXAvnWUHfV8w/f52oNjANBgkqhkiG9w0BAQUFADBk\nMQswCQYDVQQGEwJjaDERMA8GA1UEChMIU3dpc3Njb20xJTAjBgNVBAsTHERpZ2l0\nYWwgQ2VydGlmaWNhdGUgU2VydmljZXMxGzAZBgNVBAMTElN3aXNzY29tIFJvb3Qg\nQ0EgMTAeFw0wNTA4MTgxMjA2MjBaFw0yNTA4MTgyMjA2MjBaMGQxCzAJBgNVBAYT\nAmNoMREwDwYDVQQKEwhTd2lzc2NvbTElMCMGA1UECxMcRGlnaXRhbCBDZXJ0aWZp\nY2F0ZSBTZXJ2aWNlczEbMBkGA1UEAxMSU3dpc3Njb20gUm9vdCBDQSAxMIICIjAN\nBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA0LmwqAzZuz8h+BvVM5OAFmUgdbI9\nm2BtRsiMMW8Xw/qabFbtPMWRV8PNq5ZJkCoZSx6jbVfd8StiKHVFXqrWW/oLJdih\nFvkcxC7mlSpnzNApbjyFNDhhSbEAn9Y6cV9Nbc5fuankiX9qUvrKm/LcqfmdmUc/\nTilftKaNXXsLmREDA/7n29uj/x2lzZAeAR81sH8A25Bvxn570e56eqeqDFdvpG3F\nEzuwpdntMhy0XmeLVNxzh+XTF3xmUHJd1BpYwdnP2IkCb6dJtDZd0KTeByy2dbco\nkdaXvij1mB7qWybJvbCXc9qukSbraMH5ORXWZ0sKbU/Lz7DkQnGMU3nn7uHbHaBu\nHYwadzVcFh4rUx80i9Fs/PJnB3r1re3WmquhsUvhzDdf/X/NTa64H5xD+SpYVUNF\nvJbNcA78yeNmuk6NO4HLFWR7uZToXTNShXEuT46iBhFRyePLoW4xCGQMwtI89Tbo\n19AOeCMgkckkKmUpWyL3Ic6DXqTz3kvTaI9GdVyDCW4pa8RwjPWd1yAv/0bSKzjC\nL3UcPX7ape8eYIVpQtPM+GP+HkM5haa2Y0EQs3MevNP6yn0WR+Kn1dCjigoIlmJW\nbjTb2QK5MHXjBNLnj8KwEUAKrNVxAmKLMb7dxiNYMUJDLXT5xp6mig/p/r+D5kNX\nJLrvRjSq1xIBOO0CAwEAAaOBhjCBgzAOBgNVHQ8BAf8EBAMCAYYwHQYDVR0hBBYw\nFDASBgdghXQBUwABBgdghXQBUwABMBIGA1UdEwEB/wQIMAYBAf8CAQcwHwYDVR0j\nBBgwFoAUAyUv3m+CATpcLNwroWm1Z9SM0/0wHQYDVR0OBBYEFAMlL95vggE6XCzc\nK6FptWfUjNP9MA0GCSqGSIb3DQEBBQUAA4ICAQA1EMvspgQNDQ/NwNurqPKIlwzf\nky9NfEBWMXrrpA9gzXrzvsMnjgM+pN0S734edAY8PzHyHHuRMSG08NBsl9Tpl7Ik\nVh5WwzW9iAUPWxAaZOHHgjD5Mq2eUCzneAXQMbFamIp1TpBcahQq4FJHgmDmHtqB\nsfsUC1rxn9KVuj7QG9YVHaO+htXbD8BJZLsuUBlL0iT43R4HVtA4oJVwIHaM190e\n3p9xxCPvgxNcoyQVTSlAPGrEqdi3pkSlDfTgnXceQHAm/NrZNuR55LU/vJtlvrsR\nls/bxig5OgjOR1tTWsWZ/l2p3e9M1MalrQLmjAcSHm8D0W+go/MpvRLHUKKwf4ip\nmXeascClOS5cfGniLLDqN2qk4Vrh9VDlg++luyqI54zb/W1elxmofmZ1a3Hqv7HH\nb6D0jqTsNFFbjCYDcKF31QESVwA12yPeDooomf2xEG9L/zgtYE4snOtnta1J7ksf\nrK/7DZBaZmBwXarNeNQk7shBoJMBkpxqnvy5JMWzFYJ+vq6VK+uxwNrjAWALXmms\nhFZhvnEX/h0TD/7Gh0Xp/jKgGg0TpJRVcaUWi7rKibCyx/yP2FS1k2Kdzs9Z+z0Y\nzirLNRWCXf9UIltxUvu3yf5gmwBBZPCqKuy2QkPOiWaByIufOVQDJdMWNY6E0F/6\nMBr1mmz0DlP5OlvRHA==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIF2TCCA8GgAwIBAgIQHp4o6Ejy5e/DfEoeWhhntjANBgkqhkiG9w0BAQsFADBk\nMQswCQYDVQQGEwJjaDERMA8GA1UEChMIU3dpc3Njb20xJTAjBgNVBAsTHERpZ2l0\nYWwgQ2VydGlmaWNhdGUgU2VydmljZXMxGzAZBgNVBAMTElN3aXNzY29tIFJvb3Qg\nQ0EgMjAeFw0xMTA2MjQwODM4MTRaFw0zMTA2MjUwNzM4MTRaMGQxCzAJBgNVBAYT\nAmNoMREwDwYDVQQKEwhTd2lzc2NvbTElMCMGA1UECxMcRGlnaXRhbCBDZXJ0aWZp\nY2F0ZSBTZXJ2aWNlczEbMBkGA1UEAxMSU3dpc3Njb20gUm9vdCBDQSAyMIICIjAN\nBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAlUJOhJ1R5tMJ6HJaI2nbeHCOFvEr\njw0DzpPMLgAIe6szjPTpQOYXTKueuEcUMncy3SgM3hhLX3af+Dk7/E6J2HzFZ++r\n0rk0X2s682Q2zsKwzxNoysjL67XiPS4h3+os1OD5cJZM/2pYmLcX5BtS5X4HAB1f\n2uY+lQS3aYg5oUFgJWFLlTloYhyxCwWJwDaCFCE/rtuh/bxvHGCGtlOUSbkrRsVP\nACu/obvLP+DHVxxX6NZp+MEkUp2IVd3Chy50I9AU/SpHWrumnf2U5NGKpV+GY3aF\ny6//SSj8gO1MedK75MDvAe5QQQg1I3ArqRa0jG6F6bYRzzHdUyYb3y1aSgJA/MTA\ntukxGggo5WDDH8SQjhBiYEQN7Aq+VRhxLKX0srwVYv8c474d2h5Xszx+zYIdkeNL\n6yxSNLCK/RJOlrDrcH+eOfdmQrGrrFLadkBXeyq96G4DsguAhYidDMfCd7Camlf0\nuPoTXGiTOmekl9AbmbeGMktg2M7v0Ax/lZ9vh0+Hio5fCHyqW/xavqGRn1V9TrAL\nacywlKinh/LTSlDcX3KwFnUey7QYYpqwpzmqm59m2I2mbJYV4+by+PGDYmy7Velh\nk6M99bFXi08jsJvllGov34zflVEpYKELKeRcVVi3qPyZ7iVNTA6z00yPhOgpD/0Q\nVAKFyPnlw4vP5w8CAwEAAaOBhjCBgzAOBgNVHQ8BAf8EBAMCAYYwHQYDVR0hBBYw\nFDASBgdghXQBUwIBBgdghXQBUwIBMBIGA1UdEwEB/wQIMAYBAf8CAQcwHQYDVR0O\nBBYEFE0mICKJS9PVpAqhb97iEoHF8TwuMB8GA1UdIwQYMBaAFE0mICKJS9PVpAqh\nb97iEoHF8TwuMA0GCSqGSIb3DQEBCwUAA4ICAQAyCrKkG8t9voJXiblqf/P0wS4R\nfbgZPnm3qKhyN2abGu2sEzsOv2LwnN+ee6FTSA5BesogpxcbtnjsQJHzQq0Qw1zv\n/2BZf82Fo4s9SBwlAjxnffUy6S8w5X2lejjQ82YqZh6NM4OKb3xuqFp1mrjX2lhI\nREeoTPpMSQpKwhI3qEAMw8jh0FcNlzKVxzqfl9NX+Ave5XLzo9v/tdhZsnPdTSpx\nsrpJ9csc1fV5yJmz/MFMdOO0vSk3FQQoHt5FRnDsr7p4DooqzgB53MBfGWcsa0vv\naGgLQ+OswWIJ76bdZWGgr4RVSJFSHMYlkSrQwSIjYVmvRRGFHQEkNI/Ps/8XciAT\nwoCqISxxOQ7Qj1zB09GOInJGTB2Wrk9xseEFKZZZ9LuedT3PDTcNYtsmjGOpI99n\nBjx8Oto0QuFmtEYE3saWmA9LSHokMnWRn6z3aOkquVVlzl1h0ydw2Df+n7mvoC5W\nt6NlUe07qxS/TFED6F+KBZvuim6c779o+sjaC+NCydAXFJy3SuCvkychVSa1ZC+N\n8f+mQAWFBVzKBxlcCxMoTFh/wqXvRdpg065lYZ1Tg3TCrvJcwhbtkj6EPnNgiLx2\n9CzP0H1907he0ZESEOnN3col49XtmS++dYFLJPlFRpTJKSFTnCZFqhMX5OfNeOI5\nwSsSnqaeG8XmDtkx2Q==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIF4DCCA8igAwIBAgIRAPL6ZOJ0Y9ON/RAdBB92ylgwDQYJKoZIhvcNAQELBQAw\nZzELMAkGA1UEBhMCY2gxETAPBgNVBAoTCFN3aXNzY29tMSUwIwYDVQQLExxEaWdp\ndGFsIENlcnRpZmljYXRlIFNlcnZpY2VzMR4wHAYDVQQDExVTd2lzc2NvbSBSb290\nIEVWIENBIDIwHhcNMTEwNjI0MDk0NTA4WhcNMzEwNjI1MDg0NTA4WjBnMQswCQYD\nVQQGEwJjaDERMA8GA1UEChMIU3dpc3Njb20xJTAjBgNVBAsTHERpZ2l0YWwgQ2Vy\ndGlmaWNhdGUgU2VydmljZXMxHjAcBgNVBAMTFVN3aXNzY29tIFJvb3QgRVYgQ0Eg\nMjCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAMT3HS9X6lds93BdY7Bx\nUglgRCgzo3pOCvrY6myLURYaVa5UJsTMRQdBTxB5f3HSek4/OE6zAMaVylvNwSqD\n1ycfMQ4jFrclyxy0uYAyXhqdk/HoPGAsp15XGVhRXrwsVgu42O+LgrQ8uMIkqBPH\noCE2G3pXKSinLr9xJZDzRINpUKTk4RtiGZQJo/PDvO/0vezbE53PnUgJUmfANykR\nHvvSEaeFGHR55E+FFOtSN+KxRdjMDUN/rhPSays/p8LiqG12W0OfvrSdsyaGOx9/\n5fLoZigWJdBLlzin5M8J0TbDC77aO0RYjb7xnglrPvMyxyuHxuxenPaHZa0zKcQv\nidm5y8kDnftslFGXEBuGCxobP/YCfnvUxVFkKJ3106yDgYjTdLRZncHrYTNaRdHL\nOdAGalNgHa/2+2m8atwBz735j9m9W8E6X47aD0upm50qKGsaCnw8qyIL5XctcfaC\nNYGu+HuB5ur+rPQam3Rc6I8k9l2dRsQs0h4rIWqDJ2dVSqTjyDKXZpBy2uPUZC5f\n46Fq9mDU5zXNysRojddxyNMkM3OxbPlq4SjbX8Y96L5V5jcb7STZDxmPX2MYWFCB\nUWVv8p9+agTnNCRxunZLWB4ZvRVgRaoMEkABnRDixzgHcgplwLa7JSnaFp6LNYth\n7eVxV4O1PHGf40+/fh6Bn0GXAgMBAAGjgYYwgYMwDgYDVR0PAQH/BAQDAgGGMB0G\nA1UdIQQWMBQwEgYHYIV0AVMCAgYHYIV0AVMCAjASBgNVHRMBAf8ECDAGAQH/AgED\nMB0GA1UdDgQWBBRF2aWBbj2ITY1x0kbBbkUe88SAnTAfBgNVHSMEGDAWgBRF2aWB\nbj2ITY1x0kbBbkUe88SAnTANBgkqhkiG9w0BAQsFAAOCAgEAlDpzBp9SSzBc1P6x\nXCX5145v9Ydkn+0UjrgEjihLj6p7jjm02Vj2e6E1CqGdivdj5eu9OYLU43otb98T\nPLr+flaYC/NUn81ETm484T4VvwYmneTwkLbUwp4wLh/vx3rEUMfqe9pQy3omywC0\nWqu1kx+AiYQElY2NfwmTv9SoqORjbdlk5LgpWgi/UOGED1V7XwgiG/W9mR4U9s70\nWBCCswo9GcG/W6uqmdjyMb3lOGbcWAXH7WMaLgqXfIeTK7KK4/HsGOV1timH59yL\nGn602MnTihdsfSlEvoqq9X46Lmgxk7lq2prg2+kupYTNHAq4Sgj5nPFhJpiTt3tm\n7JFe3VE/23MPrQRYCd0EApUKPtN236YQHoA96M2kZNEzx5LH4k5E4wnJTsJdhw4S\nnr8PyQUQ3nqjsTzyP6WqJ3mtMX0f/fwZacXduT98zca0wjAefm6S139hdlqP65VN\nvBFuIXxZN5nQBrz5Bm0yFqXZaajh3DyAHmBR3NdUIR7KYndP+tiPsys6DXhyyWhB\nWkdKwqPrGtcKqzwyVcgKEZzfdNbwQBUdyLmPtTbFr/giuMod89a2GQ+fYWVq6nTI\nfI/DT11lgh/ZDYnadXL77/FHZxOzyNEZiCcmmpl5fx7kLD977vHeTYuWl8PVP3wb\nI+2ksx0WckNLIOFZfsLorSa/ovc=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIDwzCCAqugAwIBAgIBATANBgkqhkiG9w0BAQsFADCBgjELMAkGA1UEBhMCREUx\nKzApBgNVBAoMIlQtU3lzdGVtcyBFbnRlcnByaXNlIFNlcnZpY2VzIEdtYkgxHzAd\nBgNVBAsMFlQtU3lzdGVtcyBUcnVzdCBDZW50ZXIxJTAjBgNVBAMMHFQtVGVsZVNl\nYyBHbG9iYWxSb290IENsYXNzIDIwHhcNMDgxMDAxMTA0MDE0WhcNMzMxMDAxMjM1\nOTU5WjCBgjELMAkGA1UEBhMCREUxKzApBgNVBAoMIlQtU3lzdGVtcyBFbnRlcnBy\naXNlIFNlcnZpY2VzIEdtYkgxHzAdBgNVBAsMFlQtU3lzdGVtcyBUcnVzdCBDZW50\nZXIxJTAjBgNVBAMMHFQtVGVsZVNlYyBHbG9iYWxSb290IENsYXNzIDIwggEiMA0G\nCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCqX9obX+hzkeXaXPSi5kfl82hVYAUd\nAqSzm1nzHoqvNK38DcLZSBnuaY/JIPwhqgcZ7bBcrGXHX+0CfHt8LRvWurmAwhiC\nFoT6ZrAIxlQjgeTNuUk/9k9uN0goOA/FvudocP05l03Sx5iRUKrERLMjfTlH6VJi\n1hKTXrcxlkIF+3anHqP1wvzpesVsqXFP6st4vGCvx9702cu+fjOlbpSD8DT6Iavq\njnKgP6TeMFvvhk1qlVtDRKgQFRzlAVfFmPHmBiiRqiDFt1MmUUOyCxGVWOHAD3bZ\nwI18gfNycJ5v/hqO2V81xrJvNHy+SE/iWjnX2J14np+GPgNeGYtEotXHAgMBAAGj\nQjBAMA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgEGMB0GA1UdDgQWBBS/\nWSA2AHmgoCJrjNXyYdK4LMuCSjANBgkqhkiG9w0BAQsFAAOCAQEAMQOiYQsfdOhy\nNsZt+U2e+iKo4YFWz827n+qrkRk4r6p8FU3ztqONpfSO9kSpp+ghla0+AGIWiPAC\nuvxhI+YzmzB6azZie60EI4RYZeLbK4rnJVM3YlNfvNoBYimipidx5joifsFvHZVw\nIEoHNN/q/xWA5brXethbdXwFeilHfkCoMRN3zUA7tFFHei4R40cR3p1m0IvVVGb6\ng1XqfMIpiRvpb7PO4gWEyS8+eIVibslfwXhjdFjASBgMmTnrpMwatXlajRWc2BQN\n9noHV8cigwUtPJslJj0Ys6lDfMjIq2SPDqO/nBudMNva0Bkuqjzx+zOAduTNrRlP\nBSeOE6Fuwg==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIDwzCCAqugAwIBAgIBATANBgkqhkiG9w0BAQsFADCBgjELMAkGA1UEBhMCREUx\nKzApBgNVBAoMIlQtU3lzdGVtcyBFbnRlcnByaXNlIFNlcnZpY2VzIEdtYkgxHzAd\nBgNVBAsMFlQtU3lzdGVtcyBUcnVzdCBDZW50ZXIxJTAjBgNVBAMMHFQtVGVsZVNl\nYyBHbG9iYWxSb290IENsYXNzIDMwHhcNMDgxMDAxMTAyOTU2WhcNMzMxMDAxMjM1\nOTU5WjCBgjELMAkGA1UEBhMCREUxKzApBgNVBAoMIlQtU3lzdGVtcyBFbnRlcnBy\naXNlIFNlcnZpY2VzIEdtYkgxHzAdBgNVBAsMFlQtU3lzdGVtcyBUcnVzdCBDZW50\nZXIxJTAjBgNVBAMMHFQtVGVsZVNlYyBHbG9iYWxSb290IENsYXNzIDMwggEiMA0G\nCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC9dZPwYiJvJK7genasfb3ZJNW4t/zN\n8ELg63iIVl6bmlQdTQyK9tPPcPRStdiTBONGhnFBSivwKixVA9ZIw+A5OO3yXDw/\nRLyTPWGrTs0NvvAgJ1gORH8EGoel15YUNpDQSXuhdfsaa3Ox+M6pCSzyU9XDFES4\nhqX2iys52qMzVNn6chr3IhUciJFrf2blw2qAsCTz34ZFiP0Zf3WHHx+xGwpzJFu5\nZeAsVMhg02YXP+HMVDNzkQI6pn97djmiH5a2OK61yJN0HZ65tOVgnS9W0eDrXltM\nEnAMbEQgqxHY9Bn20pxSN+f6tsIxO0rUFJmtxxr1XV/6B7h8DR/Wgx6zAgMBAAGj\nQjBAMA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgEGMB0GA1UdDgQWBBS1\nA/d2O2GCahKqGFPrAyGUv/7OyjANBgkqhkiG9w0BAQsFAAOCAQEAVj3vlNW92nOy\nWL6ukK2YJ5f+AbGwUgC4TeQbIXQbfsDuXmkqJa9c1h3a0nnJ85cp4IaH3gRZD/FZ\n1GSFS5mvJQQeyUapl96Cshtwn5z2r3Ex3XsFpSzTucpH9sry9uetuUg/vBa3wW30\n6gmv7PO15wWeph6KU1HWk4HMdJP2udqmJQV0eVp+QD6CSyYRMG7hP0HHRwA11fXT\n91Q+gT3aSWqas+8QPebrb9HIIkfLzM8BMZLZGOMivgkeGj5asuRrDFR6fUNOuIml\ne9eiPZaGzPImNC1qkp2aGtAw4l1OBLBfiyB+d8E9lYLRRpo7PHi4b6HQDWSieB4p\nTpPDpFQUWw==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIEqjCCA5KgAwIBAgIOSkcAAQAC5aBd1j8AUb8wDQYJKoZIhvcNAQEFBQAwdjEL\nMAkGA1UEBhMCREUxHDAaBgNVBAoTE1RDIFRydXN0Q2VudGVyIEdtYkgxIjAgBgNV\nBAsTGVRDIFRydXN0Q2VudGVyIENsYXNzIDMgQ0ExJTAjBgNVBAMTHFRDIFRydXN0\nQ2VudGVyIENsYXNzIDMgQ0EgSUkwHhcNMDYwMTEyMTQ0MTU3WhcNMjUxMjMxMjI1\nOTU5WjB2MQswCQYDVQQGEwJERTEcMBoGA1UEChMTVEMgVHJ1c3RDZW50ZXIgR21i\nSDEiMCAGA1UECxMZVEMgVHJ1c3RDZW50ZXIgQ2xhc3MgMyBDQTElMCMGA1UEAxMc\nVEMgVHJ1c3RDZW50ZXIgQ2xhc3MgMyBDQSBJSTCCASIwDQYJKoZIhvcNAQEBBQAD\nggEPADCCAQoCggEBALTgu1G7OVyLBMVMeRwjhjEQY0NVJz/GRcekPewJDRoeIMJW\nHt4bNwcwIi9v8Qbxq63WyKthoy9DxLCyLfzDlml7forkzMA5EpBCYMnMNWju2l+Q\nVl/NHE1bWEnrDgFPZPosPIlY2C8u4rBo6SI7dYnWRBpl8huXJh0obazovVkdKyT2\n1oQDZogkAHhg8fir/gKya/si+zXmFtGt9i4S5Po1auUZuV3bOx4a+9P/FRQI2Alq\nukWdFHlgfa9Aigdzs5OW03Q0jTo3Kd5c7PXuLjHCINy+8U9/I1LZW+Jk2ZyqBwi1\nRb3R0DHBq1SfqdLDYmAD8bs5SpJKPQq5ncWg/jcCAwEAAaOCATQwggEwMA8GA1Ud\nEwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgEGMB0GA1UdDgQWBBTUovyfs8PYA9NX\nXAek0CSnwPIA1DCB7QYDVR0fBIHlMIHiMIHfoIHcoIHZhjVodHRwOi8vd3d3LnRy\ndXN0Y2VudGVyLmRlL2NybC92Mi90Y19jbGFzc18zX2NhX0lJLmNybIaBn2xkYXA6\nLy93d3cudHJ1c3RjZW50ZXIuZGUvQ049VEMlMjBUcnVzdENlbnRlciUyMENsYXNz\nJTIwMyUyMENBJTIwSUksTz1UQyUyMFRydXN0Q2VudGVyJTIwR21iSCxPVT1yb290\nY2VydHMsREM9dHJ1c3RjZW50ZXIsREM9ZGU/Y2VydGlmaWNhdGVSZXZvY2F0aW9u\nTGlzdD9iYXNlPzANBgkqhkiG9w0BAQUFAAOCAQEANmDkcPcGIEPZIxpC8vijsrlN\nirTzwppVMXzEO2eatN9NDoqTSheLG43KieHPOh6sHfGcMrSOWXaiQYUlN6AT0PV8\nTtXqluJucsG7Kv5sbviRmEb8yRtXW+rIGjs/sFGYPAfaLFkB2otE6OF0/ado3VS6\ng0bsyEa1+K+XwDsJHI/OcpY9M1ZwvJbL2NV9IJqDnxrcOfHFcqMRA/07QlIp2+gB\n95tejNaNhk4Z+rwcvsUhpYeeeC422wlxo3I0+GzjBgnyXlal092Y+tTmBvTwtiBj\nS+opvaqCZh77gaqnN60TGOaSw4HBM7uIHqHn4rS9MWwOUT1v+5ZWgOI2F9Hc5A==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIEPTCCAyWgAwIBAgIBATANBgkqhkiG9w0BAQUFADCBvzE/MD0GA1UEAww2VMOc\nUktUUlVTVCBFbGVrdHJvbmlrIFNlcnRpZmlrYSBIaXptZXQgU2HEn2xhecSxY8Sx\nc8SxMQswCQYDVQQGEwJUUjEPMA0GA1UEBwwGQW5rYXJhMV4wXAYDVQQKDFVUw5xS\nS1RSVVNUIEJpbGdpIMSwbGV0acWfaW0gdmUgQmlsacWfaW0gR8O8dmVubGnEn2kg\nSGl6bWV0bGVyaSBBLsWeLiAoYykgQXJhbMSxayAyMDA3MB4XDTA3MTIyNTE4Mzcx\nOVoXDTE3MTIyMjE4MzcxOVowgb8xPzA9BgNVBAMMNlTDnFJLVFJVU1QgRWxla3Ry\nb25payBTZXJ0aWZpa2EgSGl6bWV0IFNhxJ9sYXnEsWPEsXPEsTELMAkGA1UEBhMC\nVFIxDzANBgNVBAcMBkFua2FyYTFeMFwGA1UECgxVVMOcUktUUlVTVCBCaWxnaSDE\nsGxldGnFn2ltIHZlIEJpbGnFn2ltIEfDvHZlbmxpxJ9pIEhpem1ldGxlcmkgQS7F\nni4gKGMpIEFyYWzEsWsgMjAwNzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC\nggEBAKu3PgqMyKVYFeaK7yc9SrToJdPNM8Ig3BnuiD9NYvDdE3ePYakqtdTyuTFY\nKTsvP2qcb3N2Je40IIDu6rfwxArNK4aUyeNgsURSsloptJGXg9i3phQvKUmi8wUG\n+7RP2qFsmmaf8EMJyupyj+sA1zU511YXRxcw9L6/P8JorzZAwan0qafoEGsIiveG\nHtyaKhUG9qPw9ODHFNRRf8+0222vR5YXm3dx2KdxnSQM9pQ/hTEST7ruToK4uT6P\nIzdezKKqdfcYbwnTrqdUKDT74eA7YH2gvnmJhsifLfkKS8RQouf9eRbHegsYz85M\n733WB2+Y8a+xwXrXgTW4qhe04MsCAwEAAaNCMEAwHQYDVR0OBBYEFCnFkKslrxHk\nYb+j/4hhkeYO/pyBMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMBAf8EBTADAQH/MA0G\nCSqGSIb3DQEBBQUAA4IBAQAQDdr4Ouwo0RSVgrESLFF6QSU2TJ/sPx+EnWVUXKgW\nAkD6bho3hO9ynYYKVZ1WKKxmLNA6VpM0ByWtCLCPyA8JWcqdmBzlVPi5RX9ql2+I\naE1KBiY3iAIOtsbWcpnOa3faYjGkVh+uX4132l32iPwa2Z61gfAyuOOI0JzzaqC5\nmxRZNTZPz/OOXl0XrRWV2N2y1RVuAE6zS89mlOTgzbUF2mNXi+WzqtvALhyQRNsa\nXRik7r4EW5nVcV9VZWRi1aKbBFmGyGJ353yCRWo9F7/snXUMrqNvWtMvmDb08PUZ\nqxFdyKbjKlhqQgnDvZImZjINXQhVdP+MmNAKpoRq0Tl9\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIFQTCCAymgAwIBAgICDL4wDQYJKoZIhvcNAQELBQAwUTELMAkGA1UEBhMCVFcx\nEjAQBgNVBAoTCVRBSVdBTi1DQTEQMA4GA1UECxMHUm9vdCBDQTEcMBoGA1UEAxMT\nVFdDQSBHbG9iYWwgUm9vdCBDQTAeFw0xMjA2MjcwNjI4MzNaFw0zMDEyMzExNTU5\nNTlaMFExCzAJBgNVBAYTAlRXMRIwEAYDVQQKEwlUQUlXQU4tQ0ExEDAOBgNVBAsT\nB1Jvb3QgQ0ExHDAaBgNVBAMTE1RXQ0EgR2xvYmFsIFJvb3QgQ0EwggIiMA0GCSqG\nSIb3DQEBAQUAA4ICDwAwggIKAoICAQCwBdvI64zEbooh745NnHEKH1Jw7W2CnJfF\n10xORUnLQEK1EjRsGcJ0pDFfhQKX7EMzClPSnIyOt7h52yvVavKOZsTuKwEHktSz\n0ALfUPZVr2YOy+BHYC8rMjk1Ujoog/h7FsYYuGLWRyWRzvAZEk2tY/XTP3VfKfCh\nMBwqoJimFb3u/Rk28OKRQ4/6ytYQJ0lM793B8YVwm8rqqFpD/G2Gb3PpN0Wp8DbH\nzIh1HrtsBv+baz4X7GGqcXzGHaL3SekVtTzWoWH1EfcFbx39Eb7QMAfCKbAJTibc\n46KokWofwpFFiFzlmLhxpRUZyXx1EcxwdE8tmx2RRP1WKKD+u4ZqyPpcC1jcxkt2\nyKsi2XMPpfRaAok/T54igu6idFMqPVMnaR1sjjIsZAAmY2E2TqNGtz99sy2sbZCi\nlaLOz9qC5wc0GZbpuCGqKX6mOL6OKUohZnkfs8O1CWfe1tQHRvMq2uYiN2DLgbYP\noA/pyJV/v1WRBXrPPRXAb94JlAGD1zQbzECl8LibZ9WYkTunhHiVJqRaCPgrdLQA\nBDzfuBSO6N+pjWxnkjMdwLfS7JLIvgm/LCkFbwJrnu+8vyq8W8BQj0FwcYeyTbcE\nqYSjMq+u7msXi7Kx/mzhkIyIqJdIzshNy/MGz19qCkKxHh53L46g5pIOBvwFItIm\n4TFRfTLcDwIDAQABoyMwITAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB\n/zANBgkqhkiG9w0BAQsFAAOCAgEAXzSBdu+WHdXltdkCY4QWwa6gcFGn90xHNcgL\n1yg9iXHZqjNB6hQbbCEAwGxCGX6faVsgQt+i0trEfJdLjbDorMjupWkEmQqSpqsn\nLhpNgb+E1HAerUf+/UqdM+DyucRFCCEK2mlpc3INvjT+lIutwx4116KD7+U4x6WF\nH6vPNOw/KP4M8VeGTslV9xzU2KV9Bnpv1d8Q34FOIWWxtuEXeZVFBs5fzNxGiWNo\nRI2T9GRwoD2dKAXDOXC4Ynsg/eTb6QihuJ49CcdP+yz4k3ZB3lLg4VfSnQO8d57+\nnile98FRYB/e2guyLXW3Q0iT5/Z5xoRdgFlglPx4mI88k1HtQJAH32RjJMtOcQWh\n15QaiDLxInQirqWm2BJpTGCjAu4r7NRjkgtevi92a6O2JryPA9gK8kxkRr05YuWW\n6zRjESjMlfGt7+/cgFhI6Uu46mWs6fyAtbXIRfmswZ/ZuepiiI7E8UuDEq3mi4TW\nnsLrgxifarsbJGAzcMzs9zLzXNl5fe+epP7JI8Mk7hWSsT2RTyaGvWZzJBPqpK5j\nwa19hAM8EHiGG3njxPPyBJUgriOCxLM6AGK/5jYk4Ve6xx6QddVfP5VhK8E7zeWz\naGHQRiapIVJpLesux+t3zqY6tQMzT3bR51xUAV3LePTJDL/PEo4XLSNolOer/qmy\nKwbQBM0=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIDezCCAmOgAwIBAgIBATANBgkqhkiG9w0BAQUFADBfMQswCQYDVQQGEwJUVzES\nMBAGA1UECgwJVEFJV0FOLUNBMRAwDgYDVQQLDAdSb290IENBMSowKAYDVQQDDCFU\nV0NBIFJvb3QgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMDgwODI4MDcyNDMz\nWhcNMzAxMjMxMTU1OTU5WjBfMQswCQYDVQQGEwJUVzESMBAGA1UECgwJVEFJV0FO\nLUNBMRAwDgYDVQQLDAdSb290IENBMSowKAYDVQQDDCFUV0NBIFJvb3QgQ2VydGlm\naWNhdGlvbiBBdXRob3JpdHkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIB\nAQCwfnK4pAOU5qfeCTiRShFAh6d8WWQUe7UREN3+v9XAu1bihSX0NXIP+FPQQeFE\nAcK0HMMxQhZHhTMidrIKbw/lJVBPhYa+v5guEGcevhEFhgWQxFnQfHgQsIBct+HH\nK3XLfJ+utdGdIzdjp9xCoi2SBBtQwXu4PhvJVgSLL1KbralW6cH/ralYhzC2gfeX\nRfwZVzsrb+RH9JlF/h3x+JejiB03HFyP4HYlmlD4oFT/RJB2I9IyxsOrBr/8+7/z\nrX2SYgJbKdM1o5OaQ2RgXbL6Mv87BK9NQGr5x+PvI/1ry+UPizgN7gr8/g+YnzAx\n3WxSZfmLgb4i4RxYA7qRG4kHAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNV\nHRMBAf8EBTADAQH/MB0GA1UdDgQWBBRqOFsmjd6LWvJPelSDGRjjCDWmujANBgkq\nhkiG9w0BAQUFAAOCAQEAPNV3PdrfibqHDAhUaiBQkr6wQT25JmSDCi/oQMCXKCeC\nMErJk/9q56YAf4lCmtYR5VPOL8zy2gXE/uJQxDqGfczafhAJO5I1KlOy/usrBdls\nXebQ79NqZp4VKIV66IIArB6nCWlWQtNoURi+VJq/REG6Sb4gumlc7rh3zc5sH62D\nlhh9DrUUOYTxKOkto557HnpyWoOzeW/vtPzQCqVYT0bf+215WfKEIlKuD8z7fDvn\naspHYcN6+NOSBB+4IIThNlQWx0DeO4pz3N/GCUzf7Nr/1FNCocnyYh0igzyXxfkZ\nYiesZSLX0zzG5Y6yU8xJzrww/nsOM5D77dIUkR8Hrw==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIFcjCCA1qgAwIBAgIQH51ZWtcvwgZEpYAIaeNe9jANBgkqhkiG9w0BAQUFADA/\nMQswCQYDVQQGEwJUVzEwMC4GA1UECgwnR292ZXJubWVudCBSb290IENlcnRpZmlj\nYXRpb24gQXV0aG9yaXR5MB4XDTAyMTIwNTEzMjMzM1oXDTMyMTIwNTEzMjMzM1ow\nPzELMAkGA1UEBhMCVFcxMDAuBgNVBAoMJ0dvdmVybm1lbnQgUm9vdCBDZXJ0aWZp\nY2F0aW9uIEF1dGhvcml0eTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIB\nAJoluOzMonWoe/fOW1mKydGGEghU7Jzy50b2iPN86aXfTEc2pBsBHH8eV4qNw8XR\nIePaJD9IK/ufLqGU5ywck9G/GwGHU5nOp/UKIXZ3/6m3xnOUT0b3EEk3+qhZSV1q\ngQdW8or5BtD3cCJNtLdBuTK4sfCxw5w/cP1T3YGq2GN49thTbqGsaoQkclSGxtKy\nyhwOeYHWtXBiCAEuTk8O1RGvqa/lmr/czIdtJuTJV6L7lvnM4T9TjGxMfptTCAts\nF/tnyMKtsc2AtJfcdgEWFelq16TheEfOhtX7MfP6Mb40qij7cEwdScevLJ1tZqa2\njWR+tSBqnTuBto9AAGdLiYa4zGX+FVPpBMHWXx1E1wovJ5pGfaENda1UhhXcSTvx\nls4Pm6Dso3pdvtUqdULle96ltqqvKKyskKw4t9VoNSZ63Pc78/1Fm9G7Q3hub/FC\nVGqY8A2tl+lSXunVanLeavcbYBT0peS2cWeqH+riTcFCQP5nRhc4L0c/cZyu5SHK\nYS1tB6iEfC3uUSXxY5Ce/eFXiGvviiNtsea9P63RPZYLhY3Naye7twWb7LuRqQoH\nEgKXTiCQ8P8NHuJBO9NAOueNXdpm5AKwB1KYXA6OM5zCppX7VRluTI6uSw+9wThN\nXo+EHWbNxWCWtFJaBYmOlXqYwZE8lSOyDvR5tMl8wUohAgMBAAGjajBoMB0GA1Ud\nDgQWBBTMzO/MKWCkO7GStjz6MmKPrCUVOzAMBgNVHRMEBTADAQH/MDkGBGcqBwAE\nMTAvMC0CAQAwCQYFKw4DAhoFADAHBgVnKgMAAAQUA5vwIhP/lSg209yewDL7MTqK\nUWUwDQYJKoZIhvcNAQEFBQADggIBAECASvomyc5eMN1PhnR2WPWus4MzeKR6dBcZ\nTulStbngCnRiqmjKeKBMmo4sIy7VahIkv9Ro04rQ2JyftB8M3jh+Vzj8jeJPXgyf\nqzvS/3WXy6TjZwj/5cAWtUgBfen5Cv8b5Wppv3ghqMKnI6mGq3ZW6A4M9hPdKmaK\nZEk9GhiHkASfQlK3T8v+R0F2Ne//AHY2RTKbxkaFXeIksB7jSJaYV0eUVXoPQbFE\nJPPB/hprv4j9wabak2BegUqZIJxIZhm1AHlUD7gsL0u8qV1bYH+Mh6XgUmMqvtg7\nhUAV/h62ZT/FS9p+tXo1KaMuephgIqP0fSdOLeq0dDzpD6QzDxARvBMB1uUO07+1\nEqLhRSPAzAhuYbeJq4PjJB7mXQfnHyA+z2fI56wwbSdLaG5LKlwCCDTb+HbkZ6Mm\nnD+iMsJKxYEYMRBWqoTvLQr/uB930r+lWKBi5NdLkXWNiYCYfm3LU05er/ayl4WX\nudpVBrkk7tfGOB5jGxI7leFYrPLfhNVfmS8NVVvmONsuP3LpSIXLuykTjx44Vbnz\nssQwmSNOXfJIoRIM3BKQCZBUkQM8R+XVyWXgt0t97EfTsws+rZ7QdAAO671RrcDe\nLMDDav7v3Aun+kbfYNucpllQdSNpc5Oy+fwC00fmcc4QAu4njIT/rEUNE1yDMuAl\npYYsfPQS\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIFODCCAyCgAwIBAgIRAJW+FqD3LkbxezmCcvqLzZYwDQYJKoZIhvcNAQEFBQAw\nNzEUMBIGA1UECgwLVGVsaWFTb25lcmExHzAdBgNVBAMMFlRlbGlhU29uZXJhIFJv\nb3QgQ0EgdjEwHhcNMDcxMDE4MTIwMDUwWhcNMzIxMDE4MTIwMDUwWjA3MRQwEgYD\nVQQKDAtUZWxpYVNvbmVyYTEfMB0GA1UEAwwWVGVsaWFTb25lcmEgUm9vdCBDQSB2\nMTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAMK+6yfwIaPzaSZVfp3F\nVRaRXP3vIb9TgHot0pGMYzHw7CTww6XScnwQbfQ3t+XmfHnqjLWCi65ItqwA3GV1\n7CpNX8GH9SBlK4GoRz6JI5UwFpB/6FcHSOcZrr9FZ7E3GwYq/t75rH2D+1665I+X\nZ75Ljo1kB1c4VWk0Nj0TSO9P4tNmHqTPGrdeNjPUtAa9GAH9d4RQAEX1jF3oI7x+\n/jXh7VB7qTCNGdMJjmhnXb88lxhTuylixcpecsHHltTbLaC0H2kD7OriUPEMPPCs\n81Mt8Bz17Ww5OXOAFshSsCPN4D7c3TxHoLs1iuKYaIu+5b9y7tL6pe0S7fyYGKkm\ndtwoSxAgHNN/Fnct7W+A90m7UwW7XWjH1Mh1Fj+JWov3F0fUTPHSiXk+TT2YqGHe\nOh7S+F4D4MHJHIzTjU3TlTazN19jY5szFPAtJmtTfImMMsJu7D0hADnJoWjiUIMu\nsDor8zagrC/kb2HCUQk5PotTubtn2txTuXZZNp1D5SDgPTJghSJRt8czu90VL6R4\npgd7gUY2BIbdeTXHlSw7sKMXNeVzH7RcWe/a6hBle3rQf5+ztCo3O3CLm1u5K7fs\nslESl1MpWtTwEhDcTwK7EpIvYtQ/aUN8Ddb8WHUBiJ1YFkveupD/RwGJBmr2X7KQ\narMCpgKIv7NHfirZ1fpoeDVNAgMBAAGjPzA9MA8GA1UdEwEB/wQFMAMBAf8wCwYD\nVR0PBAQDAgEGMB0GA1UdDgQWBBTwj1k4ALP1j5qWDNXr+nuqF+gTEjANBgkqhkiG\n9w0BAQUFAAOCAgEAvuRcYk4k9AwI//DTDGjkk0kiP0Qnb7tt3oNmzqjMDfz1mgbl\ndxSR651Be5kqhOX//CHBXfDkH1e3damhXwIm/9fH907eT/j3HEbAek9ALCI18Bmx\n0GtnLLCo4MBANzX2hFxc469CeP6nyQ1Q6g2EdvZR74NTxnr/DlZJLo961gzmJ1Tj\nTQpgcmLNkQfWpb/ImWvtxBnmq0wROMVvMeJuScg/doAmAyYp4Db29iBT4xdwNBed\nY2gea+zDTYa4EzAvXUYNR0PVG6pZDrlcjQZIrXSHX8f8MVRBE+LHIQ6e4B4N4cB7\nQ4WQxYpYxmUKeFfyxiMPAdkgS94P+5KFdSpcc41teyWRyu5FrgZLAMzTsVlQ2jqI\nOylDRl6XK1TOU2+NSueW+r9xDkKLfP0ooNBIytrEgUy7onOTJsjrDNYmiLbAJM+7\nvVvrdX3pCI6GMyx5dwlppYn8s3CQh3aP0yK7Qs69cwsgJirQmz1wHiRszYd2qReW\nt88NkvuOGKmYSdGe/mBEciG5Ge3C9THxOUiIkCR1VBatzvT4aRRkOfujuLpwQMcn\nHL/EVlP6Y2XQ8xwOFvVrhlhNGNTkDY6lnVuR3HYkUD/GKvvZt5y11ubQ2egZixVx\nSK236thZiNSQvxaz2emsWWFUyBy6ysHK4bkgTI86k4mloMy/0/Z1pHWWbVY=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIDZzCCAk+gAwIBAgIQGx+ttiD5JNM2a/fH8YygWTANBgkqhkiG9w0BAQUFADBF\nMQswCQYDVQQGEwJHQjEYMBYGA1UEChMPVHJ1c3RpcyBMaW1pdGVkMRwwGgYDVQQL\nExNUcnVzdGlzIEZQUyBSb290IENBMB4XDTAzMTIyMzEyMTQwNloXDTI0MDEyMTEx\nMzY1NFowRTELMAkGA1UEBhMCR0IxGDAWBgNVBAoTD1RydXN0aXMgTGltaXRlZDEc\nMBoGA1UECxMTVHJ1c3RpcyBGUFMgUm9vdCBDQTCCASIwDQYJKoZIhvcNAQEBBQAD\nggEPADCCAQoCggEBAMVQe547NdDfxIzNjpvto8A2mfRC6qc+gIMPpqdZh8mQRUN+\nAOqGeSoDvT03mYlmt+WKVoaTnGhLaASMk5MCPjDSNzoiYYkchU59j9WvezX2fihH\niTHcDnlkH5nSW7r+f2C/revnPDgpai/lkQtV/+xvWNUtyd5MZnGPDNcE2gfmHhjj\nvSkCqPoc4Vu5g6hBSLwacY3nYuUtsuvffM/bq1rKMfFMIvMFE/eC+XN5DL7XSxzA\n0RU8k0Fk0ea+IxciAIleH2ulrG6nS4zto3Lmr2NNL4XSFDWaLk6M6jKYKIahkQlB\nOrTh4/L68MkKokHdqeMDx4gVOxzUGpTXn2RZEm0CAwEAAaNTMFEwDwYDVR0TAQH/\nBAUwAwEB/zAfBgNVHSMEGDAWgBS6+nEleYtXQSUhhgtx67JkDoshZzAdBgNVHQ4E\nFgQUuvpxJXmLV0ElIYYLceuyZA6LIWcwDQYJKoZIhvcNAQEFBQADggEBAH5Y//01\nGX2cGE+esCu8jowU/yyg2kdbw++BLa8F6nRIW/M+TgfHbcWzk88iNVy2P3UnXwmW\nzaD+vkAMXBJV+JOCyinpXj9WV4s4NvdFGkwozZ5BuO1WTISkQMi4sKUraXAEasP4\n1BIy+Q7DsdwyhEQsb8tGD+pmQQ9P8Vilpg0ND2HepZ5dfWWhPBfnqFVO76DH7cZE\nf1T1o+CP8HxVIo8ptoGj4W1OLBuAZ+ytIJ8MYmHVl/9D7S3B2l0pKoU/rGXuhg8F\njZBf3+6f9L/uHfuY5H+QK4R4EA5sSVPvFVtlRkpdr7r7OnIdzfYliB6XzCGcKQEN\nZetX2fNXlrtIzYE=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIFFzCCA/+gAwIBAgIBETANBgkqhkiG9w0BAQUFADCCASsxCzAJBgNVBAYTAlRS\nMRgwFgYDVQQHDA9HZWJ6ZSAtIEtvY2FlbGkxRzBFBgNVBAoMPlTDvHJraXllIEJp\nbGltc2VsIHZlIFRla25vbG9qaWsgQXJhxZ90xLFybWEgS3VydW11IC0gVMOcQsSw\nVEFLMUgwRgYDVQQLDD9VbHVzYWwgRWxla3Ryb25payB2ZSBLcmlwdG9sb2ppIEFy\nYcWfdMSxcm1hIEVuc3RpdMO8c8O8IC0gVUVLQUUxIzAhBgNVBAsMGkthbXUgU2Vy\ndGlmaWthc3lvbiBNZXJrZXppMUowSAYDVQQDDEFUw5xCxLBUQUsgVUVLQUUgS8O2\nayBTZXJ0aWZpa2EgSGl6bWV0IFNhxJ9sYXnEsWPEsXPEsSAtIFPDvHLDvG0gMzAe\nFw0wNzA4MjQxMTM3MDdaFw0xNzA4MjExMTM3MDdaMIIBKzELMAkGA1UEBhMCVFIx\nGDAWBgNVBAcMD0dlYnplIC0gS29jYWVsaTFHMEUGA1UECgw+VMO8cmtpeWUgQmls\naW1zZWwgdmUgVGVrbm9sb2ppayBBcmHFn3TEsXJtYSBLdXJ1bXUgLSBUw5xCxLBU\nQUsxSDBGBgNVBAsMP1VsdXNhbCBFbGVrdHJvbmlrIHZlIEtyaXB0b2xvamkgQXJh\nxZ90xLFybWEgRW5zdGl0w7xzw7wgLSBVRUtBRTEjMCEGA1UECwwaS2FtdSBTZXJ0\naWZpa2FzeW9uIE1lcmtlemkxSjBIBgNVBAMMQVTDnELEsFRBSyBVRUtBRSBLw7Zr\nIFNlcnRpZmlrYSBIaXptZXQgU2HEn2xhecSxY8Sxc8SxIC0gU8O8csO8bSAzMIIB\nIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAim1L/xCIOsP2fpTo6iBkcK4h\ngb46ezzb8R1Sf1n68yJMlaCQvEhOEav7t7WNeoMojCZG2E6VQIdhn8WebYGHV2yK\nO7Rm6sxA/OOqbLLLAdsyv9Lrhc+hDVXDWzhXcLh1xnnRFDDtG1hba+818qEhTsXO\nfJlfbLm4IpNQp81McGq+agV/E5wrHur+R84EpW+sky58K5+eeROR6Oqeyjh1jmKw\nlZMq5d/pXpduIF9fhHpEORlAHLpVK/swsoHvhOPc7Jg4OQOFCKlUAwUp8MmPi+oL\nhmUZEdPpCSPeaJMDyTYcIW7OjGbxmTDY17PDHfiBLqi9ggtm/oLL4eAagsNAgQID\nAQABo0IwQDAdBgNVHQ4EFgQUvYiHyY/2pAoLquvF/pEjnatKijIwDgYDVR0PAQH/\nBAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQEFBQADggEBAB18+kmP\nNOm3JpIWmgV050vQbTlswyb2zrgxvMTfvCr4N5EY3ATIZJkrGG2AA1nJrvhY0D7t\nwyOfaTyGOBye79oneNGEN3GKPEs5z35FBtYt2IpNeBLWrcLTy9LQQfMmNkqblWwM\n7uXRQydmwYj3erMgbOqwaSvHIOgMA8RBBZniP+Rr+KCGgceExh/VS4ESshYhLBOh\ngLJeDEoTniDYYkCrkOpkSi+sDQESeUWoL4cZaMjihccwsnX5OD+ywJO0a+IDRM5n\noN+J1q2MdqMTw5RhK2vZbMEHCiIHhWyFJEapvj+LeISCfiQMnf2BN+MlqO02TpUs\nyZyQ2uypQjyttgI=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIEJzCCAw+gAwIBAgIHAI4X/iQggTANBgkqhkiG9w0BAQsFADCBsTELMAkGA1UE\nBhMCVFIxDzANBgNVBAcMBkFua2FyYTFNMEsGA1UECgxEVMOcUktUUlVTVCBCaWxn\naSDEsGxldGnFn2ltIHZlIEJpbGnFn2ltIEfDvHZlbmxpxJ9pIEhpem1ldGxlcmkg\nQS7Fni4xQjBABgNVBAMMOVTDnFJLVFJVU1QgRWxla3Ryb25payBTZXJ0aWZpa2Eg\nSGl6bWV0IFNhxJ9sYXnEsWPEsXPEsSBINTAeFw0xMzA0MzAwODA3MDFaFw0yMzA0\nMjgwODA3MDFaMIGxMQswCQYDVQQGEwJUUjEPMA0GA1UEBwwGQW5rYXJhMU0wSwYD\nVQQKDERUw5xSS1RSVVNUIEJpbGdpIMSwbGV0acWfaW0gdmUgQmlsacWfaW0gR8O8\ndmVubGnEn2kgSGl6bWV0bGVyaSBBLsWeLjFCMEAGA1UEAww5VMOcUktUUlVTVCBF\nbGVrdHJvbmlrIFNlcnRpZmlrYSBIaXptZXQgU2HEn2xhecSxY8Sxc8SxIEg1MIIB\nIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEApCUZ4WWe60ghUEoI5RHwWrom\n/4NZzkQqL/7hzmAD/I0Dpe3/a6i6zDQGn1k19uwsu537jVJp45wnEFPzpALFp/kR\nGml1bsMdi9GYjZOHp3GXDSHHmflS0yxjXVW86B8BSLlg/kJK9siArs1mep5Fimh3\n4khon6La8eHBEJ/rPCmBp+EyCNSgBbGM+42WAA4+Jd9ThiI7/PS98wl+d+yG6w8z\n5UNP9FR1bSmZLmZaQ9/LXMrI5Tjxfjs1nQ/0xVqhzPMggCTTV+wVunUlm+hkS7M0\nhO8EuPbJbKoCPrZV4jI3X/xml1/N1p7HIL9Nxqw/dV8c7TKcfGkAaZHjIxhT6QID\nAQABo0IwQDAdBgNVHQ4EFgQUVpkHHtOsDGlktAxQR95DLL4gwPswDgYDVR0PAQH/\nBAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAJ5FdnsX\nSDLyOIspve6WSk6BGLFRRyDN0GSxDsnZAdkJzsiZ3GglE9Rc8qPoBP5yCccLqh0l\nVX6Wmle3usURehnmp349hQ71+S4pL+f5bFgWV1Al9j4uPqrtd3GqqpmWRgqujuwq\nURawXs3qZwQcWDD1YIq9pr1N5Za0/EKJAWv2cMhQOQwt1WbZyNKzMrcbGW3LM/nf\npeYVhDfwwvJllpKQd/Ct9JDpEXjXk4nAPQu6KfTomZ1yju2dL+6SfaHx/126M2CF\nYv4HAqGEVka+lgqaE9chTLd8B59OTj+RdPsnnRHM3eaxynFNExc5JsUpISuTKWqW\n+qtB4Uu2NQvAmxU=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIEJjCCAw6gAwIBAgIGfaHyZeyKMA0GCSqGSIb3DQEBCwUAMIGxMQswCQYDVQQG\nEwJUUjEPMA0GA1UEBwwGQW5rYXJhMU0wSwYDVQQKDERUw5xSS1RSVVNUIEJpbGdp\nIMSwbGV0acWfaW0gdmUgQmlsacWfaW0gR8O8dmVubGnEn2kgSGl6bWV0bGVyaSBB\nLsWeLjFCMEAGA1UEAww5VMOcUktUUlVTVCBFbGVrdHJvbmlrIFNlcnRpZmlrYSBI\naXptZXQgU2HEn2xhecSxY8Sxc8SxIEg2MB4XDTEzMTIxODA5MDQxMFoXDTIzMTIx\nNjA5MDQxMFowgbExCzAJBgNVBAYTAlRSMQ8wDQYDVQQHDAZBbmthcmExTTBLBgNV\nBAoMRFTDnFJLVFJVU1QgQmlsZ2kgxLBsZXRpxZ9pbSB2ZSBCaWxpxZ9pbSBHw7x2\nZW5sacSfaSBIaXptZXRsZXJpIEEuxZ4uMUIwQAYDVQQDDDlUw5xSS1RSVVNUIEVs\nZWt0cm9uaWsgU2VydGlmaWthIEhpem1ldCBTYcSfbGF5xLFjxLFzxLEgSDYwggEi\nMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCdsGjW6L0UlqMACprx9MfMkU1x\neHe59yEmFXNRFpQJRwXiM/VomjX/3EsvMsew7eKC5W/a2uqsxgbPJQ1BgfbBOCK9\n+bGlprMBvD9QFyv26WZV1DOzXPhDIHiTVRZwGTLmiddk671IUP320EEDwnS3/faA\nz1vFq6TWlRKb55cTMgPp1KtDWxbtMyJkKbbSk60vbNg9tvYdDjTu0n2pVQ8g9P0p\nu5FbHH3GQjhtQiht1AH7zYiXSX6484P4tZgvsycLSF5W506jM7NE1qXyGJTtHB6p\nlVxiSvgNZ1GpryHV+DKdeboaX+UEVU0TRv/yz3THGmNtwx8XEsMeED5gCLMxAgMB\nAAGjQjBAMB0GA1UdDgQWBBTdVRcT9qzoSCHK77Wv0QAy7Z6MtTAOBgNVHQ8BAf8E\nBAMCAQYwDwYDVR0TAQH/BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAQEAb1gNl0Oq\nFlQ+v6nfkkU/hQu7VtMMUszIv3ZnXuaqs6fvuay0EBQNdH49ba3RfdCaqaXKGDsC\nQC4qnFAUi/5XfldcEQlLNkVS9z2sFP1E34uXI9TDwe7UU5X+LEr+DXCqu4svLcsy\no4LyVN/Y8t3XSHLuSqMplsNEzm61kod2pLv0kmzOLBQJZo6NrRa1xxsJYTvjIKID\ngI6tflEATseWhvtDmHd9KMeP2Cpu54Rvl0EpABZeTeIT6lnAY2c6RPuY/ATTMHKm\n9ocJV612ph1jmv3XZch4gyt1O6VbuA1df74jrlZVlFjvH4GMKrLN5ptjnhi85WsG\ntAuYSyher4hYyw==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIICjzCCAhWgAwIBAgIQXIuZxVqUxdJxVt7NiYDMJjAKBggqhkjOPQQDAzCBiDEL\nMAkGA1UEBhMCVVMxEzARBgNVBAgTCk5ldyBKZXJzZXkxFDASBgNVBAcTC0plcnNl\neSBDaXR5MR4wHAYDVQQKExVUaGUgVVNFUlRSVVNUIE5ldHdvcmsxLjAsBgNVBAMT\nJVVTRVJUcnVzdCBFQ0MgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMTAwMjAx\nMDAwMDAwWhcNMzgwMTE4MjM1OTU5WjCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgT\nCk5ldyBKZXJzZXkxFDASBgNVBAcTC0plcnNleSBDaXR5MR4wHAYDVQQKExVUaGUg\nVVNFUlRSVVNUIE5ldHdvcmsxLjAsBgNVBAMTJVVTRVJUcnVzdCBFQ0MgQ2VydGlm\naWNhdGlvbiBBdXRob3JpdHkwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAAQarFRaqflo\nI+d61SRvU8Za2EurxtW20eZzca7dnNYMYf3boIkDuAUU7FfO7l0/4iGzzvfUinng\no4N+LZfQYcTxmdwlkWOrfzCjtHDix6EznPO/LlxTsV+zfTJ/ijTjeXmjQjBAMB0G\nA1UdDgQWBBQ64QmG1M8ZwpZ2dEl23OA1xmNjmjAOBgNVHQ8BAf8EBAMCAQYwDwYD\nVR0TAQH/BAUwAwEB/zAKBggqhkjOPQQDAwNoADBlAjA2Z6EWCNzklwBBHU6+4WMB\nzzuqQhFkoJ2UOQIReVx7Hfpkue4WQrO/isIJxOzksU0CMQDpKmFHjFJKS04YcPbW\nRNZu9YO6bVi9JNlWSOrvxKJGgYhqOkbRqZtNyWHa0V1Xahg=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIF3jCCA8agAwIBAgIQAf1tMPyjylGoG7xkDjUDLTANBgkqhkiG9w0BAQwFADCB\niDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCk5ldyBKZXJzZXkxFDASBgNVBAcTC0pl\ncnNleSBDaXR5MR4wHAYDVQQKExVUaGUgVVNFUlRSVVNUIE5ldHdvcmsxLjAsBgNV\nBAMTJVVTRVJUcnVzdCBSU0EgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMTAw\nMjAxMDAwMDAwWhcNMzgwMTE4MjM1OTU5WjCBiDELMAkGA1UEBhMCVVMxEzARBgNV\nBAgTCk5ldyBKZXJzZXkxFDASBgNVBAcTC0plcnNleSBDaXR5MR4wHAYDVQQKExVU\naGUgVVNFUlRSVVNUIE5ldHdvcmsxLjAsBgNVBAMTJVVTRVJUcnVzdCBSU0EgQ2Vy\ndGlmaWNhdGlvbiBBdXRob3JpdHkwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIK\nAoICAQCAEmUXNg7D2wiz0KxXDXbtzSfTTK1Qg2HiqiBNCS1kCdzOiZ/MPans9s/B\n3PHTsdZ7NygRK0faOca8Ohm0X6a9fZ2jY0K2dvKpOyuR+OJv0OwWIJAJPuLodMkY\ntJHUYmTbf6MG8YgYapAiPLz+E/CHFHv25B+O1ORRxhFnRghRy4YUVD+8M/5+bJz/\nFp0YvVGONaanZshyZ9shZrHUm3gDwFA66Mzw3LyeTP6vBZY1H1dat//O+T23LLb2\nVN3I5xI6Ta5MirdcmrS3ID3KfyI0rn47aGYBROcBTkZTmzNg95S+UzeQc0PzMsNT\n79uq/nROacdrjGCT3sTHDN/hMq7MkztReJVni+49Vv4M0GkPGw/zJSZrM233bkf6\nc0Plfg6lZrEpfDKEY1WJxA3Bk1QwGROs0303p+tdOmw1XNtB1xLaqUkL39iAigmT\nYo61Zs8liM2EuLE/pDkP2QKe6xJMlXzzawWpXhaDzLhn4ugTncxbgtNMs+1b/97l\nc6wjOy0AvzVVdAlJ2ElYGn+SNuZRkg7zJn0cTRe8yexDJtC/QV9AqURE9JnnV4ee\nUB9XVKg+/XRjL7FQZQnmWEIuQxpMtPAlR1n6BB6T1CZGSlCBst6+eLf8ZxXhyVeE\nHg9j1uliutZfVS7qXMYoCAQlObgOK6nyTJccBz8NUvXt7y+CDwIDAQABo0IwQDAd\nBgNVHQ4EFgQUU3m/WqorSs9UgOHYm8Cd8rIDZsswDgYDVR0PAQH/BAQDAgEGMA8G\nA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQEMBQADggIBAFzUfA3P9wF9QZllDHPF\nUp/L+M+ZBn8b2kMVn54CVVeWFPFSPCeHlCjtHzoBN6J2/FNQwISbxmtOuowhT6KO\nVWKR82kV2LyI48SqC/3vqOlLVSoGIG1VeCkZ7l8wXEskEVX/JJpuXior7gtNn3/3\nATiUFJVDBwn7YKnuHKsSjKCaXqeYalltiz8I+8jRRa8YFWSQEg9zKC7F4iRO/Fjs\n8PRF/iKz6y+O0tlFYQXBl2+odnKPi4w2r78NBc5xjeambx9spnFixdjQg3IM8WcR\niQycE0xyNN+81XHfqnHd4blsjDwSXWXavVcStkNr/+XeTWYRUc+ZruwXtuhxkYze\nSf7dNXGiFSeUHM9h4ya7b6NnJSFd5t0dCy5oGzuCr+yDZ4XUmFF0sbmZgIn/f3gZ\nXHlKYC6SQK5MNyosycdiyA5d9zZbyuAlJQG03RoHnHcAP9Dc1ew91Pq7P8yF1m9/\nqS3fuQL39ZeatTXaw2ewh0qpKJ4jjv9cJ2vhsE/zB+4ALtRZh8tSQZXq9EfX7mRB\nVXyNWQKV3WKdwrnuWih0hKWbt5DHDAff9Yk2dDLWKMGwsAvgnEzDHNb842m1R0aB\nL6KCq9NjRHDEjf8tM7qtj3u1cIiuPhnPQCjY/MiQu12ZIvVS5ljFH4gxQ+6IHdfG\njjxDah2nGN59PRbxYvnKkKj9\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIEojCCA4qgAwIBAgIQRL4Mi1AAJLQR0zYlJWfJiTANBgkqhkiG9w0BAQUFADCB\nrjELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAlVUMRcwFQYDVQQHEw5TYWx0IExha2Ug\nQ2l0eTEeMBwGA1UEChMVVGhlIFVTRVJUUlVTVCBOZXR3b3JrMSEwHwYDVQQLExho\ndHRwOi8vd3d3LnVzZXJ0cnVzdC5jb20xNjA0BgNVBAMTLVVUTi1VU0VSRmlyc3Qt\nQ2xpZW50IEF1dGhlbnRpY2F0aW9uIGFuZCBFbWFpbDAeFw05OTA3MDkxNzI4NTBa\nFw0xOTA3MDkxNzM2NThaMIGuMQswCQYDVQQGEwJVUzELMAkGA1UECBMCVVQxFzAV\nBgNVBAcTDlNhbHQgTGFrZSBDaXR5MR4wHAYDVQQKExVUaGUgVVNFUlRSVVNUIE5l\ndHdvcmsxITAfBgNVBAsTGGh0dHA6Ly93d3cudXNlcnRydXN0LmNvbTE2MDQGA1UE\nAxMtVVROLVVTRVJGaXJzdC1DbGllbnQgQXV0aGVudGljYXRpb24gYW5kIEVtYWls\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAsjmFpPJ9q0E7YkY3rs3B\nYHW8OWX5ShpHornMSMxqmNVNNRm5pELlzkniii8efNIxB8dOtINknS4p1aJkxIW9\nhVE1eaROaJB7HHqkkqgX8pgV8pPMyaQylbsMTzC9mKALi+VuG6JG+ni8om+rWV6l\nL8/K2m2qL+usobNqqrcuZzWLeeEeaYji5kbNoKXqvgvOdjp6Dpvq/NonWz1zHyLm\nSGHGTPNpsaguG7bUMSAsvIKKjqQOpdeJQ/wWWq8dcdcRWdq6hw2v+vPhwvCkxWeM\n1tZUOt4KpLoDd7NlyP0e03RiqhjKaJMeoYV+9Udly/hNVyh00jT/MLbu9mIwFIws\n6wIDAQABo4G5MIG2MAsGA1UdDwQEAwIBxjAPBgNVHRMBAf8EBTADAQH/MB0GA1Ud\nDgQWBBSJgmd9xJ0mcABLtFBIfN49rgRufTBYBgNVHR8EUTBPME2gS6BJhkdodHRw\nOi8vY3JsLnVzZXJ0cnVzdC5jb20vVVROLVVTRVJGaXJzdC1DbGllbnRBdXRoZW50\naWNhdGlvbmFuZEVtYWlsLmNybDAdBgNVHSUEFjAUBggrBgEFBQcDAgYIKwYBBQUH\nAwQwDQYJKoZIhvcNAQEFBQADggEBALFtYV2mGn98q0rkMPxTbyUkxsrt4jFcKw7u\n7mFVbwQ+zznexRtJlOTrIEy05p5QLnLZjfWqo7NK2lYcYJeA3IKirUq9iiv/Cwm0\nxtcgBEXkzYABurorbs6q15L+5K/r9CYdFip/bDCVNy8zEqx/3cfREYxRmLLQo5HQ\nrfafnoOTHh1CuEava2bwm3/q4wMC5QJRwarVNZ1yQAOJujEdxRBoUp7fooXFXAim\neOZTT7Hot9MUnpOmw2TjrH5xzbyf6QMbzPvprDHBr3wVdAKZw7JHpsIyYdfHb0gk\nUSeh1YdV8nuPmD0Wnu51tvjQjvLzxq4oW6fw8zYX/MMF08oDSlQ=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIEdDCCA1ygAwIBAgIQRL4Mi1AAJLQR0zYq/mUK/TANBgkqhkiG9w0BAQUFADCB\nlzELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAlVUMRcwFQYDVQQHEw5TYWx0IExha2Ug\nQ2l0eTEeMBwGA1UEChMVVGhlIFVTRVJUUlVTVCBOZXR3b3JrMSEwHwYDVQQLExho\ndHRwOi8vd3d3LnVzZXJ0cnVzdC5jb20xHzAdBgNVBAMTFlVUTi1VU0VSRmlyc3Qt\nSGFyZHdhcmUwHhcNOTkwNzA5MTgxMDQyWhcNMTkwNzA5MTgxOTIyWjCBlzELMAkG\nA1UEBhMCVVMxCzAJBgNVBAgTAlVUMRcwFQYDVQQHEw5TYWx0IExha2UgQ2l0eTEe\nMBwGA1UEChMVVGhlIFVTRVJUUlVTVCBOZXR3b3JrMSEwHwYDVQQLExhodHRwOi8v\nd3d3LnVzZXJ0cnVzdC5jb20xHzAdBgNVBAMTFlVUTi1VU0VSRmlyc3QtSGFyZHdh\ncmUwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCx98M4P7Sof885glFn\n0G2f0v9Y8+efK+wNiVSZuTiZFvfgIXlIwrthdBKWHTxqctU8EGc6Oe0rE81m65UJ\nM6Rsl7HoxuzBdXmcRl6Nq9Bq/bkqVRcQVLMZ8Jr28bFdtqdt++BxF2uiiPsA3/4a\nMXcMmgF6sTLjKwEHOG7DpV4jvEWbe1DByTCP2+UretNb+zNAHqDVmBe8i4fDidNd\noI6yqqr2jmmIBsX6iSHzCJ1pLgkzmykNRg+MzEk0sGlRvfkGzWitZky8PqxhvQqI\nDsjfPe58BEydCl5rkdbux+0ojatNh4lz0G6k0B4WixThdkQDf2Os5M1JnMWS9Ksy\noUhbAgMBAAGjgbkwgbYwCwYDVR0PBAQDAgHGMA8GA1UdEwEB/wQFMAMBAf8wHQYD\nVR0OBBYEFKFyXyYbKJhDlV0HN9WFlp1L0sNFMEQGA1UdHwQ9MDswOaA3oDWGM2h0\ndHA6Ly9jcmwudXNlcnRydXN0LmNvbS9VVE4tVVNFUkZpcnN0LUhhcmR3YXJlLmNy\nbDAxBgNVHSUEKjAoBggrBgEFBQcDAQYIKwYBBQUHAwUGCCsGAQUFBwMGBggrBgEF\nBQcDBzANBgkqhkiG9w0BAQUFAAOCAQEARxkP3nTGmZev/K0oXnWO6y1n7k57K9cM\n//bey1WiCuFMVGWTYGufEpytXoMs61quwOQt9ABjHbjAbPLPSbtNk28Gpgoiskli\nCE7/yMgUsogWXecB5BKV5UU0s4tpvc+0hY91UZ59Ojg6FEgSxvunOxqNDYJAB+gE\nCJChicsZUN/KHAG8HQQZexB2lzvukJDKxA4fFm517zP4029bHpbj4HR3dHuKom4t\n3XbWOTCC8KucUvIqx69JXn7HaOWCgchqJ/kniCrVWFCVH/A7HFe7fRQ5YiuayZSS\nKqMiDP+JJn1fIytH1xUdqWqeUQ0qUZ6B+dQ7XnASfxAynB67nfhmqA==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIDhDCCAwqgAwIBAgIQL4D+I4wOIg9IZxIokYesszAKBggqhkjOPQQDAzCByjEL\nMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZW\nZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykgMjAwNyBWZXJpU2ln\nbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5MUUwQwYDVQQDEzxWZXJp\nU2lnbiBDbGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0aG9y\naXR5IC0gRzQwHhcNMDcxMTA1MDAwMDAwWhcNMzgwMTE4MjM1OTU5WjCByjELMAkG\nA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJp\nU2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykgMjAwNyBWZXJpU2lnbiwg\nSW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5MUUwQwYDVQQDEzxWZXJpU2ln\nbiBDbGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0aG9yaXR5\nIC0gRzQwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAASnVnp8Utpkmw4tXNherJI9/gHm\nGUo9FANL+mAnINmDiWn6VMaaGF5VKmTeBvaNSjutEDxlPZCIBIngMGGzrl0Bp3ve\nfLK+ymVhAIau2o970ImtTR1ZmkGxvEeA3J5iw/mjgbIwga8wDwYDVR0TAQH/BAUw\nAwEB/zAOBgNVHQ8BAf8EBAMCAQYwbQYIKwYBBQUHAQwEYTBfoV2gWzBZMFcwVRYJ\naW1hZ2UvZ2lmMCEwHzAHBgUrDgMCGgQUj+XTGoasjY5rw8+AatRIGCx7GS4wJRYj\naHR0cDovL2xvZ28udmVyaXNpZ24uY29tL3ZzbG9nby5naWYwHQYDVR0OBBYEFLMW\nkf3upm7ktS5Jj4d4gYDs5bG1MAoGCCqGSM49BAMDA2gAMGUCMGYhDBgmYFo4e1ZC\n4Kf8NoRRkSAsdk1DPcQdhCPQrNZ8NQbOzWm9kA3bbEhCHQ6qQgIxAJw9SDkjOVga\nFRJZap7v1VmyHVIsmXHNxynfGyphe3HR3vPA5Q06Sqotp9iGKt0uEA==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIE0zCCA7ugAwIBAgIQGNrRniZ96LtKIVjNzGs7SjANBgkqhkiG9w0BAQUFADCB\nyjELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQL\nExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykgMjAwNiBWZXJp\nU2lnbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5MUUwQwYDVQQDEzxW\nZXJpU2lnbiBDbGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0\naG9yaXR5IC0gRzUwHhcNMDYxMTA4MDAwMDAwWhcNMzYwNzE2MjM1OTU5WjCByjEL\nMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZW\nZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykgMjAwNiBWZXJpU2ln\nbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5MUUwQwYDVQQDEzxWZXJp\nU2lnbiBDbGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0aG9y\naXR5IC0gRzUwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCvJAgIKXo1\nnmAMqudLO07cfLw8RRy7K+D+KQL5VwijZIUVJ/XxrcgxiV0i6CqqpkKzj/i5Vbex\nt0uz/o9+B1fs70PbZmIVYc9gDaTY3vjgw2IIPVQT60nKWVSFJuUrjxuf6/WhkcIz\nSdhDY2pSS9KP6HBRTdGJaXvHcPaz3BJ023tdS1bTlr8Vd6Gw9KIl8q8ckmcY5fQG\nBO+QueQA5N06tRn/Arr0PO7gi+s3i+z016zy9vA9r911kTMZHRxAy3QkGSGT2RT+\nrCpSx4/VBEnkjWNHiDxpg8v+R70rfk/Fla4OndTRQ8Bnc+MUCH7lP59zuDMKz10/\nNIeWiu5T6CUVAgMBAAGjgbIwga8wDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8E\nBAMCAQYwbQYIKwYBBQUHAQwEYTBfoV2gWzBZMFcwVRYJaW1hZ2UvZ2lmMCEwHzAH\nBgUrDgMCGgQUj+XTGoasjY5rw8+AatRIGCx7GS4wJRYjaHR0cDovL2xvZ28udmVy\naXNpZ24uY29tL3ZzbG9nby5naWYwHQYDVR0OBBYEFH/TZafC3ey78DAJ80M5+gKv\nMzEzMA0GCSqGSIb3DQEBBQUAA4IBAQCTJEowX2LP2BqYLz3q3JktvXf2pXkiOOzE\np6B4Eq1iDkVwZMXnl2YtmAl+X6/WzChl8gGqCBpH3vn5fJJaCGkgDdk+bW48DW7Y\n5gaRQBi5+MHt39tBquCWIMnNZBU4gcmU7qKEKQsTb47bDN0lAtukixlE0kF6BWlK\nWE9gyn6CagsCqiUXObXbf+eEZSqVir2G3l6BFoMtEMze/aiCKm0oHw0LxOXnGiYZ\n4fQRbxC1lfznQgUy286dUV4otp6F01vvpX1FQHKOtw5rDgb7MzVIcbidJ4vEZV8N\nhnacRHr2lVz2XTIIM6RUthg/aFzyQkqFOFSDX9HoLPKsEdao7WNq\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIEuTCCA6GgAwIBAgIQQBrEZCGzEyEDDrvkEhrFHTANBgkqhkiG9w0BAQsFADCB\nvTELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQL\nExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykgMjAwOCBWZXJp\nU2lnbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5MTgwNgYDVQQDEy9W\nZXJpU2lnbiBVbml2ZXJzYWwgUm9vdCBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTAe\nFw0wODA0MDIwMDAwMDBaFw0zNzEyMDEyMzU5NTlaMIG9MQswCQYDVQQGEwJVUzEX\nMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRydXN0\nIE5ldHdvcmsxOjA4BgNVBAsTMShjKSAyMDA4IFZlcmlTaWduLCBJbmMuIC0gRm9y\nIGF1dGhvcml6ZWQgdXNlIG9ubHkxODA2BgNVBAMTL1ZlcmlTaWduIFVuaXZlcnNh\nbCBSb290IENlcnRpZmljYXRpb24gQXV0aG9yaXR5MIIBIjANBgkqhkiG9w0BAQEF\nAAOCAQ8AMIIBCgKCAQEAx2E3XrEBNNti1xWb/1hajCMj1mCOkdeQmIN65lgZOIzF\n9uVkhbSicfvtvbnazU0AtMgtc6XHaXGVHzk8skQHnOgO+k1KxCHfKWGPMiJhgsWH\nH26MfF8WIFFE0XBPV+rjHOPMee5Y2A7Cs0WTwCznmhcrewA3ekEzeOEz4vMQGn+H\nLL729fdC4uW/h2KJXwBL38Xd5HVEMkE6HnFuacsLdUYI0crSK5XQz/u5QGtkjFdN\n/BMReYTtXlT2NJ8IAfMQJQYXStrxHXpma5hgZqTZ79IugvHw7wnqRMkVauIDbjPT\nrJ9VAMf2CGqUuV/c4DPxhGD5WycRtPwW8rtWaoAljQIDAQABo4GyMIGvMA8GA1Ud\nEwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgEGMG0GCCsGAQUFBwEMBGEwX6FdoFsw\nWTBXMFUWCWltYWdlL2dpZjAhMB8wBwYFKw4DAhoEFI/l0xqGrI2Oa8PPgGrUSBgs\nexkuMCUWI2h0dHA6Ly9sb2dvLnZlcmlzaWduLmNvbS92c2xvZ28uZ2lmMB0GA1Ud\nDgQWBBS2d/ppSEefUxLVwuoHMnYH0ZcHGTANBgkqhkiG9w0BAQsFAAOCAQEASvj4\nsAPmLGd75JR3Y8xuTPl9Dg3cyLk1uXBPY/ok+myDjEedO2Pzmvl2MpWRsXe8rJq+\nseQxIcaBlVZaDrHC1LGmWazxY8u4TB1ZkErvkBYoH1quEPuBUDgMbMzxPcP1Y+Oz\n4yHJJDnp/RVmRvQbEdBNc6N9Rvk97ahfYtTxP/jgdFcrGJ2BtMQo2pSXpXDrrB2+\nBxHw1dvd5Yzw1TKwg+ZX4o+/vqGqvz0dtdQ46tewXDpPaj+PwGZsY6rp2aQW9IHR\nlRQOfc2VNNnSj3BzgXucfr2YYdhFh5iQxeuGMMY1v/D/w1WIg0vvBZIGcfK4mJO3\n7M2CYfE45k+XmCpajQ==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIICPDCCAaUCED9pHoGc8JpK83P/uUii5N0wDQYJKoZIhvcNAQEFBQAwXzELMAkG\nA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMTcwNQYDVQQLEy5DbGFz\ncyAxIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0aG9yaXR5MB4XDTk2\nMDEyOTAwMDAwMFoXDTI4MDgwMjIzNTk1OVowXzELMAkGA1UEBhMCVVMxFzAVBgNV\nBAoTDlZlcmlTaWduLCBJbmMuMTcwNQYDVQQLEy5DbGFzcyAxIFB1YmxpYyBQcmlt\nYXJ5IENlcnRpZmljYXRpb24gQXV0aG9yaXR5MIGfMA0GCSqGSIb3DQEBAQUAA4GN\nADCBiQKBgQDlGb9to1ZhLZlIcfZn3rmN67eehoAKkQ76OCWvRoiC5XOooJskXQ0f\nzGVuDLDQVoQYh5oGmxChc9+0WDlrbsH2FdWoqD+qEgaNMax/sDTXjzRniAnNFBHi\nTkVWaR94AoDa3EeRKbs2yWNcxeDXLYd7obcysHswuiovMaruo2fa2wIDAQABMA0G\nCSqGSIb3DQEBBQUAA4GBAFgVKTk8d6PaXCUDfGD67gmZPCcQcMgMCeazh88K4hiW\nNWLMv5sneYlfycQJ9M61Hd8qveXbhpxoJeUwfLaJFf5n0a3hUKw8fGJLj7qE1xIV\nGx/KXQ/BUpQqEZnae88MNhPVNdwQGVnqlMEAv3WP2fr9dgTbYruQagPZRjXZ+Hxb\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIEGjCCAwICEQCLW3VWhFSFCwDPrzhIzrGkMA0GCSqGSIb3DQEBBQUAMIHKMQsw\nCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZl\ncmlTaWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5IFZlcmlTaWdu\nLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlT\naWduIENsYXNzIDEgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3Jp\ndHkgLSBHMzAeFw05OTEwMDEwMDAwMDBaFw0zNjA3MTYyMzU5NTlaMIHKMQswCQYD\nVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlT\naWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5IFZlcmlTaWduLCBJ\nbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlTaWdu\nIENsYXNzIDEgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkg\nLSBHMzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAN2E1Lm0+afY8wR4\nnN493GwTFtl63SRRZsDHJlkNrAYIwpTRMx/wgzUfbhvI3qpuFU5UJ+/EbRrsC+MO\n8ESlV8dAWB6jRx9x7GD2bZTIGDnt/kIYVt/kTEkQeE4BdjVjEjbdZrwBBDajVWjV\nojYJrKshJlQGrT/KFOCsyq0GHZXi+J3x4GD/wn91K0zM2v6HmSHquv4+VNfSWXjb\nPG7PoBMAGrgnoeS+Z5bKoMWznN3JdZ7rMJpfo83ZrngZPyPpXNspva1VyBtUjGP2\n6KbqxzcSXKMpHgLZ2x87tNcPVkeBFQRKr4Mn0cVYiMHd9qqnoxjaaKptEVHhv2Vr\nn5Z20T0CAwEAATANBgkqhkiG9w0BAQUFAAOCAQEAq2aN17O6x5q25lXQBfGfMY1a\nqtmqRiYPce2lrVNWYgFHKkTp/j90CxObufRNG7LRX7K20ohcs5/Ny9Sn2WCVhDr4\nwTcdYcrnsMXlkdpUpqwxga6X3s0IrLjAl4B/bnKk52kTlWUfxJM8/XmPBNQ+T+r3\nns7NZ3xPZQL/kYVUc8f/NveGLezQXk//EZ9yBta4GvFMDSZl4kSAHsef493oCtrs\npSCAaWihT37ha88HQfqDjrw43bAuEbFrskLMmrz5SCJ5ShkPshw+IHTZasO+8ih4\nE1Z5T21Q6huwtVexN2ZYI/PcD98Kh8TvhgXVOBRgmaNL3gaWcSzy27YfpO8/7g==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIDAzCCAmwCEQC5L2DMiJ+hekYJuFtwbIqvMA0GCSqGSIb3DQEBBQUAMIHBMQsw\nCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xPDA6BgNVBAsTM0Ns\nYXNzIDIgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgLSBH\nMjE6MDgGA1UECxMxKGMpIDE5OTggVmVyaVNpZ24sIEluYy4gLSBGb3IgYXV0aG9y\naXplZCB1c2Ugb25seTEfMB0GA1UECxMWVmVyaVNpZ24gVHJ1c3QgTmV0d29yazAe\nFw05ODA1MTgwMDAwMDBaFw0yODA4MDEyMzU5NTlaMIHBMQswCQYDVQQGEwJVUzEX\nMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xPDA6BgNVBAsTM0NsYXNzIDIgUHVibGlj\nIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgLSBHMjE6MDgGA1UECxMx\nKGMpIDE5OTggVmVyaVNpZ24sIEluYy4gLSBGb3IgYXV0aG9yaXplZCB1c2Ugb25s\neTEfMB0GA1UECxMWVmVyaVNpZ24gVHJ1c3QgTmV0d29yazCBnzANBgkqhkiG9w0B\nAQEFAAOBjQAwgYkCgYEAp4gBIXQs5xoD8JjhlzwPIQjxnNuX6Zr8wgQGE75fUsjM\nHiwSViy4AWkszJkfrbCWrnkE8hM5wXuYuggs6MKEEyyqaekJ9MepAqRCwiNPStjw\nDqL7MWzJ5m+ZJwf15vRMeJ5t60aG+rmGyVTyssSv1EYcWskVMP8NbPUtDm3Of3cC\nAwEAATANBgkqhkiG9w0BAQUFAAOBgQByLvl/0fFx+8Se9sVeUYpAmLho+Jscg9ji\nnb3/7aHmZuovCfTK1+qlK5X2JGCGTUQug6XELaDTrnhpb3LabK4I8GOSN+a7xDAX\nrXfMSTWqz9iP0b63GJZHc2pUIjRkLbYWm1lbtFFZOrMLFPQS32eg9K0yZF6xRnIn\njBJ7xUS0rg==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIEGTCCAwECEGFwy0mMX5hFKeewptlQW3owDQYJKoZIhvcNAQEFBQAwgcoxCzAJ\nBgNVBAYTAlVTMRcwFQYDVQQKEw5WZXJpU2lnbiwgSW5jLjEfMB0GA1UECxMWVmVy\naVNpZ24gVHJ1c3QgTmV0d29yazE6MDgGA1UECxMxKGMpIDE5OTkgVmVyaVNpZ24s\nIEluYy4gLSBGb3IgYXV0aG9yaXplZCB1c2Ugb25seTFFMEMGA1UEAxM8VmVyaVNp\nZ24gQ2xhc3MgMiBQdWJsaWMgUHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0\neSAtIEczMB4XDTk5MTAwMTAwMDAwMFoXDTM2MDcxNjIzNTk1OVowgcoxCzAJBgNV\nBAYTAlVTMRcwFQYDVQQKEw5WZXJpU2lnbiwgSW5jLjEfMB0GA1UECxMWVmVyaVNp\nZ24gVHJ1c3QgTmV0d29yazE6MDgGA1UECxMxKGMpIDE5OTkgVmVyaVNpZ24sIElu\nYy4gLSBGb3IgYXV0aG9yaXplZCB1c2Ugb25seTFFMEMGA1UEAxM8VmVyaVNpZ24g\nQ2xhc3MgMiBQdWJsaWMgUHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eSAt\nIEczMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArwoNwtUs22e5LeWU\nJ92lvuCwTY+zYVY81nzD9M0+hsuiiOLh2KRpxbXiv8GmR1BeRjmL1Za6tW8UvxDO\nJxOeBUebMXoT2B/Z0wI3i60sR/COgQanDTAM6/c8DyAd3HJG7qUCyFvDyVZpTMUY\nwZF7C9UTAJu878NIPkZgIIUq1ZC2zYugzDLdt/1AVbJQHFauzI13TccgTacxdu9o\nkoqQHgiBVrKtaaNS0MscxCM9H5n+TOgWY47GCI72MfbS+uV23bUckqNJzc0BzWjN\nqWm6o+sdDZykIKbBoMXRRkwXbdKsZj+WjOCE1Db/IlnF+RFgqF8EffIa9iVCYQ/E\nSrg+iQIDAQABMA0GCSqGSIb3DQEBBQUAA4IBAQA0JhU8wI1NQ0kdvekhktdmnLfe\nxbjQ5F1fdiLAJvmEOjr5jLX77GDx6M4EsMjdpwOPMPOY36TmpDHf0xwLRtxyID+u\n7gU8pDM/CzmscHhzS5kr3zDCVLCoO1Wh/hYozUK9dG6A2ydEp85EXdQbkJgNHkKU\nsQAsBNB0owIFImNjzYO1+8FtYmtpdf1dcEG59b98377BMnMiIYtYgXsVkXq642RI\nsH/7NiXaldDxJBQX3RiAa0YjOVT1jmIJBB2UkKab5iXiQkWquJCtvgiPqQtCGJTP\ncjnhsUPgKM+351psE2tJs//jGHyJizNdrDPXp/naOlXJWBD5qu9ats9LS98q\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIICPDCCAaUCEHC65B0Q2Sk0tjjKewPMur8wDQYJKoZIhvcNAQECBQAwXzELMAkG\nA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMTcwNQYDVQQLEy5DbGFz\ncyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0aG9yaXR5MB4XDTk2\nMDEyOTAwMDAwMFoXDTI4MDgwMTIzNTk1OVowXzELMAkGA1UEBhMCVVMxFzAVBgNV\nBAoTDlZlcmlTaWduLCBJbmMuMTcwNQYDVQQLEy5DbGFzcyAzIFB1YmxpYyBQcmlt\nYXJ5IENlcnRpZmljYXRpb24gQXV0aG9yaXR5MIGfMA0GCSqGSIb3DQEBAQUAA4GN\nADCBiQKBgQDJXFme8huKARS0EN8EQNvjV69qRUCPhAwL0TPZ2RHP7gJYHyX3KqhE\nBarsAx94f56TuZoAqiN91qyFomNFx3InzPRMxnVx0jnvT0Lwdd8KkMaOIG+YD/is\nI19wKTakyYbnsZogy1Olhec9vn2a/iRFM9x2Fe0PonFkTGUugWhFpwIDAQABMA0G\nCSqGSIb3DQEBAgUAA4GBALtMEivPLCYATxQT3ab7/AoRhIzzKBxnki98tsX63/Do\nlbwdj2wsqFHMc9ikwFPwTtYmwHYBV4GSXiHx0bH/59AhWM1pF+NEHJwZRDmJXNyc\nAA9WjQKZ7aKQRUzkuxCkPfAyAw7xzvjoyVGM5mKf5p/AfbdynMk2OmufTqj/ZA1k\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIEGjCCAwICEQCbfgZJoz5iudXukEhxKe9XMA0GCSqGSIb3DQEBBQUAMIHKMQsw\nCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZl\ncmlTaWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5IFZlcmlTaWdu\nLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlT\naWduIENsYXNzIDMgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3Jp\ndHkgLSBHMzAeFw05OTEwMDEwMDAwMDBaFw0zNjA3MTYyMzU5NTlaMIHKMQswCQYD\nVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlT\naWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5IFZlcmlTaWduLCBJ\nbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlTaWdu\nIENsYXNzIDMgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkg\nLSBHMzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMu6nFL8eB8aHm8b\nN3O9+MlrlBIwT/A2R/XQkQr1F8ilYcEWQE37imGQ5XYgwREGfassbqb1EUGO+i2t\nKmFZpGcmTNDovFJbcCAEWNF6yaRpvIMXZK0Fi7zQWM6NjPXr8EJJC52XJ2cybuGu\nkxUccLwgTS8Y3pKI6GyFVxEa6X7jJhFUokWWVYPKMIno3Nij7SqAP395ZVc+FSBm\nCC+Vk7+qRy+oRpfwEuL+wgorUeZ25rdGt+INpsyow0xZVYnm6FNcHOqd8GIWC6fJ\nXwzw3sJ2zq/3avL6QaaiMxTJ5Xpj055iN9WFZZ4O5lMkdBteHRJTW8cs54NJOxWu\nimi5V5cCAwEAATANBgkqhkiG9w0BAQUFAAOCAQEAERSWwauSCPc/L8my/uRan2Te\n2yFPhpk0djZX3dAVL8WtfxUfN2JzPtTnX84XA9s1+ivbrmAJXx5fj267Cz3qWhMe\nDGBvtcC1IyIuBwvLqXTLR7sdwdela8wv0kL9Sd2nic9TutoAWii/gt/4uhMdUIaC\n/Y4wjylGsB49Ndo4YhYYSq3mtlFs3q9i6wHQHiT+eo8SGhJouPtmmRQURVyu565p\nF4ErWjfJXir0xuKhXFSbplQAz/DxwceYMBo7Nhbbo27q/a2ywtrvAkcTisDxszGt\nTxzhT5yvDwyd93gN2PQ1VoDat20Xj50egWTh/sVFuq1ruQp6Tk9LhO5L8X3dEQ==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIDojCCAoqgAwIBAgIQE4Y1TR0/BvLB+WUF1ZAcYjANBgkqhkiG9w0BAQUFADBr\nMQswCQYDVQQGEwJVUzENMAsGA1UEChMEVklTQTEvMC0GA1UECxMmVmlzYSBJbnRl\ncm5hdGlvbmFsIFNlcnZpY2UgQXNzb2NpYXRpb24xHDAaBgNVBAMTE1Zpc2EgZUNv\nbW1lcmNlIFJvb3QwHhcNMDIwNjI2MDIxODM2WhcNMjIwNjI0MDAxNjEyWjBrMQsw\nCQYDVQQGEwJVUzENMAsGA1UEChMEVklTQTEvMC0GA1UECxMmVmlzYSBJbnRlcm5h\ndGlvbmFsIFNlcnZpY2UgQXNzb2NpYXRpb24xHDAaBgNVBAMTE1Zpc2EgZUNvbW1l\ncmNlIFJvb3QwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCvV95WHm6h\n2mCxlCfLF9sHP4CFT8icttD0b0/Pmdjh28JIXDqsOTPHH2qLJj0rNfVIsZHBAk4E\nlpF7sDPwsRROEW+1QK8bRaVK7362rPKgH1g/EkZgPI2h4H3PVz4zHvtH8aoVlwdV\nZqW1LS7YgFmypw23RuwhY/81q6UCzyr0TP579ZRdhE2o8mCP2w4lPJ9zcc+U30rq\n299yOIzzlr3xF7zSujtFWsan9sYXiwGd/BmoKoMWuDpI/k4+oKsGGelT84ATB+0t\nvz8KPFUgOSwsAGl0lUq8ILKpeeUYiZGo3BxN77t+Nwtd/jmliFKMAGzsGHxBvfaL\ndXe6YJ2E5/4tAgMBAAGjQjBAMA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQD\nAgEGMB0GA1UdDgQWBBQVOIMPPyw/cDMezUb+B4wg4NfDtzANBgkqhkiG9w0BAQUF\nAAOCAQEAX/FBfXxcCLkr4NWSR/pnXKUTwwMhmytMiUbPWU3J/qVAtmPN3XEolWcR\nzCSs00Rsca4BIGsDoo8Ytyk6feUWYFN4PMCvFYP3j1IzJL1kk5fui/fbGKhtcbP3\nLBfQdCVp9/5rPJS+TUtBjE7ic9DjkCJzQ83z7+pzzkWKsKZJ/0x9nXGIxHYdkFsd\n7v3M9+79YKWxehZx0RbQfBI8bGmX265fOZpwLwU8GUYEmSA20GBuYQa7FkKMcPcw\n++DbZqMAAb3mLNqRX6BGi01qnD093QVG/na/oAo85ADmJ7f/hC3euiInlhBx6yLt\n398znM/jra6O1I7mT1GvFpLgXPYHDw==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIEvTCCA6WgAwIBAgIBATANBgkqhkiG9w0BAQUFADCBhTELMAkGA1UEBhMCVVMx\nIDAeBgNVBAoMF1dlbGxzIEZhcmdvIFdlbGxzU2VjdXJlMRwwGgYDVQQLDBNXZWxs\ncyBGYXJnbyBCYW5rIE5BMTYwNAYDVQQDDC1XZWxsc1NlY3VyZSBQdWJsaWMgUm9v\ndCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkwHhcNMDcxMjEzMTcwNzU0WhcNMjIxMjE0\nMDAwNzU0WjCBhTELMAkGA1UEBhMCVVMxIDAeBgNVBAoMF1dlbGxzIEZhcmdvIFdl\nbGxzU2VjdXJlMRwwGgYDVQQLDBNXZWxscyBGYXJnbyBCYW5rIE5BMTYwNAYDVQQD\nDC1XZWxsc1NlY3VyZSBQdWJsaWMgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkw\nggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDub7S9eeKPCCGeOARBJe+r\nWxxTkqxtnt3CxC5FlAM1iGd0V+PfjLindo8796jE2yljDpFoNoqXjopxaAkH5OjU\nDk/41itMpBb570OYj7OeUt9tkTmPOL13i0Nj67eT/DBMHAGTthP796EfvyXhdDcs\nHqRePGj4S78NuR4uNuip5Kf4D8uCdXw1LSLWwr8L87T8bJVhHlfXBIEyg1J55oNj\nz7fLY4sR4r1e6/aN7ZVyKLSsEmLpSjPmgzKuBXWVvYSV2ypcm44uDLiBK0HmOFaf\nSZtsdvqKXfcBeYF8wYNABf5x/Qw/zE5gCQ5lRxAvAcAFP4/4s0HvWkJ+We/Slwxl\nAgMBAAGjggE0MIIBMDAPBgNVHRMBAf8EBTADAQH/MDkGA1UdHwQyMDAwLqAsoCqG\nKGh0dHA6Ly9jcmwucGtpLndlbGxzZmFyZ28uY29tL3dzcHJjYS5jcmwwDgYDVR0P\nAQH/BAQDAgHGMB0GA1UdDgQWBBQmlRkQ2eihl5H/3BnZtQQ+0nMKajCBsgYDVR0j\nBIGqMIGngBQmlRkQ2eihl5H/3BnZtQQ+0nMKaqGBi6SBiDCBhTELMAkGA1UEBhMC\nVVMxIDAeBgNVBAoMF1dlbGxzIEZhcmdvIFdlbGxzU2VjdXJlMRwwGgYDVQQLDBNX\nZWxscyBGYXJnbyBCYW5rIE5BMTYwNAYDVQQDDC1XZWxsc1NlY3VyZSBQdWJsaWMg\nUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHmCAQEwDQYJKoZIhvcNAQEFBQADggEB\nALkVsUSRzCPIK0134/iaeycNzXK7mQDKfGYZUMbVmO2rvwNa5U3lHshPcZeG1eMd\n/ZDJPHV3V3p9+N701NX3leZ0bh08rnyd2wIDBSxxSyU+B+NemvVmFymIGjifz6pB\nA4SXa5M4esowRBskRDPQ5NHcKDj0E0M1NSljqHyita04pO2t/caaH/+Xc/77szWn\nk4bGdpEA5qxRFsQnMlzbc9qlk1eOPm01JghZ1edE13YgY+esE2fDbbFwRnzVlhE9\niW9dqKHrjQrawx0zbKPqZxmamX9LPYNRKh3KL4YMon4QLSvUFpULB6ouFJJJtylv\n2G0xffX8oRAHh84vWdw+WNs=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIFdjCCA16gAwIBAgIQXmjWEXGUY1BWAGjzPsnFkTANBgkqhkiG9w0BAQUFADBV\nMQswCQYDVQQGEwJDTjEaMBgGA1UEChMRV29TaWduIENBIExpbWl0ZWQxKjAoBgNV\nBAMTIUNlcnRpZmljYXRpb24gQXV0aG9yaXR5IG9mIFdvU2lnbjAeFw0wOTA4MDgw\nMTAwMDFaFw0zOTA4MDgwMTAwMDFaMFUxCzAJBgNVBAYTAkNOMRowGAYDVQQKExFX\nb1NpZ24gQ0EgTGltaXRlZDEqMCgGA1UEAxMhQ2VydGlmaWNhdGlvbiBBdXRob3Jp\ndHkgb2YgV29TaWduMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAvcqN\nrLiRFVaXe2tcesLea9mhsMMQI/qnobLMMfo+2aYpbxY94Gv4uEBf2zmoAHqLoE1U\nfcIiePyOCbiohdfMlZdLdNiefvAA5A6JrkkoRBoQmTIPJYhTpA2zDxIIFgsDcScc\nf+Hb0v1naMQFXQoOXXDX2JegvFNBmpGN9J42Znp+VsGQX+axaCA2pIwkLCxHC1l2\nZjC1vt7tj/id07sBMOby8w7gLJKA84X5KIq0VC6a7fd2/BVoFutKbOsuEo/Uz/4M\nx1wdC34FMr5esAkqQtXJTpCzWQ27en7N1QhatH/YHGkR+ScPewavVIMYe+HdVHpR\naG53/Ma/UkpmRqGyZxq7o093oL5d//xWC0Nyd5DKnvnyOfUNqfTq1+ezEC8wQjch\nzDBwyYaYD8xYTYO7feUapTeNtqwylwA6Y3EkHp43xP901DfA4v6IRmAR3Qg/UDar\nuHqklWJqbrDKaiFaafPz+x1wOZXzp26mgYmhiMU7ccqjUu6Du/2gd/Tkb+dC221K\nmYo0SLwX3OSACCK28jHAPwQ+658geda4BmRkAjHXqc1S+4RFaQkAKtxVi8QGRkvA\nSh0JWzko/amrzgD5LkhLJuYwTKVYyrREgk/nkR4zw7CT/xH8gdLKH3Ep3XZPkiWv\nHYG3Dy+MwwbMLyejSuQOmbp8HkUff6oZRZb9/D0CAwEAAaNCMEAwDgYDVR0PAQH/\nBAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFOFmzw7R8bNLtwYgFP6H\nEtX2/vs+MA0GCSqGSIb3DQEBBQUAA4ICAQCoy3JAsnbBfnv8rWTjMnvMPLZdRtP1\nLOJwXcgu2AZ9mNELIaCJWSQBnfmvCX0KI4I01fx8cpm5o9dU9OpScA7F9dY74ToJ\nMuYhOZO9sxXqT2r09Ys/L3yNWC7F4TmgPsc9SnOeQHrAK2GpZ8nzJLmzbVUsWh2e\nJXLOC62qx1ViC777Y7NhRCOjy+EaDveaBk3e1CNOIZZbOVtXHS9dCF4Jef98l7VN\ng64N1uajeeAz0JmWAjCnPv/So0M/BVoG6kQC2nz4SNAzqfkHx5Xh9T71XXG68pWp\ndIhhWeO/yloTunK0jF02h+mmxTwTv97QRCbut+wucPrXnbes5cVAWubXbHssw1ab\nR80LzvobtCHXt2a49CUwi1wNuepnsvRtrtWhnk/Yn+knArAdBtaP4/tIEp9/EaEQ\nPkxROpaw0RPxx9gmrjrKkcRpnd8BKWRRb2jaFOwIQZeQjdCygPLPwj2/kWjFgGce\nxGATVdVhmVd8upUPYUk6ynW8yQqTP2cOEvIo4jEbwFcW3wh8GcF+Dx+FHgo2fFt+\nJ7x6v+Db9NpSvd4MVHAxkUOVyLzwPt0JfjBkUO1/AaQzZ01oT74V77D2AhGiGxMl\nOtzCWfHjXEa7ZywCRuoeSKbmW9m1vFGikpbbqsY3Iqb+zCB0oy2pLmvLwIIRIbWT\nee5Ehr7XHuQe+w==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIFWDCCA0CgAwIBAgIQUHBrzdgT/BtOOzNy0hFIjTANBgkqhkiG9w0BAQsFADBG\nMQswCQYDVQQGEwJDTjEaMBgGA1UEChMRV29TaWduIENBIExpbWl0ZWQxGzAZBgNV\nBAMMEkNBIOayg+mAmuagueivgeS5pjAeFw0wOTA4MDgwMTAwMDFaFw0zOTA4MDgw\nMTAwMDFaMEYxCzAJBgNVBAYTAkNOMRowGAYDVQQKExFXb1NpZ24gQ0EgTGltaXRl\nZDEbMBkGA1UEAwwSQ0Eg5rKD6YCa5qC56K+B5LmmMIICIjANBgkqhkiG9w0BAQEF\nAAOCAg8AMIICCgKCAgEA0EkhHiX8h8EqwqzbdoYGTufQdDTc7WU1/FDWiD+k8H/r\nD195L4mx/bxjWDeTmzj4t1up+thxx7S8gJeNbEvxUNUqKaqoGXqW5pWOdO2XCld1\n9AXbbQs5uQF/qvbW2mzmBeCkTVL829B0txGMe41P/4eDrv8FAxNXUDf+jJZSEExf\nv5RxadmWPgxDT74wwJ85dE8GRV2j1lY5aAfMh09Qd5Nx2UQIsYo06Yms25tO4dnk\nUkWMLhQfkWsZHWgpLFbE4h4TV2TwYeO5Ed+w4VegG63XX9Gv2ystP9Bojg/qnw+L\nNVgbExz03jWhCl3W6t8Sb8D7aQdGctyB9gQjF+BNdeFyb7Ao65vh4YOhn0pdr8yb\n+gIgthhid5E7o9Vlrdx8kHccREGkSovrlXLp9glk3Kgtn3R46MGiCWOc76DbT52V\nqyBPt7D3h1ymoOQ3OMdc4zUPLK2jgKLsLl3Az+2LBcLmc272idX10kaO6m1jGx6K\nyX2m+Jzr5dVjhU1zZmkR/sgO9MHHZklTfuQZa/HpelmjbX7FF+Ynxu8b22/8DU0G\nAbQOXDBGVWCvOGU6yke6rCzMRh+yRpY/8+0mBe53oWprfi1tWFxK1I5nuPHa1UaK\nJ/kR8slC/k7e3x9cxKSGhxYzoacXGKUN5AXlK8IrC6KVkLn9YDxOiT7nnO4fuwEC\nAwEAAaNCMEAwDgYDVR0PAQH/BAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0O\nBBYEFOBNv9ybQV0T6GTwp+kVpOGBwboxMA0GCSqGSIb3DQEBCwUAA4ICAQBqinA4\nWbbaixjIvirTthnVZil6Xc1bL3McJk6jfW+rtylNpumlEYOnOXOvEESS5iVdT2H6\nyAa+Tkvv/vMx/sZ8cApBWNromUuWyXi8mHwCKe0JgOYKOoICKuLJL8hWGSbueBwj\n/feTZU7n85iYr83d2Z5AiDEoOqsuC7CsDCT6eiaY8xJhEPRdF/d+4niXVOKM6Cm6\njBAyvd0zaziGfjk9DgNyp115j0WKWa5bIW4xRtVZjc8VX90xJc/bYNaBRHIpAlf2\nltTW/+op2znFuCyKGo3Oy+dCMYYFaA6eFN0AkLppRQjbbpCBhqcqBT/mhDn4t/lX\nX0ykeVoQDF7Va/81XwVRHmyjdanPUIPTfPRm94KNPQx96N97qA4bLJyuQHCH2u2n\nFoJavjVsIE4iYdm8UXrNemHcSxH5/mc0zy4EZmFcV5cjjPOGG0jfKq+nwf/Yjj4D\nu9gqsPoUJbJRa4ZDhS4HIxaAjUz7tGM7zMN07RujHv41D198HRaG9Q7DlfEvr10l\nO1Hm13ZBONFLAzkopR6RctR9q5czxNM+4Gm2KHmgCY0c0f9BckgG/Jou5yD5m6Le\nie2uPAmvylezkolwQOQvT8Jwg0DXJCxr5wkf09XHwQj02w47HAcLQxGEIYbpgNR1\n2KvxAmLBsX5VYc8T1yaw15zLKYs4SgsOkI26oQ==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIEMDCCAxigAwIBAgIQUJRs7Bjq1ZxN1ZfvdY+grTANBgkqhkiG9w0BAQUFADCB\ngjELMAkGA1UEBhMCVVMxHjAcBgNVBAsTFXd3dy54cmFtcHNlY3VyaXR5LmNvbTEk\nMCIGA1UEChMbWFJhbXAgU2VjdXJpdHkgU2VydmljZXMgSW5jMS0wKwYDVQQDEyRY\nUmFtcCBHbG9iYWwgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMDQxMTAxMTcx\nNDA0WhcNMzUwMTAxMDUzNzE5WjCBgjELMAkGA1UEBhMCVVMxHjAcBgNVBAsTFXd3\ndy54cmFtcHNlY3VyaXR5LmNvbTEkMCIGA1UEChMbWFJhbXAgU2VjdXJpdHkgU2Vy\ndmljZXMgSW5jMS0wKwYDVQQDEyRYUmFtcCBHbG9iYWwgQ2VydGlmaWNhdGlvbiBB\ndXRob3JpdHkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCYJB69FbS6\n38eMpSe2OAtp87ZOqCwuIR1cRN8hXX4jdP5efrRKt6atH67gBhbim1vZZ3RrXYCP\nKZ2GG9mcDZhtdhAoWORlsH9KmHmf4MMxfoArtYzAQDsRhtDLooY2YKTVMIJt2W7Q\nDxIEM5dfT2Fa8OT5kavnHTu86M/0ay00fOJIYRyO82FEzG+gSqmUsE3a56k0enI4\nqEHMPJQRfevIpoy3hsvKMzvZPTeL+3o+hiznc9cKV6xkmxnr9A8ECIqsAxcZZPRa\nJSKNNCyy9mgdEm3Tih4U2sSPpuIjhdV6Db1q4Ons7Be7QhtnqiXtRYMh/MHJfNVi\nPvryxS3T/dRlAgMBAAGjgZ8wgZwwEwYJKwYBBAGCNxQCBAYeBABDAEEwCwYDVR0P\nBAQDAgGGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFMZPoj0GY4QJnM5i5ASs\njVy16bYbMDYGA1UdHwQvMC0wK6ApoCeGJWh0dHA6Ly9jcmwueHJhbXBzZWN1cml0\neS5jb20vWEdDQS5jcmwwEAYJKwYBBAGCNxUBBAMCAQEwDQYJKoZIhvcNAQEFBQAD\nggEBAJEVOQMBG2f7Shz5CmBbodpNl2L5JFMn14JkTpAuw0kbK5rc/Kh4ZzXxHfAR\nvbdI4xD2Dd8/0sm2qlWkSLoC295ZLhVbO50WfUfXN+pfTXYSNrsf16GBBEYgoyxt\nqZ4Bfj8pzgCT3/3JknOJiWSe5yvkHJEs0rnOfc5vMZnT5r7SHpDwCRR5XCOrTdLa\nIR9NmXmd4c8nnxCbHIgNsIpkQTG4DmyQJKSbXHGPurt+HBvbaoAPIbzp26a3QPSy\ni6mx5O+aGtA9aZnuqCij4Tyz8LIRnM98QObd50N9otg6tamN8jSZxNQQ4Qb9CYQQ\nO+7ETPTsJ3xCwnR8gooJybQDJbw=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIDODCCAiCgAwIBAgIGIAYFFnACMA0GCSqGSIb3DQEBBQUAMDsxCzAJBgNVBAYT\nAlJPMREwDwYDVQQKEwhjZXJ0U0lHTjEZMBcGA1UECxMQY2VydFNJR04gUk9PVCBD\nQTAeFw0wNjA3MDQxNzIwMDRaFw0zMTA3MDQxNzIwMDRaMDsxCzAJBgNVBAYTAlJP\nMREwDwYDVQQKEwhjZXJ0U0lHTjEZMBcGA1UECxMQY2VydFNJR04gUk9PVCBDQTCC\nASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALczuX7IJUqOtdu0KBuqV5Do\n0SLTZLrTk+jUrIZhQGpgV2hUhE28alQCBf/fm5oqrl0Hj0rDKH/v+yv6efHHrfAQ\nUySQi2bJqIirr1qjAOm+ukbuW3N7LBeCgV5iLKECZbO9xSsAfsT8AzNXDe3i+s5d\nRdY4zTW2ssHQnIFKquSyAVwdj1+ZxLGt24gh65AIgoDzMKND5pCCrlUoSe1b16kQ\nOA7+j0xbm0bqQfWwCHTD0IgztnzXdN/chNFDDnU5oSVAKOp4yw4sLjmdjItuFhwv\nJoIQ4uNllAoEwF73XVv4EOLQunpL+943AAAaWyjj0pxzPjKHmKHJUS/X3qwzs08C\nAwEAAaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAcYwHQYDVR0O\nBBYEFOCMm9slSbPxfIbWskKHC9BroNnkMA0GCSqGSIb3DQEBBQUAA4IBAQA+0hyJ\nLjX8+HXd5n9liPRyTMks1zJO890ZeUe9jjtbkw9QSSQTaxQGcu8J06Gh40CEyecY\nMnQ8SG4Pn0vU9x7Tk4ZkVJdjclDVVc/6IJMCopvDI5NOFlV2oHB5bc0hH88vLbwZ\n44gx+FkagQnIl6Z0x2DEW8xXjrJ1/RsCCdtZb3KTafcxQdaIOL+Hsr0Wefmq5L6I\nJd1hJyMctTEHBDa0GpC9oHRxUIltvBTjD4au8as+x6AJzKNI0eDbZOeStc+vckNw\ni/nDhDwTqn6Sm1dTk/pwwpEOMfmbZ13pljheX7NzTogVZ96edhBiIL5VaZVDADlN\n9u6wWk5JRFRYX0KD\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIFsDCCA5igAwIBAgIQFci9ZUdcr7iXAF7kBtK8nTANBgkqhkiG9w0BAQUFADBe\nMQswCQYDVQQGEwJUVzEjMCEGA1UECgwaQ2h1bmdod2EgVGVsZWNvbSBDby4sIEx0\nZC4xKjAoBgNVBAsMIWVQS0kgUm9vdCBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTAe\nFw0wNDEyMjAwMjMxMjdaFw0zNDEyMjAwMjMxMjdaMF4xCzAJBgNVBAYTAlRXMSMw\nIQYDVQQKDBpDaHVuZ2h3YSBUZWxlY29tIENvLiwgTHRkLjEqMCgGA1UECwwhZVBL\nSSBSb290IENlcnRpZmljYXRpb24gQXV0aG9yaXR5MIICIjANBgkqhkiG9w0BAQEF\nAAOCAg8AMIICCgKCAgEA4SUP7o3biDN1Z82tH306Tm2d0y8U82N0ywEhajfqhFAH\nSyZbCUNsIZ5qyNUD9WBpj8zwIuQf5/dqIjG3LBXy4P4AakP/h2XGtRrBp0xtInAh\nijHyl3SJCRImHJ7K2RKilTza6We/CKBk49ZCt0Xvl/T29de1ShUCWH2YWEtgvM3X\nDZoTM1PRYfl61dd4s5oz9wCGzh1NlDivqOx4UXCKXBCDUSH3ET00hl7lSM2XgYI1\nTBnsZfZrxQWh7kcT1rMhJ5QQCtkkO7q+RBNGMD+XPNjX12ruOzjjK9SXDrkb5wdJ\nfzcq+Xd4z1TtW0ado4AOkUPB1ltfFLqfpo0kR0BZv3I4sjZsN/+Z0V0OWQqraffA\nsgRFelQArr5T9rXn4fg8ozHSqf4hUmTFpmfwdQcGlBSBVcYn5AGPF8Fqcde+S/uU\nWH1+ETOxQvdibBjWzwloPn9s9h6PYq2lY9sJpx8iQkEeb5mKPtf5P0B6ebClAZLS\nnT0IFaUQAS2zMnaolQ2zepr7BxB4EW/hj8e6DyUadCrlHJhBmd8hh+iVBmoKs2pH\ndmX2Os+PYhcZewoozRrSgx4hxyy/vv9haLdnG7t4TY3OZ+XkwY63I2binZB1NJip\nNiuKmpS5nezMirH4JYlcWrYvjB9teSSnUmjDhDXiZo1jDiVN1Rmy5nk3pyKdVDEC\nAwEAAaNqMGgwHQYDVR0OBBYEFB4M97Zn8uGSJglFwFU5Lnc/QkqiMAwGA1UdEwQF\nMAMBAf8wOQYEZyoHAAQxMC8wLQIBADAJBgUrDgMCGgUAMAcGBWcqAwAABBRFsMLH\nClZ87lt4DJX5GFPBphzYEDANBgkqhkiG9w0BAQUFAAOCAgEACbODU1kBPpVJufGB\nuvl2ICO1J2B01GqZNF5sAFPZn/KmsSQHRGoqxqWOeBLoR9lYGxMqXnmbnwoqZ6Yl\nPwZpVnPDimZI+ymBV3QGypzqKOg4ZyYr8dW1P2WT+DZdjo2NQCCHGervJ8A9tDkP\nJXtoUHRVnAxZfVo9QZQlUgjgRywVMRnVvwdVxrsStZf0X4OFunHB2WyBEXYKCrC/\ngpf36j36+uwtqSiUO1bd0lEursC9CBWMd1I0ltabrNMdjmEPNXubrjlpC2JgQCA2\nj6/7Nu4tCEoduL+bXPjqpRugc6bY+G7gMwRfaKonh+3ZwZCc7b3jajWvY9+rGNm6\n5ulK6lCKD2GTHuItGeIwlDWSXQ62B68ZgI9HkFFLLk3dheLSClIKF5r8GrBQAuUB\no2M3IUxExJtRmREOc5wGj1QupyheRDmHVi03vYVElOEMSyycw5KFNGHLD7ibSkNS\n/jQ6fbjpKdx2qcgw+BRxgMYeNkh0IkFch4LoGHGLQYlE535YW6i4jRPpp2zDR+2z\nGp1iro2C6pSe3VkQw63d4k3jMdXH7OjysP6SHhYKGvzZ8/gntsm+HbRsZJB/9OTE\nW9c3rkIO3aQab3yIVMUWbuF6aC74Or8NpDyJO3inTmODBCEIZ43ygknQW/2xzQ+D\nhNQ+IIX3Sj0rnP0qCglN6oH4EZw=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIEIDCCAwigAwIBAgIQNE7VVyDV7exJ9C/ON9srbTANBgkqhkiG9w0BAQUFADCB\nqTELMAkGA1UEBhMCVVMxFTATBgNVBAoTDHRoYXd0ZSwgSW5jLjEoMCYGA1UECxMf\nQ2VydGlmaWNhdGlvbiBTZXJ2aWNlcyBEaXZpc2lvbjE4MDYGA1UECxMvKGMpIDIw\nMDYgdGhhd3RlLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxHzAdBgNV\nBAMTFnRoYXd0ZSBQcmltYXJ5IFJvb3QgQ0EwHhcNMDYxMTE3MDAwMDAwWhcNMzYw\nNzE2MjM1OTU5WjCBqTELMAkGA1UEBhMCVVMxFTATBgNVBAoTDHRoYXd0ZSwgSW5j\nLjEoMCYGA1UECxMfQ2VydGlmaWNhdGlvbiBTZXJ2aWNlcyBEaXZpc2lvbjE4MDYG\nA1UECxMvKGMpIDIwMDYgdGhhd3RlLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNl\nIG9ubHkxHzAdBgNVBAMTFnRoYXd0ZSBQcmltYXJ5IFJvb3QgQ0EwggEiMA0GCSqG\nSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCsoPD7gFnUnMekz52hWXMJEEUMDSxuaPFs\nW0hoSVk3/AszGcJ3f8wQLZU0HObrTQmnHNK4yZc2AreJ1CRfBsDMRJSUjQJib+ta\n3RGNKJpchJAQeg29dGYvajig4tVUROsdB58Hum/u6f1OCyn1PoSgAfGcq/gcfomk\n6KHYcWUNo1F77rzSImANuVud37r8UVsLr5iy6S7pBOhih94ryNdOwUxkHt3Ph1i6\nSk/KaAcdHJ1KxtUvkcx8cXIcxcBn6zL9yZJclNqFwJu/U30rCfSMnZEfl2pSy94J\nNqR32HuHUETVPm4pafs5SSYeCaWAe0At6+gnhcn+Yf1+5nyXHdWdAgMBAAGjQjBA\nMA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgEGMB0GA1UdDgQWBBR7W0XP\nr87Lev0xkhpqtvNG61dIUDANBgkqhkiG9w0BAQUFAAOCAQEAeRHAS7ORtvzw6WfU\nDW5FvlXok9LOAz/t2iWwHVfLHjp2oEzsUHboZHIMpKnxuIvW1oeEuzLlQRHAd9mz\nYJ3rG9XRbkREqaYB7FViHXe4XI5ISXycO1cRrK1zN44veFyQaEfZYGDm/Ac9IiAX\nxPcW6cTYcvnIc3zfFi8VqT79aie2oetaupgf1eNNZAqdE8hhuvU5HIe6uL17In/2\n/qxAeeWsEG89jxt5dovEN7MhGITlNgDrYyCZuen+MwS7QcjBAvlEYyCegc5C09Y/\nLHbTY5xZ3Y+m4Q6gLkH3LpVHz7z9M/P2C2F+fpErgUfCJzDupxBdN49cOSvkBPB7\njVaMaA==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIICiDCCAg2gAwIBAgIQNfwmXNmET8k9Jj1Xm67XVjAKBggqhkjOPQQDAzCBhDEL\nMAkGA1UEBhMCVVMxFTATBgNVBAoTDHRoYXd0ZSwgSW5jLjE4MDYGA1UECxMvKGMp\nIDIwMDcgdGhhd3RlLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxJDAi\nBgNVBAMTG3RoYXd0ZSBQcmltYXJ5IFJvb3QgQ0EgLSBHMjAeFw0wNzExMDUwMDAw\nMDBaFw0zODAxMTgyMzU5NTlaMIGEMQswCQYDVQQGEwJVUzEVMBMGA1UEChMMdGhh\nd3RlLCBJbmMuMTgwNgYDVQQLEy8oYykgMjAwNyB0aGF3dGUsIEluYy4gLSBGb3Ig\nYXV0aG9yaXplZCB1c2Ugb25seTEkMCIGA1UEAxMbdGhhd3RlIFByaW1hcnkgUm9v\ndCBDQSAtIEcyMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEotWcgnuVnfFSeIf+iha/\nBebfowJPDQfGAFG6DAJSLSKkQjnE/o/qycG+1E3/n3qe4rF8mq2nhglzh9HnmuN6\npapu+7qzcMBniKI11KOasf2twu8x+qi58/sIxpHR+ymVo0IwQDAPBgNVHRMBAf8E\nBTADAQH/MA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4EFgQUmtgAMADna3+FGO6Lts6K\nDPgR4bswCgYIKoZIzj0EAwMDaQAwZgIxAN344FdHW6fmCsO99YCKlzUNG4k8VIZ3\nKMqh9HneteY4sPBlcIx/AlTCv//YoT7ZzwIxAMSNlPzcU9LcnXgWHxUzI1NS41ox\nXZ3Krr0TKUQNJ1uo52icEvdYPy5yAlejj6EULg==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIEKjCCAxKgAwIBAgIQYAGXt0an6rS0mtZLL/eQ+zANBgkqhkiG9w0BAQsFADCB\nrjELMAkGA1UEBhMCVVMxFTATBgNVBAoTDHRoYXd0ZSwgSW5jLjEoMCYGA1UECxMf\nQ2VydGlmaWNhdGlvbiBTZXJ2aWNlcyBEaXZpc2lvbjE4MDYGA1UECxMvKGMpIDIw\nMDggdGhhd3RlLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxJDAiBgNV\nBAMTG3RoYXd0ZSBQcmltYXJ5IFJvb3QgQ0EgLSBHMzAeFw0wODA0MDIwMDAwMDBa\nFw0zNzEyMDEyMzU5NTlaMIGuMQswCQYDVQQGEwJVUzEVMBMGA1UEChMMdGhhd3Rl\nLCBJbmMuMSgwJgYDVQQLEx9DZXJ0aWZpY2F0aW9uIFNlcnZpY2VzIERpdmlzaW9u\nMTgwNgYDVQQLEy8oYykgMjAwOCB0aGF3dGUsIEluYy4gLSBGb3IgYXV0aG9yaXpl\nZCB1c2Ugb25seTEkMCIGA1UEAxMbdGhhd3RlIFByaW1hcnkgUm9vdCBDQSAtIEcz\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAsr8nLPvb2FvdeHsbnndm\ngcs+vHyu86YnmjSjaDFxODNi5PNxZnmxqWWjpYvVj2AtP0LMqmsywCPLLEHd5N/8\nYZzic7IilRFDGF/Eth9XbAoFWCLINkw6fKXRz4aviKdEAhN0cXMKQlkC+BsUa0Lf\nb1+6a4KinVvnSr0eAXLbS3ToO39/fR8EtCab4LRarEc9VbjXsCZSKAExQGbY2SS9\n9irY7CFJXJv2eul/VTV+lmuNk5Mny5K76qxAwJ/C+IDPXfRa3M50hqY+bAtTyr2S\nzhkGcuYMXDhpxwTWvGzOW/b3aJzcJRVIiKHpqfiYnODz1TEoYRFsZ5aNOZnLwkUk\nOQIDAQABo0IwQDAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIBBjAdBgNV\nHQ4EFgQUrWyqlGCc7eT/+j4KdCtjA/e2Wb8wDQYJKoZIhvcNAQELBQADggEBABpA\n2JVlrAmSicY59BDlqQ5mU1143vokkbvnRFHfxhY0Cu9qRFHqKweKA3rD6z8KLFIW\noCtDuSWQP3CpMyVtRRooOyfPqsMpQhvfO0zAMzRbQYi/aytlryjvsvXDqmbOe1bu\nt8jLZ8HJnBoYuMTDSQPxYA5QzUbF83d597YV4Djbxy8ooAw/dyZ02SUS2jHaGh7c\nKUGRIjxpp7sC8rZcJwOJ9Abqm+RyguOhCcHpABnTPtRwa7pxpqpYrvS76Wy274fM\nm7v/OeZWYdMKp8RcTGB7BXcmer/YB1IsYvdwY9k5vG8cwnncdimvzsUsZAReiDZu\nMdRAGmI0Nj81Aa6sY6A=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIIDjCCBfagAwIBAgIJAOiOtsn4KhQoMA0GCSqGSIb3DQEBBQUAMIG8MQswCQYD\nVQQGEwJVUzEQMA4GA1UECBMHSW5kaWFuYTEVMBMGA1UEBxMMSW5kaWFuYXBvbGlz\nMSgwJgYDVQQKEx9Tb2Z0d2FyZSBpbiB0aGUgUHVibGljIEludGVyZXN0MRMwEQYD\nVQQLEwpob3N0bWFzdGVyMR4wHAYDVQQDExVDZXJ0aWZpY2F0ZSBBdXRob3JpdHkx\nJTAjBgkqhkiG9w0BCQEWFmhvc3RtYXN0ZXJAc3BpLWluYy5vcmcwHhcNMDgwNTEz\nMDgwNzU2WhcNMTgwNTExMDgwNzU2WjCBvDELMAkGA1UEBhMCVVMxEDAOBgNVBAgT\nB0luZGlhbmExFTATBgNVBAcTDEluZGlhbmFwb2xpczEoMCYGA1UEChMfU29mdHdh\ncmUgaW4gdGhlIFB1YmxpYyBJbnRlcmVzdDETMBEGA1UECxMKaG9zdG1hc3RlcjEe\nMBwGA1UEAxMVQ2VydGlmaWNhdGUgQXV0aG9yaXR5MSUwIwYJKoZIhvcNAQkBFhZo\nb3N0bWFzdGVyQHNwaS1pbmMub3JnMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIIC\nCgKCAgEA3DbmR0LCxFF1KYdAw9iOIQbSGE7r7yC9kDyFEBOMKVuUY/b0LfEGQpG5\nGcRCaQi/izZF6igFM0lIoCdDkzWKQdh4s/Dvs24t3dHLfer0dSbTPpA67tfnLAS1\nfOH1fMVO73e9XKKTM5LOfYFIz2u1IiwIg/3T1c87Lf21SZBb9q1NE8re06adU1Fx\nY0b4ShZcmO4tbZoWoXaQ4mBDmdaJ1mwuepiyCwMs43pPx93jzONKao15Uvr0wa8u\njyoIyxspgpJyQ7zOiKmqp4pRQ1WFmjcDeJPI8L20QcgHQprLNZd6ioFl3h1UCAHx\nZFy3FxpRvB7DWYd2GBaY7r/2Z4GLBjXFS21ZGcfSxki+bhQog0oQnBv1b7ypjvVp\n/rLBVcznFMn5WxRTUQfqzj3kTygfPGEJ1zPSbqdu1McTCW9rXRTunYkbpWry9vjQ\nco7qch8vNGopCsUK7BxAhRL3pqXTT63AhYxMfHMgzFMY8bJYTAH1v+pk1Vw5xc5s\nzFNaVrpBDyXfa1C2x4qgvQLCxTtVpbJkIoRRKFauMe5e+wsWTUYFkYBE7axt8Feo\n+uthSKDLG7Mfjs3FIXcDhB78rKNDCGOM7fkn77SwXWfWT+3Qiz5dW8mRvZYChD3F\nTbxCP3T9PF2sXEg2XocxLxhsxGjuoYvJWdAY4wCAs1QnLpnwFVMCAwEAAaOCAg8w\nggILMB0GA1UdDgQWBBQ0cdE41xU2g0dr1zdkQjuOjVKdqzCB8QYDVR0jBIHpMIHm\ngBQ0cdE41xU2g0dr1zdkQjuOjVKdq6GBwqSBvzCBvDELMAkGA1UEBhMCVVMxEDAO\nBgNVBAgTB0luZGlhbmExFTATBgNVBAcTDEluZGlhbmFwb2xpczEoMCYGA1UEChMf\nU29mdHdhcmUgaW4gdGhlIFB1YmxpYyBJbnRlcmVzdDETMBEGA1UECxMKaG9zdG1h\nc3RlcjEeMBwGA1UEAxMVQ2VydGlmaWNhdGUgQXV0aG9yaXR5MSUwIwYJKoZIhvcN\nAQkBFhZob3N0bWFzdGVyQHNwaS1pbmMub3JnggkA6I62yfgqFCgwDwYDVR0TAQH/\nBAUwAwEB/zARBglghkgBhvhCAQEEBAMCAAcwCQYDVR0SBAIwADAuBglghkgBhvhC\nAQ0EIRYfU29mdHdhcmUgaW4gdGhlIFB1YmxpYyBJbnRlcmVzdDAwBglghkgBhvhC\nAQQEIxYhaHR0cHM6Ly9jYS5zcGktaW5jLm9yZy9jYS1jcmwucGVtMDIGCWCGSAGG\n+EIBAwQlFiNodHRwczovL2NhLnNwaS1pbmMub3JnL2NlcnQtY3JsLnBlbTAhBgNV\nHREEGjAYgRZob3N0bWFzdGVyQHNwaS1pbmMub3JnMA4GA1UdDwEB/wQEAwIBBjAN\nBgkqhkiG9w0BAQUFAAOCAgEAtM294LnqsgMrfjLp3nI/yUuCXp3ir1UJogxU6M8Y\nPCggHam7AwIvUjki+RfPrWeQswN/2BXja367m1YBrzXU2rnHZxeb1NUON7MgQS4M\nAcRb+WU+wmHo0vBqlXDDxm/VNaSsWXLhid+hoJ0kvSl56WEq2dMeyUakCHhBknIP\nqxR17QnwovBc78MKYiC3wihmrkwvLo9FYyaW8O4x5otVm6o6+YI5HYg84gd1GuEP\nsTC8cTLSOv76oYnzQyzWcsR5pxVIBcDYLXIC48s9Fmq6ybgREOJJhcyWR2AFJS7v\ndVkz9UcZFu/abF8HyKZQth3LZjQl/GaD68W2MEH4RkRiqMEMVObqTFoo5q7Gt/5/\nO5aoLu7HaD7dAD0prypjq1/uSSotxdz70cbT0ZdWUoa2lOvUYFG3/B6bzAKb1B+P\n+UqPti4oOxfMxaYF49LTtcYDyeFIQpvLP+QX4P4NAZUJurgNceQJcHdC2E3hQqlg\ng9cXiUPS1N2nGLar1CQlh7XU4vwuImm9rWgs/3K1mKoGnOcqarihk3bOsPN/nOHg\nT7jYhkalMwIsJWE3KpLIrIF0aGOHM3a9BX9e1dUCbb2v/ypaqknsmHlHU5H2DjRa\nyaXG67Ljxay2oHA1u8hRadDytaIybrw/oDc5fHE2pgXfDBLkFqfF1stjo5VwP+YE\no2A=\n-----END CERTIFICATE-----\n";

        /***/
      }
      /******/
    ]
  );
});
